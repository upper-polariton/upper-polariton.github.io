;#
;# $Id: x86_sse2.s,v 1.3 2002/04/01 21:05:59 lindahl Exp $
;# 
;#                This source code is part of
;# 
;#                 G   R   O   M   A   C   S
;# 
;#          GROningen MAchine for Chemical Simulations
;# 
;#                        VERSION 3.1
;# Copyright (c) 1991-2001, University of Groningen, The Netherlands
;# This program is free software; you can redistribute it and/or
;# modify it under the terms of the GNU General Public License
;# as published by the Free Software Foundation; either version 2
;# of the License, or (at your option) any later version.
;# 
;# If you want to redistribute modifications, please consider that
;# scientific software is very special. Version control is crucial -
;# bugs must be traceable. We will be happy to consider code for
;# inclusion in the official distribution, but derived work must not
;# be called official GROMACS. Details are found in the README & COPYING
;# files - if they are missing, get the official version at www.gromacs.org.
;# 
;# To help us fund GROMACS development, we humbly ask that you cite
;# the papers on the package - you can find them in the top README file.
;# 
;# For more info, check our website at http://www.gromacs.org
;# 
;# And Hey:
;# Gnomes, ROck Monsters And Chili Sauce
 
;#
;# These files require GNU binutils 2.10 or later, since we
;# use intel syntax for portability, or a recent version 
;# of NASM that understands Extended 3DNow and SSE2 instructions.
;# (NASM is normally only used with MS Visual C++).

;# Since NASM and gnu as disagree on some definitions and use 
;# completely different preprocessing options I have to introduce a
;# trick: NASM uses ';' for comments, while gnu as uses '#' on x86.
;# Gnu as treats ';' as a line break, i.e. ignores it. This is the
;# reason why all comments need both symbols...
;# The source is written for GNU as, with intel syntax. When you use
;# NASM we redefine a couple of things. The false if-statement around 
;# the following code is seen by GNU as (NASM doesn't understant this
;# if syntax), but NASM doesn't see it, so the code inside is only 
;# read by NASM (NASM doesn't understand .if):

; .if 0    # block below only read by NASM
%define .section	section
%define .long		dd
%define .align		align
%define .globl		global
;# NASM only wants 'dword', not 'dword ptr'.
%define ptr
%macro .equiv 2
   %1 equ %2
%endmacro
; .endif  # End of NASM-specific block

; .intel_syntax noprefix   # Line only read by gnu as

;# NB: We prefix all local variables with underscore, to avoid stupid
;# bugs. Otherwise, dx will e.g. be interpreted as a register,
;# without any further warning!
 

.section .text
.align 16

sse2_minushalf:	
        .long 0x00000000
	.long 0xbfe00000	
	.long 0000000000
	.long 0xbfe00000	
sse2_half:	
        .long 0x00000000
	.long 0x3fe00000
	.long 0x00000000
	.long 0x3fe00000
sse2_two:	
        .long 0x00000000
	.long 0x40000000
	.long 0x00000000
	.long 0x40000000
sse2_three:	
        .long 0x00000000
	.long 0x40080000
	.long 0x00000000
	.long 0x40080000
sse2_six:
        .long 0x00000000
	.long 0x40180000
	.long 0x00000000
	.long 0x40180000
sse2_twelve:	
        .long 0x00000000
	.long 0x40280000
	.long 0x00000000
	.long 0x40280000


.globl checksse2	 ;# try to issue a SSE2 instruction 
.globl _checksse2
checksse2:
_checksse2:
	emms
	xorpd xmm0,xmm0
	emms
	ret

.align 16
	
.globl vecinvsqrt_sse2
.globl _vecinvsqrt_sse2
vecinvsqrt_sse2:	
_vecinvsqrt_sse2:	
	push ebp
	mov ebp,esp	
	push eax
	push ebx
	push ecx
	push edx

	mov eax, [ebp + 8]
	mov ebx, [ebp + 12]	
	mov ecx, [ebp + 16]
    mov edx, ecx
	movupd xmm6,[sse2_three]
	movupd xmm7,[sse2_minushalf]
    shr ecx, 2
	jnz .vecinvsqrt_loop4
	jmp .vecinvsqrt_iter2
    emms	
.vecinvsqrt_loop4:	
	movapd xmm0,[eax]	
	add eax,  16
	cvtpd2ps xmm4, xmm0
	movapd xmm2,[eax]
	add eax,  16
	cvtpd2ps xmm5, xmm2
	rsqrtps xmm1, xmm4	
	rsqrtps xmm3, xmm5
	movapd  xmm4, xmm0	
	movapd  xmm5, xmm2	
	cvtps2pd xmm1, xmm1	
	cvtps2pd xmm3, xmm3	
	mulpd xmm0,xmm1		
    mulpd xmm2,xmm3		
	mulpd xmm0,xmm1		
    mulpd xmm2,xmm3		
	subpd xmm0,xmm6		
	subpd xmm2,xmm6		
	mulpd xmm0,xmm1		
	mulpd xmm2,xmm3
	mulpd xmm0,xmm7		
	mulpd xmm2,xmm7		
	mulpd xmm4,xmm0		
    mulpd xmm5,xmm2		
	mulpd xmm4,xmm0		
    mulpd xmm5,xmm2		
	subpd xmm4,xmm6		
	subpd xmm5,xmm6		
	mulpd xmm4,xmm0		
	mulpd xmm5,xmm2
	mulpd xmm4,xmm7		
	mulpd xmm5,xmm7		
	movapd [ebx],xmm4
	add ebx,  16
	movapd [ebx],xmm5
	add ebx,  16
        dec ecx
    jecxz .vecinvsqrt_iter2
    jmp .vecinvsqrt_loop4
.vecinvsqrt_iter2:
    mov ecx,edx
    and ecx, 2
    jecxz .vecinvsqrt_iter1
	movapd xmm0,[eax]
	add eax,  16
	cvtpd2ps xmm4, xmm0
	rsqrtps xmm1, xmm4
	movapd xmm4, xmm0
	cvtps2pd xmm1, xmm1	
	mulpd xmm0,xmm1
	mulpd xmm0,xmm1		
	subpd xmm0,xmm6		
	mulpd xmm0,xmm1		
	mulpd xmm0,xmm7		
	mulpd xmm4,xmm0		
	mulpd xmm4,xmm0		
	subpd xmm4,xmm6		
	mulpd xmm4,xmm0		
	mulpd xmm4,xmm7			
	movapd [ebx],xmm4
	add ebx,  16        
.vecinvsqrt_iter1:
    mov ecx,edx
    and ecx, 1
    jecxz .vecinvsqrt_end
	movsd xmm0,[eax]
	add eax,  8
	cvtsd2ss xmm4, xmm0
	rsqrtss xmm1, xmm4	
	movsd xmm4, xmm0
	cvtss2sd xmm1, xmm1	
	mulsd xmm0,xmm1
	mulsd xmm0,xmm1		
	subsd xmm0,xmm6		
	mulsd xmm0,xmm1		
	mulsd xmm0,xmm7		
	mulsd xmm4,xmm0		
	mulsd xmm4,xmm0		
	subsd xmm4,xmm6		
	mulsd xmm4,xmm0		
	mulsd xmm4,xmm7			
	movsd [ebx],xmm4
	add ebx,  8
.vecinvsqrt_end:	
	emms
	pop edx
	pop ecx
	pop ebx
	pop eax
	leave
	ret
	
	
.globl vecrecip_sse2
.globl _vecrecip_sse2
vecrecip_sse2:	
_vecrecip_sse2:	
	push ebp
	mov ebp,esp	
	push eax
	push ebx
	push ecx
	push edx

	mov eax, [ebp + 8]
	mov ebx, [ebp + 12]	
	mov ecx, [ebp + 16]
    mov edx, ecx
	movupd xmm6,[sse2_two]
    shr ecx, 2
	jnz .vecrecip_loop4
    jmp .vecrecip_iter2
    emms	
.vecrecip_loop4:	
	movapd xmm0,[eax]	;# xa 
	add eax,  16
	cvtpd2ps xmm4, xmm0	
	movapd xmm2,[eax]	;# xb 
	add eax,  16
	cvtpd2ps xmm5, xmm2
	rcpps xmm4, xmm4	
	rcpps xmm5, xmm5
	movapd xmm7, xmm6
	movapd xmm1, xmm0	;# xa 
	movapd xmm3, xmm2	;# xb 
	cvtps2pd xmm4, xmm4	;# lu a 	
	cvtps2pd xmm5, xmm5	;# lu b 
	mulpd xmm0, xmm4	;# x*lu a 
	mulpd xmm2, xmm5	;# x*lu b 
	subpd xmm7, xmm0	;# 2-x*lu a 
	mulpd xmm4, xmm7	;# lu*(2-x*lu) a 
	movapd xmm7, xmm6	;# 2.0 
	subpd xmm7, xmm2	;# 2-x*lu b 
	mulpd xmm5, xmm7	;# lu*(2-x*lu) b 
	movapd xmm7, xmm6	
	mulpd xmm1, xmm4	;# x*lu a 
	mulpd xmm3, xmm5	;# x*lu b 
	subpd xmm7, xmm1	;# 2-x*lu a 
	mulpd xmm4, xmm7	;# lu*(2-x*lu) a 
	movapd xmm7, xmm6	;# 2.0 
	subpd xmm7, xmm3	;# 2-x*lu b 
	mulpd xmm5, xmm7	;# lu*(2-x*lu) b 	
	movapd [ebx],xmm4
	add ebx,  16
	movapd [ebx],xmm5
	add ebx,  16
        dec ecx
    jecxz .vecrecip_iter2
    jmp .vecrecip_loop4
.vecrecip_iter2:
    mov ecx,edx
    and ecx, 2
    jecxz .vecrecip_iter1
	movapd xmm0,[eax]	
	add eax,  16
	cvtpd2ps xmm4, xmm0	
	rcpps xmm4, xmm4
	cvtps2pd xmm4, xmm4	;# lu 
	movapd xmm3, xmm6	;# 2 
	movapd xmm1,xmm0	;# x 
	mulpd xmm0,xmm4		;# lu*x 
	subpd xmm3,xmm0		;# 2-lu*x 
	mulpd xmm4, xmm3	;# iter1: lu=lu*(2-lu*x) 

	movapd xmm3, xmm6
	mulpd xmm1, xmm4	;# x*lu 
	subpd xmm3, xmm1	;# 2-x*lu 
	mulpd xmm4, xmm3	;# 1/x 
	movapd [ebx],xmm4
	add ebx,  16        
.vecrecip_iter1:
    mov ecx,edx
    and ecx, 1
    jecxz .vecrecip_end
	movsd xmm0,[eax]
	cvtsd2ss xmm4, xmm0	
	rcpss xmm4, xmm4
	cvtss2sd xmm4, xmm4	;# lu 
	movapd xmm3, xmm6	;# 2 
	movsd xmm1,xmm0		;# x 
	mulsd xmm0,xmm4		;# lu*x 
	subsd xmm3,xmm0		;# 2-lu*x 
	mulsd xmm4, xmm3	;# iter1: lu=lu*(2-lu*x) 

	mulsd xmm1, xmm4	;# x*lu 
	subsd xmm6, xmm1	;# 2-x*lu 
	mulsd xmm4, xmm6	;# 1/x 
	movsd [ebx],xmm4
.vecrecip_end:	
	emms
	pop edx
	pop ecx
	pop ebx
	pop eax
	leave
	ret
	
	
.globl inl0100_sse2
.globl _inl0100_sse2
inl0100_sse2:	
_inl0100_sse2:	
.equiv		i0100_nri, 			8
.equiv		i0100_iinr,			12
.equiv		i0100_jindex,		16
.equiv		i0100_jjnr,			20
.equiv		i0100_shift,		24
.equiv		i0100_shiftvec,		28
.equiv		i0100_fshift,		32
.equiv		i0100_gid,			36
.equiv		i0100_pos,			40		
.equiv		i0100_faction,		44
.equiv		i0100_type,			48
.equiv		i0100_ntype,		52
.equiv		i0100_nbfp,			56	
.equiv		i0100_Vnb,			60	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i0100_ix,			0
.equiv		i0100_iy,	        16
.equiv		i0100_iz,           32
.equiv		i0100_dx,           48
.equiv		i0100_dy,           64
.equiv		i0100_dz,           80
.equiv		i0100_two,          96		
.equiv		i0100_c6,			112
.equiv		i0100_c12,			128
.equiv		i0100_six,			144
.equiv		i0100_twelve,		160		 
.equiv		i0100_vnbtot,		176
.equiv		i0100_fix,			192
.equiv		i0100_fiy,			208
.equiv		i0100_fiz,			224
.equiv		i0100_half,			240
.equiv		i0100_three,		256
.equiv		i0100_is3,			272
.equiv		i0100_ii3,			276
.equiv		i0100_ntia,			280	
.equiv		i0100_innerjjnr,    284
.equiv		i0100_innerk,       288
.equiv		i0100_salign,       292
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 296		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i0100_salign], eax

	emms

	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movapd [esp + i0100_two], xmm1
	movapd [esp + i0100_six],  xmm2
	movapd [esp + i0100_twelve], xmm3

	;# assume we have at least one i particle - start directly 	
.i0100_outer:
	mov   eax, [ebp + i0100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add   dword ptr [ebp + i0100_shift],  4  ;# advance pointer one step 

	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i0100_is3],ebx    	;# store is3 

	mov   eax, [ebp + i0100_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i0100_iinr]       ;# ecx = pointer into iinr[] 	
	add   dword ptr [ebp + i0100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

    mov   edx, [ebp + i0100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i0100_ntype]
    shl   edx, 1
    mov   [esp + i0100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i0100_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + i0100_ix], xmm0
	movapd [esp + i0100_iy], xmm1
	movapd [esp + i0100_iz], xmm2

	mov   [esp + i0100_ii3], ebx
	
	;# clear vnbtot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i0100_vnbtot], xmm4
	movapd [esp + i0100_fix], xmm4
	movapd [esp + i0100_fiy], xmm4
	movapd [esp + i0100_fiz], xmm4
	
	mov   eax, [ebp + i0100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add   dword ptr [ebp + i0100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i0100_pos]
	mov   edi, [ebp + i0100_faction]	
	mov   eax, [ebp + i0100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i0100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i0100_innerk], edx    ;# number of innerloop atoms 
	
	jge   .i0100_unroll_loop
	jmp   .i0100_checksingle
.i0100_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i0100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   dword ptr [esp + i0100_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + i0100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + i0100_nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + i0100_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7

	movd  eax, mm0		
	movd  ebx, mm1	
	
	movapd [esp + i0100_c6], xmm4
	movapd [esp + i0100_c12], xmm6

	mov esi, [ebp + i0100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	

	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i0100_ix]
	movapd xmm5, [esp + i0100_iy]
	movapd xmm6, [esp + i0100_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i0100_dx], xmm4 
	movapd [esp + i0100_dy], xmm5
	movapd [esp + i0100_dz], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6	;# rsq in xmm4 

	cvtpd2ps xmm6, xmm4	
	rcpps xmm6, xmm6
	cvtps2pd xmm6, xmm6	;# lu in low xmm6 
	
	;# 1/x lookup seed in xmm6 
	movapd xmm0, [esp + i0100_two]
	movapd xmm5, xmm4
	mulpd xmm4, xmm6	;# lu*rsq 
	subpd xmm0, xmm4	;# 2-lu*rsq 
	mulpd xmm6, xmm0	;# (new lu) 
	
	movapd xmm0, [esp + i0100_two]
	mulpd xmm5, xmm6	;# lu*rsq 
	subpd xmm0, xmm5	;# 2-lu*rsq 
	mulpd xmm0, xmm6	;# xmm0=rinvsq 

	movapd xmm1, xmm0
	mulpd  xmm1, xmm0
	mulpd  xmm1, xmm0	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulpd  xmm1, [esp + i0100_c6]
	mulpd  xmm2, [esp + i0100_c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addpd  xmm5, [esp + i0100_vnbtot]
	mulpd  xmm1, [esp + i0100_six]
	mulpd  xmm2, [esp + i0100_twelve]
	subpd  xmm2, xmm1
	mulpd  xmm0, xmm2	;# xmm4=total fscal 
	movapd xmm4, xmm0
	
	movapd xmm0, [esp + i0100_dx]
	movapd xmm1, [esp + i0100_dy]
	movapd xmm2, [esp + i0100_dz]

	movapd [esp + i0100_vnbtot], xmm5

	mov    edi, [ebp + i0100_faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i0100_fix]
	movapd xmm4, [esp + i0100_fiy]
	movapd xmm5, [esp + i0100_fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + i0100_fix], xmm3
	movapd [esp + i0100_fiy], xmm4
	movapd [esp + i0100_fiz], xmm5
	
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	;# should we do one more iteration? 
	sub   dword ptr [esp + i0100_innerk],  2
	jl    .i0100_checksingle
	jmp   .i0100_unroll_loop
.i0100_checksingle:				
	mov   edx, [esp + i0100_innerk]
	and   edx, 1
	jnz    .i0100_dosingle
	jmp    .i0100_updateouterdata
.i0100_dosingle:
	mov edi, [ebp + i0100_pos]
	mov   ecx, [esp + i0100_innerjjnr]
	mov   eax, [ecx]		

	movd  mm0, eax		;# use mmx registers as temp storage 	
	mov esi, [ebp + i0100_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + i0100_nbfp]
	shl eax, 1
	mov edi, [esp + i0100_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7

	movd  eax, mm0		
	
	movapd [esp + i0100_c6], xmm4
	movapd [esp + i0100_c12], xmm6
	
	mov esi, [ebp + i0100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 	

	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i0100_ix]
	movapd xmm5, [esp + i0100_iy]
	movapd xmm6, [esp + i0100_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i0100_dx], xmm4 
	movapd [esp + i0100_dy], xmm5
	movapd [esp + i0100_dz], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6	;# rsq in xmm4 

	cvtsd2ss xmm6, xmm4	
	rcpss xmm6, xmm6
	cvtss2sd xmm6, xmm6	;# lu in low xmm6 
	
	;# 1/x lookup seed in xmm6 
	movapd xmm0, [esp + i0100_two]
	movapd xmm5, xmm4
	mulsd xmm4, xmm6	;# lu*rsq 
	subsd xmm0, xmm4	;# 2-lu*rsq 
	mulsd xmm6, xmm0	;# (new lu) 
	
	movapd xmm0, [esp + i0100_two]
	mulsd xmm5, xmm6	;# lu*rsq 
	subsd xmm0, xmm5	;# 2-lu*rsq 
	mulsd xmm0, xmm6	;# xmm0=rinvsq 
	movapd xmm4, xmm0
	
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulsd  xmm1, [esp + i0100_c6]
	mulsd  xmm2, [esp + i0100_c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addsd  xmm5, [esp + i0100_vnbtot]
	mulsd  xmm1, [esp + i0100_six]
	mulsd  xmm2, [esp + i0100_twelve]
	subsd  xmm2, xmm1
	mulsd  xmm4, xmm2	;# xmm4=total fscal 

	movapd xmm0, [esp + i0100_dx]
	movapd xmm1, [esp + i0100_dy]
	movapd xmm2, [esp + i0100_dz]

	movlpd [esp + i0100_vnbtot], xmm5

	mov    edi, [ebp + i0100_faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movlpd xmm3, [esp + i0100_fix]
	movlpd xmm4, [esp + i0100_fiy]
	movlpd xmm5, [esp + i0100_fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + i0100_fix], xmm3
	movlpd [esp + i0100_fiy], xmm4
	movlpd [esp + i0100_fiz], xmm5
	
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i0100_updateouterdata:
	mov   ecx, [esp + i0100_ii3]
	mov   edi, [ebp + i0100_faction]
	mov   esi, [ebp + i0100_fshift]
	mov   edx, [esp + i0100_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i0100_fix]
	movapd xmm1, [esp + i0100_fiy]
	movapd xmm2, [esp + i0100_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# increment fshift force  
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i0100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add   dword ptr [ebp + i0100_gid],  4  ;# advance pointer 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i0100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 have the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i0100_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 

	;# finish if last 
	mov   ecx, [ebp + i0100_nri]
	dec ecx
	jecxz .i0100_end

	;# not last, iterate once more!  
	mov [ebp + i0100_nri], ecx
	jmp .i0100_outer
.i0100_end:
	emms
	mov eax, [esp + i0100_salign]
	add esp, eax
	add esp, 296
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl inl0300_sse2
.globl _inl0300_sse2
inl0300_sse2:	
_inl0300_sse2:	
.equiv		i0300_nri,			8
.equiv		i0300_iinr,			12
.equiv		i0300_jindex,		16
.equiv		i0300_jjnr,			20
.equiv		i0300_shift,		24
.equiv		i0300_shiftvec,		28
.equiv		i0300_fshift,		32
.equiv		i0300_gid,			36
.equiv		i0300_pos,			40		
.equiv		i0300_faction,		44
.equiv		i0300_type,			48
.equiv		i0300_ntype,		52
.equiv		i0300_nbfp,			56	
.equiv		i0300_Vnb,			60
.equiv		i0300_tabscale,		64	;# double 
.equiv		i0300_VFtab,		72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i0300_ix,	        0
.equiv		i0300_iy,			16
.equiv		i0300_iz,           32
.equiv		i0300_dx,           48
.equiv		i0300_dy,           64
.equiv		i0300_dz,           80
.equiv		i0300_two,	        96
.equiv		i0300_tsc,			112
.equiv		i0300_c6,           128
.equiv		i0300_c12,          144
.equiv		i0300_fscal,        160
.equiv		i0300_vnbtot,       176
.equiv		i0300_fix,          192
.equiv		i0300_fiy,          208
.equiv		i0300_fiz,          224
.equiv		i0300_half,         240
.equiv		i0300_three,        256
.equiv		i0300_is3,          272
.equiv		i0300_ii3,          276
.equiv		i0300_ntia,	        280	
.equiv		i0300_innerjjnr,    284
.equiv		i0300_innerk,       288
.equiv		i0300_salign,       292
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 296		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i0300_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + i0300_tabscale]
	movapd [esp + i0300_half],  xmm0
	movapd [esp + i0300_two], xmm1
	movapd [esp + i0300_three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + i0300_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.i0300_outer:
	mov   eax, [ebp + i0300_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i0300_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i0300_is3],ebx    	;# store is3 

	mov   eax, [ebp + i0300_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i0300_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i0300_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

    mov   edx, [ebp + i0300_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i0300_ntype]
    shl   edx, 1
    mov   [esp + i0300_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i0300_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + i0300_ix], xmm0
	movapd [esp + i0300_iy], xmm1
	movapd [esp + i0300_iz], xmm2

	mov   [esp + i0300_ii3], ebx
	
	;# clear tot potential and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i0300_vnbtot], xmm4
	movapd [esp + i0300_fix], xmm4
	movapd [esp + i0300_fiy], xmm4
	movapd [esp + i0300_fiz], xmm4
	
	mov   eax, [ebp + i0300_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i0300_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i0300_pos]
	mov   edi, [ebp + i0300_faction]	
	mov   eax, [ebp + i0300_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i0300_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i0300_innerk], edx    ;# number of innerloop atoms 
	jge   .i0300_unroll_loop
	jmp   .i0300_checksingle
.i0300_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + i0300_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	add dword ptr [esp + i0300_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + i0300_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + i0300_nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + i0300_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movd  ebx, mm1

	movapd [esp + i0300_c6], xmm4
	movapd [esp + i0300_c12], xmm6
	
	mov esi, [ebp + i0300_pos]		;# base of pos[] 
	lea   eax, [eax + eax*2]	;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	;# move i0300_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i0300_ix]
	movapd xmm5, [esp + i0300_iy]
	movapd xmm6, [esp + i0300_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i0300_dx], xmm4
	movapd [esp + i0300_dy], xmm5
	movapd [esp + i0300_dz], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i0300_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i0300_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i0300_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i0300_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	
	mulpd xmm4, xmm0	;# xmm4=r 
	mulpd xmm4, [esp + i0300_tsc]
	
	cvttpd2pi mm6, xmm4	;# mm6 = lu idx 
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3		;# idx *= 8 
	
	movd mm0, eax	
	movd mm1, ebx

	mov  esi, [ebp + i0300_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6

	;# dispersion 
	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# dispersion table ready, in xmm4-xmm7 	
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i0300_two]	;# two*Heps2 
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i0300_c6]
	mulpd  xmm7, xmm4	 ;# fijD 
	mulpd  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addpd  xmm5, [esp + i0300_vnbtot]
	movapd [esp + i0300_fscal], xmm7
	movapd [esp + i0300_vnbtot], xmm5

	;# repulsion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 32]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 48]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	
	;# table ready, in xmm4-xmm7 	
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i0300_two]	;# two*Heps2 
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	
	movapd xmm4, [esp + i0300_c12]
	mulpd  xmm7, xmm4 
	mulpd  xmm5, xmm4  
	addpd  xmm7, [esp + i0300_fscal] 
	
	addpd  xmm5, [esp + i0300_vnbtot]
	movapd [esp + i0300_vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulpd xmm7, [esp + i0300_tsc]
	mulpd xmm7, xmm0
	subpd  xmm4, xmm7

	movapd xmm0, [esp + i0300_dx]
	movapd xmm1, [esp + i0300_dy]
	movapd xmm2, [esp + i0300_dz]

	movd eax, mm0	
	movd ebx, mm1

	mov    edi, [ebp + i0300_faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i0300_fix]
	movapd xmm4, [esp + i0300_fiy]
	movapd xmm5, [esp + i0300_fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + i0300_fix], xmm3
	movapd [esp + i0300_fiy], xmm4
	movapd [esp + i0300_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	;# should we do one more iteration? 
	sub dword ptr [esp + i0300_innerk],  2
	jl    .i0300_checksingle
	jmp   .i0300_unroll_loop

.i0300_checksingle:				
	mov   edx, [esp + i0300_innerk]
	and   edx, 1
	jnz    .i0300_dosingle
	jmp    .i0300_updateouterdata
.i0300_dosingle:
	mov   edx, [esp + i0300_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	

	movd  mm0, eax		;# use mmx registers as temp storage 
	
	mov esi, [ebp + i0300_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + i0300_nbfp]
	shl eax, 1	
	mov edi, [esp + i0300_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		

	movapd [esp + i0300_c6], xmm4
	movapd [esp + i0300_c12], xmm6
	
	mov esi, [ebp + i0300_pos]		;# base of pos[] 
	lea   eax, [eax + eax*2]	;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move i0300_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i0300_ix]
	movapd xmm5, [esp + i0300_iy]
	movapd xmm6, [esp + i0300_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i0300_dx], xmm4
	movapd [esp + i0300_dy], xmm5
	movapd [esp + i0300_dz], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i0300_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i0300_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i0300_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i0300_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	
	mulsd xmm4, xmm0	;# xmm4=r 
	mulsd xmm4, [esp + i0300_tsc]

	movd mm0, eax
	
	cvttsd2si eax, xmm4	;# mm6 = lu idx 
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	shl eax, 3	

	mov  esi, [ebp + i0300_VFtab]

	;# dispersion 
	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  
	;# dispersion table ready, in xmm4-xmm7 	
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i0300_two]	;# two*Heps2 
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i0300_c6]
	mulsd  xmm7, xmm4	 ;# fijD 
	mulsd  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addsd  xmm5, [esp + i0300_vnbtot]
	movlpd [esp + i0300_fscal], xmm7
	movlpd [esp + i0300_vnbtot], xmm5

	;# repulsion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 
	xorpd xmm3,xmm3	
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  
	
	;# table ready, in xmm4-xmm7 	
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i0300_two]	;# two*Heps2 
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	
	movapd xmm4, [esp + i0300_c12]
	mulsd  xmm7, xmm4 
	mulsd  xmm5, xmm4  
	addsd  xmm7, [esp + i0300_fscal] 
	
	addsd  xmm5, [esp + i0300_vnbtot]
	movlpd [esp + i0300_vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulsd xmm7, [esp + i0300_tsc]
	mulsd xmm7, xmm0
	subsd  xmm4, xmm7

	movapd xmm0, [esp + i0300_dx]
	movapd xmm1, [esp + i0300_dy]
	movapd xmm2, [esp + i0300_dz]

	movd eax, mm0	

	mov    edi, [ebp + i0300_faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i0300_fix]
	movapd xmm4, [esp + i0300_fiy]
	movapd xmm5, [esp + i0300_fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + i0300_fix], xmm3
	movlpd [esp + i0300_fiy], xmm4
	movlpd [esp + i0300_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
.i0300_updateouterdata:
	mov   ecx, [esp + i0300_ii3]
	mov   edi, [ebp + i0300_faction]
	mov   esi, [ebp + i0300_fshift]
	mov   edx, [esp + i0300_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i0300_fix]
	movapd xmm1, [esp + i0300_fiy]
	movapd xmm2, [esp + i0300_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# increment fshift force  
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i0300_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i0300_gid],  4  ;# advance pointer 

	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i0300_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + i0300_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i0300_nri]
	dec ecx
	jecxz .i0300_end
	;# not last, iterate once more!  
	mov [ebp + i0300_nri], ecx
	jmp .i0300_outer
.i0300_end:
	emms
	mov eax, [esp + i0300_salign]
	add esp, eax
	add esp, 296
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	


.globl inl1000_sse2
.globl _inl1000_sse2
inl1000_sse2:	
_inl1000_sse2:	
.equiv		i1000_nri,			8
.equiv		i1000_iinr,			12
.equiv		i1000_jindex,		16
.equiv		i1000_jjnr,			20
.equiv		i1000_shift,		24
.equiv		i1000_shiftvec,		28
.equiv		i1000_fshift,		32
.equiv		i1000_gid,			36
.equiv		i1000_pos,			40		
.equiv		i1000_faction,		44
.equiv		i1000_charge,		48
.equiv		i1000_facel,		52 ;# double 
.equiv		i1000_Vc,			60
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i1000_ix,           0
.equiv		i1000_iy,	        16
.equiv		i1000_iz,           32
.equiv		i1000_iq,           48
.equiv		i1000_dx,           64
.equiv		i1000_dy,           80
.equiv		i1000_dz,           96
.equiv		i1000_vctot,        112
.equiv		i1000_fix,          128
.equiv		i1000_fiy,          144
.equiv		i1000_fiz,          160
.equiv		i1000_half,         176
.equiv		i1000_three,        192
.equiv		i1000_is3,          208
.equiv		i1000_ii3,          212
.equiv		i1000_innerjjnr,    216
.equiv		i1000_innerk,       220		
.equiv		i1000_salign,       224							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 228		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1000_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + i1000_half],  xmm0
	movapd [esp + i1000_three], xmm1

	;# assume we have at least one i particle - start directly 	
i1000_outer:
	mov   eax, [ebp + i1000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1000_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1000_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i1000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1000_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + i1000_facel]
	shufpd xmm3, xmm3, 0	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1000_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + i1000_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + i1000_ix], xmm0
	movapd [esp + i1000_iy], xmm1
	movapd [esp + i1000_iz], xmm2

	mov   [esp + i1000_ii3], ebx
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i1000_vctot], xmm4
	movapd [esp + i1000_fix], xmm4
	movapd [esp + i1000_fiy], xmm4
	movapd [esp + i1000_fiz], xmm4
	
	mov   eax, [ebp + i1000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1000_pos]
	mov   edi, [ebp + i1000_faction]	
	mov   eax, [ebp + i1000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i1000_innerk], edx    ;# number of innerloop atoms 
	jge   i1000_unroll_loop
	jmp   i1000_checksingle
i1000_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + i1000_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	add dword ptr [esp + i1000_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + i1000_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]	;# jq A 
	movhpd xmm3, [esi + ebx*8]	;# jq B 

	movapd xmm5, [esp + i1000_iq]
	
	mulpd xmm3, xmm5		;# qq 
	
	mov esi, [ebp + i1000_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	mov    edi, [ebp + i1000_faction]
	
	;# move i1000_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i1000_ix]
	movapd xmm5, [esp + i1000_iy]
	movapd xmm6, [esp + i1000_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i1000_dx], xmm4
	movapd [esp + i1000_dy], xmm5
	movapd [esp + i1000_dz], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4  

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i1000_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i1000_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i1000_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i1000_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	;# xmm4=rinvsq 

	
	movapd xmm5, [esp + i1000_vctot]
	mulpd  xmm3, xmm0	;# xmm3=vcoul 
	mulpd  xmm4, xmm3	;# xmm4=fscal 
	addpd  xmm5, xmm3

	movapd xmm0, [esp + i1000_dx]
	movapd xmm1, [esp + i1000_dy]
	movapd xmm2, [esp + i1000_dz]

	movapd [esp + i1000_vctot], xmm5

	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i1000_fix]
	movapd xmm4, [esp + i1000_fiy]
	movapd xmm5, [esp + i1000_fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + i1000_fix], xmm3
	movapd [esp + i1000_fiy], xmm4
	movapd [esp + i1000_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1000_innerk],  2
	jl    i1000_checksingle
	jmp   i1000_unroll_loop

i1000_checksingle:				
	mov   edx, [esp + i1000_innerk]
	and   edx, 1
	jnz    i1000_dosingle
	jmp    i1000_updateouterdata
i1000_dosingle:			
	mov esi, [ebp + i1000_charge]
	mov edi, [ebp + i1000_pos]

	mov edx, [esp + i1000_innerjjnr]     ;# pointer to jjnr[k] 
	mov eax, [edx]	

	xorpd xmm3, xmm3
	movsd xmm3, [esi + eax*8]	;# jq A 
	movapd xmm5, [esp + i1000_iq]
	unpcklpd xmm3, xmm6
	mulpd xmm3, xmm5		;# qq 
	
	mov esi, [ebp + i1000_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	mov    edi, [ebp + i1000_faction]

	;# move i1000_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i1000_ix]
	movapd xmm5, [esp + i1000_iy]
	movapd xmm6, [esp + i1000_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movlpd [esp + i1000_dx], xmm4
	movlpd [esp + i1000_dy], xmm5
	movlpd [esp + i1000_dz], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i1000_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i1000_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i1000_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i1000_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	;# xmm4=rinvsq 

	movlpd xmm5, [esp + i1000_vctot]
	mulsd  xmm3, xmm0	;# xmm3=vcoul 
	mulsd  xmm4, xmm3	;# xmm4=fscal 
	addsd  xmm5, xmm3

	movapd xmm0, [esp + i1000_dx]
	movapd xmm1, [esp + i1000_dy]
	movapd xmm2, [esp + i1000_dz]

	movlpd [esp + i1000_vctot], xmm5

	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movlpd xmm3, [esp + i1000_fix]
	movlpd xmm4, [esp + i1000_fiy]
	movlpd xmm5, [esp + i1000_fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + i1000_fix], xmm3
	movlpd [esp + i1000_fiy], xmm4
	movlpd [esp + i1000_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

i1000_updateouterdata:
	mov   ecx, [esp + i1000_ii3]
	mov   edi, [ebp + i1000_faction]
	mov   esi, [ebp + i1000_fshift]
	mov   edx, [esp + i1000_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1000_fix]
	movapd xmm1, [esp + i1000_fiy]
	movapd xmm2, [esp + i1000_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# increment fshift force  
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i1000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i1000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i1000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i1000_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i1000_nri]
	dec  ecx
	jecxz i1000_end
	;# not last, iterate once more!  
	mov [ebp + i1000_nri], ecx
	jmp i1000_outer
i1000_end:
	emms
	mov eax, [esp + i1000_salign]
	add esp, eax
	add esp, 228
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret





.globl inl1020_sse2
.globl _inl1020_sse2
inl1020_sse2:	
_inl1020_sse2:	
.equiv		i1020_nri,			8
.equiv		i1020_iinr,			12
.equiv		i1020_jindex,		16
.equiv		i1020_jjnr,			20
.equiv		i1020_shift,		24
.equiv		i1020_shiftvec,		28
.equiv		i1020_fshift,		32
.equiv		i1020_gid,			36
.equiv		i1020_pos,			40		
.equiv		i1020_faction,		44
.equiv		i1020_charge,		48
.equiv		i1020_facel,		52 ;# double 
.equiv		i1020_Vc,			60			
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i1020_ixO,	        0
.equiv		i1020_iyO,	        16
.equiv		i1020_izO,          32
.equiv		i1020_ixH1,	        48
.equiv		i1020_iyH1,	        64
.equiv		i1020_izH1,         80
.equiv		i1020_ixH2,	        96
.equiv		i1020_iyH2,	        112
.equiv		i1020_izH2,         128
.equiv		i1020_iqO,          144 
.equiv		i1020_iqH,          160 
.equiv		i1020_dxO,          176
.equiv		i1020_dyO,          192
.equiv		i1020_dzO,          208	
.equiv		i1020_dxH1,         224
.equiv		i1020_dyH1,         240
.equiv		i1020_dzH1,         256	
.equiv		i1020_dxH2,         272
.equiv		i1020_dyH2,         288
.equiv		i1020_dzH2,         304	
.equiv		i1020_qqO,          320
.equiv		i1020_qqH,          336
.equiv		i1020_vctot,        352
.equiv		i1020_fixO,         368
.equiv		i1020_fiyO,         384
.equiv		i1020_fizO,         400
.equiv		i1020_fixH1,        416
.equiv		i1020_fiyH1,        432
.equiv		i1020_fizH1,        448
.equiv		i1020_fixH2,        464
.equiv		i1020_fiyH2,        480
.equiv		i1020_fizH2,        496
.equiv		i1020_fjx,			512
.equiv		i1020_fjy,          528
.equiv		i1020_fjz,          544
.equiv		i1020_half,         560
.equiv		i1020_three,        576
.equiv		i1020_is3,          592
.equiv		i1020_ii3,          596
.equiv		i1020_innerjjnr,    600
.equiv		i1020_innerk,       604
.equiv		i1020_salign,       608
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 612		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1020_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + i1020_half],  xmm0
	movapd [esp + i1020_three], xmm1

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i1020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1020_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + i1020_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + i1020_iqO], xmm3
	movapd [esp + i1020_iqH], xmm4
	
i1020_outer:
	mov   eax, [ebp + i1020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1020_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1020_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i1020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1020_pos]    ;# eax = base of pos[]  
	mov   [esp + i1020_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i1020_ixO], xmm3
	movapd [esp + i1020_iyO], xmm4
	movapd [esp + i1020_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i1020_ixH1], xmm0
	movapd [esp + i1020_iyH1], xmm1
	movapd [esp + i1020_izH1], xmm2
	movapd [esp + i1020_ixH2], xmm3
	movapd [esp + i1020_iyH2], xmm4
	movapd [esp + i1020_izH2], xmm5
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i1020_vctot], xmm4
	movapd [esp + i1020_fixO], xmm4
	movapd [esp + i1020_fiyO], xmm4
	movapd [esp + i1020_fizO], xmm4
	movapd [esp + i1020_fixH1], xmm4
	movapd [esp + i1020_fiyH1], xmm4
	movapd [esp + i1020_fizH1], xmm4
	movapd [esp + i1020_fixH2], xmm4
	movapd [esp + i1020_fiyH2], xmm4
	movapd [esp + i1020_fizH2], xmm4
	
	mov   eax, [ebp + i1020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1020_pos]
	mov   edi, [ebp + i1020_faction]	
	mov   eax, [ebp + i1020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i1020_innerk], edx    ;# number of innerloop atoms 
	jge   i1020_unroll_loop
	jmp   i1020_checksingle
i1020_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i1020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              

	add dword ptr [esp + i1020_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + i1020_charge]    ;# base of charge[] 
	
	
	movlpd xmm6, [esi + eax*8]	;# jq A 
	movhpd xmm6, [esi + ebx*8]	;# jq B 
	movapd xmm3, [esp + i1020_iqO]
	movapd xmm4, [esp + i1020_iqH]
	mulpd xmm3, xmm6		;# qqO 
	mulpd xmm4, xmm6		;# qqH 
	
	movapd  [esp + i1020_qqO], xmm3
	movapd  [esp + i1020_qqH], xmm4	

	mov esi, [ebp + i1020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i1020_ixO]
	movapd xmm5, [esp + i1020_iyO]
	movapd xmm6, [esp + i1020_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i1020_dxO], xmm4
	movapd [esp + i1020_dyO], xmm5
	movapd [esp + i1020_dzO], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i1020_ixH1]
	movapd xmm5, [esp + i1020_iyH1]
	movapd xmm6, [esp + i1020_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i1020_dxH1], xmm4
	movapd [esp + i1020_dyH1], xmm5
	movapd [esp + i1020_dzH1], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i1020_ixH2]
	movapd xmm4, [esp + i1020_iyH2]
	movapd xmm5, [esp + i1020_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# store dr 
	movapd [esp + i1020_dxH2], xmm3
	movapd [esp + i1020_dyH2], xmm4
	movapd [esp + i1020_dzH2], xmm5
	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i1020_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1020_three]
	subpd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i1020_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i1020_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1020_three]
	subpd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i1020_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i1020_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1020_three]
	subpd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i1020_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	mulpd  xmm7, [esp + i1020_qqO]	;# xmm7=vcoul 
	
	mulpd  xmm4, xmm7	;# total fsO in xmm4 

	addpd  xmm7, [esp + i1020_vctot]
	
	movapd [esp + i1020_vctot], xmm7

	movapd xmm0, [esp + i1020_dxO]
	movapd xmm1, [esp + i1020_dyO]
	movapd xmm2, [esp + i1020_dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update O forces 
	movapd xmm3, [esp + i1020_fixO]
	movapd xmm4, [esp + i1020_fiyO]
	movapd xmm7, [esp + i1020_fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i1020_fixO], xmm3
	movapd [esp + i1020_fiyO], xmm4
	movapd [esp + i1020_fizO], xmm7
	;# update j forces with water O 
	movapd [esp + i1020_fjx], xmm0
	movapd [esp + i1020_fjy], xmm1
	movapd [esp + i1020_fjz], xmm2

	;# H1 interactions 
	movapd  xmm4, xmm6	
	mulpd   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	mulpd  xmm6, [esp + i1020_qqH]	;# xmm6=vcoul 
	mulpd  xmm4, xmm6		;# total fsH1 in xmm4 
	
	addpd  xmm6, [esp + i1020_vctot]

	movapd xmm0, [esp + i1020_dxH1]
	movapd xmm1, [esp + i1020_dyH1]
	movapd xmm2, [esp + i1020_dzH1]
	movapd [esp + i1020_vctot], xmm6
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i1020_fixH1]
	movapd xmm4, [esp + i1020_fiyH1]
	movapd xmm7, [esp + i1020_fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i1020_fixH1], xmm3
	movapd [esp + i1020_fiyH1], xmm4
	movapd [esp + i1020_fizH1], xmm7
	;# update j forces with water H1 
	addpd  xmm0, [esp + i1020_fjx]
	addpd  xmm1, [esp + i1020_fjy]
	addpd  xmm2, [esp + i1020_fjz]
	movapd [esp + i1020_fjx], xmm0
	movapd [esp + i1020_fjy], xmm1
	movapd [esp + i1020_fjz], xmm2

	;# H2 interactions 
	movapd  xmm4, xmm5	
	mulpd   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	mulpd  xmm5, [esp + i1020_qqH]	;# xmm5=vcoul 
	mulpd  xmm4, xmm5		;# total fsH1 in xmm4 
	
	addpd  xmm5, [esp + i1020_vctot]

	movapd xmm0, [esp + i1020_dxH2]
	movapd xmm1, [esp + i1020_dyH2]
	movapd xmm2, [esp + i1020_dzH2]
	movapd [esp + i1020_vctot], xmm5
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H2 forces 
	movapd xmm3, [esp + i1020_fixH2]
	movapd xmm4, [esp + i1020_fiyH2]
	movapd xmm7, [esp + i1020_fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i1020_fixH2], xmm3
	movapd [esp + i1020_fiyH2], xmm4
	movapd [esp + i1020_fizH2], xmm7

	mov edi, [ebp + i1020_faction]
	;# update j forces 
	addpd  xmm0, [esp + i1020_fjx]
	addpd  xmm1, [esp + i1020_fjy]
	addpd  xmm2, [esp + i1020_fjz]

	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1020_innerk],  2
	jl    i1020_checksingle
	jmp   i1020_unroll_loop
i1020_checksingle:				
	mov   edx, [esp + i1020_innerk]
	and   edx, 1
	jnz    i1020_dosingle
	jmp    i1020_updateouterdata
i1020_dosingle:
	mov   edx, [esp + i1020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	

	mov esi, [ebp + i1020_charge]    ;# base of charge[] 
	xorpd xmm6, xmm6
	movlpd xmm6, [esi + eax*8]	;# jq A 
	
	movapd xmm3, [esp + i1020_iqO]
	movapd xmm4, [esp + i1020_iqH]
	mulsd xmm3, xmm6		;# qqO 
	mulsd xmm4, xmm6		;# qqH 
	
	movapd  [esp + i1020_qqO], xmm3
	movapd  [esp + i1020_qqH], xmm4	

	mov esi, [ebp + i1020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i1020_ixO]
	movapd xmm5, [esp + i1020_iyO]
	movapd xmm6, [esp + i1020_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i1020_dxO], xmm4
	movapd [esp + i1020_dyO], xmm5
	movapd [esp + i1020_dzO], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i1020_ixH1]
	movapd xmm5, [esp + i1020_iyH1]
	movapd xmm6, [esp + i1020_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i1020_dxH1], xmm4
	movapd [esp + i1020_dyH1], xmm5
	movapd [esp + i1020_dzH1], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i1020_ixH2]
	movapd xmm4, [esp + i1020_iyH2]
	movapd xmm5, [esp + i1020_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# store dr 
	movapd [esp + i1020_dxH2], xmm3
	movapd [esp + i1020_dyH2], xmm4
	movapd [esp + i1020_dzH2], xmm5
	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i1020_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1020_three]
	subsd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i1020_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i1020_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1020_three]
	subsd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i1020_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i1020_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1020_three]
	subsd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i1020_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	mulsd  xmm7, [esp + i1020_qqO]	;# xmm7=vcoul 
	
	mulsd  xmm4, xmm7	;# total fsO in xmm4 

	addsd  xmm7, [esp + i1020_vctot]
	
	movlpd [esp + i1020_vctot], xmm7

	movapd xmm0, [esp + i1020_dxO]
	movapd xmm1, [esp + i1020_dyO]
	movapd xmm2, [esp + i1020_dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update O forces 
	movapd xmm3, [esp + i1020_fixO]
	movapd xmm4, [esp + i1020_fiyO]
	movapd xmm7, [esp + i1020_fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i1020_fixO], xmm3
	movlpd [esp + i1020_fiyO], xmm4
	movlpd [esp + i1020_fizO], xmm7
	;# update j forces with water O 
	movlpd [esp + i1020_fjx], xmm0
	movlpd [esp + i1020_fjy], xmm1
	movlpd [esp + i1020_fjz], xmm2

	;# H1 interactions 
	movapd  xmm4, xmm6	
	mulsd   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	mulsd  xmm6, [esp + i1020_qqH]	;# xmm6=vcoul 
	mulsd  xmm4, xmm6		;# total fsH1 in xmm4 
	
	addsd  xmm6, [esp + i1020_vctot]

	movapd xmm0, [esp + i1020_dxH1]
	movapd xmm1, [esp + i1020_dyH1]
	movapd xmm2, [esp + i1020_dzH1]
	movlpd [esp + i1020_vctot], xmm6
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i1020_fixH1]
	movapd xmm4, [esp + i1020_fiyH1]
	movapd xmm7, [esp + i1020_fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i1020_fixH1], xmm3
	movlpd [esp + i1020_fiyH1], xmm4
	movlpd [esp + i1020_fizH1], xmm7
	;# update j forces with water H1 
	addsd  xmm0, [esp + i1020_fjx]
	addsd  xmm1, [esp + i1020_fjy]
	addsd  xmm2, [esp + i1020_fjz]
	movsd [esp + i1020_fjx], xmm0
	movsd [esp + i1020_fjy], xmm1
	movsd [esp + i1020_fjz], xmm2

	;# H2 interactions 
	movapd  xmm4, xmm5	
	mulsd   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	mulsd  xmm5, [esp + i1020_qqH]	;# xmm5=vcoul 
	mulsd  xmm4, xmm5		;# total fsH1 in xmm4 
	
	addsd  xmm5, [esp + i1020_vctot]

	movapd xmm0, [esp + i1020_dxH2]
	movapd xmm1, [esp + i1020_dyH2]
	movapd xmm2, [esp + i1020_dzH2]
	movlpd [esp + i1020_vctot], xmm5
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H2 forces 
	movapd xmm3, [esp + i1020_fixH2]
	movapd xmm4, [esp + i1020_fiyH2]
	movapd xmm7, [esp + i1020_fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i1020_fixH2], xmm3
	movlpd [esp + i1020_fiyH2], xmm4
	movlpd [esp + i1020_fizH2], xmm7

	mov edi, [ebp + i1020_faction]
	;# update j forces 
	addsd  xmm0, [esp + i1020_fjx]
	addsd  xmm1, [esp + i1020_fjy]
	addsd  xmm2, [esp + i1020_fjz]

	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

i1020_updateouterdata:
	mov   ecx, [esp + i1020_ii3]
	mov   edi, [ebp + i1020_faction]
	mov   esi, [ebp + i1020_fshift]
	mov   edx, [esp + i1020_is3]

	;# accumulate Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1020_fixO]
	movapd xmm1, [esp + i1020_fiyO]
	movapd xmm2, [esp + i1020_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1020_fixH1]
	movapd xmm1, [esp + i1020_fiyH1]
	movapd xmm2, [esp + i1020_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1020_fixH2]
	movapd xmm1, [esp + i1020_fiyH2]
	movapd xmm2, [esp + i1020_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i1020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i1020_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i1020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	        
	;# add earlier value from mem 
	mov   eax, [ebp + i1020_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 	
	
	;# finish if last 
	mov   ecx, [ebp + i1020_nri]
	dec ecx
	jecxz i1020_end
	;# not last, iterate once more!  
	mov [ebp + i1020_nri], ecx
	jmp i1020_outer
i1020_end:
	emms
	mov eax, [esp + i1020_salign]
	add esp, eax
	add esp, 612
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl inl1030_sse2
.globl _inl1030_sse2
inl1030_sse2:	
_inl1030_sse2:	
.equiv		i1030_nri,			8
.equiv		i1030_iinr,			12
.equiv		i1030_jindex,		16
.equiv		i1030_jjnr,			20
.equiv		i1030_shift,		24
.equiv		i1030_shiftvec,		28
.equiv		i1030_fshift,		32
.equiv		i1030_gid,			36
.equiv		i1030_pos,			40		
.equiv		i1030_faction,		44
.equiv		i1030_charge,		48
.equiv		i1030_facel,		52 ;# double 
.equiv		i1030_Vc,			60			
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 	
.equiv		i1030_ixO,	        0
.equiv		i1030_iyO,	        16
.equiv		i1030_izO,          32
.equiv		i1030_ixH1,	        48
.equiv		i1030_iyH1,	        64
.equiv		i1030_izH1,         80
.equiv		i1030_ixH2,	        96
.equiv		i1030_iyH2,	        112
.equiv		i1030_izH2,         128
.equiv		i1030_jxO,	        144
.equiv		i1030_jyO,	        160
.equiv		i1030_jzO,          176
.equiv		i1030_jxH1,	        192
.equiv		i1030_jyH1,	        208
.equiv		i1030_jzH1,         224
.equiv		i1030_jxH2,	        240
.equiv		i1030_jyH2,	        256
.equiv		i1030_jzH2,         272
.equiv		i1030_dxOO,         288
.equiv		i1030_dyOO,         304
.equiv		i1030_dzOO,         320	
.equiv		i1030_dxOH1,        336
.equiv		i1030_dyOH1,        352
.equiv		i1030_dzOH1,        368	
.equiv		i1030_dxOH2,        384
.equiv		i1030_dyOH2,        400
.equiv		i1030_dzOH2,        416	
.equiv		i1030_dxH1O,        432
.equiv		i1030_dyH1O,        448
.equiv		i1030_dzH1O,        464	
.equiv		i1030_dxH1H1,       480
.equiv		i1030_dyH1H1,       496
.equiv		i1030_dzH1H1,       512	
.equiv		i1030_dxH1H2,       528
.equiv		i1030_dyH1H2,       544
.equiv		i1030_dzH1H2,       560	
.equiv		i1030_dxH2O,        576
.equiv		i1030_dyH2O,        592
.equiv		i1030_dzH2O,        608	
.equiv		i1030_dxH2H1,       624
.equiv		i1030_dyH2H1,       640
.equiv		i1030_dzH2H1,       656	
.equiv		i1030_dxH2H2,       672
.equiv		i1030_dyH2H2,       688
.equiv		i1030_dzH2H2,       704
.equiv		i1030_qqOO,         720
.equiv		i1030_qqOH,         736
.equiv		i1030_qqHH,         752
.equiv		i1030_vctot,        768		
.equiv		i1030_fixO,         784
.equiv		i1030_fiyO,         800
.equiv		i1030_fizO,         816
.equiv		i1030_fixH1,        832
.equiv		i1030_fiyH1,        848
.equiv		i1030_fizH1,        864
.equiv		i1030_fixH2,        880
.equiv		i1030_fiyH2,        896
.equiv		i1030_fizH2,        912
.equiv		i1030_fjxO,	        928
.equiv		i1030_fjyO,         944
.equiv		i1030_fjzO,         960
.equiv		i1030_fjxH1,        976
.equiv		i1030_fjyH1,        992
.equiv		i1030_fjzH1,        1008
.equiv		i1030_fjxH2,		1024
.equiv		i1030_fjyH2,        1040
.equiv		i1030_fjzH2,        1056
.equiv		i1030_half,         1072
.equiv		i1030_three,        1088
.equiv		i1030_rsqOO,        1104
.equiv		i1030_rsqOH1,       1120
.equiv		i1030_rsqOH2,       1136
.equiv		i1030_rsqH1O,       1152
.equiv		i1030_rsqH1H1,      1168
.equiv		i1030_rsqH1H2,      1184
.equiv		i1030_rsqH2O,       1200
.equiv		i1030_rsqH2H1,      1216
.equiv		i1030_rsqH2H2,      1232
.equiv		i1030_rinvOO,       1248
.equiv		i1030_rinvOH1,      1264
.equiv		i1030_rinvOH2,      1280
.equiv		i1030_rinvH1O,      1296
.equiv		i1030_rinvH1H1,     1312
.equiv		i1030_rinvH1H2,     1328
.equiv		i1030_rinvH2O,      1344
.equiv		i1030_rinvH2H1,     1360
.equiv		i1030_rinvH2H2,     1376
.equiv		i1030_is3,          1392
.equiv		i1030_ii3,          1396
.equiv		i1030_innerjjnr,    1400
.equiv		i1030_innerk,       1404
.equiv		i1030_salign,       1408							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1412		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1030_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + i1030_half],  xmm0
	movapd [esp + i1030_three], xmm1
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i1030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1030_charge]
	movsd xmm3, [edx + ebx*8]	;# qO 
	movsd xmm4, xmm3		;# qO 
	movsd xmm5, [edx + ebx*8 + 8]	;# qH 
	movsd xmm6, [ebp + i1030_facel]	;# facel 
	mulsd  xmm3, xmm3		;# qO*qO 
	mulsd  xmm4, xmm5		;# qO*qH 
	mulsd  xmm5, xmm5		;# qH*qH 
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i1030_qqOO], xmm3
	movapd [esp + i1030_qqOH], xmm4
	movapd [esp + i1030_qqHH], xmm5

i1030_outer:
	mov   eax, [ebp + i1030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1030_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1030_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i1030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1030_pos]    ;# eax = base of pos[]  
	mov   [esp + i1030_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i1030_ixO], xmm3
	movapd [esp + i1030_iyO], xmm4
	movapd [esp + i1030_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i1030_ixH1], xmm0
	movapd [esp + i1030_iyH1], xmm1
	movapd [esp + i1030_izH1], xmm2
	movapd [esp + i1030_ixH2], xmm3
	movapd [esp + i1030_iyH2], xmm4
	movapd [esp + i1030_izH2], xmm5

	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i1030_vctot], xmm4
	movapd [esp + i1030_fixO], xmm4
	movapd [esp + i1030_fiyO], xmm4
	movapd [esp + i1030_fizO], xmm4
	movapd [esp + i1030_fixH1], xmm4
	movapd [esp + i1030_fiyH1], xmm4
	movapd [esp + i1030_fizH1], xmm4
	movapd [esp + i1030_fixH2], xmm4
	movapd [esp + i1030_fiyH2], xmm4
	movapd [esp + i1030_fizH2], xmm4
	
	mov   eax, [ebp + i1030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1030_pos]
	mov   edi, [ebp + i1030_faction]	
	mov   eax, [ebp + i1030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i1030_innerk], edx    ;# number of innerloop atoms 
	jge   i1030_unroll_loop
	jmp   i1030_checksingle
i1030_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + i1030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + i1030_innerjjnr], 8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + i1030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + i1030_jxO], xmm2
	movapd 	[esp + i1030_jyO], xmm3
	movapd 	[esp + i1030_jzO], xmm4
	movapd 	[esp + i1030_jxH1], xmm5
	movapd 	[esp + i1030_jyH1], xmm6
	movapd 	[esp + i1030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + i1030_jxH2], xmm2
	movapd 	[esp + i1030_jyH2], xmm3
	movapd 	[esp + i1030_jzH2], xmm4
	
	movapd xmm0, [esp + i1030_ixO]
	movapd xmm1, [esp + i1030_iyO]
	movapd xmm2, [esp + i1030_izO]
	movapd xmm3, [esp + i1030_ixO]
	movapd xmm4, [esp + i1030_iyO]
	movapd xmm5, [esp + i1030_izO]
	subpd  xmm0, [esp + i1030_jxO]
	subpd  xmm1, [esp + i1030_jyO]
	subpd  xmm2, [esp + i1030_jzO]
	subpd  xmm3, [esp + i1030_jxH1]
	subpd  xmm4, [esp + i1030_jyH1]
	subpd  xmm5, [esp + i1030_jzH1]
	movapd [esp + i1030_dxOO], xmm0
	movapd [esp + i1030_dyOO], xmm1
	movapd [esp + i1030_dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i1030_dxOH1], xmm3
	movapd [esp + i1030_dyOH1], xmm4
	movapd [esp + i1030_dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i1030_rsqOO], xmm0
	movapd [esp + i1030_rsqOH1], xmm3

	movapd xmm0, [esp + i1030_ixO]
	movapd xmm1, [esp + i1030_iyO]
	movapd xmm2, [esp + i1030_izO]
	movapd xmm3, [esp + i1030_ixH1]
	movapd xmm4, [esp + i1030_iyH1]
	movapd xmm5, [esp + i1030_izH1]
	subpd  xmm0, [esp + i1030_jxH2]
	subpd  xmm1, [esp + i1030_jyH2]
	subpd  xmm2, [esp + i1030_jzH2]
	subpd  xmm3, [esp + i1030_jxO]
	subpd  xmm4, [esp + i1030_jyO]
	subpd  xmm5, [esp + i1030_jzO]
	movapd [esp + i1030_dxOH2], xmm0
	movapd [esp + i1030_dyOH2], xmm1
	movapd [esp + i1030_dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i1030_dxH1O], xmm3
	movapd [esp + i1030_dyH1O], xmm4
	movapd [esp + i1030_dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i1030_rsqOH2], xmm0
	movapd [esp + i1030_rsqH1O], xmm3

	movapd xmm0, [esp + i1030_ixH1]
	movapd xmm1, [esp + i1030_iyH1]
	movapd xmm2, [esp + i1030_izH1]
	movapd xmm3, [esp + i1030_ixH1]
	movapd xmm4, [esp + i1030_iyH1]
	movapd xmm5, [esp + i1030_izH1]
	subpd  xmm0, [esp + i1030_jxH1]
	subpd  xmm1, [esp + i1030_jyH1]
	subpd  xmm2, [esp + i1030_jzH1]
	subpd  xmm3, [esp + i1030_jxH2]
	subpd  xmm4, [esp + i1030_jyH2]
	subpd  xmm5, [esp + i1030_jzH2]
	movapd [esp + i1030_dxH1H1], xmm0
	movapd [esp + i1030_dyH1H1], xmm1
	movapd [esp + i1030_dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i1030_dxH1H2], xmm3
	movapd [esp + i1030_dyH1H2], xmm4
	movapd [esp + i1030_dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i1030_rsqH1H1], xmm0
	movapd [esp + i1030_rsqH1H2], xmm3

	movapd xmm0, [esp + i1030_ixH2]
	movapd xmm1, [esp + i1030_iyH2]
	movapd xmm2, [esp + i1030_izH2]
	movapd xmm3, [esp + i1030_ixH2]
	movapd xmm4, [esp + i1030_iyH2]
	movapd xmm5, [esp + i1030_izH2]
	subpd  xmm0, [esp + i1030_jxO]
	subpd  xmm1, [esp + i1030_jyO]
	subpd  xmm2, [esp + i1030_jzO]
	subpd  xmm3, [esp + i1030_jxH1]
	subpd  xmm4, [esp + i1030_jyH1]
	subpd  xmm5, [esp + i1030_jzH1]
	movapd [esp + i1030_dxH2O], xmm0
	movapd [esp + i1030_dyH2O], xmm1
	movapd [esp + i1030_dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i1030_dxH2H1], xmm3
	movapd [esp + i1030_dyH2H1], xmm4
	movapd [esp + i1030_dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + i1030_rsqH2O], xmm0
	movapd [esp + i1030_rsqH2H1], xmm4

	movapd xmm0, [esp + i1030_ixH2]
	movapd xmm1, [esp + i1030_iyH2]
	movapd xmm2, [esp + i1030_izH2]
	subpd  xmm0, [esp + i1030_jxH2]
	subpd  xmm1, [esp + i1030_jyH2]
	subpd  xmm2, [esp + i1030_jzH2]
	movapd [esp + i1030_dxH2H2], xmm0
	movapd [esp + i1030_dyH2H2], xmm1
	movapd [esp + i1030_dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + i1030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0 (h2h2) , xmm4 (h2h1) 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i1030_half] ;# iter1 
	mulpd   xmm7, [esp + i1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i1030_half] ;# rinv 
	mulpd   xmm5, [esp + i1030_half] ;# rinv 
	movapd [esp + i1030_rinvH2H2], xmm1
	movapd [esp + i1030_rinvH2H1], xmm5

	movapd xmm0, [esp + i1030_rsqOO]
	movapd xmm4, [esp + i1030_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i1030_half] ;# iter1 of  
	mulpd   xmm7, [esp + i1030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i1030_half] ;# rinv 
	mulpd   xmm5, [esp + i1030_half] ;# rinv
	movapd [esp + i1030_rinvOO], xmm1
	movapd [esp + i1030_rinvOH1], xmm5

	movapd xmm0, [esp + i1030_rsqOH2]
	movapd xmm4, [esp + i1030_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i1030_half] ;# iter1 
	mulpd   xmm7, [esp + i1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i1030_half] ;# rinv 
	mulpd   xmm5, [esp + i1030_half] ;# rinv 
	movapd [esp + i1030_rinvOH2], xmm1
	movapd [esp + i1030_rinvH1O], xmm5

	movapd xmm0, [esp + i1030_rsqH1H1]
	movapd xmm4, [esp + i1030_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i1030_half] ;# iter1a 
	mulpd   xmm7, [esp + i1030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i1030_half] ;# rinv 
	mulpd   xmm5, [esp + i1030_half] ;# rinv 
	movapd [esp + i1030_rinvH1H1], xmm1
	movapd [esp + i1030_rinvH1H2], xmm5

	movapd xmm0, [esp + i1030_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i1030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + i1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i1030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + i1030_half] ;# rinv 
	movapd [esp + i1030_rinvH2O], xmm1

	;# start with OO interaction 
	movapd xmm0, [esp + i1030_rinvOO]
	movapd xmm7, xmm0
	mulpd  xmm0, xmm0		;# rinvsq 
	mulpd  xmm7, [esp + i1030_qqOO]	
	mulpd  xmm0, xmm7	
	addpd  xmm7, [esp + i1030_vctot] 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i1030_dxOO]
	mulpd xmm1, [esp + i1030_dyOO]
	mulpd xmm2, [esp + i1030_dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1030_fixO]
	addpd xmm1, [esp + i1030_fiyO]
	addpd xmm2, [esp + i1030_fizO]
	movapd [esp + i1030_fjxO], xmm3
	movapd [esp + i1030_fjyO], xmm4
	movapd [esp + i1030_fjzO], xmm5
	movapd [esp + i1030_fixO], xmm0
	movapd [esp + i1030_fiyO], xmm1
	movapd [esp + i1030_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i1030_rinvOH1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1030_qqOH]
	mulpd xmm0, xmm1	;# fsOH1  
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i1030_dxOH1]
	mulpd xmm1, [esp + i1030_dyOH1]
	mulpd xmm2, [esp + i1030_dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1030_fixO]
	addpd xmm1, [esp + i1030_fiyO]
	addpd xmm2, [esp + i1030_fizO]
	movapd [esp + i1030_fjxH1], xmm3
	movapd [esp + i1030_fjyH1], xmm4
	movapd [esp + i1030_fjzH1], xmm5
	movapd [esp + i1030_fixO], xmm0
	movapd [esp + i1030_fiyO], xmm1
	movapd [esp + i1030_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i1030_rinvOH2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1030_qqOH]
	mulpd xmm0, xmm1	;# fsOH2  
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i1030_dxOH2]
	mulpd xmm1, [esp + i1030_dyOH2]
	mulpd xmm2, [esp + i1030_dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1030_fixO]
	addpd xmm1, [esp + i1030_fiyO]
	addpd xmm2, [esp + i1030_fizO]
	movapd [esp + i1030_fjxH2], xmm3
	movapd [esp + i1030_fjyH2], xmm4
	movapd [esp + i1030_fjzH2], xmm5
	movapd [esp + i1030_fixO], xmm0
	movapd [esp + i1030_fiyO], xmm1
	movapd [esp + i1030_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i1030_rinvH1O]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1030_qqOH]
	mulpd xmm0, xmm1	;# fsH1O 
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxO]
	movapd xmm4, [esp + i1030_fjyO]
	movapd xmm5, [esp + i1030_fjzO]
	mulpd xmm0, [esp + i1030_dxH1O]
	mulpd xmm1, [esp + i1030_dyH1O]
	mulpd xmm2, [esp + i1030_dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1030_fixH1]
	addpd xmm1, [esp + i1030_fiyH1]
	addpd xmm2, [esp + i1030_fizH1]
	movapd [esp + i1030_fjxO], xmm3
	movapd [esp + i1030_fjyO], xmm4
	movapd [esp + i1030_fjzO], xmm5
	movapd [esp + i1030_fixH1], xmm0
	movapd [esp + i1030_fiyH1], xmm1
	movapd [esp + i1030_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i1030_rinvH1H1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1030_qqHH]
	mulpd xmm0, xmm1	;# fsH1H1 
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxH1]
	movapd xmm4, [esp + i1030_fjyH1]
	movapd xmm5, [esp + i1030_fjzH1]
	mulpd xmm0, [esp + i1030_dxH1H1]
	mulpd xmm1, [esp + i1030_dyH1H1]
	mulpd xmm2, [esp + i1030_dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1030_fixH1]
	addpd xmm1, [esp + i1030_fiyH1]
	addpd xmm2, [esp + i1030_fizH1]
	movapd [esp + i1030_fjxH1], xmm3
	movapd [esp + i1030_fjyH1], xmm4
	movapd [esp + i1030_fjzH1], xmm5
	movapd [esp + i1030_fixH1], xmm0
	movapd [esp + i1030_fiyH1], xmm1
	movapd [esp + i1030_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i1030_rinvH1H2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1030_qqHH]
	mulpd xmm0, xmm1	;# fsOH2  
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxH2]
	movapd xmm4, [esp + i1030_fjyH2]
	movapd xmm5, [esp + i1030_fjzH2]
	mulpd xmm0, [esp + i1030_dxH1H2]
	mulpd xmm1, [esp + i1030_dyH1H2]
	mulpd xmm2, [esp + i1030_dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1030_fixH1]
	addpd xmm1, [esp + i1030_fiyH1]
	addpd xmm2, [esp + i1030_fizH1]
	movapd [esp + i1030_fjxH2], xmm3
	movapd [esp + i1030_fjyH2], xmm4
	movapd [esp + i1030_fjzH2], xmm5
	movapd [esp + i1030_fixH1], xmm0
	movapd [esp + i1030_fiyH1], xmm1
	movapd [esp + i1030_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i1030_rinvH2O]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1030_qqOH]
	mulpd xmm0, xmm1	;# fsH2O 
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxO]
	movapd xmm4, [esp + i1030_fjyO]
	movapd xmm5, [esp + i1030_fjzO]
	mulpd xmm0, [esp + i1030_dxH2O]
	mulpd xmm1, [esp + i1030_dyH2O]
	mulpd xmm2, [esp + i1030_dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1030_fixH2]
	addpd xmm1, [esp + i1030_fiyH2]
	addpd xmm2, [esp + i1030_fizH2]
	movapd [esp + i1030_fjxO], xmm3
	movapd [esp + i1030_fjyO], xmm4
	movapd [esp + i1030_fjzO], xmm5
	movapd [esp + i1030_fixH2], xmm0
	movapd [esp + i1030_fiyH2], xmm1
	movapd [esp + i1030_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i1030_rinvH2H1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1030_qqHH]
	mulpd xmm0, xmm1	;# fsH2H1 
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxH1]
	movapd xmm4, [esp + i1030_fjyH1]
	movapd xmm5, [esp + i1030_fjzH1]
	mulpd xmm0, [esp + i1030_dxH2H1]
	mulpd xmm1, [esp + i1030_dyH2H1]
	mulpd xmm2, [esp + i1030_dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1030_fixH2]
	addpd xmm1, [esp + i1030_fiyH2]
	addpd xmm2, [esp + i1030_fizH2]
	movapd [esp + i1030_fjxH1], xmm3
	movapd [esp + i1030_fjyH1], xmm4
	movapd [esp + i1030_fjzH1], xmm5
	movapd [esp + i1030_fixH2], xmm0
	movapd [esp + i1030_fiyH2], xmm1
	movapd [esp + i1030_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i1030_rinvH2H2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1030_qqHH]
	mulpd xmm0, xmm1	;# fsH2H2 
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd [esp + i1030_vctot], xmm7
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxH2]
	movapd xmm4, [esp + i1030_fjyH2]
	movapd xmm5, [esp + i1030_fjzH2]
	mulpd xmm0, [esp + i1030_dxH2H2]
	mulpd xmm1, [esp + i1030_dyH2H2]
	mulpd xmm2, [esp + i1030_dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1030_fixH2]
	addpd xmm1, [esp + i1030_fiyH2]
	addpd xmm2, [esp + i1030_fizH2]
	movapd [esp + i1030_fjxH2], xmm3
	movapd [esp + i1030_fjyH2], xmm4
	movapd [esp + i1030_fjzH2], xmm5
	movapd [esp + i1030_fixH2], xmm0
	movapd [esp + i1030_fiyH2], xmm1
	movapd [esp + i1030_fizH2], xmm2

	mov edi, [ebp + i1030_faction]
		
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + i1030_fjxO]
	addpd xmm1, [esp + i1030_fjyO]
	addpd xmm2, [esp + i1030_fjzO]
	addpd xmm3, [esp + i1030_fjxH1]
	addpd xmm4, [esp + i1030_fjyH1]
	addpd xmm5, [esp + i1030_fjzH1]
	addpd xmm6, [esp + i1030_fjxH2]
	addpd xmm7, [esp + i1030_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + i1030_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1030_innerk],  2
	jl    i1030_checksingle
	jmp   i1030_unroll_loop
i1030_checksingle:
	mov   edx, [esp + i1030_innerk]
	and   edx, 1
	jnz   i1030_dosingle
	jmp   i1030_updateouterdata
i1030_dosingle:
	mov   edx, [esp + i1030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	

	mov esi, [ebp + i1030_pos]
	lea   eax, [eax + eax*2]  

	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + i1030_jxO], xmm2
	movapd 	[esp + i1030_jyO], xmm3
	movapd 	[esp + i1030_jzO], xmm4
	movapd 	[esp + i1030_jxH1], xmm5
	movapd 	[esp + i1030_jyH1], xmm6
	movapd 	[esp + i1030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + i1030_jxH2], xmm2
	movapd 	[esp + i1030_jyH2], xmm3
	movapd 	[esp + i1030_jzH2], xmm4
	
	movapd xmm0, [esp + i1030_ixO]
	movapd xmm1, [esp + i1030_iyO]
	movapd xmm2, [esp + i1030_izO]
	movapd xmm3, [esp + i1030_ixO]
	movapd xmm4, [esp + i1030_iyO]
	movapd xmm5, [esp + i1030_izO]
	subsd  xmm0, [esp + i1030_jxO]
	subsd  xmm1, [esp + i1030_jyO]
	subsd  xmm2, [esp + i1030_jzO]
	subsd  xmm3, [esp + i1030_jxH1]
	subsd  xmm4, [esp + i1030_jyH1]
	subsd  xmm5, [esp + i1030_jzH1]
	movapd [esp + i1030_dxOO], xmm0
	movapd [esp + i1030_dyOO], xmm1
	movapd [esp + i1030_dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i1030_dxOH1], xmm3
	movapd [esp + i1030_dyOH1], xmm4
	movapd [esp + i1030_dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i1030_rsqOO], xmm0
	movapd [esp + i1030_rsqOH1], xmm3

	movapd xmm0, [esp + i1030_ixO]
	movapd xmm1, [esp + i1030_iyO]
	movapd xmm2, [esp + i1030_izO]
	movapd xmm3, [esp + i1030_ixH1]
	movapd xmm4, [esp + i1030_iyH1]
	movapd xmm5, [esp + i1030_izH1]
	subsd  xmm0, [esp + i1030_jxH2]
	subsd  xmm1, [esp + i1030_jyH2]
	subsd  xmm2, [esp + i1030_jzH2]
	subsd  xmm3, [esp + i1030_jxO]
	subsd  xmm4, [esp + i1030_jyO]
	subsd  xmm5, [esp + i1030_jzO]
	movapd [esp + i1030_dxOH2], xmm0
	movapd [esp + i1030_dyOH2], xmm1
	movapd [esp + i1030_dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i1030_dxH1O], xmm3
	movapd [esp + i1030_dyH1O], xmm4
	movapd [esp + i1030_dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i1030_rsqOH2], xmm0
	movapd [esp + i1030_rsqH1O], xmm3

	movapd xmm0, [esp + i1030_ixH1]
	movapd xmm1, [esp + i1030_iyH1]
	movapd xmm2, [esp + i1030_izH1]
	movapd xmm3, [esp + i1030_ixH1]
	movapd xmm4, [esp + i1030_iyH1]
	movapd xmm5, [esp + i1030_izH1]
	subsd  xmm0, [esp + i1030_jxH1]
	subsd  xmm1, [esp + i1030_jyH1]
	subsd  xmm2, [esp + i1030_jzH1]
	subsd  xmm3, [esp + i1030_jxH2]
	subsd  xmm4, [esp + i1030_jyH2]
	subsd  xmm5, [esp + i1030_jzH2]
	movapd [esp + i1030_dxH1H1], xmm0
	movapd [esp + i1030_dyH1H1], xmm1
	movapd [esp + i1030_dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i1030_dxH1H2], xmm3
	movapd [esp + i1030_dyH1H2], xmm4
	movapd [esp + i1030_dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i1030_rsqH1H1], xmm0
	movapd [esp + i1030_rsqH1H2], xmm3

	movapd xmm0, [esp + i1030_ixH2]
	movapd xmm1, [esp + i1030_iyH2]
	movapd xmm2, [esp + i1030_izH2]
	movapd xmm3, [esp + i1030_ixH2]
	movapd xmm4, [esp + i1030_iyH2]
	movapd xmm5, [esp + i1030_izH2]
	subsd  xmm0, [esp + i1030_jxO]
	subsd  xmm1, [esp + i1030_jyO]
	subsd  xmm2, [esp + i1030_jzO]
	subsd  xmm3, [esp + i1030_jxH1]
	subsd  xmm4, [esp + i1030_jyH1]
	subsd  xmm5, [esp + i1030_jzH1]
	movapd [esp + i1030_dxH2O], xmm0
	movapd [esp + i1030_dyH2O], xmm1
	movapd [esp + i1030_dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i1030_dxH2H1], xmm3
	movapd [esp + i1030_dyH2H1], xmm4
	movapd [esp + i1030_dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + i1030_rsqH2O], xmm0
	movapd [esp + i1030_rsqH2H1], xmm4

	movapd xmm0, [esp + i1030_ixH2]
	movapd xmm1, [esp + i1030_iyH2]
	movapd xmm2, [esp + i1030_izH2]
	subsd  xmm0, [esp + i1030_jxH2]
	subsd  xmm1, [esp + i1030_jyH2]
	subsd  xmm2, [esp + i1030_jzH2]
	movapd [esp + i1030_dxH2H2], xmm0
	movapd [esp + i1030_dyH2H2], xmm1
	movapd [esp + i1030_dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + i1030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i1030_half] ;# iter1 
	mulsd   xmm7, [esp + i1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i1030_half] ;# rinv 
	mulsd   xmm5, [esp + i1030_half] ;# rinv 
	movapd [esp + i1030_rinvH2H2], xmm1
	movapd [esp + i1030_rinvH2H1], xmm5

	movapd xmm0, [esp + i1030_rsqOO]
	movapd xmm4, [esp + i1030_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i1030_half] ;# iter1 of  
	mulsd   xmm7, [esp + i1030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i1030_half] ;# rinv 
	mulsd   xmm5, [esp + i1030_half] ;# rinv
	movapd [esp + i1030_rinvOO], xmm1
	movapd [esp + i1030_rinvOH1], xmm5

	movapd xmm0, [esp + i1030_rsqOH2]
	movapd xmm4, [esp + i1030_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i1030_half] ;# iter1 
	mulsd   xmm7, [esp + i1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i1030_half] ;# rinv 
	mulsd   xmm5, [esp + i1030_half] ;# rinv 
	movapd [esp + i1030_rinvOH2], xmm1
	movapd [esp + i1030_rinvH1O], xmm5

	movapd xmm0, [esp + i1030_rsqH1H1]
	movapd xmm4, [esp + i1030_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i1030_half] ;# iter1a 
	mulsd   xmm7, [esp + i1030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i1030_half] ;# rinv 
	mulsd   xmm5, [esp + i1030_half] ;# rinv 
	movapd [esp + i1030_rinvH1H1], xmm1
	movapd [esp + i1030_rinvH1H2], xmm5

	movapd xmm0, [esp + i1030_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i1030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + i1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i1030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + i1030_half] ;# rinv 
	movapd [esp + i1030_rinvH2O], xmm1

	;# start with OO interaction 
	movapd xmm0, [esp + i1030_rinvOO]
	movapd xmm7, xmm0
	mulsd  xmm0, xmm0
	mulsd  xmm7, [esp + i1030_qqOO]
	mulsd  xmm0, xmm7	
	addsd  xmm7, [esp + i1030_vctot] 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i1030_dxOO]
	mulsd xmm1, [esp + i1030_dyOO]
	mulsd xmm2, [esp + i1030_dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1030_fixO]
	addsd xmm1, [esp + i1030_fiyO]
	addsd xmm2, [esp + i1030_fizO]
	movlpd [esp + i1030_fjxO], xmm3
	movlpd [esp + i1030_fjyO], xmm4
	movlpd [esp + i1030_fjzO], xmm5
	movlpd [esp + i1030_fixO], xmm0
	movlpd [esp + i1030_fiyO], xmm1
	movlpd [esp + i1030_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i1030_rinvOH1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1030_qqOH]
	mulsd xmm0, xmm1	;# fsOH1  
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i1030_dxOH1]
	mulsd xmm1, [esp + i1030_dyOH1]
	mulsd xmm2, [esp + i1030_dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1030_fixO]
	addsd xmm1, [esp + i1030_fiyO]
	addsd xmm2, [esp + i1030_fizO]
	movlpd [esp + i1030_fjxH1], xmm3
	movlpd [esp + i1030_fjyH1], xmm4
	movlpd [esp + i1030_fjzH1], xmm5
	movlpd [esp + i1030_fixO], xmm0
	movlpd [esp + i1030_fiyO], xmm1
	movlpd [esp + i1030_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i1030_rinvOH2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1030_qqOH]
	mulsd xmm0, xmm1	;# fsOH2  
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i1030_dxOH2]
	mulsd xmm1, [esp + i1030_dyOH2]
	mulsd xmm2, [esp + i1030_dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1030_fixO]
	addsd xmm1, [esp + i1030_fiyO]
	addsd xmm2, [esp + i1030_fizO]
	movlpd [esp + i1030_fjxH2], xmm3
	movlpd [esp + i1030_fjyH2], xmm4
	movlpd [esp + i1030_fjzH2], xmm5
	movlpd [esp + i1030_fixO], xmm0
	movlpd [esp + i1030_fiyO], xmm1
	movlpd [esp + i1030_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i1030_rinvH1O]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1030_qqOH]
	mulsd xmm0, xmm1	;# fsH1O 
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxO]
	movapd xmm4, [esp + i1030_fjyO]
	movapd xmm5, [esp + i1030_fjzO]
	mulsd xmm0, [esp + i1030_dxH1O]
	mulsd xmm1, [esp + i1030_dyH1O]
	mulsd xmm2, [esp + i1030_dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1030_fixH1]
	addsd xmm1, [esp + i1030_fiyH1]
	addsd xmm2, [esp + i1030_fizH1]
	movlpd [esp + i1030_fjxO], xmm3
	movlpd [esp + i1030_fjyO], xmm4
	movlpd [esp + i1030_fjzO], xmm5
	movlpd [esp + i1030_fixH1], xmm0
	movlpd [esp + i1030_fiyH1], xmm1
	movlpd [esp + i1030_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i1030_rinvH1H1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1030_qqHH]
	mulsd xmm0, xmm1	;# fsH1H1 
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxH1]
	movapd xmm4, [esp + i1030_fjyH1]
	movapd xmm5, [esp + i1030_fjzH1]
	mulsd xmm0, [esp + i1030_dxH1H1]
	mulsd xmm1, [esp + i1030_dyH1H1]
	mulsd xmm2, [esp + i1030_dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1030_fixH1]
	addsd xmm1, [esp + i1030_fiyH1]
	addsd xmm2, [esp + i1030_fizH1]
	movlpd [esp + i1030_fjxH1], xmm3
	movlpd [esp + i1030_fjyH1], xmm4
	movlpd [esp + i1030_fjzH1], xmm5
	movlpd [esp + i1030_fixH1], xmm0
	movlpd [esp + i1030_fiyH1], xmm1
	movlpd [esp + i1030_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i1030_rinvH1H2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1030_qqHH]
	mulsd xmm0, xmm1	;# fsOH2  
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxH2]
	movapd xmm4, [esp + i1030_fjyH2]
	movapd xmm5, [esp + i1030_fjzH2]
	mulsd xmm0, [esp + i1030_dxH1H2]
	mulsd xmm1, [esp + i1030_dyH1H2]
	mulsd xmm2, [esp + i1030_dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1030_fixH1]
	addsd xmm1, [esp + i1030_fiyH1]
	addsd xmm2, [esp + i1030_fizH1]
	movlpd [esp + i1030_fjxH2], xmm3
	movlpd [esp + i1030_fjyH2], xmm4
	movlpd [esp + i1030_fjzH2], xmm5
	movlpd [esp + i1030_fixH1], xmm0
	movlpd [esp + i1030_fiyH1], xmm1
	movlpd [esp + i1030_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i1030_rinvH2O]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1030_qqOH]
	mulsd xmm0, xmm1	;# fsH2O 
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxO]
	movapd xmm4, [esp + i1030_fjyO]
	movapd xmm5, [esp + i1030_fjzO]
	mulsd xmm0, [esp + i1030_dxH2O]
	mulsd xmm1, [esp + i1030_dyH2O]
	mulsd xmm2, [esp + i1030_dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1030_fixH2]
	addsd xmm1, [esp + i1030_fiyH2]
	addsd xmm2, [esp + i1030_fizH2]
	movlpd [esp + i1030_fjxO], xmm3
	movlpd [esp + i1030_fjyO], xmm4
	movlpd [esp + i1030_fjzO], xmm5
	movlpd [esp + i1030_fixH2], xmm0
	movlpd [esp + i1030_fiyH2], xmm1
	movlpd [esp + i1030_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i1030_rinvH2H1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1030_qqHH]
	mulsd xmm0, xmm1	;# fsH2H1 
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxH1]
	movapd xmm4, [esp + i1030_fjyH1]
	movapd xmm5, [esp + i1030_fjzH1]
	mulsd xmm0, [esp + i1030_dxH2H1]
	mulsd xmm1, [esp + i1030_dyH2H1]
	mulsd xmm2, [esp + i1030_dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1030_fixH2]
	addsd xmm1, [esp + i1030_fiyH2]
	addsd xmm2, [esp + i1030_fizH2]
	movlpd [esp + i1030_fjxH1], xmm3
	movlpd [esp + i1030_fjyH1], xmm4
	movlpd [esp + i1030_fjzH1], xmm5
	movlpd [esp + i1030_fixH2], xmm0
	movlpd [esp + i1030_fiyH2], xmm1
	movlpd [esp + i1030_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i1030_rinvH2H2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1030_qqHH]
	mulsd xmm0, xmm1	;# fsH2H2 
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movsd [esp + i1030_vctot], xmm7
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1030_fjxH2]
	movapd xmm4, [esp + i1030_fjyH2]
	movapd xmm5, [esp + i1030_fjzH2]
	mulsd xmm0, [esp + i1030_dxH2H2]
	mulsd xmm1, [esp + i1030_dyH2H2]
	mulsd xmm2, [esp + i1030_dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1030_fixH2]
	addsd xmm1, [esp + i1030_fiyH2]
	addsd xmm2, [esp + i1030_fizH2]
	movlpd [esp + i1030_fjxH2], xmm3
	movlpd [esp + i1030_fjyH2], xmm4
	movlpd [esp + i1030_fjzH2], xmm5
	movlpd [esp + i1030_fixH2], xmm0
	movlpd [esp + i1030_fiyH2], xmm1
	movlpd [esp + i1030_fizH2], xmm2

	mov edi, [ebp + i1030_faction]
		
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + i1030_fjxO]
	addsd xmm1, [esp + i1030_fjyO]
	addsd xmm2, [esp + i1030_fjzO]
	addsd xmm3, [esp + i1030_fjxH1]
	addsd xmm4, [esp + i1030_fjyH1]
	addsd xmm5, [esp + i1030_fjzH1]
	addsd xmm6, [esp + i1030_fjxH2]
	addsd xmm7, [esp + i1030_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + i1030_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
i1030_updateouterdata:
	mov   ecx, [esp + i1030_ii3]
	mov   edi, [ebp + i1030_faction]
	mov   esi, [ebp + i1030_fshift]
	mov   edx, [esp + i1030_is3]

	;# accumulate Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1030_fixO]
	movapd xmm1, [esp + i1030_fiyO] 
	movapd xmm2, [esp + i1030_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1030_fixH1]
	movapd xmm1, [esp + i1030_fiyH1]
	movapd xmm2, [esp + i1030_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1030_fixH2]
	movapd xmm1, [esp + i1030_fiyH2]
	movapd xmm2, [esp + i1030_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i1030_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i1030_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i1030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	        
	;# add earlier value from mem 
	mov   eax, [ebp + i1030_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 	
	
	;# finish if last 
	mov   ecx, [ebp + i1030_nri]
	dec ecx
	jecxz i1030_end
	;# not last, iterate once more!  
	mov [ebp + i1030_nri], ecx
	jmp i1030_outer
i1030_end:
	emms
	mov eax, [esp + i1030_salign]
	add esp, eax
	add esp, 1412
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret







.globl inl1100_sse2
.globl _inl1100_sse2
inl1100_sse2:	
_inl1100_sse2:		
.equiv		i1100_nri,			8
.equiv		i1100_iinr,			12
.equiv		i1100_jindex,		16
.equiv		i1100_jjnr,			20
.equiv		i1100_shift,		24
.equiv		i1100_shiftvec,		28
.equiv		i1100_fshift,		32
.equiv		i1100_gid,			36
.equiv		i1100_pos,			40		
.equiv		i1100_faction,		44
.equiv		i1100_charge,		48
.equiv		i1100_facel,		52 ;# double   
.equiv		i1100_Vc,			60
.equiv		i1100_type,			64
.equiv		i1100_ntype,		68
.equiv		i1100_nbfp,			72	
.equiv		i1100_Vnb,			76	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i1100_ix,	        0
.equiv		i1100_iy,	        16
.equiv		i1100_iz,           32
.equiv		i1100_iq,           48
.equiv		i1100_dx,           64
.equiv		i1100_dy,           80
.equiv		i1100_dz,           96	
.equiv		i1100_c6,           112
.equiv		i1100_c12,          128
.equiv		i1100_six,          144
.equiv		i1100_twelve,       160		 
.equiv		i1100_vctot,        176
.equiv		i1100_vnbtot,       192
.equiv		i1100_fix,          208
.equiv		i1100_fiy,          224
.equiv		i1100_fiz,          240
.equiv		i1100_half,         256
.equiv		i1100_three,        272
.equiv		i1100_is3,          288
.equiv		i1100_ii3,          292
.equiv		i1100_ntia,	        296	
.equiv		i1100_innerjjnr,    300
.equiv		i1100_innerk,       304
.equiv		i1100_salign,       308		
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  312		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1100_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movapd [esp + i1100_half],  xmm0
	movapd [esp + i1100_three], xmm1
	movapd [esp + i1100_six],  xmm2
	movapd [esp + i1100_twelve], xmm3

	;# assume we have at least one i particle - start directly 	
i1100_outer:
	mov   eax, [ebp + i1100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1100_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1100_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i1100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1100_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + i1100_facel]
	shufpd xmm3, xmm3, 0

    mov   edx, [ebp + i1100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i1100_ntype]
    shl   edx, 1
    mov   [esp + i1100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1100_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + i1100_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + i1100_ix], xmm0
	movapd [esp + i1100_iy], xmm1
	movapd [esp + i1100_iz], xmm2

	mov   [esp + i1100_ii3], ebx
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i1100_vctot], xmm4
	movapd [esp + i1100_vnbtot], xmm4
	movapd [esp + i1100_fix], xmm4
	movapd [esp + i1100_fiy], xmm4
	movapd [esp + i1100_fiz], xmm4
	
	mov   eax, [ebp + i1100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1100_pos]
	mov   edi, [ebp + i1100_faction]	
	mov   eax, [ebp + i1100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i1100_innerk], edx    ;# number of innerloop atoms 
	jge   i1100_unroll_loop
	jmp   i1100_checksingle
i1100_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i1100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add dword ptr [esp + i1100_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i1100_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + i1100_iq]
	mulpd xmm3, xmm5		;# qq 
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + i1100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + i1100_nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + i1100_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + i1100_c6], xmm4
	movapd [esp + i1100_c12], xmm6
	
	mov esi, [ebp + i1100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i1100_ix]
	movapd xmm5, [esp + i1100_iy]
	movapd xmm6, [esp + i1100_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i1100_dx], xmm4
	movapd [esp + i1100_dy], xmm5
	movapd [esp + i1100_dz], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i1100_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i1100_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i1100_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i1100_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=rinv 
	
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm3, xmm0	;# xmm3=vcoul 
	mulpd  xmm1, [esp + i1100_c6]
	mulpd  xmm2, [esp + i1100_c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addpd  xmm5, [esp + i1100_vnbtot]
	mulpd  xmm1, [esp + i1100_six]
	mulpd  xmm2, [esp + i1100_twelve]
	subpd  xmm2, xmm1
	addpd  xmm2, xmm3
	mulpd  xmm4, xmm2	;# xmm4=total fscal 
	addpd  xmm3, [esp + i1100_vctot]

	movapd xmm0, [esp + i1100_dx]
	movapd xmm1, [esp + i1100_dy]
	movapd xmm2, [esp + i1100_dz]

	movapd [esp + i1100_vctot], xmm3
	movapd [esp + i1100_vnbtot], xmm5

	mov    edi, [ebp + i1100_faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i1100_fix]
	movapd xmm4, [esp + i1100_fiy]
	movapd xmm5, [esp + i1100_fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + i1100_fix], xmm3
	movapd [esp + i1100_fiy], xmm4
	movapd [esp + i1100_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	;# should we do one more iteration? 
	sub dword ptr [esp + i1100_innerk],  2
	jl    i1100_checksingle
	jmp   i1100_unroll_loop	
i1100_checksingle:
	mov   edx, [esp + i1100_innerk]
	and   edx, 1
	jnz    i1100_dosingle
	jmp    i1100_updateouterdata
i1100_dosingle:
	mov esi, [ebp + i1100_charge]
	mov edi, [ebp + i1100_pos]
	mov ecx, [esp + i1100_innerjjnr]
	mov   eax, [ecx]
	
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]

	movapd xmm5, [esp + i1100_iq]
	mulsd xmm3, xmm5		;# qq 
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	
	mov esi, [ebp + i1100_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + i1100_nbfp]
	shl eax, 1
	mov edi, [esp + i1100_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	
	movapd [esp + i1100_c6], xmm4
	movapd [esp + i1100_c12], xmm6
	
	mov esi, [ebp + i1100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i1100_ix]
	movapd xmm5, [esp + i1100_iy]
	movapd xmm6, [esp + i1100_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i1100_dx], xmm4
	movapd [esp + i1100_dy], xmm5
	movapd [esp + i1100_dz], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i1100_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i1100_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i1100_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i1100_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=rinv 
	
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm3, xmm0	;# xmm3=vcoul 
	mulsd  xmm1, [esp + i1100_c6]
	mulsd  xmm2, [esp + i1100_c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addsd  xmm5, [esp + i1100_vnbtot]
	mulsd  xmm1, [esp + i1100_six]
	mulsd  xmm2, [esp + i1100_twelve]
	subsd  xmm2, xmm1
	addsd  xmm2, xmm3
	mulsd  xmm4, xmm2	;# xmm4=total fscal 
	addsd  xmm3, [esp + i1100_vctot]

	movapd xmm0, [esp + i1100_dx]
	movapd xmm1, [esp + i1100_dy]
	movapd xmm2, [esp + i1100_dz]

	movlpd [esp + i1100_vctot], xmm3
	movlpd [esp + i1100_vnbtot], xmm5

	mov    edi, [ebp + i1100_faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movlpd xmm3, [esp + i1100_fix]
	movlpd xmm4, [esp + i1100_fiy]
	movlpd xmm5, [esp + i1100_fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + i1100_fix], xmm3
	movlpd [esp + i1100_fiy], xmm4
	movlpd [esp + i1100_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	
i1100_updateouterdata:
	mov   ecx, [esp + i1100_ii3]
	mov   edi, [ebp + i1100_faction]
	mov   esi, [ebp + i1100_fshift]
	mov   edx, [esp + i1100_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1100_fix]
	movapd xmm1, [esp + i1100_fiy]
	movapd xmm2, [esp + i1100_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# increment fshift force  
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i1100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i1100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i1100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i1100_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i1100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + i1100_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i1100_nri]
	dec ecx
	jecxz i1100_end
	;# not last, iterate once more!  
	mov [ebp + i1100_nri], ecx
	jmp i1100_outer
i1100_end:
	emms
	mov eax, [esp + i1100_salign]
	add esp, eax
	add esp,  312
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl inl2100_sse2
.globl _inl2100_sse2
inl2100_sse2:	
_inl2100_sse2:	
.equiv		i2100_nri,			8
.equiv		i2100_iinr,			12
.equiv		i2100_jindex,		16
.equiv		i2100_jjnr,			20
.equiv		i2100_shift,		24
.equiv		i2100_shiftvec,		28
.equiv		i2100_fshift,		32
.equiv		i2100_gid,			36
.equiv		i2100_pos,			40		
.equiv		i2100_faction,		44
.equiv		i2100_charge,		48
.equiv		i2100_facel,		52 ;# double  
.equiv		i2100_Vc,			60			
.equiv		i2100_argkrf,		64 ;# double 	
.equiv		i2100_argcrf,		72 ;# double 	
.equiv		i2100_type,			80
.equiv		i2100_ntype,		84
.equiv		i2100_nbfp,			88	
.equiv		i2100_Vnb,			92	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i2100_ix,	        0
.equiv		i2100_iy,	        16
.equiv		i2100_iz,           32
.equiv		i2100_iq,           48
.equiv		i2100_dx,           64
.equiv		i2100_dy,           80
.equiv		i2100_dz,           96	
.equiv		i2100_c6,           112
.equiv		i2100_c12,          128
.equiv		i2100_six,          144
.equiv		i2100_twelve,       160		 
.equiv		i2100_vctot,        176
.equiv		i2100_vnbtot,       192
.equiv		i2100_fix,          208
.equiv		i2100_fiy,          224
.equiv		i2100_fiz,          240
.equiv		i2100_half,         256
.equiv		i2100_three,        272
.equiv		i2100_two,          288
.equiv		i2100_krf,			304	 
.equiv		i2100_crf,			320	 
.equiv		i2100_is3,          336
.equiv		i2100_ii3,          340
.equiv		i2100_ntia,	        344
.equiv		i2100_innerjjnr,    348
.equiv		i2100_innerk,       352
.equiv		i2100_salign,       356
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  360		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2100_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + i2100_argkrf]
	movsd xmm6, [ebp + i2100_argcrf]
	
	movapd [esp + i2100_half],  xmm0
	movapd [esp + i2100_three], xmm1
	movapd [esp + i2100_six],  xmm2
	movapd [esp + i2100_twelve], xmm3
	movapd [esp + i2100_two], xmm4
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + i2100_krf], xmm5
	movapd [esp + i2100_crf], xmm6

	;# assume we have at least one i particle - start directly 	
.i2100_outer:
	mov   eax, [ebp + i2100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2100_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2100_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i2100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2100_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + i2100_facel]
	shufpd xmm3, xmm3, 0

    mov   edx, [ebp + i2100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i2100_ntype]
    shl   edx, 1
    mov   [esp + i2100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2100_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + i2100_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + i2100_ix], xmm0
	movapd [esp + i2100_iy], xmm1
	movapd [esp + i2100_iz], xmm2

	mov   [esp + i2100_ii3], ebx
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i2100_vctot], xmm4
	movapd [esp + i2100_vnbtot], xmm4
	movapd [esp + i2100_fix], xmm4
	movapd [esp + i2100_fiy], xmm4
	movapd [esp + i2100_fiz], xmm4
	
	mov   eax, [ebp + i2100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2100_pos]
	mov   edi, [ebp + i2100_faction]	
	mov   eax, [ebp + i2100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i2100_innerk], edx    ;# number of innerloop atoms 
	jge   .i2100_unroll_loop
	jmp   .i2100_checksingle
.i2100_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + i2100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add dword ptr [esp + i2100_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i2100_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + i2100_iq]
	mulpd xmm3, xmm5		;# qq 
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + i2100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + i2100_nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + i2100_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movd  ebx, mm1
	movapd [esp + i2100_c6], xmm4
	movapd [esp + i2100_c12], xmm6
	
	mov esi, [ebp + i2100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i2100_ix]
	movapd xmm5, [esp + i2100_iy]
	movapd xmm6, [esp + i2100_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i2100_dx], xmm4
	movapd [esp + i2100_dy], xmm5
	movapd [esp + i2100_dz], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	movapd xmm7, [esp + i2100_krf]	
	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i2100_three]
	mulpd xmm7, xmm4	;# krsq 
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i2100_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i2100_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i2100_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=rinv 
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm6, xmm0
	addpd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movapd xmm1, xmm4
	subpd  xmm6, [esp + i2100_crf]
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	mulpd  xmm7, [esp + i2100_two]
	mulpd  xmm1, [esp + i2100_c6]
	mulpd  xmm2, [esp + i2100_c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addpd  xmm5, [esp + i2100_vnbtot]
	mulpd  xmm1, [esp + i2100_six]
	mulpd  xmm2, [esp + i2100_twelve]
	subpd  xmm2, xmm1
	subpd  xmm0, xmm7
	mulpd  xmm3, xmm0
	addpd  xmm2, xmm3
	mulpd  xmm4, xmm2	;# xmm4=total fscal 
	addpd  xmm6, [esp + i2100_vctot]

	movapd xmm0, [esp + i2100_dx]
	movapd xmm1, [esp + i2100_dy]
	movapd xmm2, [esp + i2100_dz]

	movapd [esp + i2100_vctot], xmm6
	movapd [esp + i2100_vnbtot], xmm5

	mov    edi, [ebp + i2100_faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i2100_fix]
	movapd xmm4, [esp + i2100_fiy]
	movapd xmm5, [esp + i2100_fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + i2100_fix], xmm3
	movapd [esp + i2100_fiy], xmm4
	movapd [esp + i2100_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i2100_innerk],  2
	jl    .i2100_checksingle
	jmp   .i2100_unroll_loop

.i2100_checksingle:				
	mov   edx, [esp + i2100_innerk]
	and   edx, 1
	jnz    .i2100_dosingle
	jmp    .i2100_updateouterdata
.i2100_dosingle:			
	mov esi, [ebp + i2100_charge]
	mov edi, [ebp + i2100_pos]
	mov   ecx, [esp + i2100_innerjjnr]
	xorpd xmm3, xmm3
	mov   eax, [ecx]

	movlpd xmm3, [esi + eax*8]
	movapd xmm5, [esp + i2100_iq]
	mulpd xmm3, xmm5		;# qq 
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	mov esi, [ebp + i2100_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + i2100_nbfp]
	shl eax, 1
	mov edi, [esp + i2100_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movapd [esp + i2100_c6], xmm4
	movapd [esp + i2100_c12], xmm6
	
	mov esi, [ebp + i2100_pos]       ;# base of pos[] 

	lea eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i2100_ix]
	movapd xmm5, [esp + i2100_iy]
	movapd xmm6, [esp + i2100_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i2100_dx], xmm4
	movapd [esp + i2100_dy], xmm5
	movapd [esp + i2100_dz], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	movapd xmm7, [esp + i2100_krf]	
	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i2100_three]
	mulsd xmm7, xmm4	;# krsq 
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i2100_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i2100_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i2100_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=rinv 
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm6, xmm0
	addsd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movapd xmm1, xmm4
	subsd  xmm6, [esp + i2100_crf]
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	mulsd  xmm7, [esp + i2100_two]
	mulsd  xmm1, [esp + i2100_c6]
	mulsd  xmm2, [esp + i2100_c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addsd  xmm5, [esp + i2100_vnbtot]
	mulsd  xmm1, [esp + i2100_six]
	mulsd  xmm2, [esp + i2100_twelve]
	subsd  xmm2, xmm1
	subsd  xmm0, xmm7
	mulsd  xmm3, xmm0
	addsd  xmm2, xmm3
	mulsd  xmm4, xmm2	;# xmm4=total fscal 
	addsd  xmm6, [esp + i2100_vctot]

	movlpd xmm0, [esp + i2100_dx]
	movlpd xmm1, [esp + i2100_dy]
	movlpd xmm2, [esp + i2100_dz]

	movlpd [esp + i2100_vctot], xmm6
	movlpd [esp + i2100_vnbtot], xmm5

	mov    edi, [ebp + i2100_faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movlpd xmm3, [esp + i2100_fix]
	movlpd xmm4, [esp + i2100_fiy]
	movlpd xmm5, [esp + i2100_fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + i2100_fix], xmm3
	movlpd [esp + i2100_fiy], xmm4
	movlpd [esp + i2100_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	
.i2100_updateouterdata:
	mov   ecx, [esp + i2100_ii3]
	mov   edi, [ebp + i2100_faction]
	mov   esi, [ebp + i2100_fshift]
	mov   edx, [esp + i2100_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2100_fix]
	movapd xmm1, [esp + i2100_fiy]
	movapd xmm2, [esp + i2100_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addpd  xmm0, xmm3
	addpd  xmm1, xmm4
	addpd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# increment fshift force  
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i2100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i2100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i2100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i2100_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i2100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i2100_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2100_nri]
	dec ecx
	jecxz .i2100_end
	;# not last, iterate once more!  
	mov [ebp + i2100_nri], ecx
	jmp .i2100_outer
.i2100_end:
	emms
	mov eax, [esp + i2100_salign]
	add esp, eax
	add esp,  360
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl inl2000_sse2
.globl _inl2000_sse2
inl2000_sse2:	
_inl2000_sse2:	
.equiv		i2000_nri,			8
.equiv		i2000_iinr,			12
.equiv		i2000_jindex,		16
.equiv		i2000_jjnr,			20
.equiv		i2000_shift,		24
.equiv		i2000_shiftvec,		28
.equiv		i2000_fshift,		32
.equiv		i2000_gid,			36
.equiv		i2000_pos,			40		
.equiv		i2000_faction,		44
.equiv		i2000_charge,		48
.equiv		i2000_facel,		52 ;# double  
.equiv		i2000_Vc,			60	
.equiv		i2000_argkrf,		64 ;# double  	
.equiv		i2000_argcrf,		72 ;# double  
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i2000_ix,	        0
.equiv		i2000_iy,	        16
.equiv		i2000_iz,           32
.equiv		i2000_iq,           48
.equiv		i2000_dx,           64
.equiv		i2000_dy,           80
.equiv		i2000_dz,           96	
.equiv		i2000_vctot,        112
.equiv		i2000_fix,          128
.equiv		i2000_fiy,          144
.equiv		i2000_fiz,          160
.equiv		i2000_half,         176
.equiv		i2000_three,        192
.equiv		i2000_two,          208
.equiv		i2000_krf,	        224	 
.equiv		i2000_crf,	        240	 
.equiv		i2000_is3,          256
.equiv		i2000_ii3,          260
.equiv		i2000_innerjjnr,    264
.equiv		i2000_innerk,       268
.equiv		i2000_salign,		272								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  276		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2000_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + i2000_argkrf]
	movsd xmm6, [ebp + i2000_argcrf]
	
	movapd [esp + i2000_half],  xmm0
	movapd [esp + i2000_three], xmm1
	movapd [esp + i2000_two], xmm4
	shufpd xmm5, xmm5, 0
	movapd [esp + i2000_krf], xmm5
	shufpd xmm6, xmm6, 0
	movapd [esp + i2000_crf], xmm6

	;# assume we have at least one i particle - start directly 	
.i2000_outer:
	mov   eax, [ebp + i2000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2000_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2000_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i2000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2000_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + i2000_facel]
	shufpd xmm3, xmm3, 0
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2000_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + i2000_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + i2000_ix], xmm0
	movapd [esp + i2000_iy], xmm1
	movapd [esp + i2000_iz], xmm2

	mov   [esp + i2000_ii3], ebx
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i2000_vctot], xmm4
	movapd [esp + i2000_fix], xmm4
	movapd [esp + i2000_fiy], xmm4
	movapd [esp + i2000_fiz], xmm4
	
	mov   eax, [ebp + i2000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2000_pos]
	mov   edi, [ebp + i2000_faction]	
	mov   eax, [ebp + i2000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i2000_innerk], edx    ;# number of innerloop atoms 
	jge   .i2000_unroll_loop
	jmp   .i2000_checksingle
.i2000_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i2000_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add dword ptr [esp + i2000_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i2000_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + i2000_iq]
	mulpd xmm3, xmm5		;# qq 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mov esi, [ebp + i2000_pos]       ;# base of pos[] 

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i2000_ix]
	movapd xmm5, [esp + i2000_iy]
	movapd xmm6, [esp + i2000_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i2000_dx], xmm4
	movapd [esp + i2000_dy], xmm5
	movapd [esp + i2000_dz], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	movapd xmm7, [esp + i2000_krf]	
	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i2000_three]
	mulpd xmm7, xmm4	;# krsq 
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i2000_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i2000_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i2000_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=rinv 
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm6, xmm0
	addpd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movapd xmm1, xmm4
	subpd  xmm6, [esp + i2000_crf]
	mulpd  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	
	mulpd  xmm7, [esp + i2000_two]

	subpd  xmm0, xmm7
	mulpd  xmm3, xmm0	
	mulpd  xmm4, xmm3	;# xmm4=total fscal 
	addpd  xmm6, [esp + i2000_vctot]

	movapd xmm0, [esp + i2000_dx]
	movapd xmm1, [esp + i2000_dy]
	movapd xmm2, [esp + i2000_dz]

	movapd [esp + i2000_vctot], xmm6

	mov    edi, [ebp + i2000_faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i2000_fix]
	movapd xmm4, [esp + i2000_fiy]
	movapd xmm5, [esp + i2000_fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + i2000_fix], xmm3
	movapd [esp + i2000_fiy], xmm4
	movapd [esp + i2000_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5	

	;# should we do one more iteration? 
	sub dword ptr [esp + i2000_innerk],  2
	jl    .i2000_checksingle
	jmp   .i2000_unroll_loop

.i2000_checksingle:				
	mov   edx, [esp + i2000_innerk]
	and   edx, 1
	jnz    .i2000_dosingle
	jmp    .i2000_updateouterdata
.i2000_dosingle:			
	mov esi, [ebp + i2000_charge]
	mov edi, [ebp + i2000_pos]
	mov   ecx, [esp + i2000_innerjjnr]
	
	xorpd xmm3, xmm3
	mov   eax, [ecx]

	movlpd xmm3, [esi + eax*8]
	movapd xmm5, [esp + i2000_iq]
	mulpd xmm3, xmm5		;# qq 
	
	mov esi, [ebp + i2000_pos]       ;# base of pos[] 

	lea eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i2000_ix]
	movapd xmm5, [esp + i2000_iy]
	movapd xmm6, [esp + i2000_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i2000_dx], xmm4
	movapd [esp + i2000_dy], xmm5
	movapd [esp + i2000_dz], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	movapd xmm7, [esp + i2000_krf]	
	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i2000_three]
	mulsd xmm7, xmm4	;# krsq 
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i2000_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i2000_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i2000_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=rinv 
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm6, xmm0
	addsd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movapd xmm1, xmm4
	subsd  xmm6, [esp + i2000_crf]
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	mulsd  xmm7, [esp + i2000_two]

	subsd  xmm0, xmm7
	mulsd  xmm3, xmm0
	mulsd  xmm4, xmm3	;# xmm4=total fscal 
	addsd  xmm6, [esp + i2000_vctot]

	movlpd xmm0, [esp + i2000_dx]
	movlpd xmm1, [esp + i2000_dy]
	movlpd xmm2, [esp + i2000_dz]

	movlpd [esp + i2000_vctot], xmm6

	mov    edi, [ebp + i2000_faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movlpd xmm3, [esp + i2000_fix]
	movlpd xmm4, [esp + i2000_fiy]
	movlpd xmm5, [esp + i2000_fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + i2000_fix], xmm3
	movlpd [esp + i2000_fiy], xmm4
	movlpd [esp + i2000_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i2000_updateouterdata:
	mov   ecx, [esp + i2000_ii3]
	mov   edi, [ebp + i2000_faction]
	mov   esi, [ebp + i2000_fshift]
	mov   edx, [esp + i2000_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2000_fix]
	movapd xmm1, [esp + i2000_fiy]
	movapd xmm2, [esp + i2000_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# increment fshift force  
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i2000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i2000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i2000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + i2000_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2000_nri]
	dec ecx
	jecxz .i2000_end
	;# not last, iterate once more!  
	mov [ebp + i2000_nri], ecx
	jmp .i2000_outer
.i2000_end:
	emms
	mov eax, [esp + i2000_salign]
	add esp, eax
	add esp,  276
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl inl1120_sse2
.globl _inl1120_sse2
inl1120_sse2:	
_inl1120_sse2:	
.equiv		i1120_nri,			8
.equiv		i1120_iinr,			12
.equiv		i1120_jindex,		16
.equiv		i1120_jjnr,			20
.equiv		i1120_shift,		24
.equiv		i1120_shiftvec,		28
.equiv		i1120_fshift,		32
.equiv		i1120_gid,			36
.equiv		i1120_pos,			40		
.equiv		i1120_faction,		44
.equiv		i1120_charge,		48
.equiv		i1120_facel,		52 ;# double  
.equiv		i1120_Vc,			60			
.equiv		i1120_type,			64
.equiv		i1120_ntype,		68
.equiv		i1120_nbfp,			72	
.equiv		i1120_Vnb,			76	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i1120_ixO,	        0
.equiv		i1120_iyO,	        16
.equiv		i1120_izO,          32
.equiv		i1120_ixH1,	        48
.equiv		i1120_iyH1,	        64
.equiv		i1120_izH1,         80
.equiv		i1120_ixH2,	        96
.equiv		i1120_iyH2,	        112
.equiv		i1120_izH2,         128
.equiv		i1120_iqO,          144 
.equiv		i1120_iqH,          160 
.equiv		i1120_dxO,          176
.equiv		i1120_dyO,          192
.equiv		i1120_dzO,          208	
.equiv		i1120_dxH1,         224
.equiv		i1120_dyH1,         240
.equiv		i1120_dzH1,         256	
.equiv		i1120_dxH2,         272
.equiv		i1120_dyH2,         288
.equiv		i1120_dzH2,         304	
.equiv		i1120_qqO,          320
.equiv		i1120_qqH,          336
.equiv		i1120_c6,           352
.equiv		i1120_c12,          368
.equiv		i1120_six,          384
.equiv		i1120_twelve,       400		 
.equiv		i1120_vctot,        416
.equiv		i1120_vnbtot,       432
.equiv		i1120_fixO,         448
.equiv		i1120_fiyO,         464
.equiv		i1120_fizO,         480
.equiv		i1120_fixH1,        496
.equiv		i1120_fiyH1,        512
.equiv		i1120_fizH1,        528
.equiv		i1120_fixH2,        544
.equiv		i1120_fiyH2,        560
.equiv		i1120_fizH2,        576
.equiv		i1120_fjx,	        592
.equiv		i1120_fjy,          608
.equiv		i1120_fjz,          624
.equiv		i1120_half,         640
.equiv		i1120_three,        656
.equiv		i1120_is3,          672
.equiv		i1120_ii3,          676
.equiv		i1120_ntia,	        680	
.equiv		i1120_innerjjnr,    684
.equiv		i1120_innerk,       688
.equiv		i1120_salign,       692
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 696		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1120_salign], eax
	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movapd [esp + i1120_half],  xmm0
	movapd [esp + i1120_three], xmm1
	movapd [esp + i1120_six],  xmm2
	movapd [esp + i1120_twelve], xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i1120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1120_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + i1120_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + i1120_iqO], xmm3
	movapd [esp + i1120_iqH], xmm4
	
	mov   edx, [ebp + i1120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + i1120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + i1120_ntia], ecx		
i1120_outer:
	mov   eax, [ebp + i1120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1120_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1120_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i1120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1120_pos]    ;# eax = base of pos[]  
	mov   [esp + i1120_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i1120_ixO], xmm3
	movapd [esp + i1120_iyO], xmm4
	movapd [esp + i1120_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i1120_ixH1], xmm0
	movapd [esp + i1120_iyH1], xmm1
	movapd [esp + i1120_izH1], xmm2
	movapd [esp + i1120_ixH2], xmm3
	movapd [esp + i1120_iyH2], xmm4
	movapd [esp + i1120_izH2], xmm5
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i1120_vctot], xmm4
	movapd [esp + i1120_vnbtot], xmm4
	movapd [esp + i1120_fixO], xmm4
	movapd [esp + i1120_fiyO], xmm4
	movapd [esp + i1120_fizO], xmm4
	movapd [esp + i1120_fixH1], xmm4
	movapd [esp + i1120_fiyH1], xmm4
	movapd [esp + i1120_fizH1], xmm4
	movapd [esp + i1120_fixH2], xmm4
	movapd [esp + i1120_fiyH2], xmm4
	movapd [esp + i1120_fizH2], xmm4
	
	mov   eax, [ebp + i1120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1120_pos]
	mov   edi, [ebp + i1120_faction]	
	mov   eax, [ebp + i1120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i1120_innerk], edx    ;# number of innerloop atoms 
	jge   i1120_unroll_loop
	jmp   i1120_checksingle
i1120_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i1120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add dword ptr [esp + i1120_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i1120_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + i1120_iqO]
	mulpd  xmm4, [esp + i1120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx

	movapd  [esp + i1120_qqO], xmm3
	movapd  [esp + i1120_qqH], xmm4
	
	mov esi, [ebp + i1120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + i1120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + i1120_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + i1120_c6], xmm4
	movapd [esp + i1120_c12], xmm6
	
	mov esi, [ebp + i1120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i1120_ixO]
	movapd xmm5, [esp + i1120_iyO]
	movapd xmm6, [esp + i1120_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i1120_dxO], xmm4
	movapd [esp + i1120_dyO], xmm5
	movapd [esp + i1120_dzO], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i1120_ixH1]
	movapd xmm5, [esp + i1120_iyH1]
	movapd xmm6, [esp + i1120_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i1120_dxH1], xmm4
	movapd [esp + i1120_dyH1], xmm5
	movapd [esp + i1120_dzH1], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i1120_ixH2]
	movapd xmm4, [esp + i1120_iyH2]
	movapd xmm5, [esp + i1120_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# store dr 
	movapd [esp + i1120_dxH2], xmm3
	movapd [esp + i1120_dyH2], xmm4
	movapd [esp + i1120_dzH2], xmm5
	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i1120_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1120_three]
	subpd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i1120_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i1120_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1120_three]
	subpd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i1120_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i1120_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1120_three]
	subpd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i1120_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm7, [esp + i1120_qqO]	;# xmm7=vcoul 
	
	mulpd  xmm1, [esp + i1120_c6]
	mulpd  xmm2, [esp + i1120_c12]
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addpd  xmm3, [esp + i1120_vnbtot]
	mulpd  xmm1, [esp + i1120_six]
	mulpd  xmm2, [esp + i1120_twelve]
	subpd  xmm2, xmm1
	addpd  xmm2, xmm7	
	mulpd  xmm4, xmm2	;# total fsO in xmm4 

	addpd  xmm7, [esp + i1120_vctot]
	
	movapd [esp + i1120_vnbtot], xmm3
	movapd [esp + i1120_vctot], xmm7

	movapd xmm0, [esp + i1120_dxO]
	movapd xmm1, [esp + i1120_dyO]
	movapd xmm2, [esp + i1120_dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update O forces 
	movapd xmm3, [esp + i1120_fixO]
	movapd xmm4, [esp + i1120_fiyO]
	movapd xmm7, [esp + i1120_fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i1120_fixO], xmm3
	movapd [esp + i1120_fiyO], xmm4
	movapd [esp + i1120_fizO], xmm7
	;# update j forces with water O 
	movapd [esp + i1120_fjx], xmm0
	movapd [esp + i1120_fjy], xmm1
	movapd [esp + i1120_fjz], xmm2

	;# H1 interactions 
	movapd  xmm4, xmm6	
	mulpd   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	mulpd  xmm6, [esp + i1120_qqH]	;# xmm6=vcoul 
	mulpd  xmm4, xmm6		;# total fsH1 in xmm4 
	
	addpd  xmm6, [esp + i1120_vctot]

	movapd xmm0, [esp + i1120_dxH1]
	movapd xmm1, [esp + i1120_dyH1]
	movapd xmm2, [esp + i1120_dzH1]
	movapd [esp + i1120_vctot], xmm6
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i1120_fixH1]
	movapd xmm4, [esp + i1120_fiyH1]
	movapd xmm7, [esp + i1120_fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i1120_fixH1], xmm3
	movapd [esp + i1120_fiyH1], xmm4
	movapd [esp + i1120_fizH1], xmm7
	;# update j forces with water H1 
	addpd  xmm0, [esp + i1120_fjx]
	addpd  xmm1, [esp + i1120_fjy]
	addpd  xmm2, [esp + i1120_fjz]
	movapd [esp + i1120_fjx], xmm0
	movapd [esp + i1120_fjy], xmm1
	movapd [esp + i1120_fjz], xmm2

	;# H2 interactions 
	movapd  xmm4, xmm5	
	mulpd   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	mulpd  xmm5, [esp + i1120_qqH]	;# xmm5=vcoul 
	mulpd  xmm4, xmm5		;# total fsH1 in xmm4 
	
	addpd  xmm5, [esp + i1120_vctot]

	movapd xmm0, [esp + i1120_dxH2]
	movapd xmm1, [esp + i1120_dyH2]
	movapd xmm2, [esp + i1120_dzH2]
	movapd [esp + i1120_vctot], xmm5
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H2 forces 
	movapd xmm3, [esp + i1120_fixH2]
	movapd xmm4, [esp + i1120_fiyH2]
	movapd xmm7, [esp + i1120_fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i1120_fixH2], xmm3
	movapd [esp + i1120_fiyH2], xmm4
	movapd [esp + i1120_fizH2], xmm7

	mov edi, [ebp + i1120_faction]
	;# update j forces 
	addpd  xmm0, [esp + i1120_fjx]
	addpd  xmm1, [esp + i1120_fjy]
	addpd  xmm2, [esp + i1120_fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1120_innerk],  2
	jl    i1120_checksingle
	jmp   i1120_unroll_loop
i1120_checksingle:	
	mov   edx, [esp + i1120_innerk]
	and   edx, 1
	jnz   i1120_dosingle
	jmp   i1120_updateouterdata
i1120_dosingle:
	mov   edx, [esp + i1120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i1120_innerjjnr],  4	

	mov esi, [ebp + i1120_charge]    ;# base of charge[] 

	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + i1120_iqO]
	mulpd  xmm4, [esp + i1120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 

	movapd  [esp + i1120_qqO], xmm3
	movapd  [esp + i1120_qqH], xmm4
	
	mov esi, [ebp + i1120_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + i1120_nbfp]
	shl eax, 1	
	mov edi, [esp + i1120_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + i1120_c6], xmm4
	movapd [esp + i1120_c12], xmm6
	
	mov esi, [ebp + i1120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i1120_ixO]
	movapd xmm5, [esp + i1120_iyO]
	movapd xmm6, [esp + i1120_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i1120_dxO], xmm4
	movapd [esp + i1120_dyO], xmm5
	movapd [esp + i1120_dzO], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i1120_ixH1]
	movapd xmm5, [esp + i1120_iyH1]
	movapd xmm6, [esp + i1120_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i1120_dxH1], xmm4
	movapd [esp + i1120_dyH1], xmm5
	movapd [esp + i1120_dzH1], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i1120_ixH2]
	movapd xmm4, [esp + i1120_iyH2]
	movapd xmm5, [esp + i1120_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# store dr 
	movapd [esp + i1120_dxH2], xmm3
	movapd [esp + i1120_dyH2], xmm4
	movapd [esp + i1120_dzH2], xmm5
	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i1120_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1120_three]
	subsd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i1120_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i1120_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1120_three]
	subsd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i1120_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i1120_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i1120_three]
	subsd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i1120_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm7, [esp + i1120_qqO]	;# xmm7=vcoul 
	
	mulsd  xmm1, [esp + i1120_c6]
	mulsd  xmm2, [esp + i1120_c12]
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addsd  xmm3, [esp + i1120_vnbtot]
	mulsd  xmm1, [esp + i1120_six]
	mulsd  xmm2, [esp + i1120_twelve]
	subsd  xmm2, xmm1
	addsd  xmm2, xmm7	
	mulsd  xmm4, xmm2	;# total fsO in xmm4 

	addsd  xmm7, [esp + i1120_vctot]
	
	movsd [esp + i1120_vnbtot], xmm3
	movsd [esp + i1120_vctot], xmm7

	movapd xmm0, [esp + i1120_dxO]
	movapd xmm1, [esp + i1120_dyO]
	movapd xmm2, [esp + i1120_dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update O forces 
	movapd xmm3, [esp + i1120_fixO]
	movapd xmm4, [esp + i1120_fiyO]
	movapd xmm7, [esp + i1120_fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movsd [esp + i1120_fixO], xmm3
	movsd [esp + i1120_fiyO], xmm4
	movsd [esp + i1120_fizO], xmm7
	;# update j forces with water O 
	movsd [esp + i1120_fjx], xmm0
	movsd [esp + i1120_fjy], xmm1
	movsd [esp + i1120_fjz], xmm2

	;# H1 interactions 
	movapd  xmm4, xmm6	
	mulsd   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	mulsd  xmm6, [esp + i1120_qqH]	;# xmm6=vcoul 
	mulsd  xmm4, xmm6		;# total fsH1 in xmm4 
	
	addsd  xmm6, [esp + i1120_vctot]

	movapd xmm0, [esp + i1120_dxH1]
	movapd xmm1, [esp + i1120_dyH1]
	movapd xmm2, [esp + i1120_dzH1]
	movsd [esp + i1120_vctot], xmm6
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i1120_fixH1]
	movapd xmm4, [esp + i1120_fiyH1]
	movapd xmm7, [esp + i1120_fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movsd [esp + i1120_fixH1], xmm3
	movsd [esp + i1120_fiyH1], xmm4
	movsd [esp + i1120_fizH1], xmm7
	;# update j forces with water H1 
	addsd  xmm0, [esp + i1120_fjx]
	addsd  xmm1, [esp + i1120_fjy]
	addsd  xmm2, [esp + i1120_fjz]
	movsd [esp + i1120_fjx], xmm0
	movsd [esp + i1120_fjy], xmm1
	movsd [esp + i1120_fjz], xmm2

	;# H2 interactions 
	movapd  xmm4, xmm5	
	mulsd   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	mulsd  xmm5, [esp + i1120_qqH]	;# xmm5=vcoul 
	mulsd  xmm4, xmm5		;# total fsH1 in xmm4 
	
	addsd  xmm5, [esp + i1120_vctot]

	movapd xmm0, [esp + i1120_dxH2]
	movapd xmm1, [esp + i1120_dyH2]
	movapd xmm2, [esp + i1120_dzH2]
	movsd [esp + i1120_vctot], xmm5
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H2 forces 
	movapd xmm3, [esp + i1120_fixH2]
	movapd xmm4, [esp + i1120_fiyH2]
	movapd xmm7, [esp + i1120_fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movsd [esp + i1120_fixH2], xmm3
	movsd [esp + i1120_fiyH2], xmm4
	movsd [esp + i1120_fizH2], xmm7

	mov edi, [ebp + i1120_faction]
	;# update j forces 
	addsd  xmm0, [esp + i1120_fjx]
	addsd  xmm1, [esp + i1120_fjy]
	addsd  xmm2, [esp + i1120_fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

i1120_updateouterdata:
	mov   ecx, [esp + i1120_ii3]
	mov   edi, [ebp + i1120_faction]
	mov   esi, [ebp + i1120_fshift]
	mov   edx, [esp + i1120_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1120_fixO]
	movapd xmm1, [esp + i1120_fiyO]
	movapd xmm2, [esp + i1120_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6,xmm1 

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1120_fixH1]
	movapd xmm1, [esp + i1120_fiyH1]
	movapd xmm2, [esp + i1120_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1120_fixH2]
	movapd xmm1, [esp + i1120_fiyH2]
	movapd xmm2, [esp + i1120_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i1120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i1120_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i1120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + i1120_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i1120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i1120_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i1120_nri]
	dec ecx
	jecxz i1120_end
	;# not last, iterate once more!  
	mov [ebp + i1120_nri], ecx
	jmp i1120_outer
i1120_end:
	emms
	mov eax, [esp + i1120_salign]
	add esp, eax
	add esp, 696
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl inl1130_sse2
.globl _inl1130_sse2
inl1130_sse2:	
_inl1130_sse2:	
.equiv		i1130_nri,			8
.equiv		i1130_iinr,			12
.equiv		i1130_jindex,		16
.equiv		i1130_jjnr,			20
.equiv		i1130_shift,		24
.equiv		i1130_shiftvec,		28
.equiv		i1130_fshift,		32
.equiv		i1130_gid,			36
.equiv		i1130_pos,			40		
.equiv		i1130_faction,		44
.equiv		i1130_charge,		48
.equiv		i1130_facel,		52 ;# double  
.equiv		i1130_Vc,			60			
.equiv		i1130_type,			64
.equiv		i1130_ntype,		68
.equiv		i1130_nbfp,			72
.equiv		i1130_Vnb,			76
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i1130_ixO,			0
.equiv		i1130_iyO,			16
.equiv		i1130_izO,			32
.equiv		i1130_ixH1,			48
.equiv		i1130_iyH1,			64
.equiv		i1130_izH1,			80
.equiv		i1130_ixH2,			96
.equiv		i1130_iyH2,			112
.equiv		i1130_izH2,			128
.equiv		i1130_jxO,			144
.equiv		i1130_jyO,			160
.equiv		i1130_jzO,			176
.equiv		i1130_jxH1,			192
.equiv		i1130_jyH1,			208
.equiv		i1130_jzH1,			224
.equiv		i1130_jxH2,			240
.equiv		i1130_jyH2,			256
.equiv		i1130_jzH2,			272
.equiv		i1130_dxOO,			288
.equiv		i1130_dyOO,			304
.equiv		i1130_dzOO,			320	
.equiv		i1130_dxOH1,		336
.equiv		i1130_dyOH1,		352
.equiv		i1130_dzOH1,		368	
.equiv		i1130_dxOH2,		384
.equiv		i1130_dyOH2,		400
.equiv		i1130_dzOH2,		416	
.equiv		i1130_dxH1O,		432
.equiv		i1130_dyH1O,		448
.equiv		i1130_dzH1O,		464	
.equiv		i1130_dxH1H1,		480
.equiv		i1130_dyH1H1,		496
.equiv		i1130_dzH1H1,		512	
.equiv		i1130_dxH1H2,		528
.equiv		i1130_dyH1H2,		544
.equiv		i1130_dzH1H2,		560	
.equiv		i1130_dxH2O,		576
.equiv		i1130_dyH2O,		592
.equiv		i1130_dzH2O,		608	
.equiv		i1130_dxH2H1,		624
.equiv		i1130_dyH2H1,		640
.equiv		i1130_dzH2H1,		656	
.equiv		i1130_dxH2H2,		672
.equiv		i1130_dyH2H2,		688
.equiv		i1130_dzH2H2,		704
.equiv		i1130_qqOO,			720
.equiv		i1130_qqOH,			736
.equiv		i1130_qqHH,			752
.equiv		i1130_c6,			768
.equiv		i1130_c12,			784
.equiv		i1130_six,			800
.equiv		i1130_twelve,		816		 
.equiv		i1130_vctot,		832
.equiv		i1130_vnbtot,		848
.equiv		i1130_fixO,			864
.equiv		i1130_fiyO,			880
.equiv		i1130_fizO,			896
.equiv		i1130_fixH1,		912
.equiv		i1130_fiyH1,		928
.equiv		i1130_fizH1,		944
.equiv		i1130_fixH2,		960
.equiv		i1130_fiyH2,		976
.equiv		i1130_fizH2,		992
.equiv		i1130_fjxO,			1008
.equiv		i1130_fjyO,			1024
.equiv		i1130_fjzO,			1040
.equiv		i1130_fjxH1,		1056
.equiv		i1130_fjyH1,		1072
.equiv		i1130_fjzH1,		1088
.equiv		i1130_fjxH2,		1104
.equiv		i1130_fjyH2,		1120
.equiv		i1130_fjzH2,		1136
.equiv		i1130_half,			1152
.equiv		i1130_three,		1168
.equiv		i1130_rsqOO,		1184
.equiv		i1130_rsqOH1,		1200
.equiv		i1130_rsqOH2,		1216
.equiv		i1130_rsqH1O,		1232
.equiv		i1130_rsqH1H1,		1248
.equiv		i1130_rsqH1H2,		1264
.equiv		i1130_rsqH2O,		1280
.equiv		i1130_rsqH2H1,		1296
.equiv		i1130_rsqH2H2,		1312
.equiv		i1130_rinvOO,		1328
.equiv		i1130_rinvOH1,		1344
.equiv		i1130_rinvOH2,		1360
.equiv		i1130_rinvH1O,		1376
.equiv		i1130_rinvH1H1,		1392
.equiv		i1130_rinvH1H2,		1408
.equiv		i1130_rinvH2O,		1424
.equiv		i1130_rinvH2H1,		1440
.equiv		i1130_rinvH2H2,		1456
.equiv		i1130_is3,			1472
.equiv		i1130_ii3,			1476
.equiv		i1130_innerjjnr,	1480
.equiv		i1130_innerk,		1484
.equiv		i1130_salign,		1488
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1492		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1130_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movapd [esp + i1130_half],  xmm0
	movapd [esp + i1130_three], xmm1
	movapd [esp + i1130_six],  xmm2
	movapd [esp + i1130_twelve], xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i1130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1130_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + i1130_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i1130_qqOO], xmm3
	movapd [esp + i1130_qqOH], xmm4
	movapd [esp + i1130_qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + i1130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + i1130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + i1130_nbfp]
	movupd xmm0, [eax + edx*8]
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0	
	movapd [esp + i1130_c6], xmm0
	movapd [esp + i1130_c12], xmm1

i1130_outer:
	mov   eax, [ebp + i1130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1130_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1130_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i1130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1130_pos]    ;# eax = base of pos[]  
	mov   [esp + i1130_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i1130_ixO], xmm3
	movapd [esp + i1130_iyO], xmm4
	movapd [esp + i1130_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i1130_ixH1], xmm0
	movapd [esp + i1130_iyH1], xmm1
	movapd [esp + i1130_izH1], xmm2
	movapd [esp + i1130_ixH2], xmm3
	movapd [esp + i1130_iyH2], xmm4
	movapd [esp + i1130_izH2], xmm5

	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i1130_vctot], xmm4
	movapd [esp + i1130_vnbtot], xmm4
	movapd [esp + i1130_fixO], xmm4
	movapd [esp + i1130_fiyO], xmm4
	movapd [esp + i1130_fizO], xmm4
	movapd [esp + i1130_fixH1], xmm4
	movapd [esp + i1130_fiyH1], xmm4
	movapd [esp + i1130_fizH1], xmm4
	movapd [esp + i1130_fixH2], xmm4
	movapd [esp + i1130_fiyH2], xmm4
	movapd [esp + i1130_fizH2], xmm4
	
	mov   eax, [ebp + i1130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1130_pos]
	mov   edi, [ebp + i1130_faction]	
	mov   eax, [ebp + i1130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i1130_innerk], edx    ;# number of innerloop atoms 
	jge   i1130_unroll_loop
	jmp   i1130_checksingle
i1130_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i1130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + i1130_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i1130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + i1130_jxO], xmm2
	movapd 	[esp + i1130_jyO], xmm3
	movapd 	[esp + i1130_jzO], xmm4
	movapd 	[esp + i1130_jxH1], xmm5
	movapd 	[esp + i1130_jyH1], xmm6
	movapd 	[esp + i1130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + i1130_jxH2], xmm2
	movapd 	[esp + i1130_jyH2], xmm3
	movapd 	[esp + i1130_jzH2], xmm4
	
	movapd xmm0, [esp + i1130_ixO]
	movapd xmm1, [esp + i1130_iyO]
	movapd xmm2, [esp + i1130_izO]
	movapd xmm3, [esp + i1130_ixO]
	movapd xmm4, [esp + i1130_iyO]
	movapd xmm5, [esp + i1130_izO]
	subpd  xmm0, [esp + i1130_jxO]
	subpd  xmm1, [esp + i1130_jyO]
	subpd  xmm2, [esp + i1130_jzO]
	subpd  xmm3, [esp + i1130_jxH1]
	subpd  xmm4, [esp + i1130_jyH1]
	subpd  xmm5, [esp + i1130_jzH1]
	movapd [esp + i1130_dxOO], xmm0
	movapd [esp + i1130_dyOO], xmm1
	movapd [esp + i1130_dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i1130_dxOH1], xmm3
	movapd [esp + i1130_dyOH1], xmm4
	movapd [esp + i1130_dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i1130_rsqOO], xmm0
	movapd [esp + i1130_rsqOH1], xmm3

	movapd xmm0, [esp + i1130_ixO]
	movapd xmm1, [esp + i1130_iyO]
	movapd xmm2, [esp + i1130_izO]
	movapd xmm3, [esp + i1130_ixH1]
	movapd xmm4, [esp + i1130_iyH1]
	movapd xmm5, [esp + i1130_izH1]
	subpd  xmm0, [esp + i1130_jxH2]
	subpd  xmm1, [esp + i1130_jyH2]
	subpd  xmm2, [esp + i1130_jzH2]
	subpd  xmm3, [esp + i1130_jxO]
	subpd  xmm4, [esp + i1130_jyO]
	subpd  xmm5, [esp + i1130_jzO]
	movapd [esp + i1130_dxOH2], xmm0
	movapd [esp + i1130_dyOH2], xmm1
	movapd [esp + i1130_dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i1130_dxH1O], xmm3
	movapd [esp + i1130_dyH1O], xmm4
	movapd [esp + i1130_dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i1130_rsqOH2], xmm0
	movapd [esp + i1130_rsqH1O], xmm3

	movapd xmm0, [esp + i1130_ixH1]
	movapd xmm1, [esp + i1130_iyH1]
	movapd xmm2, [esp + i1130_izH1]
	movapd xmm3, [esp + i1130_ixH1]
	movapd xmm4, [esp + i1130_iyH1]
	movapd xmm5, [esp + i1130_izH1]
	subpd  xmm0, [esp + i1130_jxH1]
	subpd  xmm1, [esp + i1130_jyH1]
	subpd  xmm2, [esp + i1130_jzH1]
	subpd  xmm3, [esp + i1130_jxH2]
	subpd  xmm4, [esp + i1130_jyH2]
	subpd  xmm5, [esp + i1130_jzH2]
	movapd [esp + i1130_dxH1H1], xmm0
	movapd [esp + i1130_dyH1H1], xmm1
	movapd [esp + i1130_dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i1130_dxH1H2], xmm3
	movapd [esp + i1130_dyH1H2], xmm4
	movapd [esp + i1130_dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i1130_rsqH1H1], xmm0
	movapd [esp + i1130_rsqH1H2], xmm3

	movapd xmm0, [esp + i1130_ixH2]
	movapd xmm1, [esp + i1130_iyH2]
	movapd xmm2, [esp + i1130_izH2]
	movapd xmm3, [esp + i1130_ixH2]
	movapd xmm4, [esp + i1130_iyH2]
	movapd xmm5, [esp + i1130_izH2]
	subpd  xmm0, [esp + i1130_jxO]
	subpd  xmm1, [esp + i1130_jyO]
	subpd  xmm2, [esp + i1130_jzO]
	subpd  xmm3, [esp + i1130_jxH1]
	subpd  xmm4, [esp + i1130_jyH1]
	subpd  xmm5, [esp + i1130_jzH1]
	movapd [esp + i1130_dxH2O], xmm0
	movapd [esp + i1130_dyH2O], xmm1
	movapd [esp + i1130_dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i1130_dxH2H1], xmm3
	movapd [esp + i1130_dyH2H1], xmm4
	movapd [esp + i1130_dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + i1130_rsqH2O], xmm0
	movapd [esp + i1130_rsqH2H1], xmm4

	movapd xmm0, [esp + i1130_ixH2]
	movapd xmm1, [esp + i1130_iyH2]
	movapd xmm2, [esp + i1130_izH2]
	subpd  xmm0, [esp + i1130_jxH2]
	subpd  xmm1, [esp + i1130_jyH2]
	subpd  xmm2, [esp + i1130_jzH2]
	movapd [esp + i1130_dxH2H2], xmm0
	movapd [esp + i1130_dyH2H2], xmm1
	movapd [esp + i1130_dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + i1130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i1130_half] ;# iter1 
	mulpd   xmm7, [esp + i1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i1130_half] ;# rinv 
	mulpd   xmm5, [esp + i1130_half] ;# rinv 
	movapd [esp + i1130_rinvH2H2], xmm1
	movapd [esp + i1130_rinvH2H1], xmm5

	movapd xmm0, [esp + i1130_rsqOO]
	movapd xmm4, [esp + i1130_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i1130_half] ;# iter1 of  
	mulpd   xmm7, [esp + i1130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i1130_half] ;# rinv 
	mulpd   xmm5, [esp + i1130_half] ;# rinv
	movapd [esp + i1130_rinvOO], xmm1
	movapd [esp + i1130_rinvOH1], xmm5

	movapd xmm0, [esp + i1130_rsqOH2]
	movapd xmm4, [esp + i1130_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i1130_half] ;# iter1 
	mulpd   xmm7, [esp + i1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i1130_half] ;# rinv 
	mulpd   xmm5, [esp + i1130_half] ;# rinv 
	movapd [esp + i1130_rinvOH2], xmm1
	movapd [esp + i1130_rinvH1O], xmm5

	movapd xmm0, [esp + i1130_rsqH1H1]
	movapd xmm4, [esp + i1130_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i1130_half] ;# iter1a 
	mulpd   xmm7, [esp + i1130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i1130_half] ;# rinv 
	mulpd   xmm5, [esp + i1130_half] ;# rinv 
	movapd [esp + i1130_rinvH1H1], xmm1
	movapd [esp + i1130_rinvH1H2], xmm5

	movapd xmm0, [esp + i1130_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i1130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + i1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i1130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + i1130_half] ;# rinv 
	movapd [esp + i1130_rinvH2O], xmm1

	;# start with OO interaction 
	movapd xmm0, [esp + i1130_rinvOO]
	movapd xmm7, xmm0
	mulpd  xmm0, xmm0
	movapd xmm1, xmm0
	mulpd  xmm1, xmm0
	mulpd  xmm1, xmm0	;# xmm1=rinvsix 
	mulpd  xmm7, [esp + i1130_qqOO]
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm1, [esp + i1130_c6]	
	mulpd  xmm2, [esp + i1130_c12]	
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addpd  xmm3, [esp + i1130_vnbtot]
	mulpd  xmm1, [esp + i1130_six]
	mulpd  xmm2, [esp + i1130_twelve]
	movapd [esp + i1130_vnbtot], xmm3
	subpd  xmm2, xmm1
	addpd  xmm2, xmm7
	addpd  xmm7, [esp + i1130_vctot]
	mulpd  xmm0, xmm2	
 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i1130_dxOO]
	mulpd xmm1, [esp + i1130_dyOO]
	mulpd xmm2, [esp + i1130_dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1130_fixO]
	addpd xmm1, [esp + i1130_fiyO]
	addpd xmm2, [esp + i1130_fizO]
	movapd [esp + i1130_fjxO], xmm3
	movapd [esp + i1130_fjyO], xmm4
	movapd [esp + i1130_fjzO], xmm5
	movapd [esp + i1130_fixO], xmm0
	movapd [esp + i1130_fiyO], xmm1
	movapd [esp + i1130_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i1130_rinvOH1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1130_qqOH]
	mulpd xmm0, xmm1	;# fsOH1  
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i1130_dxOH1]
	mulpd xmm1, [esp + i1130_dyOH1]
	mulpd xmm2, [esp + i1130_dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1130_fixO]
	addpd xmm1, [esp + i1130_fiyO]
	addpd xmm2, [esp + i1130_fizO]
	movapd [esp + i1130_fjxH1], xmm3
	movapd [esp + i1130_fjyH1], xmm4
	movapd [esp + i1130_fjzH1], xmm5
	movapd [esp + i1130_fixO], xmm0
	movapd [esp + i1130_fiyO], xmm1
	movapd [esp + i1130_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i1130_rinvOH2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1130_qqOH]
	mulpd xmm0, xmm1	;# fsOH2  
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i1130_dxOH2]
	mulpd xmm1, [esp + i1130_dyOH2]
	mulpd xmm2, [esp + i1130_dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1130_fixO]
	addpd xmm1, [esp + i1130_fiyO]
	addpd xmm2, [esp + i1130_fizO]
	movapd [esp + i1130_fjxH2], xmm3
	movapd [esp + i1130_fjyH2], xmm4
	movapd [esp + i1130_fjzH2], xmm5
	movapd [esp + i1130_fixO], xmm0
	movapd [esp + i1130_fiyO], xmm1
	movapd [esp + i1130_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i1130_rinvH1O]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1130_qqOH]
	mulpd xmm0, xmm1	;# fsH1O 
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxO]
	movapd xmm4, [esp + i1130_fjyO]
	movapd xmm5, [esp + i1130_fjzO]
	mulpd xmm0, [esp + i1130_dxH1O]
	mulpd xmm1, [esp + i1130_dyH1O]
	mulpd xmm2, [esp + i1130_dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1130_fixH1]
	addpd xmm1, [esp + i1130_fiyH1]
	addpd xmm2, [esp + i1130_fizH1]
	movapd [esp + i1130_fjxO], xmm3
	movapd [esp + i1130_fjyO], xmm4
	movapd [esp + i1130_fjzO], xmm5
	movapd [esp + i1130_fixH1], xmm0
	movapd [esp + i1130_fiyH1], xmm1
	movapd [esp + i1130_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i1130_rinvH1H1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1130_qqHH]
	mulpd xmm0, xmm1	;# fsH1H1 
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxH1]
	movapd xmm4, [esp + i1130_fjyH1]
	movapd xmm5, [esp + i1130_fjzH1]
	mulpd xmm0, [esp + i1130_dxH1H1]
	mulpd xmm1, [esp + i1130_dyH1H1]
	mulpd xmm2, [esp + i1130_dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1130_fixH1]
	addpd xmm1, [esp + i1130_fiyH1]
	addpd xmm2, [esp + i1130_fizH1]
	movapd [esp + i1130_fjxH1], xmm3
	movapd [esp + i1130_fjyH1], xmm4
	movapd [esp + i1130_fjzH1], xmm5
	movapd [esp + i1130_fixH1], xmm0
	movapd [esp + i1130_fiyH1], xmm1
	movapd [esp + i1130_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i1130_rinvH1H2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1130_qqHH]
	mulpd xmm0, xmm1	;# fsOH2  
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxH2]
	movapd xmm4, [esp + i1130_fjyH2]
	movapd xmm5, [esp + i1130_fjzH2]
	mulpd xmm0, [esp + i1130_dxH1H2]
	mulpd xmm1, [esp + i1130_dyH1H2]
	mulpd xmm2, [esp + i1130_dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1130_fixH1]
	addpd xmm1, [esp + i1130_fiyH1]
	addpd xmm2, [esp + i1130_fizH1]
	movapd [esp + i1130_fjxH2], xmm3
	movapd [esp + i1130_fjyH2], xmm4
	movapd [esp + i1130_fjzH2], xmm5
	movapd [esp + i1130_fixH1], xmm0
	movapd [esp + i1130_fiyH1], xmm1
	movapd [esp + i1130_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i1130_rinvH2O]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1130_qqOH]
	mulpd xmm0, xmm1	;# fsH2O 
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxO]
	movapd xmm4, [esp + i1130_fjyO]
	movapd xmm5, [esp + i1130_fjzO]
	mulpd xmm0, [esp + i1130_dxH2O]
	mulpd xmm1, [esp + i1130_dyH2O]
	mulpd xmm2, [esp + i1130_dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1130_fixH2]
	addpd xmm1, [esp + i1130_fiyH2]
	addpd xmm2, [esp + i1130_fizH2]
	movapd [esp + i1130_fjxO], xmm3
	movapd [esp + i1130_fjyO], xmm4
	movapd [esp + i1130_fjzO], xmm5
	movapd [esp + i1130_fixH2], xmm0
	movapd [esp + i1130_fiyH2], xmm1
	movapd [esp + i1130_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i1130_rinvH2H1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1130_qqHH]
	mulpd xmm0, xmm1	;# fsH2H1 
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxH1]
	movapd xmm4, [esp + i1130_fjyH1]
	movapd xmm5, [esp + i1130_fjzH1]
	mulpd xmm0, [esp + i1130_dxH2H1]
	mulpd xmm1, [esp + i1130_dyH2H1]
	mulpd xmm2, [esp + i1130_dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1130_fixH2]
	addpd xmm1, [esp + i1130_fiyH2]
	addpd xmm2, [esp + i1130_fizH2]
	movapd [esp + i1130_fjxH1], xmm3
	movapd [esp + i1130_fjyH1], xmm4
	movapd [esp + i1130_fjzH1], xmm5
	movapd [esp + i1130_fixH2], xmm0
	movapd [esp + i1130_fiyH2], xmm1
	movapd [esp + i1130_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i1130_rinvH2H2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + i1130_qqHH]
	mulpd xmm0, xmm1	;# fsH2H2 
	addpd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd [esp + i1130_vctot], xmm7
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxH2]
	movapd xmm4, [esp + i1130_fjyH2]
	movapd xmm5, [esp + i1130_fjzH2]
	mulpd xmm0, [esp + i1130_dxH2H2]
	mulpd xmm1, [esp + i1130_dyH2H2]
	mulpd xmm2, [esp + i1130_dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i1130_fixH2]
	addpd xmm1, [esp + i1130_fiyH2]
	addpd xmm2, [esp + i1130_fizH2]
	movapd [esp + i1130_fjxH2], xmm3
	movapd [esp + i1130_fjyH2], xmm4
	movapd [esp + i1130_fjzH2], xmm5
	movapd [esp + i1130_fixH2], xmm0
	movapd [esp + i1130_fiyH2], xmm1
	movapd [esp + i1130_fizH2], xmm2

	mov edi, [ebp + i1130_faction]
		
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + i1130_fjxO]
	addpd xmm1, [esp + i1130_fjyO]
	addpd xmm2, [esp + i1130_fjzO]
	addpd xmm3, [esp + i1130_fjxH1]
	addpd xmm4, [esp + i1130_fjyH1]
	addpd xmm5, [esp + i1130_fjzH1]
	addpd xmm6, [esp + i1130_fjxH2]
	addpd xmm7, [esp + i1130_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + i1130_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1130_innerk],  2
	jl    i1130_checksingle
	jmp   i1130_unroll_loop
i1130_checksingle:
	mov   edx, [esp + i1130_innerk]
	and   edx, 1
	jnz   i1130_dosingle
	jmp   i1130_updateouterdata
i1130_dosingle:
	mov   edx, [esp + i1130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i1130_innerjjnr],  4	

	mov esi, [ebp + i1130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + i1130_jxO], xmm2
	movapd 	[esp + i1130_jyO], xmm3
	movapd 	[esp + i1130_jzO], xmm4
	movapd 	[esp + i1130_jxH1], xmm5
	movapd 	[esp + i1130_jyH1], xmm6
	movapd 	[esp + i1130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + i1130_jxH2], xmm2
	movapd 	[esp + i1130_jyH2], xmm3
	movapd 	[esp + i1130_jzH2], xmm4
	
	movapd xmm0, [esp + i1130_ixO]
	movapd xmm1, [esp + i1130_iyO]
	movapd xmm2, [esp + i1130_izO]
	movapd xmm3, [esp + i1130_ixO]
	movapd xmm4, [esp + i1130_iyO]
	movapd xmm5, [esp + i1130_izO]
	subsd  xmm0, [esp + i1130_jxO]
	subsd  xmm1, [esp + i1130_jyO]
	subsd  xmm2, [esp + i1130_jzO]
	subsd  xmm3, [esp + i1130_jxH1]
	subsd  xmm4, [esp + i1130_jyH1]
	subsd  xmm5, [esp + i1130_jzH1]
	movapd [esp + i1130_dxOO], xmm0
	movapd [esp + i1130_dyOO], xmm1
	movapd [esp + i1130_dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i1130_dxOH1], xmm3
	movapd [esp + i1130_dyOH1], xmm4
	movapd [esp + i1130_dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i1130_rsqOO], xmm0
	movapd [esp + i1130_rsqOH1], xmm3

	movapd xmm0, [esp + i1130_ixO]
	movapd xmm1, [esp + i1130_iyO]
	movapd xmm2, [esp + i1130_izO]
	movapd xmm3, [esp + i1130_ixH1]
	movapd xmm4, [esp + i1130_iyH1]
	movapd xmm5, [esp + i1130_izH1]
	subsd  xmm0, [esp + i1130_jxH2]
	subsd  xmm1, [esp + i1130_jyH2]
	subsd  xmm2, [esp + i1130_jzH2]
	subsd  xmm3, [esp + i1130_jxO]
	subsd  xmm4, [esp + i1130_jyO]
	subsd  xmm5, [esp + i1130_jzO]
	movapd [esp + i1130_dxOH2], xmm0
	movapd [esp + i1130_dyOH2], xmm1
	movapd [esp + i1130_dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i1130_dxH1O], xmm3
	movapd [esp + i1130_dyH1O], xmm4
	movapd [esp + i1130_dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i1130_rsqOH2], xmm0
	movapd [esp + i1130_rsqH1O], xmm3

	movapd xmm0, [esp + i1130_ixH1]
	movapd xmm1, [esp + i1130_iyH1]
	movapd xmm2, [esp + i1130_izH1]
	movapd xmm3, [esp + i1130_ixH1]
	movapd xmm4, [esp + i1130_iyH1]
	movapd xmm5, [esp + i1130_izH1]
	subsd  xmm0, [esp + i1130_jxH1]
	subsd  xmm1, [esp + i1130_jyH1]
	subsd  xmm2, [esp + i1130_jzH1]
	subsd  xmm3, [esp + i1130_jxH2]
	subsd  xmm4, [esp + i1130_jyH2]
	subsd  xmm5, [esp + i1130_jzH2]
	movapd [esp + i1130_dxH1H1], xmm0
	movapd [esp + i1130_dyH1H1], xmm1
	movapd [esp + i1130_dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i1130_dxH1H2], xmm3
	movapd [esp + i1130_dyH1H2], xmm4
	movapd [esp + i1130_dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i1130_rsqH1H1], xmm0
	movapd [esp + i1130_rsqH1H2], xmm3

	movapd xmm0, [esp + i1130_ixH2]
	movapd xmm1, [esp + i1130_iyH2]
	movapd xmm2, [esp + i1130_izH2]
	movapd xmm3, [esp + i1130_ixH2]
	movapd xmm4, [esp + i1130_iyH2]
	movapd xmm5, [esp + i1130_izH2]
	subsd  xmm0, [esp + i1130_jxO]
	subsd  xmm1, [esp + i1130_jyO]
	subsd  xmm2, [esp + i1130_jzO]
	subsd  xmm3, [esp + i1130_jxH1]
	subsd  xmm4, [esp + i1130_jyH1]
	subsd  xmm5, [esp + i1130_jzH1]
	movapd [esp + i1130_dxH2O], xmm0
	movapd [esp + i1130_dyH2O], xmm1
	movapd [esp + i1130_dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i1130_dxH2H1], xmm3
	movapd [esp + i1130_dyH2H1], xmm4
	movapd [esp + i1130_dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + i1130_rsqH2O], xmm0
	movapd [esp + i1130_rsqH2H1], xmm4

	movapd xmm0, [esp + i1130_ixH2]
	movapd xmm1, [esp + i1130_iyH2]
	movapd xmm2, [esp + i1130_izH2]
	subsd  xmm0, [esp + i1130_jxH2]
	subsd  xmm1, [esp + i1130_jyH2]
	subsd  xmm2, [esp + i1130_jzH2]
	movapd [esp + i1130_dxH2H2], xmm0
	movapd [esp + i1130_dyH2H2], xmm1
	movapd [esp + i1130_dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + i1130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i1130_half] ;# iter1 
	mulsd   xmm7, [esp + i1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i1130_half] ;# rinv 
	mulsd   xmm5, [esp + i1130_half] ;# rinv 
	movapd [esp + i1130_rinvH2H2], xmm1
	movapd [esp + i1130_rinvH2H1], xmm5

	movapd xmm0, [esp + i1130_rsqOO]
	movapd xmm4, [esp + i1130_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i1130_half] ;# iter1 of  
	mulsd   xmm7, [esp + i1130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i1130_half] ;# rinv 
	mulsd   xmm5, [esp + i1130_half] ;# rinv
	movapd [esp + i1130_rinvOO], xmm1
	movapd [esp + i1130_rinvOH1], xmm5

	movapd xmm0, [esp + i1130_rsqOH2]
	movapd xmm4, [esp + i1130_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i1130_half] ;# iter1 
	mulsd   xmm7, [esp + i1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i1130_half] ;# rinv 
	mulsd   xmm5, [esp + i1130_half] ;# rinv 
	movapd [esp + i1130_rinvOH2], xmm1
	movapd [esp + i1130_rinvH1O], xmm5

	movapd xmm0, [esp + i1130_rsqH1H1]
	movapd xmm4, [esp + i1130_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i1130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i1130_half] ;# iter1a 
	mulsd   xmm7, [esp + i1130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i1130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i1130_half] ;# rinv 
	mulsd   xmm5, [esp + i1130_half] ;# rinv 
	movapd [esp + i1130_rinvH1H1], xmm1
	movapd [esp + i1130_rinvH1H2], xmm5

	movapd xmm0, [esp + i1130_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i1130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + i1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i1130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + i1130_half] ;# rinv 
	movapd [esp + i1130_rinvH2O], xmm1

	;# start with OO interaction 
	movapd xmm0, [esp + i1130_rinvOO]
	movapd xmm7, xmm0
	mulsd  xmm0, xmm0
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	;# xmm1=rinvsix 
	mulsd  xmm7, [esp + i1130_qqOO]
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm1, [esp + i1130_c6]	
	mulsd  xmm2, [esp + i1130_c12]	
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addsd  xmm3, [esp + i1130_vnbtot]
	mulsd  xmm1, [esp + i1130_six]
	mulsd  xmm2, [esp + i1130_twelve]
	movlpd [esp + i1130_vnbtot], xmm3
	subsd  xmm2, xmm1
	addsd  xmm2, xmm7
	addsd  xmm7, [esp + i1130_vctot]
	mulsd  xmm0, xmm2	
 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i1130_dxOO]
	mulsd xmm1, [esp + i1130_dyOO]
	mulsd xmm2, [esp + i1130_dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1130_fixO]
	addsd xmm1, [esp + i1130_fiyO]
	addsd xmm2, [esp + i1130_fizO]
	movlpd [esp + i1130_fjxO], xmm3
	movlpd [esp + i1130_fjyO], xmm4
	movlpd [esp + i1130_fjzO], xmm5
	movlpd [esp + i1130_fixO], xmm0
	movlpd [esp + i1130_fiyO], xmm1
	movlpd [esp + i1130_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i1130_rinvOH1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1130_qqOH]
	mulsd xmm0, xmm1	;# fsOH1  
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i1130_dxOH1]
	mulsd xmm1, [esp + i1130_dyOH1]
	mulsd xmm2, [esp + i1130_dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1130_fixO]
	addsd xmm1, [esp + i1130_fiyO]
	addsd xmm2, [esp + i1130_fizO]
	movlpd [esp + i1130_fjxH1], xmm3
	movlpd [esp + i1130_fjyH1], xmm4
	movlpd [esp + i1130_fjzH1], xmm5
	movlpd [esp + i1130_fixO], xmm0
	movlpd [esp + i1130_fiyO], xmm1
	movlpd [esp + i1130_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i1130_rinvOH2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1130_qqOH]
	mulsd xmm0, xmm1	;# fsOH2  
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i1130_dxOH2]
	mulsd xmm1, [esp + i1130_dyOH2]
	mulsd xmm2, [esp + i1130_dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1130_fixO]
	addsd xmm1, [esp + i1130_fiyO]
	addsd xmm2, [esp + i1130_fizO]
	movlpd [esp + i1130_fjxH2], xmm3
	movlpd [esp + i1130_fjyH2], xmm4
	movlpd [esp + i1130_fjzH2], xmm5
	movlpd [esp + i1130_fixO], xmm0
	movlpd [esp + i1130_fiyO], xmm1
	movlpd [esp + i1130_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i1130_rinvH1O]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1130_qqOH]
	mulsd xmm0, xmm1	;# fsH1O 
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxO]
	movapd xmm4, [esp + i1130_fjyO]
	movapd xmm5, [esp + i1130_fjzO]
	mulsd xmm0, [esp + i1130_dxH1O]
	mulsd xmm1, [esp + i1130_dyH1O]
	mulsd xmm2, [esp + i1130_dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1130_fixH1]
	addsd xmm1, [esp + i1130_fiyH1]
	addsd xmm2, [esp + i1130_fizH1]
	movlpd [esp + i1130_fjxO], xmm3
	movlpd [esp + i1130_fjyO], xmm4
	movlpd [esp + i1130_fjzO], xmm5
	movlpd [esp + i1130_fixH1], xmm0
	movlpd [esp + i1130_fiyH1], xmm1
	movlpd [esp + i1130_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i1130_rinvH1H1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1130_qqHH]
	mulsd xmm0, xmm1	;# fsH1H1 
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxH1]
	movapd xmm4, [esp + i1130_fjyH1]
	movapd xmm5, [esp + i1130_fjzH1]
	mulsd xmm0, [esp + i1130_dxH1H1]
	mulsd xmm1, [esp + i1130_dyH1H1]
	mulsd xmm2, [esp + i1130_dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1130_fixH1]
	addsd xmm1, [esp + i1130_fiyH1]
	addsd xmm2, [esp + i1130_fizH1]
	movlpd [esp + i1130_fjxH1], xmm3
	movlpd [esp + i1130_fjyH1], xmm4
	movlpd [esp + i1130_fjzH1], xmm5
	movlpd [esp + i1130_fixH1], xmm0
	movlpd [esp + i1130_fiyH1], xmm1
	movlpd [esp + i1130_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i1130_rinvH1H2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1130_qqHH]
	mulsd xmm0, xmm1	;# fsOH2  
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxH2]
	movapd xmm4, [esp + i1130_fjyH2]
	movapd xmm5, [esp + i1130_fjzH2]
	mulsd xmm0, [esp + i1130_dxH1H2]
	mulsd xmm1, [esp + i1130_dyH1H2]
	mulsd xmm2, [esp + i1130_dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1130_fixH1]
	addsd xmm1, [esp + i1130_fiyH1]
	addsd xmm2, [esp + i1130_fizH1]
	movlpd [esp + i1130_fjxH2], xmm3
	movlpd [esp + i1130_fjyH2], xmm4
	movlpd [esp + i1130_fjzH2], xmm5
	movlpd [esp + i1130_fixH1], xmm0
	movlpd [esp + i1130_fiyH1], xmm1
	movlpd [esp + i1130_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i1130_rinvH2O]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1130_qqOH]
	mulsd xmm0, xmm1	;# fsH2O 
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxO]
	movapd xmm4, [esp + i1130_fjyO]
	movapd xmm5, [esp + i1130_fjzO]
	mulsd xmm0, [esp + i1130_dxH2O]
	mulsd xmm1, [esp + i1130_dyH2O]
	mulsd xmm2, [esp + i1130_dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1130_fixH2]
	addsd xmm1, [esp + i1130_fiyH2]
	addsd xmm2, [esp + i1130_fizH2]
	movlpd [esp + i1130_fjxO], xmm3
	movlpd [esp + i1130_fjyO], xmm4
	movlpd [esp + i1130_fjzO], xmm5
	movlpd [esp + i1130_fixH2], xmm0
	movlpd [esp + i1130_fiyH2], xmm1
	movlpd [esp + i1130_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i1130_rinvH2H1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1130_qqHH]
	mulsd xmm0, xmm1	;# fsH2H1 
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + i1130_fjxH1]
	movapd xmm4, [esp + i1130_fjyH1]
	movapd xmm5, [esp + i1130_fjzH1]
	mulsd xmm0, [esp + i1130_dxH2H1]
	mulsd xmm1, [esp + i1130_dyH2H1]
	mulsd xmm2, [esp + i1130_dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1130_fixH2]
	addsd xmm1, [esp + i1130_fiyH2]
	addsd xmm2, [esp + i1130_fizH2]
	movlpd [esp + i1130_fjxH1], xmm3
	movlpd [esp + i1130_fjyH1], xmm4
	movlpd [esp + i1130_fjzH1], xmm5
	movlpd [esp + i1130_fixH2], xmm0
	movlpd [esp + i1130_fiyH2], xmm1
	movlpd [esp + i1130_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i1130_rinvH2H2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + i1130_qqHH]
	mulsd xmm0, xmm1	;# fsH2H2 
	addsd xmm7, xmm1	;# add to local vctot 
	movapd xmm1, xmm0
	movlpd [esp + i1130_vctot], xmm7
	movapd xmm2, xmm0
	movlpd xmm3, [esp + i1130_fjxH2]
	movlpd xmm4, [esp + i1130_fjyH2]
	movlpd xmm5, [esp + i1130_fjzH2]
	mulsd xmm0, [esp + i1130_dxH2H2]
	mulsd xmm1, [esp + i1130_dyH2H2]
	mulsd xmm2, [esp + i1130_dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i1130_fixH2]
	addsd xmm1, [esp + i1130_fiyH2]
	addsd xmm2, [esp + i1130_fizH2]
	movlpd [esp + i1130_fjxH2], xmm3
	movlpd [esp + i1130_fjyH2], xmm4
	movlpd [esp + i1130_fjzH2], xmm5
	movlpd [esp + i1130_fixH2], xmm0
	movlpd [esp + i1130_fiyH2], xmm1
	movlpd [esp + i1130_fizH2], xmm2

	mov edi, [ebp + i1130_faction]
		
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + i1130_fjxO]
	addsd xmm1, [esp + i1130_fjyO]
	addsd xmm2, [esp + i1130_fjzO]
	addsd xmm3, [esp + i1130_fjxH1]
	addsd xmm4, [esp + i1130_fjyH1]
	addsd xmm5, [esp + i1130_fjzH1]
	addsd xmm6, [esp + i1130_fjxH2]
	addsd xmm7, [esp + i1130_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + i1130_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
i1130_updateouterdata:
	mov   ecx, [esp + i1130_ii3]
	mov   edi, [ebp + i1130_faction]
	mov   esi, [ebp + i1130_fshift]
	mov   edx, [esp + i1130_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1130_fixO]
	movapd xmm1, [esp + i1130_fiyO]
	movapd xmm2, [esp + i1130_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1130_fixH1]
	movapd xmm1, [esp + i1130_fiyH1]
	movapd xmm2, [esp + i1130_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i1130_fixH2]
	movapd xmm1, [esp + i1130_fiyH2]
	movapd xmm2, [esp + i1130_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i1130_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i1130_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i1130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i1130_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i1130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + i1130_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i1130_nri]
	dec ecx
	jecxz i1130_end
	;# not last, iterate once more!  
	mov [ebp + i1130_nri], ecx
	jmp i1130_outer
i1130_end:
	emms
	mov eax, [esp + i1130_salign]
	add esp, eax
	add esp, 1492
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


.globl inl2120_sse2
.globl _inl2120_sse2
inl2120_sse2:	
_inl2120_sse2:	
.equiv		i2120_nri,			8
.equiv		i2120_iinr,			12
.equiv		i2120_jindex,		16
.equiv		i2120_jjnr,			20
.equiv		i2120_shift,		24
.equiv		i2120_shiftvec,		28
.equiv		i2120_fshift,		32
.equiv		i2120_gid,			36
.equiv		i2120_pos,			40		
.equiv		i2120_faction,		44
.equiv		i2120_charge,		48
.equiv		i2120_facel,		52 ;# double  
.equiv		i2120_Vc,			60			
.equiv		i2120_argkrf,		64 ;# double  	
.equiv		i2120_argcrf,		72 ;# double  	
.equiv		i2120_type,			80
.equiv		i2120_ntype,		84
.equiv		i2120_nbfp,			88	
.equiv		i2120_Vnb,			92	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i2120_ixO,			0
.equiv		i2120_iyO,			16
.equiv		i2120_izO,			32
.equiv		i2120_ixH1,			48
.equiv		i2120_iyH1,			64
.equiv		i2120_izH1,			80
.equiv		i2120_ixH2,			96
.equiv		i2120_iyH2,			112
.equiv		i2120_izH2,			128
.equiv		i2120_iqO,			144 
.equiv		i2120_iqH,			160 
.equiv		i2120_dxO,			176
.equiv		i2120_dyO,			192
.equiv		i2120_dzO,			208	
.equiv		i2120_dxH1,			224
.equiv		i2120_dyH1,			240
.equiv		i2120_dzH1,			256	
.equiv		i2120_dxH2,			272
.equiv		i2120_dyH2,			288
.equiv		i2120_dzH2,			304	
.equiv		i2120_qqO,			320
.equiv		i2120_qqH,			336
.equiv		i2120_c6,			352
.equiv		i2120_c12,			368
.equiv		i2120_six,			384
.equiv		i2120_twelve,		400		 
.equiv		i2120_vctot,		416
.equiv		i2120_vnbtot,		432
.equiv		i2120_fixO,			448
.equiv		i2120_fiyO,			464
.equiv		i2120_fizO,			480
.equiv		i2120_fixH1,		496
.equiv		i2120_fiyH1,		512
.equiv		i2120_fizH1,		528
.equiv		i2120_fixH2,		544
.equiv		i2120_fiyH2,		560
.equiv		i2120_fizH2,		576
.equiv		i2120_fjx,			592
.equiv		i2120_fjy,			608
.equiv		i2120_fjz,			624
.equiv		i2120_half,			640
.equiv		i2120_three,		656
.equiv		i2120_two,			672
.equiv		i2120_krf,			688
.equiv		i2120_crf,			704
.equiv		i2120_krsqO,		720
.equiv		i2120_krsqH1,		736
.equiv		i2120_krsqH2,		752	 		
.equiv		i2120_is3,			768
.equiv		i2120_ii3,			772
.equiv		i2120_ntia,			776	
.equiv		i2120_innerjjnr,	780
.equiv		i2120_innerk,		784
.equiv		i2120_salign,		788
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 792		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2120_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + i2120_argkrf]
	movsd xmm6, [ebp + i2120_argcrf]

	movapd [esp + i2120_half],  xmm0
	movapd [esp + i2120_three], xmm1
	movapd [esp + i2120_six],  xmm2
	movapd [esp + i2120_twelve], xmm3
	movapd [esp + i2120_two], xmm4
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + i2120_krf], xmm5
	movapd [esp + i2120_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i2120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2120_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + i2120_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + i2120_iqO], xmm3
	movapd [esp + i2120_iqH], xmm4
	
	mov   edx, [ebp + i2120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + i2120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + i2120_ntia], ecx		
.i2120_outer:
	mov   eax, [ebp + i2120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2120_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2120_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i2120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2120_pos]    ;# eax = base of pos[]  
	mov   [esp + i2120_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i2120_ixO], xmm3
	movapd [esp + i2120_iyO], xmm4
	movapd [esp + i2120_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i2120_ixH1], xmm0
	movapd [esp + i2120_iyH1], xmm1
	movapd [esp + i2120_izH1], xmm2
	movapd [esp + i2120_ixH2], xmm3
	movapd [esp + i2120_iyH2], xmm4
	movapd [esp + i2120_izH2], xmm5
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i2120_vctot], xmm4
	movapd [esp + i2120_vnbtot], xmm4
	movapd [esp + i2120_fixO], xmm4
	movapd [esp + i2120_fiyO], xmm4
	movapd [esp + i2120_fizO], xmm4
	movapd [esp + i2120_fixH1], xmm4
	movapd [esp + i2120_fiyH1], xmm4
	movapd [esp + i2120_fizH1], xmm4
	movapd [esp + i2120_fixH2], xmm4
	movapd [esp + i2120_fiyH2], xmm4
	movapd [esp + i2120_fizH2], xmm4
	
	mov   eax, [ebp + i2120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2120_pos]
	mov   edi, [ebp + i2120_faction]	
	mov   eax, [ebp + i2120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i2120_innerk], edx    ;# number of innerloop atoms 
	jge   .i2120_unroll_loop
	jmp   .i2120_checksingle
.i2120_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i2120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add dword ptr [esp + i2120_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i2120_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + i2120_iqO]
	mulpd  xmm4, [esp + i2120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx

	movapd  [esp + i2120_qqO], xmm3
	movapd  [esp + i2120_qqH], xmm4
	
	mov esi, [ebp + i2120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + i2120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + i2120_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + i2120_c6], xmm4
	movapd [esp + i2120_c12], xmm6
	
	mov esi, [ebp + i2120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i2120_ixO]
	movapd xmm5, [esp + i2120_iyO]
	movapd xmm6, [esp + i2120_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i2120_dxO], xmm4
	movapd [esp + i2120_dyO], xmm5
	movapd [esp + i2120_dzO], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i2120_ixH1]
	movapd xmm5, [esp + i2120_iyH1]
	movapd xmm6, [esp + i2120_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i2120_dxH1], xmm4
	movapd [esp + i2120_dyH1], xmm5
	movapd [esp + i2120_dzH1], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i2120_ixH2]
	movapd xmm4, [esp + i2120_iyH2]
	movapd xmm5, [esp + i2120_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# store dr 
	movapd [esp + i2120_dxH2], xmm3
	movapd [esp + i2120_dyH2], xmm4
	movapd [esp + i2120_dzH2], xmm5
	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulpd  xmm0, [esp + i2120_krf]	
	mulpd  xmm1, [esp + i2120_krf]	
	mulpd  xmm2, [esp + i2120_krf]	

	movapd [esp + i2120_krsqH2], xmm0
	movapd [esp + i2120_krsqH1], xmm1
	movapd [esp + i2120_krsqO], xmm2
		
	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i2120_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2120_three]
	subpd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i2120_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i2120_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2120_three]
	subpd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i2120_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i2120_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2120_three]
	subpd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i2120_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm1, [esp + i2120_c6]
	mulpd  xmm2, [esp + i2120_c12]
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addpd  xmm3, [esp + i2120_vnbtot]
	mulpd  xmm1, [esp + i2120_six]
	mulpd  xmm2, [esp + i2120_twelve]
	subpd  xmm2, xmm1	;# nb part of fs  

	movapd xmm0, xmm7
	movapd xmm1, [esp + i2120_krsqO]
	addpd  xmm0, xmm1
	mulpd  xmm1, [esp + i2120_two]
	subpd  xmm0, [esp + i2120_crf] ;# xmm0=rinv+ krsq-crf 
	subpd  xmm7, xmm1
	mulpd  xmm0, [esp + i2120_qqO]
	mulpd  xmm7, [esp + i2120_qqO]
	addpd  xmm2, xmm7

	mulpd  xmm4, xmm2	;# total fsO in xmm4 

	addpd  xmm0, [esp + i2120_vctot]
	movapd [esp + i2120_vnbtot], xmm3
	movapd [esp + i2120_vctot], xmm0

	movapd xmm0, [esp + i2120_dxO]
	movapd xmm1, [esp + i2120_dyO]
	movapd xmm2, [esp + i2120_dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update O forces 
	movapd xmm3, [esp + i2120_fixO]
	movapd xmm4, [esp + i2120_fiyO]
	movapd xmm7, [esp + i2120_fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i2120_fixO], xmm3
	movapd [esp + i2120_fiyO], xmm4
	movapd [esp + i2120_fizO], xmm7
	;# update j forces with water O 
	movapd [esp + i2120_fjx], xmm0
	movapd [esp + i2120_fjy], xmm1
	movapd [esp + i2120_fjz], xmm2

	;# H1 interactions 
	movapd  xmm4, xmm6	
	mulpd   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	movapd  xmm7, xmm6
	movapd  xmm0, [esp + i2120_krsqH1]
	addpd   xmm6, xmm0	;# xmm6=rinv+ krsq 
	mulpd   xmm0, [esp + i2120_two]
	subpd   xmm6, [esp + i2120_crf]
	subpd   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulpd   xmm6, [esp + i2120_qqH] ;# vcoul 
	mulpd   xmm7, [esp + i2120_qqH]
	mulpd  xmm4, xmm7		;# total fsH1 in xmm4 
	
	addpd  xmm6, [esp + i2120_vctot]

	movapd xmm0, [esp + i2120_dxH1]
	movapd xmm1, [esp + i2120_dyH1]
	movapd xmm2, [esp + i2120_dzH1]
	movapd [esp + i2120_vctot], xmm6
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i2120_fixH1]
	movapd xmm4, [esp + i2120_fiyH1]
	movapd xmm7, [esp + i2120_fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i2120_fixH1], xmm3
	movapd [esp + i2120_fiyH1], xmm4
	movapd [esp + i2120_fizH1], xmm7
	;# update j forces with water H1 
	addpd  xmm0, [esp + i2120_fjx]
	addpd  xmm1, [esp + i2120_fjy]
	addpd  xmm2, [esp + i2120_fjz]
	movapd [esp + i2120_fjx], xmm0
	movapd [esp + i2120_fjy], xmm1
	movapd [esp + i2120_fjz], xmm2

	;# H2 interactions 
	movapd  xmm4, xmm5	
	mulpd   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	movapd  xmm7, xmm5
	movapd  xmm0, [esp + i2120_krsqH2]
	addpd   xmm5, xmm0	;# xmm5=rinv+ krsq 
	mulpd   xmm0, [esp + i2120_two]
	subpd   xmm5, [esp + i2120_crf]
	subpd   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulpd   xmm5, [esp + i2120_qqH] ;# vcoul 
	mulpd   xmm7, [esp + i2120_qqH]
	mulpd  xmm4, xmm7		;# total fsH2 in xmm4 
	
	addpd  xmm5, [esp + i2120_vctot]

	movapd xmm0, [esp + i2120_dxH2]
	movapd xmm1, [esp + i2120_dyH2]
	movapd xmm2, [esp + i2120_dzH2]
	movapd [esp + i2120_vctot], xmm5
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H2 forces 
	movapd xmm3, [esp + i2120_fixH2]
	movapd xmm4, [esp + i2120_fiyH2]
	movapd xmm7, [esp + i2120_fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i2120_fixH2], xmm3
	movapd [esp + i2120_fiyH2], xmm4
	movapd [esp + i2120_fizH2], xmm7

	mov edi, [ebp + i2120_faction]
	;# update j forces 
	addpd  xmm0, [esp + i2120_fjx]
	addpd  xmm1, [esp + i2120_fjy]
	addpd  xmm2, [esp + i2120_fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5	
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i2120_innerk],  2
	jl    .i2120_checksingle
	jmp   .i2120_unroll_loop
.i2120_checksingle:	
	mov   edx, [esp + i2120_innerk]
	and   edx, 1
	jnz   .i2120_dosingle
	jmp   .i2120_updateouterdata
.i2120_dosingle:
	mov   edx, [esp + i2120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i2120_innerjjnr],  4	

	mov esi, [ebp + i2120_charge]    ;# base of charge[] 
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + i2120_iqO]
	mulpd  xmm4, [esp + i2120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 

	movapd  [esp + i2120_qqO], xmm3
	movapd  [esp + i2120_qqH], xmm4
	
	mov esi, [ebp + i2120_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + i2120_nbfp]
	shl eax, 1	
	mov edi, [esp + i2120_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + i2120_c6], xmm4
	movapd [esp + i2120_c12], xmm6
	
	mov esi, [ebp + i2120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i2120_ixO]
	movapd xmm5, [esp + i2120_iyO]
	movapd xmm6, [esp + i2120_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i2120_dxO], xmm4
	movapd [esp + i2120_dyO], xmm5
	movapd [esp + i2120_dzO], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i2120_ixH1]
	movapd xmm5, [esp + i2120_iyH1]
	movapd xmm6, [esp + i2120_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i2120_dxH1], xmm4
	movapd [esp + i2120_dyH1], xmm5
	movapd [esp + i2120_dzH1], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i2120_ixH2]
	movapd xmm4, [esp + i2120_iyH2]
	movapd xmm5, [esp + i2120_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# store dr 
	movapd [esp + i2120_dxH2], xmm3
	movapd [esp + i2120_dyH2], xmm4
	movapd [esp + i2120_dzH2], xmm5
	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulsd  xmm0, [esp + i2120_krf]	
	mulsd  xmm1, [esp + i2120_krf]	
	mulsd  xmm2, [esp + i2120_krf]	

	movapd [esp + i2120_krsqH2], xmm0
	movapd [esp + i2120_krsqH1], xmm1
	movapd [esp + i2120_krsqO], xmm2

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i2120_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2120_three]
	subsd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i2120_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i2120_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2120_three]
	subsd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i2120_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i2120_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2120_three]
	subsd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i2120_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm1, [esp + i2120_c6]
	mulsd  xmm2, [esp + i2120_c12]
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addsd  xmm3, [esp + i2120_vnbtot]
	mulsd  xmm1, [esp + i2120_six]
	mulsd  xmm2, [esp + i2120_twelve]
	subsd  xmm2, xmm1	;# nb part of fs  

	movapd xmm0, xmm7
	movapd xmm1, [esp + i2120_krsqO]
	addsd  xmm0, xmm1
	mulsd  xmm1, [esp + i2120_two]
	subsd  xmm0, [esp + i2120_crf] ;# xmm0=rinv+ krsq-crf 
	subsd  xmm7, xmm1
	mulsd  xmm0, [esp + i2120_qqO]
	mulsd  xmm7, [esp + i2120_qqO]
	addsd  xmm2, xmm7

	mulsd  xmm4, xmm2	;# total fsO in xmm4 

	addsd  xmm0, [esp + i2120_vctot]
	movlpd [esp + i2120_vnbtot], xmm3
	movlpd [esp + i2120_vctot], xmm0

	movapd xmm0, [esp + i2120_dxO]
	movapd xmm1, [esp + i2120_dyO]
	movapd xmm2, [esp + i2120_dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update O forces 
	movapd xmm3, [esp + i2120_fixO]
	movapd xmm4, [esp + i2120_fiyO]
	movapd xmm7, [esp + i2120_fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i2120_fixO], xmm3
	movlpd [esp + i2120_fiyO], xmm4
	movlpd [esp + i2120_fizO], xmm7
	;# update j forces with water O 
	movlpd [esp + i2120_fjx], xmm0
	movlpd [esp + i2120_fjy], xmm1
	movlpd [esp + i2120_fjz], xmm2

	;# H1 interactions 
	movapd  xmm4, xmm6	
	mulsd   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	movapd  xmm7, xmm6
	movapd  xmm0, [esp + i2120_krsqH1]
	addsd   xmm6, xmm0	;# xmm6=rinv+ krsq 
	mulsd   xmm0, [esp + i2120_two]
	subsd   xmm6, [esp + i2120_crf]
	subsd   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulsd   xmm6, [esp + i2120_qqH] ;# vcoul 
	mulsd   xmm7, [esp + i2120_qqH]
	mulsd  xmm4, xmm7		;# total fsH1 in xmm4 
	
	addsd  xmm6, [esp + i2120_vctot]

	movapd xmm0, [esp + i2120_dxH1]
	movapd xmm1, [esp + i2120_dyH1]
	movapd xmm2, [esp + i2120_dzH1]
	movlpd [esp + i2120_vctot], xmm6
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i2120_fixH1]
	movapd xmm4, [esp + i2120_fiyH1]
	movapd xmm7, [esp + i2120_fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i2120_fixH1], xmm3
	movlpd [esp + i2120_fiyH1], xmm4
	movlpd [esp + i2120_fizH1], xmm7
	;# update j forces with water H1 
	addsd  xmm0, [esp + i2120_fjx]
	addsd  xmm1, [esp + i2120_fjy]
	addsd  xmm2, [esp + i2120_fjz]
	movlpd [esp + i2120_fjx], xmm0
	movlpd [esp + i2120_fjy], xmm1
	movlpd [esp + i2120_fjz], xmm2

	;# H2 interactions 
	movapd  xmm4, xmm5	
	mulsd   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	movapd  xmm7, xmm5
	movapd  xmm0, [esp + i2120_krsqH2]
	addsd   xmm5, xmm0	;# xmm5=rinv+ krsq 
	mulsd   xmm0, [esp + i2120_two]
	subsd   xmm5, [esp + i2120_crf]
	subsd   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulsd   xmm5, [esp + i2120_qqH] ;# vcoul 
	mulsd   xmm7, [esp + i2120_qqH]
	mulsd  xmm4, xmm7		;# total fsH2 in xmm4 
	
	addsd  xmm5, [esp + i2120_vctot]

	movapd xmm0, [esp + i2120_dxH2]
	movapd xmm1, [esp + i2120_dyH2]
	movapd xmm2, [esp + i2120_dzH2]
	movlpd [esp + i2120_vctot], xmm5
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H2 forces 
	movapd xmm3, [esp + i2120_fixH2]
	movapd xmm4, [esp + i2120_fiyH2]
	movapd xmm7, [esp + i2120_fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i2120_fixH2], xmm3
	movlpd [esp + i2120_fiyH2], xmm4
	movlpd [esp + i2120_fizH2], xmm7

	mov edi, [ebp + i2120_faction]
	;# update j forces 
	addsd  xmm0, [esp + i2120_fjx]
	addsd  xmm1, [esp + i2120_fjy]
	addsd  xmm2, [esp + i2120_fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5	

.i2120_updateouterdata:
	mov   ecx, [esp + i2120_ii3]
	mov   edi, [ebp + i2120_faction]
	mov   esi, [ebp + i2120_fshift]
	mov   edx, [esp + i2120_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2120_fixO]
	movapd xmm1, [esp + i2120_fiyO]
	movapd xmm2, [esp + i2120_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2120_fixH1]
	movapd xmm1, [esp + i2120_fiyH1]
	movapd xmm2, [esp + i2120_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2120_fixH2]
	movapd xmm1, [esp + i2120_fiyH2]
	movapd xmm2, [esp + i2120_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i2120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i2120_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i2120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i2120_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i2120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + i2120_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2120_nri]
	dec ecx
	jecxz .i2120_end
	;# not last, iterate once more!  
	mov [ebp + i2120_nri], ecx
	jmp .i2120_outer
.i2120_end:
	emms
	mov eax, [esp + i2120_salign]
	add esp, eax
	add esp, 792
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl inl2130_sse2
.globl _inl2130_sse2
inl2130_sse2:	
_inl2130_sse2:	
.equiv		i2130_nri,			8
.equiv		i2130_iinr,			12
.equiv		i2130_jindex,		16
.equiv		i2130_jjnr,			20
.equiv		i2130_shift,		24
.equiv		i2130_shiftvec,		28
.equiv		i2130_fshift,		32
.equiv		i2130_gid,			36
.equiv		i2130_pos,			40		
.equiv		i2130_faction,		44
.equiv		i2130_charge,		48
.equiv		i2130_facel,		52 ;# double  
.equiv		i2130_Vc,			60	
.equiv		i2130_argkrf,		64 ;# double  
.equiv		i2130_argcrf,		72 ;# double  
.equiv		i2130_type,			80
.equiv		i2130_ntype,		84
.equiv		i2130_nbfp,			88	
.equiv		i2130_Vnb,			92
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i2130_ixO,			0
.equiv		i2130_iyO,			16
.equiv		i2130_izO,			32
.equiv		i2130_ixH1,			48
.equiv		i2130_iyH1,			64
.equiv		i2130_izH1,			80
.equiv		i2130_ixH2,			96
.equiv		i2130_iyH2,			112
.equiv		i2130_izH2,			128
.equiv		i2130_jxO,			144
.equiv		i2130_jyO,			160
.equiv		i2130_jzO,			176
.equiv		i2130_jxH1,			192
.equiv		i2130_jyH1,			208
.equiv		i2130_jzH1,			224
.equiv		i2130_jxH2,			240
.equiv		i2130_jyH2,			256
.equiv		i2130_jzH2,			272
.equiv		i2130_dxOO,			288
.equiv		i2130_dyOO,			304
.equiv		i2130_dzOO,			320	
.equiv		i2130_dxOH1,		336
.equiv		i2130_dyOH1,		352
.equiv		i2130_dzOH1,		368	
.equiv		i2130_dxOH2,		384
.equiv		i2130_dyOH2,		400
.equiv		i2130_dzOH2,		416	
.equiv		i2130_dxH1O,		432
.equiv		i2130_dyH1O,		448
.equiv		i2130_dzH1O,		464	
.equiv		i2130_dxH1H1,		480
.equiv		i2130_dyH1H1,		496
.equiv		i2130_dzH1H1,		512	
.equiv		i2130_dxH1H2,		528
.equiv		i2130_dyH1H2,		544
.equiv		i2130_dzH1H2,		560	
.equiv		i2130_dxH2O,		576
.equiv		i2130_dyH2O,		592
.equiv		i2130_dzH2O,		608	
.equiv		i2130_dxH2H1,		624
.equiv		i2130_dyH2H1,		640
.equiv		i2130_dzH2H1,		656	
.equiv		i2130_dxH2H2,		672
.equiv		i2130_dyH2H2,		688
.equiv		i2130_dzH2H2,		704
.equiv		i2130_qqOO,			720
.equiv		i2130_qqOH,			736
.equiv		i2130_qqHH,			752
.equiv		i2130_c6,			768
.equiv		i2130_c12,			784
.equiv		i2130_six,			800
.equiv		i2130_twelve,		816		 
.equiv		i2130_vctot,		832
.equiv		i2130_vnbtot,		848
.equiv		i2130_fixO,			864
.equiv		i2130_fiyO,			880
.equiv		i2130_fizO,			896
.equiv		i2130_fixH1,		912
.equiv		i2130_fiyH1,		928
.equiv		i2130_fizH1,		944
.equiv		i2130_fixH2,		960
.equiv		i2130_fiyH2,		976
.equiv		i2130_fizH2,		992
.equiv		i2130_fjxO,			1008
.equiv		i2130_fjyO,			1024
.equiv		i2130_fjzO,			1040
.equiv		i2130_fjxH1,		1056
.equiv		i2130_fjyH1,		1072
.equiv		i2130_fjzH1,		1088
.equiv		i2130_fjxH2,		1104
.equiv		i2130_fjyH2,		1120
.equiv		i2130_fjzH2,		1136
.equiv		i2130_half,			1152
.equiv		i2130_three,		1168
.equiv		i2130_rsqOO,		1184
.equiv		i2130_rsqOH1,		1200
.equiv		i2130_rsqOH2,		1216
.equiv		i2130_rsqH1O,		1232
.equiv		i2130_rsqH1H1,		1248
.equiv		i2130_rsqH1H2,		1264
.equiv		i2130_rsqH2O,		1280
.equiv		i2130_rsqH2H1,		1296
.equiv		i2130_rsqH2H2,		1312
.equiv		i2130_rinvOO,		1328
.equiv		i2130_rinvOH1,		1344
.equiv		i2130_rinvOH2,		1360
.equiv		i2130_rinvH1O,		1376
.equiv		i2130_rinvH1H1,		1392
.equiv		i2130_rinvH1H2,		1408
.equiv		i2130_rinvH2O,		1424
.equiv		i2130_rinvH2H1,		1440
.equiv		i2130_rinvH2H2,		1456
.equiv		i2130_two,			1472
.equiv		i2130_krf,			1488	
.equiv		i2130_crf,			1504
.equiv		i2130_is3,			1520
.equiv		i2130_ii3,			1524
.equiv		i2130_innerjjnr,	1528
.equiv		i2130_innerk,		1532
.equiv		i2130_salign,		1536
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1540		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2130_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + i2130_argkrf]
	movsd xmm6, [ebp + i2130_argcrf]
	
	movapd [esp + i2130_half],  xmm0
	movapd [esp + i2130_three], xmm1
	movapd [esp + i2130_six],  xmm2
	movapd [esp + i2130_twelve], xmm3
	movapd [esp + i2130_two], xmm4
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + i2130_krf], xmm5
	movapd [esp + i2130_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i2130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2130_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + i2130_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i2130_qqOO], xmm3
	movapd [esp + i2130_qqOH], xmm4
	movapd [esp + i2130_qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + i2130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + i2130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + i2130_nbfp]
	movupd xmm0, [eax + edx*8] 
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + i2130_c6], xmm0
	movapd [esp + i2130_c12], xmm1

.i2130_outer:
	mov   eax, [ebp + i2130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2130_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2130_shiftvec]   ;# eax = base of shiftvec[] 

	movlpd xmm0, [eax + ebx*8]
	movlpd xmm1, [eax + ebx*8 + 8]
	movlpd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i2130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2130_pos]    ;# eax = base of pos[]  
	mov   [esp + i2130_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i2130_ixO], xmm3
	movapd [esp + i2130_iyO], xmm4
	movapd [esp + i2130_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i2130_ixH1], xmm0
	movapd [esp + i2130_iyH1], xmm1
	movapd [esp + i2130_izH1], xmm2
	movapd [esp + i2130_ixH2], xmm3
	movapd [esp + i2130_iyH2], xmm4
	movapd [esp + i2130_izH2], xmm5

	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i2130_vctot], xmm4
	movapd [esp + i2130_vnbtot], xmm4
	movapd [esp + i2130_fixO], xmm4
	movapd [esp + i2130_fiyO], xmm4
	movapd [esp + i2130_fizO], xmm4
	movapd [esp + i2130_fixH1], xmm4
	movapd [esp + i2130_fiyH1], xmm4
	movapd [esp + i2130_fizH1], xmm4
	movapd [esp + i2130_fixH2], xmm4
	movapd [esp + i2130_fiyH2], xmm4
	movapd [esp + i2130_fizH2], xmm4
	
	mov   eax, [ebp + i2130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2130_pos]
	mov   edi, [ebp + i2130_faction]	
	mov   eax, [ebp + i2130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i2130_innerk], edx    ;# number of innerloop atoms 
	jge   .i2130_unroll_loop
	jmp   .i2130_checksingle
.i2130_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i2130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + i2130_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i2130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + i2130_jxO], xmm2
	movapd 	[esp + i2130_jyO], xmm3
	movapd 	[esp + i2130_jzO], xmm4
	movapd 	[esp + i2130_jxH1], xmm5
	movapd 	[esp + i2130_jyH1], xmm6
	movapd 	[esp + i2130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + i2130_jxH2], xmm2
	movapd 	[esp + i2130_jyH2], xmm3
	movapd 	[esp + i2130_jzH2], xmm4
	
	movapd xmm0, [esp + i2130_ixO]
	movapd xmm1, [esp + i2130_iyO]
	movapd xmm2, [esp + i2130_izO]
	movapd xmm3, [esp + i2130_ixO]
	movapd xmm4, [esp + i2130_iyO]
	movapd xmm5, [esp + i2130_izO]
	subpd  xmm0, [esp + i2130_jxO]
	subpd  xmm1, [esp + i2130_jyO]
	subpd  xmm2, [esp + i2130_jzO]
	subpd  xmm3, [esp + i2130_jxH1]
	subpd  xmm4, [esp + i2130_jyH1]
	subpd  xmm5, [esp + i2130_jzH1]
	movapd [esp + i2130_dxOO], xmm0
	movapd [esp + i2130_dyOO], xmm1
	movapd [esp + i2130_dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i2130_dxOH1], xmm3
	movapd [esp + i2130_dyOH1], xmm4
	movapd [esp + i2130_dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i2130_rsqOO], xmm0
	movapd [esp + i2130_rsqOH1], xmm3

	movapd xmm0, [esp + i2130_ixO]
	movapd xmm1, [esp + i2130_iyO]
	movapd xmm2, [esp + i2130_izO]
	movapd xmm3, [esp + i2130_ixH1]
	movapd xmm4, [esp + i2130_iyH1]
	movapd xmm5, [esp + i2130_izH1]
	subpd  xmm0, [esp + i2130_jxH2]
	subpd  xmm1, [esp + i2130_jyH2]
	subpd  xmm2, [esp + i2130_jzH2]
	subpd  xmm3, [esp + i2130_jxO]
	subpd  xmm4, [esp + i2130_jyO]
	subpd  xmm5, [esp + i2130_jzO]
	movapd [esp + i2130_dxOH2], xmm0
	movapd [esp + i2130_dyOH2], xmm1
	movapd [esp + i2130_dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i2130_dxH1O], xmm3
	movapd [esp + i2130_dyH1O], xmm4
	movapd [esp + i2130_dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i2130_rsqOH2], xmm0
	movapd [esp + i2130_rsqH1O], xmm3

	movapd xmm0, [esp + i2130_ixH1]
	movapd xmm1, [esp + i2130_iyH1]
	movapd xmm2, [esp + i2130_izH1]
	movapd xmm3, [esp + i2130_ixH1]
	movapd xmm4, [esp + i2130_iyH1]
	movapd xmm5, [esp + i2130_izH1]
	subpd  xmm0, [esp + i2130_jxH1]
	subpd  xmm1, [esp + i2130_jyH1]
	subpd  xmm2, [esp + i2130_jzH1]
	subpd  xmm3, [esp + i2130_jxH2]
	subpd  xmm4, [esp + i2130_jyH2]
	subpd  xmm5, [esp + i2130_jzH2]
	movapd [esp + i2130_dxH1H1], xmm0
	movapd [esp + i2130_dyH1H1], xmm1
	movapd [esp + i2130_dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i2130_dxH1H2], xmm3
	movapd [esp + i2130_dyH1H2], xmm4
	movapd [esp + i2130_dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i2130_rsqH1H1], xmm0
	movapd [esp + i2130_rsqH1H2], xmm3

	movapd xmm0, [esp + i2130_ixH2]
	movapd xmm1, [esp + i2130_iyH2]
	movapd xmm2, [esp + i2130_izH2]
	movapd xmm3, [esp + i2130_ixH2]
	movapd xmm4, [esp + i2130_iyH2]
	movapd xmm5, [esp + i2130_izH2]
	subpd  xmm0, [esp + i2130_jxO]
	subpd  xmm1, [esp + i2130_jyO]
	subpd  xmm2, [esp + i2130_jzO]
	subpd  xmm3, [esp + i2130_jxH1]
	subpd  xmm4, [esp + i2130_jyH1]
	subpd  xmm5, [esp + i2130_jzH1]
	movapd [esp + i2130_dxH2O], xmm0
	movapd [esp + i2130_dyH2O], xmm1
	movapd [esp + i2130_dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i2130_dxH2H1], xmm3
	movapd [esp + i2130_dyH2H1], xmm4
	movapd [esp + i2130_dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + i2130_rsqH2O], xmm0
	movapd [esp + i2130_rsqH2H1], xmm4

	movapd xmm0, [esp + i2130_ixH2]
	movapd xmm1, [esp + i2130_iyH2]
	movapd xmm2, [esp + i2130_izH2]
	subpd  xmm0, [esp + i2130_jxH2]
	subpd  xmm1, [esp + i2130_jyH2]
	subpd  xmm2, [esp + i2130_jzH2]
	movapd [esp + i2130_dxH2H2], xmm0
	movapd [esp + i2130_dyH2H2], xmm1
	movapd [esp + i2130_dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + i2130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i2130_half] ;# iter1 
	mulpd   xmm7, [esp + i2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i2130_half] ;# rinv 
	mulpd   xmm5, [esp + i2130_half] ;# rinv 
	movapd [esp + i2130_rinvH2H2], xmm1
	movapd [esp + i2130_rinvH2H1], xmm5

	movapd xmm0, [esp + i2130_rsqOO]
	movapd xmm4, [esp + i2130_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i2130_half] ;# iter1 of  
	mulpd   xmm7, [esp + i2130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i2130_half] ;# rinv 
	mulpd   xmm5, [esp + i2130_half] ;# rinv
	movapd [esp + i2130_rinvOO], xmm1
	movapd [esp + i2130_rinvOH1], xmm5

	movapd xmm0, [esp + i2130_rsqOH2]
	movapd xmm4, [esp + i2130_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i2130_half] ;# iter1 
	mulpd   xmm7, [esp + i2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i2130_half] ;# rinv 
	mulpd   xmm5, [esp + i2130_half] ;# rinv 
	movapd [esp + i2130_rinvOH2], xmm1
	movapd [esp + i2130_rinvH1O], xmm5

	movapd xmm0, [esp + i2130_rsqH1H1]
	movapd xmm4, [esp + i2130_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i2130_half] ;# iter1a 
	mulpd   xmm7, [esp + i2130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i2130_half] ;# rinv 
	mulpd   xmm5, [esp + i2130_half] ;# rinv 
	movapd [esp + i2130_rinvH1H1], xmm1
	movapd [esp + i2130_rinvH1H2], xmm5

	movapd xmm0, [esp + i2130_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i2130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + i2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i2130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + i2130_half] ;# rinv 
	movapd [esp + i2130_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + i2130_rinvOO]
	movapd xmm7, xmm0		;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]
	mulpd  xmm0, xmm0		;# xmm0=rinvsq 
	movapd xmm1, xmm0
	mulpd  xmm1, xmm0		;# rinvsq*rinvsq 
	mulpd  xmm1, xmm0		;# xmm1=rinvsix 
	mulpd  xmm5, [esp + i2130_rsqOO]	;# xmm5=krsq 
	movapd xmm6, xmm5		;# krsq 
	addpd  xmm6, xmm7		;# xmm6=rinv+ krsq 
	subpd  xmm6, [esp + i2130_crf]	;# rinv+krsq-crf 
	
	mulpd  xmm6, [esp + i2130_qqOO]	;# xmm6=voul=qq*(rinv+ krsq-crf) 
	mulpd  xmm5, [esp + i2130_two]	;# 2*krsq 
	subpd  xmm7, xmm5		;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2130_qqOO]	;# xmm7 = qq*(rinv-2*krsq) 

	movapd xmm2, xmm1		;# rinv6 
	mulpd  xmm2, xmm2		;# xmm2=rinvtwelve 
	mulpd  xmm1, [esp + i2130_c6]	;# c6*rinv6 
	mulpd  xmm2, [esp + i2130_c12]	;# c12*rinv12 
	movapd xmm3, xmm2		;# c12*rinv12 
	subpd  xmm3, xmm1		;# vnb12-vnb6 
	addpd  xmm3, [esp + i2130_vnbtot]	
	mulpd  xmm1, [esp + i2130_six]	;# 6.0*vnb6 
	mulpd  xmm2, [esp + i2130_twelve]	;# 12*vnb12 
	movapd [esp + i2130_vnbtot], xmm3	
	subpd  xmm2, xmm1		;# 12*vnb12-6*vnb6 
	addpd  xmm2, xmm7		;# 12*vnb12-6*vnb6+qq*(rinv-2*krsq) 
	addpd  xmm6, [esp + i2130_vctot] ;# local vctot summation variable 
	mulpd  xmm0, xmm2		;# (12*vnb12-6*vnb6+qq*(rinv-2*krsq))*rinvsq 
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i2130_dxOO]
	mulpd xmm1, [esp + i2130_dyOO]
	mulpd xmm2, [esp + i2130_dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2130_fixO]
	addpd xmm1, [esp + i2130_fiyO]
	addpd xmm2, [esp + i2130_fizO]
	movapd [esp + i2130_fjxO], xmm3
	movapd [esp + i2130_fjyO], xmm4
	movapd [esp + i2130_fjzO], xmm5
	movapd [esp + i2130_fixO], xmm0
	movapd [esp + i2130_fiyO], xmm1
	movapd [esp + i2130_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i2130_rinvOH1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2130_rsqOH1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulpd  xmm0, xmm0
	subpd  xmm4, [esp + i2130_crf]
	mulpd  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2130_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH1  
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i2130_dxOH1]
	mulpd xmm1, [esp + i2130_dyOH1]
	mulpd xmm2, [esp + i2130_dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2130_fixO]
	addpd xmm1, [esp + i2130_fiyO]
	addpd xmm2, [esp + i2130_fizO]
	movapd [esp + i2130_fjxH1], xmm3
	movapd [esp + i2130_fjyH1], xmm4
	movapd [esp + i2130_fjzH1], xmm5
	movapd [esp + i2130_fixO], xmm0
	movapd [esp + i2130_fiyO], xmm1
	movapd [esp + i2130_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i2130_rinvOH2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2130_rsqOH2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + i2130_crf]
	mulpd  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2130_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i2130_dxOH2]
	mulpd xmm1, [esp + i2130_dyOH2]
	mulpd xmm2, [esp + i2130_dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2130_fixO]
	addpd xmm1, [esp + i2130_fiyO]
	addpd xmm2, [esp + i2130_fizO]
	movapd [esp + i2130_fjxH2], xmm3
	movapd [esp + i2130_fjyH2], xmm4
	movapd [esp + i2130_fjzH2], xmm5
	movapd [esp + i2130_fixO], xmm0
	movapd [esp + i2130_fiyO], xmm1
	movapd [esp + i2130_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i2130_rinvH1O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2130_rsqH1O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + i2130_crf]
	mulpd  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2130_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2130_fjxO]
	movapd xmm4, [esp + i2130_fjyO]
	movapd xmm5, [esp + i2130_fjzO]
	mulpd xmm0, [esp + i2130_dxH1O]
	mulpd xmm1, [esp + i2130_dyH1O]
	mulpd xmm2, [esp + i2130_dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2130_fixH1]
	addpd xmm1, [esp + i2130_fiyH1]
	addpd xmm2, [esp + i2130_fizH1]
	movapd [esp + i2130_fjxO], xmm3
	movapd [esp + i2130_fjyO], xmm4
	movapd [esp + i2130_fjzO], xmm5
	movapd [esp + i2130_fixH1], xmm0
	movapd [esp + i2130_fiyH1], xmm1
	movapd [esp + i2130_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i2130_rinvH1H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2130_rsqH1H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + i2130_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2130_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2130_fjxH1]
	movapd xmm4, [esp + i2130_fjyH1]
	movapd xmm5, [esp + i2130_fjzH1]
	mulpd xmm0, [esp + i2130_dxH1H1]
	mulpd xmm1, [esp + i2130_dyH1H1]
	mulpd xmm2, [esp + i2130_dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2130_fixH1]
	addpd xmm1, [esp + i2130_fiyH1]
	addpd xmm2, [esp + i2130_fizH1]
	movapd [esp + i2130_fjxH1], xmm3
	movapd [esp + i2130_fjyH1], xmm4
	movapd [esp + i2130_fjzH1], xmm5
	movapd [esp + i2130_fixH1], xmm0
	movapd [esp + i2130_fiyH1], xmm1
	movapd [esp + i2130_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i2130_rinvH1H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2130_rsqH1H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + i2130_crf]
	mulpd  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2130_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + i2130_fjxH2]
	movapd xmm4, [esp + i2130_fjyH2]
	movapd xmm5, [esp + i2130_fjzH2]
	mulpd xmm0, [esp + i2130_dxH1H2]
	mulpd xmm1, [esp + i2130_dyH1H2]
	mulpd xmm2, [esp + i2130_dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2130_fixH1]
	addpd xmm1, [esp + i2130_fiyH1]
	addpd xmm2, [esp + i2130_fizH1]
	movapd [esp + i2130_fjxH2], xmm3
	movapd [esp + i2130_fjyH2], xmm4
	movapd [esp + i2130_fjzH2], xmm5
	movapd [esp + i2130_fixH1], xmm0
	movapd [esp + i2130_fiyH1], xmm1
	movapd [esp + i2130_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i2130_rinvH2O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2130_rsqH2O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + i2130_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2130_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2130_fjxO]
	movapd xmm4, [esp + i2130_fjyO]
	movapd xmm5, [esp + i2130_fjzO]
	mulpd xmm0, [esp + i2130_dxH2O]
	mulpd xmm1, [esp + i2130_dyH2O]
	mulpd xmm2, [esp + i2130_dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2130_fixH2]
	addpd xmm1, [esp + i2130_fiyH2]
	addpd xmm2, [esp + i2130_fizH2]
	movapd [esp + i2130_fjxO], xmm3
	movapd [esp + i2130_fjyO], xmm4
	movapd [esp + i2130_fjzO], xmm5
	movapd [esp + i2130_fixH2], xmm0
	movapd [esp + i2130_fiyH2], xmm1
	movapd [esp + i2130_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i2130_rinvH2H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2130_rsqH2H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + i2130_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2130_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2130_fjxH1]
	movapd xmm4, [esp + i2130_fjyH1]
	movapd xmm5, [esp + i2130_fjzH1]
	mulpd xmm0, [esp + i2130_dxH2H1]
	mulpd xmm1, [esp + i2130_dyH2H1]
	mulpd xmm2, [esp + i2130_dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2130_fixH2]
	addpd xmm1, [esp + i2130_fiyH2]
	addpd xmm2, [esp + i2130_fizH2]
	movapd [esp + i2130_fjxH1], xmm3
	movapd [esp + i2130_fjyH1], xmm4
	movapd [esp + i2130_fjzH1], xmm5
	movapd [esp + i2130_fixH2], xmm0
	movapd [esp + i2130_fiyH2], xmm1
	movapd [esp + i2130_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i2130_rinvH2H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2130_rsqH2H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + i2130_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2130_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm1, xmm0
	movapd [esp + i2130_vctot], xmm6
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + i2130_fjxH2]
	movapd xmm4, [esp + i2130_fjyH2]
	movapd xmm5, [esp + i2130_fjzH2]
	mulpd xmm0, [esp + i2130_dxH2H2]
	mulpd xmm1, [esp + i2130_dyH2H2]
	mulpd xmm2, [esp + i2130_dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2130_fixH2]
	addpd xmm1, [esp + i2130_fiyH2]
	addpd xmm2, [esp + i2130_fizH2]
	movapd [esp + i2130_fjxH2], xmm3
	movapd [esp + i2130_fjyH2], xmm4
	movapd [esp + i2130_fjzH2], xmm5
	movapd [esp + i2130_fixH2], xmm0
	movapd [esp + i2130_fiyH2], xmm1
	movapd [esp + i2130_fizH2], xmm2

	mov edi, [ebp + i2130_faction]
		
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + i2130_fjxO]
	addpd xmm1, [esp + i2130_fjyO]
	addpd xmm2, [esp + i2130_fjzO]
	addpd xmm3, [esp + i2130_fjxH1]
	addpd xmm4, [esp + i2130_fjyH1]
	addpd xmm5, [esp + i2130_fjzH1]
	addpd xmm6, [esp + i2130_fjxH2]
	addpd xmm7, [esp + i2130_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + i2130_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i2130_innerk],  2
	jl    .i2130_checksingle
	jmp   .i2130_unroll_loop
.i2130_checksingle:
	mov   edx, [esp + i2130_innerk]
	and   edx, 1
	jnz   .i2130_dosingle
	jmp   .i2130_updateouterdata
.i2130_dosingle:
	mov   edx, [esp + i2130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]
	
	mov esi, [ebp + i2130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + i2130_jxO], xmm2
	movapd 	[esp + i2130_jyO], xmm3
	movapd 	[esp + i2130_jzO], xmm4
	movapd 	[esp + i2130_jxH1], xmm5
	movapd 	[esp + i2130_jyH1], xmm6
	movapd 	[esp + i2130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + i2130_jxH2], xmm2
	movapd 	[esp + i2130_jyH2], xmm3
	movapd 	[esp + i2130_jzH2], xmm4
	
	movapd xmm0, [esp + i2130_ixO]
	movapd xmm1, [esp + i2130_iyO]
	movapd xmm2, [esp + i2130_izO]
	movapd xmm3, [esp + i2130_ixO]
	movapd xmm4, [esp + i2130_iyO]
	movapd xmm5, [esp + i2130_izO]
	subsd  xmm0, [esp + i2130_jxO]
	subsd  xmm1, [esp + i2130_jyO]
	subsd  xmm2, [esp + i2130_jzO]
	subsd  xmm3, [esp + i2130_jxH1]
	subsd  xmm4, [esp + i2130_jyH1]
	subsd  xmm5, [esp + i2130_jzH1]
	movapd [esp + i2130_dxOO], xmm0
	movapd [esp + i2130_dyOO], xmm1
	movapd [esp + i2130_dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i2130_dxOH1], xmm3
	movapd [esp + i2130_dyOH1], xmm4
	movapd [esp + i2130_dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i2130_rsqOO], xmm0
	movapd [esp + i2130_rsqOH1], xmm3

	movapd xmm0, [esp + i2130_ixO]
	movapd xmm1, [esp + i2130_iyO]
	movapd xmm2, [esp + i2130_izO]
	movapd xmm3, [esp + i2130_ixH1]
	movapd xmm4, [esp + i2130_iyH1]
	movapd xmm5, [esp + i2130_izH1]
	subsd  xmm0, [esp + i2130_jxH2]
	subsd  xmm1, [esp + i2130_jyH2]
	subsd  xmm2, [esp + i2130_jzH2]
	subsd  xmm3, [esp + i2130_jxO]
	subsd  xmm4, [esp + i2130_jyO]
	subsd  xmm5, [esp + i2130_jzO]
	movapd [esp + i2130_dxOH2], xmm0
	movapd [esp + i2130_dyOH2], xmm1
	movapd [esp + i2130_dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i2130_dxH1O], xmm3
	movapd [esp + i2130_dyH1O], xmm4
	movapd [esp + i2130_dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i2130_rsqOH2], xmm0
	movapd [esp + i2130_rsqH1O], xmm3

	movapd xmm0, [esp + i2130_ixH1]
	movapd xmm1, [esp + i2130_iyH1]
	movapd xmm2, [esp + i2130_izH1]
	movapd xmm3, [esp + i2130_ixH1]
	movapd xmm4, [esp + i2130_iyH1]
	movapd xmm5, [esp + i2130_izH1]
	subsd  xmm0, [esp + i2130_jxH1]
	subsd  xmm1, [esp + i2130_jyH1]
	subsd  xmm2, [esp + i2130_jzH1]
	subsd  xmm3, [esp + i2130_jxH2]
	subsd  xmm4, [esp + i2130_jyH2]
	subsd  xmm5, [esp + i2130_jzH2]
	movapd [esp + i2130_dxH1H1], xmm0
	movapd [esp + i2130_dyH1H1], xmm1
	movapd [esp + i2130_dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i2130_dxH1H2], xmm3
	movapd [esp + i2130_dyH1H2], xmm4
	movapd [esp + i2130_dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i2130_rsqH1H1], xmm0
	movapd [esp + i2130_rsqH1H2], xmm3

	movapd xmm0, [esp + i2130_ixH2]
	movapd xmm1, [esp + i2130_iyH2]
	movapd xmm2, [esp + i2130_izH2]
	movapd xmm3, [esp + i2130_ixH2]
	movapd xmm4, [esp + i2130_iyH2]
	movapd xmm5, [esp + i2130_izH2]
	subsd  xmm0, [esp + i2130_jxO]
	subsd  xmm1, [esp + i2130_jyO]
	subsd  xmm2, [esp + i2130_jzO]
	subsd  xmm3, [esp + i2130_jxH1]
	subsd  xmm4, [esp + i2130_jyH1]
	subsd  xmm5, [esp + i2130_jzH1]
	movapd [esp + i2130_dxH2O], xmm0
	movapd [esp + i2130_dyH2O], xmm1
	movapd [esp + i2130_dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i2130_dxH2H1], xmm3
	movapd [esp + i2130_dyH2H1], xmm4
	movapd [esp + i2130_dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + i2130_rsqH2O], xmm0
	movapd [esp + i2130_rsqH2H1], xmm4

	movapd xmm0, [esp + i2130_ixH2]
	movapd xmm1, [esp + i2130_iyH2]
	movapd xmm2, [esp + i2130_izH2]
	subsd  xmm0, [esp + i2130_jxH2]
	subsd  xmm1, [esp + i2130_jyH2]
	subsd  xmm2, [esp + i2130_jzH2]
	movapd [esp + i2130_dxH2H2], xmm0
	movapd [esp + i2130_dyH2H2], xmm1
	movapd [esp + i2130_dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + i2130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i2130_half] ;# iter1 
	mulsd   xmm7, [esp + i2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i2130_half] ;# rinv 
	mulsd   xmm5, [esp + i2130_half] ;# rinv 
	movapd [esp + i2130_rinvH2H2], xmm1
	movapd [esp + i2130_rinvH2H1], xmm5

	movapd xmm0, [esp + i2130_rsqOO]
	movapd xmm4, [esp + i2130_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i2130_half] ;# iter1 of  
	mulsd   xmm7, [esp + i2130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i2130_half] ;# rinv 
	mulsd   xmm5, [esp + i2130_half] ;# rinv
	movapd [esp + i2130_rinvOO], xmm1
	movapd [esp + i2130_rinvOH1], xmm5

	movapd xmm0, [esp + i2130_rsqOH2]
	movapd xmm4, [esp + i2130_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i2130_half] ;# iter1 
	mulsd   xmm7, [esp + i2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i2130_half] ;# rinv 
	mulsd   xmm5, [esp + i2130_half] ;# rinv 
	movapd [esp + i2130_rinvOH2], xmm1
	movapd [esp + i2130_rinvH1O], xmm5

	movapd xmm0, [esp + i2130_rsqH1H1]
	movapd xmm4, [esp + i2130_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i2130_half] ;# iter1a 
	mulsd   xmm7, [esp + i2130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i2130_half] ;# rinv 
	mulsd   xmm5, [esp + i2130_half] ;# rinv 
	movapd [esp + i2130_rinvH1H1], xmm1
	movapd [esp + i2130_rinvH1H2], xmm5

	movapd xmm0, [esp + i2130_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i2130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + i2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i2130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + i2130_half] ;# rinv 
	movapd [esp + i2130_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + i2130_rinvOO]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]
	mulsd  xmm0, xmm0
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	;# xmm1=rinvsix 
	mulsd  xmm5, [esp + i2130_rsqOO] ;# xmm5=krsq 
	movapd xmm6, xmm5
	addsd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	subsd  xmm6, [esp + i2130_crf]
	
	mulsd  xmm6, [esp + i2130_qqOO] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	mulsd  xmm5, [esp + i2130_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2130_qqOO] ;# xmm7 = coul part of fscal 
	
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm1, [esp + i2130_c6]	
	mulsd  xmm2, [esp + i2130_c12]	
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addsd  xmm3, [esp + i2130_vnbtot]
	mulsd  xmm1, [esp + i2130_six]
	mulsd  xmm2, [esp + i2130_twelve]
	movlpd [esp + i2130_vnbtot], xmm3
	subsd  xmm2, xmm1
	addsd  xmm2, xmm7
	addsd  xmm6, [esp + i2130_vctot] ;# local vctot summation variable 
	mulsd  xmm0, xmm2
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i2130_dxOO]
	mulsd xmm1, [esp + i2130_dyOO]
	mulsd xmm2, [esp + i2130_dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2130_fixO]
	addsd xmm1, [esp + i2130_fiyO]
	addsd xmm2, [esp + i2130_fizO]
	movlpd [esp + i2130_fjxO], xmm3
	movlpd [esp + i2130_fjyO], xmm4
	movlpd [esp + i2130_fjzO], xmm5
	movlpd [esp + i2130_fixO], xmm0
	movlpd [esp + i2130_fiyO], xmm1
	movlpd [esp + i2130_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i2130_rinvOH1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2130_rsqOH1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + i2130_crf]
	mulsd  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2130_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH1  
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i2130_dxOH1]
	mulsd xmm1, [esp + i2130_dyOH1]
	mulsd xmm2, [esp + i2130_dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2130_fixO]
	addsd xmm1, [esp + i2130_fiyO]
	addsd xmm2, [esp + i2130_fizO]
	movlpd [esp + i2130_fjxH1], xmm3
	movlpd [esp + i2130_fjyH1], xmm4
	movlpd [esp + i2130_fjzH1], xmm5
	movlpd [esp + i2130_fixO], xmm0
	movlpd [esp + i2130_fiyO], xmm1
	movlpd [esp + i2130_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i2130_rinvOH2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2130_rsqOH2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + i2130_crf]
	mulsd  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2130_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i2130_dxOH2]
	mulsd xmm1, [esp + i2130_dyOH2]
	mulsd xmm2, [esp + i2130_dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2130_fixO]
	addsd xmm1, [esp + i2130_fiyO]
	addsd xmm2, [esp + i2130_fizO]
	movlpd [esp + i2130_fjxH2], xmm3
	movlpd [esp + i2130_fjyH2], xmm4
	movlpd [esp + i2130_fjzH2], xmm5
	movlpd [esp + i2130_fixO], xmm0
	movlpd [esp + i2130_fiyO], xmm1
	movlpd [esp + i2130_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i2130_rinvH1O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2130_rsqH1O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + i2130_crf]
	mulsd  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2130_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2130_fjxO]
	movapd xmm4, [esp + i2130_fjyO]
	movapd xmm5, [esp + i2130_fjzO]
	mulsd xmm0, [esp + i2130_dxH1O]
	mulsd xmm1, [esp + i2130_dyH1O]
	mulsd xmm2, [esp + i2130_dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2130_fixH1]
	addsd xmm1, [esp + i2130_fiyH1]
	addsd xmm2, [esp + i2130_fizH1]
	movlpd [esp + i2130_fjxO], xmm3
	movlpd [esp + i2130_fjyO], xmm4
	movlpd [esp + i2130_fjzO], xmm5
	movlpd [esp + i2130_fixH1], xmm0
	movlpd [esp + i2130_fiyH1], xmm1
	movlpd [esp + i2130_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i2130_rinvH1H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2130_rsqH1H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + i2130_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2130_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2130_fjxH1]
	movapd xmm4, [esp + i2130_fjyH1]
	movapd xmm5, [esp + i2130_fjzH1]
	mulsd xmm0, [esp + i2130_dxH1H1]
	mulsd xmm1, [esp + i2130_dyH1H1]
	mulsd xmm2, [esp + i2130_dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2130_fixH1]
	addsd xmm1, [esp + i2130_fiyH1]
	addsd xmm2, [esp + i2130_fizH1]
	movlpd [esp + i2130_fjxH1], xmm3
	movlpd [esp + i2130_fjyH1], xmm4
	movlpd [esp + i2130_fjzH1], xmm5
	movlpd [esp + i2130_fixH1], xmm0
	movlpd [esp + i2130_fiyH1], xmm1
	movlpd [esp + i2130_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i2130_rinvH1H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2130_rsqH1H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + i2130_crf]
	mulsd  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2130_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + i2130_fjxH2]
	movapd xmm4, [esp + i2130_fjyH2]
	movapd xmm5, [esp + i2130_fjzH2]
	mulsd xmm0, [esp + i2130_dxH1H2]
	mulsd xmm1, [esp + i2130_dyH1H2]
	mulsd xmm2, [esp + i2130_dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2130_fixH1]
	addsd xmm1, [esp + i2130_fiyH1]
	addsd xmm2, [esp + i2130_fizH1]
	movlpd [esp + i2130_fjxH2], xmm3
	movlpd [esp + i2130_fjyH2], xmm4
	movlpd [esp + i2130_fjzH2], xmm5
	movlpd [esp + i2130_fixH1], xmm0
	movlpd [esp + i2130_fiyH1], xmm1
	movlpd [esp + i2130_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i2130_rinvH2O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2130_rsqH2O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + i2130_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2130_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2130_fjxO]
	movapd xmm4, [esp + i2130_fjyO]
	movapd xmm5, [esp + i2130_fjzO]
	mulsd xmm0, [esp + i2130_dxH2O]
	mulsd xmm1, [esp + i2130_dyH2O]
	mulsd xmm2, [esp + i2130_dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2130_fixH2]
	addsd xmm1, [esp + i2130_fiyH2]
	addsd xmm2, [esp + i2130_fizH2]
	movlpd [esp + i2130_fjxO], xmm3
	movlpd [esp + i2130_fjyO], xmm4
	movlpd [esp + i2130_fjzO], xmm5
	movlpd [esp + i2130_fixH2], xmm0
	movlpd [esp + i2130_fiyH2], xmm1
	movlpd [esp + i2130_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i2130_rinvH2H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2130_rsqH2H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + i2130_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2130_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2130_fjxH1]
	movapd xmm4, [esp + i2130_fjyH1]
	movapd xmm5, [esp + i2130_fjzH1]
	mulsd xmm0, [esp + i2130_dxH2H1]
	mulsd xmm1, [esp + i2130_dyH2H1]
	mulsd xmm2, [esp + i2130_dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2130_fixH2]
	addsd xmm1, [esp + i2130_fiyH2]
	addsd xmm2, [esp + i2130_fizH2]
	movlpd [esp + i2130_fjxH1], xmm3
	movlpd [esp + i2130_fjyH1], xmm4
	movlpd [esp + i2130_fjzH1], xmm5
	movlpd [esp + i2130_fixH2], xmm0
	movlpd [esp + i2130_fiyH2], xmm1
	movlpd [esp + i2130_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i2130_rinvH2H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2130_rsqH2H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + i2130_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2130_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm1, xmm0
	movlpd [esp + i2130_vctot], xmm6
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + i2130_fjxH2]
	movapd xmm4, [esp + i2130_fjyH2]
	movapd xmm5, [esp + i2130_fjzH2]
	mulsd xmm0, [esp + i2130_dxH2H2]
	mulsd xmm1, [esp + i2130_dyH2H2]
	mulsd xmm2, [esp + i2130_dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2130_fixH2]
	addsd xmm1, [esp + i2130_fiyH2]
	addsd xmm2, [esp + i2130_fizH2]
	movlpd [esp + i2130_fjxH2], xmm3
	movlpd [esp + i2130_fjyH2], xmm4
	movlpd [esp + i2130_fjzH2], xmm5
	movlpd [esp + i2130_fixH2], xmm0
	movlpd [esp + i2130_fiyH2], xmm1
	movlpd [esp + i2130_fizH2], xmm2

	mov edi, [ebp + i2130_faction]
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + i2130_fjxO]
	addsd xmm1, [esp + i2130_fjyO]
	addsd xmm2, [esp + i2130_fjzO]
	addsd xmm3, [esp + i2130_fjxH1]
	addsd xmm4, [esp + i2130_fjyH1]
	addsd xmm5, [esp + i2130_fjzH1]
	addsd xmm6, [esp + i2130_fjxH2]
	addsd xmm7, [esp + i2130_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + i2130_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
.i2130_updateouterdata:
	mov   ecx, [esp + i2130_ii3]
	mov   edi, [ebp + i2130_faction]
	mov   esi, [ebp + i2130_fshift]
	mov   edx, [esp + i2130_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2130_fixO]
	movapd xmm1, [esp + i2130_fiyO]
	movapd xmm2, [esp + i2130_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2130_fixH1]
	movapd xmm1, [esp + i2130_fiyH1]
	movapd xmm2, [esp + i2130_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2130_fixH2]
	movapd xmm1, [esp + i2130_fiyH2]
	movapd xmm2, [esp + i2130_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i2130_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i2130_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i2130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i2130_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i2130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + i2130_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2130_nri]
	dec ecx
	jecxz .i2130_end
	;# not last, iterate once more!  
	mov [ebp + i2130_nri], ecx
	jmp .i2130_outer
.i2130_end:
	emms
	mov eax, [esp + i2130_salign]
	add esp, eax
	add esp, 1540
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	

.globl inl2020_sse2
.globl _inl2020_sse2
inl2020_sse2:	
_inl2020_sse2:	
.equiv		i2020_nri,			8
.equiv		i2020_iinr,			12
.equiv		i2020_jindex,		16
.equiv		i2020_jjnr,			20
.equiv		i2020_shift,		24
.equiv		i2020_shiftvec,		28
.equiv		i2020_fshift,		32
.equiv		i2020_gid,			36
.equiv		i2020_pos,			40		
.equiv		i2020_faction,		44
.equiv		i2020_charge,		48
.equiv		i2020_facel,		52 ;# double  
.equiv		i2020_Vc,			60	
.equiv		i2020_argkrf,		64 ;# double  	
.equiv		i2020_argcrf,		72 ;# double  	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i2020_ixO,			0
.equiv		i2020_iyO,			16
.equiv		i2020_izO,			32
.equiv		i2020_ixH1,			48
.equiv		i2020_iyH1,			64
.equiv		i2020_izH1,			80
.equiv		i2020_ixH2,			96
.equiv		i2020_iyH2,			112
.equiv		i2020_izH2,			128
.equiv		i2020_iqO,			144 
.equiv		i2020_iqH,			160 
.equiv		i2020_dxO,			176
.equiv		i2020_dyO,			192
.equiv		i2020_dzO,			208	
.equiv		i2020_dxH1,			224
.equiv		i2020_dyH1,			240
.equiv		i2020_dzH1,			256	
.equiv		i2020_dxH2,			272
.equiv		i2020_dyH2,			288
.equiv		i2020_dzH2,			304	
.equiv		i2020_qqO,			320
.equiv		i2020_qqH,			336
.equiv		i2020_vctot,		352
.equiv		i2020_fixO,			384
.equiv		i2020_fiyO,			400
.equiv		i2020_fizO,			416
.equiv		i2020_fixH1,		432
.equiv		i2020_fiyH1,		448
.equiv		i2020_fizH1,		464
.equiv		i2020_fixH2,		480
.equiv		i2020_fiyH2,		496
.equiv		i2020_fizH2,		512
.equiv		i2020_fjx,			528
.equiv		i2020_fjy,			544
.equiv		i2020_fjz,			560
.equiv		i2020_half,			576
.equiv		i2020_three,		592
.equiv		i2020_two,			608
.equiv		i2020_krf,			624
.equiv		i2020_crf,			640
.equiv		i2020_krsqO,		656
.equiv		i2020_krsqH1,		672
.equiv		i2020_krsqH2,		688	 		
.equiv		i2020_is3,			704
.equiv		i2020_ii3,			708
.equiv		i2020_innerjjnr,	712
.equiv		i2020_innerk,		716
.equiv		i2020_salign,		720
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 724		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2020_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + i2020_argkrf]
	movsd xmm6, [ebp + i2020_argcrf]

	movapd [esp + i2020_half],  xmm0
	movapd [esp + i2020_three], xmm1
	movapd [esp + i2020_two], xmm4
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + i2020_krf], xmm5
	movapd [esp + i2020_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i2020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2020_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + i2020_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + i2020_iqO], xmm3
	movapd [esp + i2020_iqH], xmm4
			
.i2020_outer:
	mov   eax, [ebp + i2020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2020_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2020_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i2020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2020_pos]    ;# eax = base of pos[]  
	mov   [esp + i2020_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i2020_ixO], xmm3
	movapd [esp + i2020_iyO], xmm4
	movapd [esp + i2020_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i2020_ixH1], xmm0
	movapd [esp + i2020_iyH1], xmm1
	movapd [esp + i2020_izH1], xmm2
	movapd [esp + i2020_ixH2], xmm3
	movapd [esp + i2020_iyH2], xmm4
	movapd [esp + i2020_izH2], xmm5
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i2020_vctot], xmm4
	movapd [esp + i2020_fixO], xmm4
	movapd [esp + i2020_fiyO], xmm4
	movapd [esp + i2020_fizO], xmm4
	movapd [esp + i2020_fixH1], xmm4
	movapd [esp + i2020_fiyH1], xmm4
	movapd [esp + i2020_fizH1], xmm4
	movapd [esp + i2020_fixH2], xmm4
	movapd [esp + i2020_fiyH2], xmm4
	movapd [esp + i2020_fizH2], xmm4
	
	mov   eax, [ebp + i2020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2020_pos]
	mov   edi, [ebp + i2020_faction]	
	mov   eax, [ebp + i2020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i2020_innerk], edx    ;# number of innerloop atoms 
	jge   .i2020_unroll_loop
	jmp   .i2020_checksingle
.i2020_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i2020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add dword ptr [esp + i2020_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i2020_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + i2020_iqO]
	mulpd  xmm4, [esp + i2020_iqH]
	movapd  [esp + i2020_qqO], xmm3
	movapd  [esp + i2020_qqH], xmm4	

	mov esi, [ebp + i2020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i2020_ixO]
	movapd xmm5, [esp + i2020_iyO]
	movapd xmm6, [esp + i2020_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i2020_dxO], xmm4
	movapd [esp + i2020_dyO], xmm5
	movapd [esp + i2020_dzO], xmm6

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i2020_ixH1]
	movapd xmm5, [esp + i2020_iyH1]
	movapd xmm6, [esp + i2020_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i2020_dxH1], xmm4
	movapd [esp + i2020_dyH1], xmm5
	movapd [esp + i2020_dzH1], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i2020_ixH2]
	movapd xmm4, [esp + i2020_iyH2]
	movapd xmm5, [esp + i2020_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# store dr 
	movapd [esp + i2020_dxH2], xmm3
	movapd [esp + i2020_dyH2], xmm4
	movapd [esp + i2020_dzH2], xmm5
	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulpd  xmm0, [esp + i2020_krf]	
	mulpd  xmm1, [esp + i2020_krf]	
	mulpd  xmm2, [esp + i2020_krf]	

	movapd [esp + i2020_krsqH2], xmm0
	movapd [esp + i2020_krsqH1], xmm1
	movapd [esp + i2020_krsqO], xmm2
	
	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i2020_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2020_three]
	subpd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i2020_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i2020_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2020_three]
	subpd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i2020_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i2020_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2020_three]
	subpd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i2020_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	movapd  xmm3, xmm7
	movapd  xmm0, [esp + i2020_krsqO]
	addpd   xmm7, xmm0	;# xmm6=rinv+ krsq 
	mulpd   xmm0, [esp + i2020_two]
	subpd   xmm7, [esp + i2020_crf]
	subpd   xmm3, xmm0	;# xmm7=rinv-2*krsq 
	mulpd   xmm7, [esp + i2020_qqO] ;# vcoul 
	mulpd   xmm3, [esp + i2020_qqO]
	mulpd  xmm4, xmm3	;# total fsH1 in xmm4 
	
	addpd  xmm7, [esp + i2020_vctot]

	movapd xmm0, [esp + i2020_dxO]
	movapd xmm1, [esp + i2020_dyO]
	movapd xmm2, [esp + i2020_dzO]
	movapd [esp + i2020_vctot], xmm7
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	
	;# update O forces 
	movapd xmm3, [esp + i2020_fixO]
	movapd xmm4, [esp + i2020_fiyO]
	movapd xmm7, [esp + i2020_fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i2020_fixO], xmm3
	movapd [esp + i2020_fiyO], xmm4
	movapd [esp + i2020_fizO], xmm7
	;# update j forces with water O 
	movapd [esp + i2020_fjx], xmm0
	movapd [esp + i2020_fjy], xmm1
	movapd [esp + i2020_fjz], xmm2

	;# H1 interactions 
	movapd  xmm4, xmm6	
	mulpd   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	movapd  xmm7, xmm6
	movapd  xmm0, [esp + i2020_krsqH1]
	addpd   xmm6, xmm0	;# xmm6=rinv+ krsq 
	mulpd   xmm0, [esp + i2020_two]
	subpd   xmm6, [esp + i2020_crf]
	subpd   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulpd   xmm6, [esp + i2020_qqH] ;# vcoul 
	mulpd   xmm7, [esp + i2020_qqH]
	mulpd  xmm4, xmm7		;# total fsH1 in xmm4 
	
	addpd  xmm6, [esp + i2020_vctot]

	movapd xmm0, [esp + i2020_dxH1]
	movapd xmm1, [esp + i2020_dyH1]
	movapd xmm2, [esp + i2020_dzH1]
	movapd [esp + i2020_vctot], xmm6
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i2020_fixH1]
	movapd xmm4, [esp + i2020_fiyH1]
	movapd xmm7, [esp + i2020_fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i2020_fixH1], xmm3
	movapd [esp + i2020_fiyH1], xmm4
	movapd [esp + i2020_fizH1], xmm7
	;# update j forces with water H1 
	addpd  xmm0, [esp + i2020_fjx]
	addpd  xmm1, [esp + i2020_fjy]
	addpd  xmm2, [esp + i2020_fjz]
	movapd [esp + i2020_fjx], xmm0
	movapd [esp + i2020_fjy], xmm1
	movapd [esp + i2020_fjz], xmm2

	;# H2 interactions 
	movapd  xmm4, xmm5	
	mulpd   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	movapd  xmm7, xmm5
	movapd  xmm0, [esp + i2020_krsqH2]
	addpd   xmm5, xmm0	;# xmm5=rinv+ krsq 
	mulpd   xmm0, [esp + i2020_two]
	subpd   xmm5, [esp + i2020_crf]
	subpd   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulpd   xmm5, [esp + i2020_qqH] ;# vcoul 
	mulpd   xmm7, [esp + i2020_qqH]
	mulpd  xmm4, xmm7		;# total fsH2 in xmm4 
	
	addpd  xmm5, [esp + i2020_vctot]

	movapd xmm0, [esp + i2020_dxH2]
	movapd xmm1, [esp + i2020_dyH2]
	movapd xmm2, [esp + i2020_dzH2]
	movapd [esp + i2020_vctot], xmm5
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H2 forces 
	movapd xmm3, [esp + i2020_fixH2]
	movapd xmm4, [esp + i2020_fiyH2]
	movapd xmm7, [esp + i2020_fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i2020_fixH2], xmm3
	movapd [esp + i2020_fiyH2], xmm4
	movapd [esp + i2020_fizH2], xmm7

	mov edi, [ebp + i2020_faction]
	;# update j forces 
	addpd  xmm0, [esp + i2020_fjx]
	addpd  xmm1, [esp + i2020_fjy]
	addpd  xmm2, [esp + i2020_fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5		
		
	;# should we do one more iteration? 
	sub dword ptr [esp + i2020_innerk],  2
	jl    .i2020_checksingle
	jmp   .i2020_unroll_loop
.i2020_checksingle:	
	mov   edx, [esp + i2020_innerk]
	and   edx, 1
	jnz   .i2020_dosingle
	jmp   .i2020_updateouterdata
.i2020_dosingle:
	mov   edx, [esp + i2020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i2020_innerjjnr],  4	

	mov esi, [ebp + i2020_charge]    ;# base of charge[] 
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + i2020_iqO]
	mulpd  xmm4, [esp + i2020_iqH]
	movapd  [esp + i2020_qqO], xmm3
	movapd  [esp + i2020_qqH], xmm4
	
	mov esi, [ebp + i2020_pos]       ;# base of pos[] 
	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i2020_ixO]
	movapd xmm5, [esp + i2020_iyO]
	movapd xmm6, [esp + i2020_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i2020_dxO], xmm4
	movapd [esp + i2020_dyO], xmm5
	movapd [esp + i2020_dzO], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i2020_ixH1]
	movapd xmm5, [esp + i2020_iyH1]
	movapd xmm6, [esp + i2020_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i2020_dxH1], xmm4
	movapd [esp + i2020_dyH1], xmm5
	movapd [esp + i2020_dzH1], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i2020_ixH2]
	movapd xmm4, [esp + i2020_iyH2]
	movapd xmm5, [esp + i2020_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# store dr 
	movapd [esp + i2020_dxH2], xmm3
	movapd [esp + i2020_dyH2], xmm4
	movapd [esp + i2020_dzH2], xmm5
	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 
	
	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulsd  xmm0, [esp + i2020_krf]	
	mulsd  xmm1, [esp + i2020_krf]	
	mulsd  xmm2, [esp + i2020_krf]	

	movapd [esp + i2020_krsqH2], xmm0
	movapd [esp + i2020_krsqH1], xmm1
	movapd [esp + i2020_krsqO], xmm2
	
	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i2020_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2020_three]
	subsd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i2020_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i2020_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2020_three]
	subsd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i2020_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i2020_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i2020_three]
	subsd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i2020_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	movapd  xmm3, xmm7
	movapd  xmm0, [esp + i2020_krsqO]
	addsd   xmm7, xmm0	;# xmm6=rinv+ krsq 
	mulsd   xmm0, [esp + i2020_two]
	subsd   xmm7, [esp + i2020_crf]
	subsd   xmm3, xmm0	;# xmm7=rinv-2*krsq 
	mulsd   xmm7, [esp + i2020_qqO] ;# vcoul 
	mulsd   xmm3, [esp + i2020_qqO]
	mulsd  xmm4, xmm3	;# total fsH1 in xmm4 
	
	addsd  xmm7, [esp + i2020_vctot]

	movapd xmm0, [esp + i2020_dxO]
	movapd xmm1, [esp + i2020_dyO]
	movapd xmm2, [esp + i2020_dzO]
	movlpd [esp + i2020_vctot], xmm7
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update O forces 
	movapd xmm3, [esp + i2020_fixO]
	movapd xmm4, [esp + i2020_fiyO]
	movapd xmm7, [esp + i2020_fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i2020_fixO], xmm3
	movlpd [esp + i2020_fiyO], xmm4
	movlpd [esp + i2020_fizO], xmm7
	;# update j forces with water O 
	movlpd [esp + i2020_fjx], xmm0
	movlpd [esp + i2020_fjy], xmm1
	movlpd [esp + i2020_fjz], xmm2

	;# H1 interactions 
	movapd  xmm4, xmm6	
	mulsd   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	movapd  xmm7, xmm6
	movapd  xmm0, [esp + i2020_krsqH1]
	addsd   xmm6, xmm0	;# xmm6=rinv+ krsq 
	mulsd   xmm0, [esp + i2020_two]
	subsd   xmm6, [esp + i2020_crf]
	subsd   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulsd   xmm6, [esp + i2020_qqH] ;# vcoul 
	mulsd   xmm7, [esp + i2020_qqH]
	mulsd  xmm4, xmm7		;# total fsH1 in xmm4 
	
	addsd  xmm6, [esp + i2020_vctot]

	movapd xmm0, [esp + i2020_dxH1]
	movapd xmm1, [esp + i2020_dyH1]
	movapd xmm2, [esp + i2020_dzH1]
	movlpd [esp + i2020_vctot], xmm6
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i2020_fixH1]
	movapd xmm4, [esp + i2020_fiyH1]
	movapd xmm7, [esp + i2020_fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i2020_fixH1], xmm3
	movlpd [esp + i2020_fiyH1], xmm4
	movlpd [esp + i2020_fizH1], xmm7
	;# update j forces with water H1 
	addsd  xmm0, [esp + i2020_fjx]
	addsd  xmm1, [esp + i2020_fjy]
	addsd  xmm2, [esp + i2020_fjz]
	movlpd [esp + i2020_fjx], xmm0
	movlpd [esp + i2020_fjy], xmm1
	movlpd [esp + i2020_fjz], xmm2

	;# H2 interactions 
	movapd  xmm4, xmm5	
	mulsd   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	movapd  xmm7, xmm5
	movapd  xmm0, [esp + i2020_krsqH2]
	addsd   xmm5, xmm0	;# xmm5=rinv+ krsq 
	mulsd   xmm0, [esp + i2020_two]
	subsd   xmm5, [esp + i2020_crf]
	subsd   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulsd   xmm5, [esp + i2020_qqH] ;# vcoul 
	mulsd   xmm7, [esp + i2020_qqH]
	mulsd  xmm4, xmm7		;# total fsH2 in xmm4 
	
	addsd  xmm5, [esp + i2020_vctot]

	movapd xmm0, [esp + i2020_dxH2]
	movapd xmm1, [esp + i2020_dyH2]
	movapd xmm2, [esp + i2020_dzH2]
	movlpd [esp + i2020_vctot], xmm5
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H2 forces 
	movapd xmm3, [esp + i2020_fixH2]
	movapd xmm4, [esp + i2020_fiyH2]
	movapd xmm7, [esp + i2020_fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i2020_fixH2], xmm3
	movlpd [esp + i2020_fiyH2], xmm4
	movlpd [esp + i2020_fizH2], xmm7

	mov edi, [ebp + i2020_faction]
	;# update j forces 
	addsd  xmm0, [esp + i2020_fjx]
	addsd  xmm1, [esp + i2020_fjy]
	addsd  xmm2, [esp + i2020_fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5	

.i2020_updateouterdata:
	mov   ecx, [esp + i2020_ii3]
	mov   edi, [ebp + i2020_faction]
	mov   esi, [ebp + i2020_fshift]
	mov   edx, [esp + i2020_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2020_fixO]
	movapd xmm1, [esp + i2020_fiyO]
	movapd xmm2, [esp + i2020_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2020_fixH1]
	movapd xmm1, [esp + i2020_fiyH1]
	movapd xmm2, [esp + i2020_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2020_fixH2]
	movapd xmm1, [esp + i2020_fiyH2]
	movapd xmm2, [esp + i2020_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i2020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i2020_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i2020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + i2020_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2020_nri]
	dec ecx
	jecxz .i2020_end
	;# not last, iterate once more!  
	mov [ebp + i2020_nri], ecx
	jmp .i2020_outer
.i2020_end:
	emms
	mov eax, [esp + i2020_salign]
	add esp, eax
	add esp, 724
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl inl2030_sse2
.globl _inl2030_sse2
inl2030_sse2:	
_inl2030_sse2:	
.equiv		i2030_nri,			8
.equiv		i2030_iinr,			12
.equiv		i2030_jindex,		16
.equiv		i2030_jjnr,			20
.equiv		i2030_shift,		24
.equiv		i2030_shiftvec,		28
.equiv		i2030_fshift,		32
.equiv		i2030_gid,			36
.equiv		i2030_pos,			40		
.equiv		i2030_faction,		44
.equiv		i2030_charge,		48
.equiv		i2030_facel,		52 ;# double  
.equiv		i2030_Vc,			60	
.equiv		i2030_argkrf,		64 ;# double  
.equiv		i2030_argcrf,		72 ;# double  
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i2030_ixO,			0
.equiv		i2030_iyO,			16
.equiv		i2030_izO,			32
.equiv		i2030_ixH1,			48
.equiv		i2030_iyH1,			64
.equiv		i2030_izH1,			80
.equiv		i2030_ixH2,			96
.equiv		i2030_iyH2,			112
.equiv		i2030_izH2,			128
.equiv		i2030_jxO,			144
.equiv		i2030_jyO,			160
.equiv		i2030_jzO,			176
.equiv		i2030_jxH1,			192
.equiv		i2030_jyH1,			208
.equiv		i2030_jzH1,			224
.equiv		i2030_jxH2,			240
.equiv		i2030_jyH2,			256
.equiv		i2030_jzH2,			272
.equiv		i2030_dxOO,			288
.equiv		i2030_dyOO,			304
.equiv		i2030_dzOO,			320	
.equiv		i2030_dxOH1,		336
.equiv		i2030_dyOH1,		352
.equiv		i2030_dzOH1,		368	
.equiv		i2030_dxOH2,		384
.equiv		i2030_dyOH2,		400
.equiv		i2030_dzOH2,		416	
.equiv		i2030_dxH1O,		432
.equiv		i2030_dyH1O,		448
.equiv		i2030_dzH1O,		464	
.equiv		i2030_dxH1H1,		480
.equiv		i2030_dyH1H1,		496
.equiv		i2030_dzH1H1,		512	
.equiv		i2030_dxH1H2,		528
.equiv		i2030_dyH1H2,		544
.equiv		i2030_dzH1H2,		560	
.equiv		i2030_dxH2O,		576
.equiv		i2030_dyH2O,		592
.equiv		i2030_dzH2O,		608	
.equiv		i2030_dxH2H1,		624
.equiv		i2030_dyH2H1,		640
.equiv		i2030_dzH2H1,		656	
.equiv		i2030_dxH2H2,		672
.equiv		i2030_dyH2H2,		688
.equiv		i2030_dzH2H2,		704
.equiv		i2030_qqOO,			720
.equiv		i2030_qqOH,			736
.equiv		i2030_qqHH,			752
.equiv		i2030_vctot,		768
.equiv		i2030_fixO,			784
.equiv		i2030_fiyO,			800
.equiv		i2030_fizO,			816
.equiv		i2030_fixH1,		832
.equiv		i2030_fiyH1,		848
.equiv		i2030_fizH1,		864
.equiv		i2030_fixH2,		880
.equiv		i2030_fiyH2,		896
.equiv		i2030_fizH2,		912
.equiv		i2030_fjxO,			928
.equiv		i2030_fjyO,			944
.equiv		i2030_fjzO,			960
.equiv		i2030_fjxH1,		976
.equiv		i2030_fjyH1,		992
.equiv		i2030_fjzH1,		1008
.equiv		i2030_fjxH2,		1024
.equiv		i2030_fjyH2,		1040
.equiv		i2030_fjzH2,		1056
.equiv		i2030_half,			1072
.equiv		i2030_three,		1088
.equiv		i2030_rsqOO,		1104
.equiv		i2030_rsqOH1,		1120
.equiv		i2030_rsqOH2,		1136
.equiv		i2030_rsqH1O,		1152
.equiv		i2030_rsqH1H1,		1168
.equiv		i2030_rsqH1H2,		1184
.equiv		i2030_rsqH2O,		1200
.equiv		i2030_rsqH2H1,		1216
.equiv		i2030_rsqH2H2,		1232
.equiv		i2030_rinvOO,		1248
.equiv		i2030_rinvOH1,		1264
.equiv		i2030_rinvOH2,		1280
.equiv		i2030_rinvH1O,		1296
.equiv		i2030_rinvH1H1,		1312
.equiv		i2030_rinvH1H2,		1328
.equiv		i2030_rinvH2O,		1344
.equiv		i2030_rinvH2H1,		1360
.equiv		i2030_rinvH2H2,		1376
.equiv		i2030_two,			1392
.equiv		i2030_krf,			1408	
.equiv		i2030_crf,			1424
.equiv		i2030_is3,			1440
.equiv		i2030_ii3,			1444
.equiv		i2030_innerjjnr,	1448
.equiv		i2030_innerk,		1452
.equiv		i2030_salign,		1456							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1460		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2030_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + i2030_argkrf]
	movsd xmm6, [ebp + i2030_argcrf]
	
	movapd [esp + i2030_half],  xmm0
	movapd [esp + i2030_three], xmm1
	movapd [esp + i2030_two], xmm4
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + i2030_krf], xmm5
	movapd [esp + i2030_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i2030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2030_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + i2030_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i2030_qqOO], xmm3
	movapd [esp + i2030_qqOH], xmm4
	movapd [esp + i2030_qqHH], xmm5
	
.i2030_outer:
	mov   eax, [ebp + i2030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2030_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2030_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i2030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2030_pos]    ;# eax = base of pos[]  
	mov   [esp + i2030_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i2030_ixO], xmm3
	movapd [esp + i2030_iyO], xmm4
	movapd [esp + i2030_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i2030_ixH1], xmm0
	movapd [esp + i2030_iyH1], xmm1
	movapd [esp + i2030_izH1], xmm2
	movapd [esp + i2030_ixH2], xmm3
	movapd [esp + i2030_iyH2], xmm4
	movapd [esp + i2030_izH2], xmm5

	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i2030_vctot], xmm4
	movapd [esp + i2030_fixO], xmm4
	movapd [esp + i2030_fiyO], xmm4
	movapd [esp + i2030_fizO], xmm4
	movapd [esp + i2030_fixH1], xmm4
	movapd [esp + i2030_fiyH1], xmm4
	movapd [esp + i2030_fizH1], xmm4
	movapd [esp + i2030_fixH2], xmm4
	movapd [esp + i2030_fiyH2], xmm4
	movapd [esp + i2030_fizH2], xmm4
	
	mov   eax, [ebp + i2030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2030_pos]
	mov   edi, [ebp + i2030_faction]	
	mov   eax, [ebp + i2030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i2030_innerk], edx    ;# number of innerloop atoms 
	jge   .i2030_unroll_loop
	jmp   .i2030_checksingle
.i2030_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i2030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + i2030_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i2030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + i2030_jxO], xmm2
	movapd 	[esp + i2030_jyO], xmm3
	movapd 	[esp + i2030_jzO], xmm4
	movapd 	[esp + i2030_jxH1], xmm5
	movapd 	[esp + i2030_jyH1], xmm6
	movapd 	[esp + i2030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + i2030_jxH2], xmm2
	movapd 	[esp + i2030_jyH2], xmm3
	movapd 	[esp + i2030_jzH2], xmm4
	
	movapd xmm0, [esp + i2030_ixO]
	movapd xmm1, [esp + i2030_iyO]
	movapd xmm2, [esp + i2030_izO]
	movapd xmm3, [esp + i2030_ixO]
	movapd xmm4, [esp + i2030_iyO]
	movapd xmm5, [esp + i2030_izO]
	subpd  xmm0, [esp + i2030_jxO]
	subpd  xmm1, [esp + i2030_jyO]
	subpd  xmm2, [esp + i2030_jzO]
	subpd  xmm3, [esp + i2030_jxH1]
	subpd  xmm4, [esp + i2030_jyH1]
	subpd  xmm5, [esp + i2030_jzH1]
	movapd [esp + i2030_dxOO], xmm0
	movapd [esp + i2030_dyOO], xmm1
	movapd [esp + i2030_dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i2030_dxOH1], xmm3
	movapd [esp + i2030_dyOH1], xmm4
	movapd [esp + i2030_dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i2030_rsqOO], xmm0
	movapd [esp + i2030_rsqOH1], xmm3

	movapd xmm0, [esp + i2030_ixO]
	movapd xmm1, [esp + i2030_iyO]
	movapd xmm2, [esp + i2030_izO]
	movapd xmm3, [esp + i2030_ixH1]
	movapd xmm4, [esp + i2030_iyH1]
	movapd xmm5, [esp + i2030_izH1]
	subpd  xmm0, [esp + i2030_jxH2]
	subpd  xmm1, [esp + i2030_jyH2]
	subpd  xmm2, [esp + i2030_jzH2]
	subpd  xmm3, [esp + i2030_jxO]
	subpd  xmm4, [esp + i2030_jyO]
	subpd  xmm5, [esp + i2030_jzO]
	movapd [esp + i2030_dxOH2], xmm0
	movapd [esp + i2030_dyOH2], xmm1
	movapd [esp + i2030_dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i2030_dxH1O], xmm3
	movapd [esp + i2030_dyH1O], xmm4
	movapd [esp + i2030_dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i2030_rsqOH2], xmm0
	movapd [esp + i2030_rsqH1O], xmm3

	movapd xmm0, [esp + i2030_ixH1]
	movapd xmm1, [esp + i2030_iyH1]
	movapd xmm2, [esp + i2030_izH1]
	movapd xmm3, [esp + i2030_ixH1]
	movapd xmm4, [esp + i2030_iyH1]
	movapd xmm5, [esp + i2030_izH1]
	subpd  xmm0, [esp + i2030_jxH1]
	subpd  xmm1, [esp + i2030_jyH1]
	subpd  xmm2, [esp + i2030_jzH1]
	subpd  xmm3, [esp + i2030_jxH2]
	subpd  xmm4, [esp + i2030_jyH2]
	subpd  xmm5, [esp + i2030_jzH2]
	movapd [esp + i2030_dxH1H1], xmm0
	movapd [esp + i2030_dyH1H1], xmm1
	movapd [esp + i2030_dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i2030_dxH1H2], xmm3
	movapd [esp + i2030_dyH1H2], xmm4
	movapd [esp + i2030_dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i2030_rsqH1H1], xmm0
	movapd [esp + i2030_rsqH1H2], xmm3

	movapd xmm0, [esp + i2030_ixH2]
	movapd xmm1, [esp + i2030_iyH2]
	movapd xmm2, [esp + i2030_izH2]
	movapd xmm3, [esp + i2030_ixH2]
	movapd xmm4, [esp + i2030_iyH2]
	movapd xmm5, [esp + i2030_izH2]
	subpd  xmm0, [esp + i2030_jxO]
	subpd  xmm1, [esp + i2030_jyO]
	subpd  xmm2, [esp + i2030_jzO]
	subpd  xmm3, [esp + i2030_jxH1]
	subpd  xmm4, [esp + i2030_jyH1]
	subpd  xmm5, [esp + i2030_jzH1]
	movapd [esp + i2030_dxH2O], xmm0
	movapd [esp + i2030_dyH2O], xmm1
	movapd [esp + i2030_dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i2030_dxH2H1], xmm3
	movapd [esp + i2030_dyH2H1], xmm4
	movapd [esp + i2030_dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + i2030_rsqH2O], xmm0
	movapd [esp + i2030_rsqH2H1], xmm4

	movapd xmm0, [esp + i2030_ixH2]
	movapd xmm1, [esp + i2030_iyH2]
	movapd xmm2, [esp + i2030_izH2]
	subpd  xmm0, [esp + i2030_jxH2]
	subpd  xmm1, [esp + i2030_jyH2]
	subpd  xmm2, [esp + i2030_jzH2]
	movapd [esp + i2030_dxH2H2], xmm0
	movapd [esp + i2030_dyH2H2], xmm1
	movapd [esp + i2030_dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + i2030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i2030_half] ;# iter1 
	mulpd   xmm7, [esp + i2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i2030_half] ;# rinv 
	mulpd   xmm5, [esp + i2030_half] ;# rinv 
	movapd [esp + i2030_rinvH2H2], xmm1
	movapd [esp + i2030_rinvH2H1], xmm5

	movapd xmm0, [esp + i2030_rsqOO]
	movapd xmm4, [esp + i2030_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i2030_half] ;# iter1 of  
	mulpd   xmm7, [esp + i2030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i2030_half] ;# rinv 
	mulpd   xmm5, [esp + i2030_half] ;# rinv
	movapd [esp + i2030_rinvOO], xmm1
	movapd [esp + i2030_rinvOH1], xmm5

	movapd xmm0, [esp + i2030_rsqOH2]
	movapd xmm4, [esp + i2030_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i2030_half] ;# iter1 
	mulpd   xmm7, [esp + i2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i2030_half] ;# rinv 
	mulpd   xmm5, [esp + i2030_half] ;# rinv 
	movapd [esp + i2030_rinvOH2], xmm1
	movapd [esp + i2030_rinvH1O], xmm5

	movapd xmm0, [esp + i2030_rsqH1H1]
	movapd xmm4, [esp + i2030_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i2030_half] ;# iter1a 
	mulpd   xmm7, [esp + i2030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i2030_half] ;# rinv 
	mulpd   xmm5, [esp + i2030_half] ;# rinv 
	movapd [esp + i2030_rinvH1H1], xmm1
	movapd [esp + i2030_rinvH1H2], xmm5

	movapd xmm0, [esp + i2030_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i2030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + i2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i2030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + i2030_half] ;# rinv 
	movapd [esp + i2030_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + i2030_rinvOO]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]
	mulpd  xmm0, xmm0	;# rinvsq 
	mulpd  xmm5, [esp + i2030_rsqOO] ;# xmm5=krsq 
	movapd xmm6, xmm5
	addpd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	subpd  xmm6, [esp + i2030_crf]
	
	mulpd  xmm6, [esp + i2030_qqOO] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	mulpd  xmm5, [esp + i2030_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2030_qqOO] ;# xmm7 = coul part of fscal 
	
	addpd  xmm6, [esp + i2030_vctot] ;# local vctot summation variable 
	mulpd  xmm0, xmm7
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i2030_dxOO]
	mulpd xmm1, [esp + i2030_dyOO]
	mulpd xmm2, [esp + i2030_dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2030_fixO]
	addpd xmm1, [esp + i2030_fiyO]
	addpd xmm2, [esp + i2030_fizO]
	movapd [esp + i2030_fjxO], xmm3
	movapd [esp + i2030_fjyO], xmm4
	movapd [esp + i2030_fjzO], xmm5
	movapd [esp + i2030_fixO], xmm0
	movapd [esp + i2030_fiyO], xmm1
	movapd [esp + i2030_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i2030_rinvOH1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2030_rsqOH1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulpd  xmm0, xmm0
	subpd  xmm4, [esp + i2030_crf]
	mulpd  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2030_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH1  
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i2030_dxOH1]
	mulpd xmm1, [esp + i2030_dyOH1]
	mulpd xmm2, [esp + i2030_dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2030_fixO]
	addpd xmm1, [esp + i2030_fiyO]
	addpd xmm2, [esp + i2030_fizO]
	movapd [esp + i2030_fjxH1], xmm3
	movapd [esp + i2030_fjyH1], xmm4
	movapd [esp + i2030_fjzH1], xmm5
	movapd [esp + i2030_fixO], xmm0
	movapd [esp + i2030_fiyO], xmm1
	movapd [esp + i2030_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i2030_rinvOH2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2030_rsqOH2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + i2030_crf]
	mulpd  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2030_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i2030_dxOH2]
	mulpd xmm1, [esp + i2030_dyOH2]
	mulpd xmm2, [esp + i2030_dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2030_fixO]
	addpd xmm1, [esp + i2030_fiyO]
	addpd xmm2, [esp + i2030_fizO]
	movapd [esp + i2030_fjxH2], xmm3
	movapd [esp + i2030_fjyH2], xmm4
	movapd [esp + i2030_fjzH2], xmm5
	movapd [esp + i2030_fixO], xmm0
	movapd [esp + i2030_fiyO], xmm1
	movapd [esp + i2030_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i2030_rinvH1O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2030_rsqH1O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + i2030_crf]
	mulpd  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2030_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2030_fjxO]
	movapd xmm4, [esp + i2030_fjyO]
	movapd xmm5, [esp + i2030_fjzO]
	mulpd xmm0, [esp + i2030_dxH1O]
	mulpd xmm1, [esp + i2030_dyH1O]
	mulpd xmm2, [esp + i2030_dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2030_fixH1]
	addpd xmm1, [esp + i2030_fiyH1]
	addpd xmm2, [esp + i2030_fizH1]
	movapd [esp + i2030_fjxO], xmm3
	movapd [esp + i2030_fjyO], xmm4
	movapd [esp + i2030_fjzO], xmm5
	movapd [esp + i2030_fixH1], xmm0
	movapd [esp + i2030_fiyH1], xmm1
	movapd [esp + i2030_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i2030_rinvH1H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2030_rsqH1H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + i2030_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2030_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2030_fjxH1]
	movapd xmm4, [esp + i2030_fjyH1]
	movapd xmm5, [esp + i2030_fjzH1]
	mulpd xmm0, [esp + i2030_dxH1H1]
	mulpd xmm1, [esp + i2030_dyH1H1]
	mulpd xmm2, [esp + i2030_dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2030_fixH1]
	addpd xmm1, [esp + i2030_fiyH1]
	addpd xmm2, [esp + i2030_fizH1]
	movapd [esp + i2030_fjxH1], xmm3
	movapd [esp + i2030_fjyH1], xmm4
	movapd [esp + i2030_fjzH1], xmm5
	movapd [esp + i2030_fixH1], xmm0
	movapd [esp + i2030_fiyH1], xmm1
	movapd [esp + i2030_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i2030_rinvH1H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2030_rsqH1H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + i2030_crf]
	mulpd  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2030_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + i2030_fjxH2]
	movapd xmm4, [esp + i2030_fjyH2]
	movapd xmm5, [esp + i2030_fjzH2]
	mulpd xmm0, [esp + i2030_dxH1H2]
	mulpd xmm1, [esp + i2030_dyH1H2]
	mulpd xmm2, [esp + i2030_dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2030_fixH1]
	addpd xmm1, [esp + i2030_fiyH1]
	addpd xmm2, [esp + i2030_fizH1]
	movapd [esp + i2030_fjxH2], xmm3
	movapd [esp + i2030_fjyH2], xmm4
	movapd [esp + i2030_fjzH2], xmm5
	movapd [esp + i2030_fixH1], xmm0
	movapd [esp + i2030_fiyH1], xmm1
	movapd [esp + i2030_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i2030_rinvH2O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2030_rsqH2O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + i2030_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2030_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2030_fjxO]
	movapd xmm4, [esp + i2030_fjyO]
	movapd xmm5, [esp + i2030_fjzO]
	mulpd xmm0, [esp + i2030_dxH2O]
	mulpd xmm1, [esp + i2030_dyH2O]
	mulpd xmm2, [esp + i2030_dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2030_fixH2]
	addpd xmm1, [esp + i2030_fiyH2]
	addpd xmm2, [esp + i2030_fizH2]
	movapd [esp + i2030_fjxO], xmm3
	movapd [esp + i2030_fjyO], xmm4
	movapd [esp + i2030_fjzO], xmm5
	movapd [esp + i2030_fixH2], xmm0
	movapd [esp + i2030_fiyH2], xmm1
	movapd [esp + i2030_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i2030_rinvH2H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2030_rsqH2H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + i2030_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2030_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2030_fjxH1]
	movapd xmm4, [esp + i2030_fjyH1]
	movapd xmm5, [esp + i2030_fjzH1]
	mulpd xmm0, [esp + i2030_dxH2H1]
	mulpd xmm1, [esp + i2030_dyH2H1]
	mulpd xmm2, [esp + i2030_dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2030_fixH2]
	addpd xmm1, [esp + i2030_fiyH2]
	addpd xmm2, [esp + i2030_fizH2]
	movapd [esp + i2030_fjxH1], xmm3
	movapd [esp + i2030_fjyH1], xmm4
	movapd [esp + i2030_fjzH1], xmm5
	movapd [esp + i2030_fixH2], xmm0
	movapd [esp + i2030_fiyH2], xmm1
	movapd [esp + i2030_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i2030_rinvH2H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + i2030_rsqH2H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + i2030_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulpd  xmm5, [esp + i2030_two]
	subpd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulpd  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addpd  xmm6, xmm4	;# add to local vctot 
	mulpd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm1, xmm0
	movapd [esp + i2030_vctot], xmm6
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + i2030_fjxH2]
	movapd xmm4, [esp + i2030_fjyH2]
	movapd xmm5, [esp + i2030_fjzH2]
	mulpd xmm0, [esp + i2030_dxH2H2]
	mulpd xmm1, [esp + i2030_dyH2H2]
	mulpd xmm2, [esp + i2030_dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i2030_fixH2]
	addpd xmm1, [esp + i2030_fiyH2]
	addpd xmm2, [esp + i2030_fizH2]
	movapd [esp + i2030_fjxH2], xmm3
	movapd [esp + i2030_fjyH2], xmm4
	movapd [esp + i2030_fjzH2], xmm5
	movapd [esp + i2030_fixH2], xmm0
	movapd [esp + i2030_fiyH2], xmm1
	movapd [esp + i2030_fizH2], xmm2

	mov edi, [ebp + i2030_faction]
		
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + i2030_fjxO]
	addpd xmm1, [esp + i2030_fjyO]
	addpd xmm2, [esp + i2030_fjzO]
	addpd xmm3, [esp + i2030_fjxH1]
	addpd xmm4, [esp + i2030_fjyH1]
	addpd xmm5, [esp + i2030_fjzH1]
	addpd xmm6, [esp + i2030_fjxH2]
	addpd xmm7, [esp + i2030_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + i2030_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i2030_innerk],  2
	jl    .i2030_checksingle
	jmp   .i2030_unroll_loop
.i2030_checksingle:
	mov   edx, [esp + i2030_innerk]
	and   edx, 1
	jnz   .i2030_dosingle
	jmp   .i2030_updateouterdata
.i2030_dosingle:
	mov   edx, [esp + i2030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]
	
	mov esi, [ebp + i2030_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + i2030_jxO], xmm2
	movapd 	[esp + i2030_jyO], xmm3
	movapd 	[esp + i2030_jzO], xmm4
	movapd 	[esp + i2030_jxH1], xmm5
	movapd 	[esp + i2030_jyH1], xmm6
	movapd 	[esp + i2030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + i2030_jxH2], xmm2
	movapd 	[esp + i2030_jyH2], xmm3
	movapd 	[esp + i2030_jzH2], xmm4
	
	movapd xmm0, [esp + i2030_ixO]
	movapd xmm1, [esp + i2030_iyO]
	movapd xmm2, [esp + i2030_izO]
	movapd xmm3, [esp + i2030_ixO]
	movapd xmm4, [esp + i2030_iyO]
	movapd xmm5, [esp + i2030_izO]
	subsd  xmm0, [esp + i2030_jxO]
	subsd  xmm1, [esp + i2030_jyO]
	subsd  xmm2, [esp + i2030_jzO]
	subsd  xmm3, [esp + i2030_jxH1]
	subsd  xmm4, [esp + i2030_jyH1]
	subsd  xmm5, [esp + i2030_jzH1]
	movapd [esp + i2030_dxOO], xmm0
	movapd [esp + i2030_dyOO], xmm1
	movapd [esp + i2030_dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i2030_dxOH1], xmm3
	movapd [esp + i2030_dyOH1], xmm4
	movapd [esp + i2030_dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i2030_rsqOO], xmm0
	movapd [esp + i2030_rsqOH1], xmm3

	movapd xmm0, [esp + i2030_ixO]
	movapd xmm1, [esp + i2030_iyO]
	movapd xmm2, [esp + i2030_izO]
	movapd xmm3, [esp + i2030_ixH1]
	movapd xmm4, [esp + i2030_iyH1]
	movapd xmm5, [esp + i2030_izH1]
	subsd  xmm0, [esp + i2030_jxH2]
	subsd  xmm1, [esp + i2030_jyH2]
	subsd  xmm2, [esp + i2030_jzH2]
	subsd  xmm3, [esp + i2030_jxO]
	subsd  xmm4, [esp + i2030_jyO]
	subsd  xmm5, [esp + i2030_jzO]
	movapd [esp + i2030_dxOH2], xmm0
	movapd [esp + i2030_dyOH2], xmm1
	movapd [esp + i2030_dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i2030_dxH1O], xmm3
	movapd [esp + i2030_dyH1O], xmm4
	movapd [esp + i2030_dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i2030_rsqOH2], xmm0
	movapd [esp + i2030_rsqH1O], xmm3

	movapd xmm0, [esp + i2030_ixH1]
	movapd xmm1, [esp + i2030_iyH1]
	movapd xmm2, [esp + i2030_izH1]
	movapd xmm3, [esp + i2030_ixH1]
	movapd xmm4, [esp + i2030_iyH1]
	movapd xmm5, [esp + i2030_izH1]
	subsd  xmm0, [esp + i2030_jxH1]
	subsd  xmm1, [esp + i2030_jyH1]
	subsd  xmm2, [esp + i2030_jzH1]
	subsd  xmm3, [esp + i2030_jxH2]
	subsd  xmm4, [esp + i2030_jyH2]
	subsd  xmm5, [esp + i2030_jzH2]
	movapd [esp + i2030_dxH1H1], xmm0
	movapd [esp + i2030_dyH1H1], xmm1
	movapd [esp + i2030_dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i2030_dxH1H2], xmm3
	movapd [esp + i2030_dyH1H2], xmm4
	movapd [esp + i2030_dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i2030_rsqH1H1], xmm0
	movapd [esp + i2030_rsqH1H2], xmm3

	movapd xmm0, [esp + i2030_ixH2]
	movapd xmm1, [esp + i2030_iyH2]
	movapd xmm2, [esp + i2030_izH2]
	movapd xmm3, [esp + i2030_ixH2]
	movapd xmm4, [esp + i2030_iyH2]
	movapd xmm5, [esp + i2030_izH2]
	subsd  xmm0, [esp + i2030_jxO]
	subsd  xmm1, [esp + i2030_jyO]
	subsd  xmm2, [esp + i2030_jzO]
	subsd  xmm3, [esp + i2030_jxH1]
	subsd  xmm4, [esp + i2030_jyH1]
	subsd  xmm5, [esp + i2030_jzH1]
	movapd [esp + i2030_dxH2O], xmm0
	movapd [esp + i2030_dyH2O], xmm1
	movapd [esp + i2030_dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i2030_dxH2H1], xmm3
	movapd [esp + i2030_dyH2H1], xmm4
	movapd [esp + i2030_dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + i2030_rsqH2O], xmm0
	movapd [esp + i2030_rsqH2H1], xmm4

	movapd xmm0, [esp + i2030_ixH2]
	movapd xmm1, [esp + i2030_iyH2]
	movapd xmm2, [esp + i2030_izH2]
	subsd  xmm0, [esp + i2030_jxH2]
	subsd  xmm1, [esp + i2030_jyH2]
	subsd  xmm2, [esp + i2030_jzH2]
	movapd [esp + i2030_dxH2H2], xmm0
	movapd [esp + i2030_dyH2H2], xmm1
	movapd [esp + i2030_dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + i2030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i2030_half] ;# iter1 
	mulsd   xmm7, [esp + i2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i2030_half] ;# rinv 
	mulsd   xmm5, [esp + i2030_half] ;# rinv 
	movapd [esp + i2030_rinvH2H2], xmm1
	movapd [esp + i2030_rinvH2H1], xmm5

	movapd xmm0, [esp + i2030_rsqOO]
	movapd xmm4, [esp + i2030_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i2030_half] ;# iter1 of  
	mulsd   xmm7, [esp + i2030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i2030_half] ;# rinv 
	mulsd   xmm5, [esp + i2030_half] ;# rinv
	movapd [esp + i2030_rinvOO], xmm1
	movapd [esp + i2030_rinvOH1], xmm5

	movapd xmm0, [esp + i2030_rsqOH2]
	movapd xmm4, [esp + i2030_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i2030_half] ;# iter1 
	mulsd   xmm7, [esp + i2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i2030_half] ;# rinv 
	mulsd   xmm5, [esp + i2030_half] ;# rinv 
	movapd [esp + i2030_rinvOH2], xmm1
	movapd [esp + i2030_rinvH1O], xmm5

	movapd xmm0, [esp + i2030_rsqH1H1]
	movapd xmm4, [esp + i2030_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i2030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i2030_half] ;# iter1a 
	mulsd   xmm7, [esp + i2030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i2030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i2030_half] ;# rinv 
	mulsd   xmm5, [esp + i2030_half] ;# rinv 
	movapd [esp + i2030_rinvH1H1], xmm1
	movapd [esp + i2030_rinvH1H2], xmm5

	movapd xmm0, [esp + i2030_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i2030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + i2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i2030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + i2030_half] ;# rinv 
	movapd [esp + i2030_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + i2030_rinvOO]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]
	mulsd  xmm0, xmm0
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	;# xmm1=rinvsix 
	mulsd  xmm5, [esp + i2030_rsqOO] ;# xmm5=krsq 
	movapd xmm6, xmm5
	addsd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	subsd  xmm6, [esp + i2030_crf]
	
	mulsd  xmm6, [esp + i2030_qqOO] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	mulsd  xmm5, [esp + i2030_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2030_qqOO] ;# xmm7 = coul part of fscal 
	
	addsd  xmm6, [esp + i2030_vctot] ;# local vctot summation variable 
	mulsd  xmm0, xmm7
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i2030_dxOO]
	mulsd xmm1, [esp + i2030_dyOO]
	mulsd xmm2, [esp + i2030_dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2030_fixO]
	addsd xmm1, [esp + i2030_fiyO]
	addsd xmm2, [esp + i2030_fizO]
	movlpd [esp + i2030_fjxO], xmm3
	movlpd [esp + i2030_fjyO], xmm4
	movlpd [esp + i2030_fjzO], xmm5
	movlpd [esp + i2030_fixO], xmm0
	movlpd [esp + i2030_fiyO], xmm1
	movlpd [esp + i2030_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i2030_rinvOH1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2030_rsqOH1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + i2030_crf]
	mulsd  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2030_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH1  
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i2030_dxOH1]
	mulsd xmm1, [esp + i2030_dyOH1]
	mulsd xmm2, [esp + i2030_dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2030_fixO]
	addsd xmm1, [esp + i2030_fiyO]
	addsd xmm2, [esp + i2030_fizO]
	movlpd [esp + i2030_fjxH1], xmm3
	movlpd [esp + i2030_fjyH1], xmm4
	movlpd [esp + i2030_fjzH1], xmm5
	movlpd [esp + i2030_fixO], xmm0
	movlpd [esp + i2030_fiyO], xmm1
	movlpd [esp + i2030_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i2030_rinvOH2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2030_rsqOH2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + i2030_crf]
	mulsd  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2030_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i2030_dxOH2]
	mulsd xmm1, [esp + i2030_dyOH2]
	mulsd xmm2, [esp + i2030_dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2030_fixO]
	addsd xmm1, [esp + i2030_fiyO]
	addsd xmm2, [esp + i2030_fizO]
	movlpd [esp + i2030_fjxH2], xmm3
	movlpd [esp + i2030_fjyH2], xmm4
	movlpd [esp + i2030_fjzH2], xmm5
	movlpd [esp + i2030_fixO], xmm0
	movlpd [esp + i2030_fiyO], xmm1
	movlpd [esp + i2030_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i2030_rinvH1O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2030_rsqH1O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + i2030_crf]
	mulsd  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2030_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2030_fjxO]
	movapd xmm4, [esp + i2030_fjyO]
	movapd xmm5, [esp + i2030_fjzO]
	mulsd xmm0, [esp + i2030_dxH1O]
	mulsd xmm1, [esp + i2030_dyH1O]
	mulsd xmm2, [esp + i2030_dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2030_fixH1]
	addsd xmm1, [esp + i2030_fiyH1]
	addsd xmm2, [esp + i2030_fizH1]
	movlpd [esp + i2030_fjxO], xmm3
	movlpd [esp + i2030_fjyO], xmm4
	movlpd [esp + i2030_fjzO], xmm5
	movlpd [esp + i2030_fixH1], xmm0
	movlpd [esp + i2030_fiyH1], xmm1
	movlpd [esp + i2030_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i2030_rinvH1H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2030_rsqH1H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + i2030_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2030_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2030_fjxH1]
	movapd xmm4, [esp + i2030_fjyH1]
	movapd xmm5, [esp + i2030_fjzH1]
	mulsd xmm0, [esp + i2030_dxH1H1]
	mulsd xmm1, [esp + i2030_dyH1H1]
	mulsd xmm2, [esp + i2030_dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2030_fixH1]
	addsd xmm1, [esp + i2030_fiyH1]
	addsd xmm2, [esp + i2030_fizH1]
	movlpd [esp + i2030_fjxH1], xmm3
	movlpd [esp + i2030_fjyH1], xmm4
	movlpd [esp + i2030_fjzH1], xmm5
	movlpd [esp + i2030_fixH1], xmm0
	movlpd [esp + i2030_fiyH1], xmm1
	movlpd [esp + i2030_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i2030_rinvH1H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2030_rsqH1H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + i2030_crf]
	mulsd  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2030_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + i2030_fjxH2]
	movapd xmm4, [esp + i2030_fjyH2]
	movapd xmm5, [esp + i2030_fjzH2]
	mulsd xmm0, [esp + i2030_dxH1H2]
	mulsd xmm1, [esp + i2030_dyH1H2]
	mulsd xmm2, [esp + i2030_dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2030_fixH1]
	addsd xmm1, [esp + i2030_fiyH1]
	addsd xmm2, [esp + i2030_fizH1]
	movlpd [esp + i2030_fjxH2], xmm3
	movlpd [esp + i2030_fjyH2], xmm4
	movlpd [esp + i2030_fjzH2], xmm5
	movlpd [esp + i2030_fixH1], xmm0
	movlpd [esp + i2030_fiyH1], xmm1
	movlpd [esp + i2030_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i2030_rinvH2O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2030_rsqH2O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + i2030_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2030_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2030_fjxO]
	movapd xmm4, [esp + i2030_fjyO]
	movapd xmm5, [esp + i2030_fjzO]
	mulsd xmm0, [esp + i2030_dxH2O]
	mulsd xmm1, [esp + i2030_dyH2O]
	mulsd xmm2, [esp + i2030_dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2030_fixH2]
	addsd xmm1, [esp + i2030_fiyH2]
	addsd xmm2, [esp + i2030_fizH2]
	movlpd [esp + i2030_fjxO], xmm3
	movlpd [esp + i2030_fjyO], xmm4
	movlpd [esp + i2030_fjzO], xmm5
	movlpd [esp + i2030_fixH2], xmm0
	movlpd [esp + i2030_fiyH2], xmm1
	movlpd [esp + i2030_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i2030_rinvH2H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2030_rsqH2H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + i2030_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2030_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + i2030_fjxH1]
	movapd xmm4, [esp + i2030_fjyH1]
	movapd xmm5, [esp + i2030_fjzH1]
	mulsd xmm0, [esp + i2030_dxH2H1]
	mulsd xmm1, [esp + i2030_dyH2H1]
	mulsd xmm2, [esp + i2030_dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2030_fixH2]
	addsd xmm1, [esp + i2030_fiyH2]
	addsd xmm2, [esp + i2030_fizH2]
	movlpd [esp + i2030_fjxH1], xmm3
	movlpd [esp + i2030_fjyH1], xmm4
	movlpd [esp + i2030_fjzH1], xmm5
	movlpd [esp + i2030_fixH2], xmm0
	movlpd [esp + i2030_fiyH2], xmm1
	movlpd [esp + i2030_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i2030_rinvH2H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + i2030_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + i2030_rsqH2H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + i2030_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulsd  xmm5, [esp + i2030_two]
	subsd  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulsd  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addsd  xmm6, xmm4	;# add to local vctot 
	mulsd xmm0, xmm7	;# fsOH2 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm1, xmm0
	movlpd [esp + i2030_vctot], xmm6
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + i2030_fjxH2]
	movapd xmm4, [esp + i2030_fjyH2]
	movapd xmm5, [esp + i2030_fjzH2]
	mulsd xmm0, [esp + i2030_dxH2H2]
	mulsd xmm1, [esp + i2030_dyH2H2]
	mulsd xmm2, [esp + i2030_dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i2030_fixH2]
	addsd xmm1, [esp + i2030_fiyH2]
	addsd xmm2, [esp + i2030_fizH2]
	movlpd [esp + i2030_fjxH2], xmm3
	movlpd [esp + i2030_fjyH2], xmm4
	movlpd [esp + i2030_fjzH2], xmm5
	movlpd [esp + i2030_fixH2], xmm0
	movlpd [esp + i2030_fiyH2], xmm1
	movlpd [esp + i2030_fizH2], xmm2

	mov edi, [ebp + i2030_faction]
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + i2030_fjxO]
	addsd xmm1, [esp + i2030_fjyO]
	addsd xmm2, [esp + i2030_fjzO]
	addsd xmm3, [esp + i2030_fjxH1]
	addsd xmm4, [esp + i2030_fjyH1]
	addsd xmm5, [esp + i2030_fjzH1]
	addsd xmm6, [esp + i2030_fjxH2]
	addsd xmm7, [esp + i2030_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + i2030_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
.i2030_updateouterdata:
	mov   ecx, [esp + i2030_ii3]
	mov   edi, [ebp + i2030_faction]
	mov   esi, [ebp + i2030_fshift]
	mov   edx, [esp + i2030_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2030_fixO]
	movapd xmm1, [esp + i2030_fiyO]
	movapd xmm2, [esp + i2030_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2030_fixH1]
	movapd xmm1, [esp + i2030_fiyH1]
	movapd xmm2, [esp + i2030_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i2030_fixH2]
	movapd xmm1, [esp + i2030_fiyH2]
	movapd xmm2, [esp + i2030_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i2030_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i2030_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i2030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + i2030_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2030_nri]
	dec ecx
	jecxz .i2030_end
	;# not last, iterate once more!  
	mov [ebp + i2030_nri], ecx
	jmp .i2030_outer
.i2030_end:
	emms
	mov eax, [esp + i2030_salign]
	add esp, eax
	add esp, 1460
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	
	

.globl inl3000_sse2
.globl _inl3000_sse2
inl3000_sse2:	
_inl3000_sse2:	
.equiv		i3000_nri,			8
.equiv		i3000_iinr,			12
.equiv		i3000_jindex,		16
.equiv		i3000_jjnr,			20
.equiv		i3000_shift,		24
.equiv		i3000_shiftvec,		28
.equiv		i3000_fshift,		32
.equiv		i3000_gid,			36
.equiv		i3000_pos,			40		
.equiv		i3000_faction,		44
.equiv		i3000_charge,		48
.equiv		i3000_facel,		52 ;# double  
.equiv		i3000_Vc,			60	
.equiv		i3000_tabscale,		64 ;# double  
.equiv		i3000_VFtab,		72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i3000_ix,			0
.equiv		i3000_iy,			16
.equiv		i3000_iz,			32
.equiv		i3000_iq,			48
.equiv		i3000_dx,			64
.equiv		i3000_dy,			80
.equiv		i3000_dz,			96
.equiv		i3000_two,			112
.equiv		i3000_tsc,			128
.equiv		i3000_qq,			144	
.equiv		i3000_fs,			160
.equiv		i3000_vctot,		176
.equiv		i3000_fix,			192
.equiv		i3000_fiy,			208
.equiv		i3000_fiz,			224
.equiv		i3000_half,			240
.equiv		i3000_three,		256
.equiv		i3000_is3,			272
.equiv		i3000_ii3,			276
.equiv		i3000_innerjjnr,	280
.equiv		i3000_innerk,		284
.equiv		i3000_salign,		288
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 292		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3000_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + i3000_tabscale]
	movapd [esp + i3000_half],  xmm0
	movapd [esp + i3000_two], xmm1
	movapd [esp + i3000_three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + i3000_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.i3000_outer:
	mov   eax, [ebp + i3000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3000_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3000_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i3000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3000_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + i3000_facel]
	shufpd xmm3, xmm3, 0

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3000_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + i3000_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + i3000_ix], xmm0
	movapd [esp + i3000_iy], xmm1
	movapd [esp + i3000_iz], xmm2

	mov   [esp + i3000_ii3], ebx
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i3000_vctot], xmm4
	movapd [esp + i3000_fix], xmm4
	movapd [esp + i3000_fiy], xmm4
	movapd [esp + i3000_fiz], xmm4
	
	mov   eax, [ebp + i3000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3000_pos]
	mov   edi, [ebp + i3000_faction]	
	mov   eax, [ebp + i3000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i3000_innerk], edx    ;# number of innerloop atoms 
	jge   .i3000_unroll_loop
	jmp   .i3000_checksingle
.i3000_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i3000_innerjjnr]   ;# pointer to jjnr[k] 
	mov   eax, [edx]
	mov   ebx, [edx + 4]
	add dword ptr [esp + i3000_innerjjnr], 8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i3000_charge]    ;# base of charge[] 

	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + i3000_iq]
	mulpd  xmm3, xmm2
	movapd [esp + i3000_qq], xmm3	
	
	mov esi, [ebp + i3000_pos]		;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	mov    edi, [ebp + i3000_faction]
	
	;# move i3000_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i3000_ix]
	movapd xmm5, [esp + i3000_iy]
	movapd xmm6, [esp + i3000_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i3000_dx], xmm4
	movapd [esp + i3000_dy], xmm5
	movapd [esp + i3000_dz], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i3000_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3000_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i3000_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3000_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	mulpd xmm4, xmm0	;# xmm4=r 
	mulpd xmm4, [esp + i3000_tsc]

	cvttpd2pi mm6, xmm4	;# mm6 = lu idx 
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	
	movd mm0, eax	
	movd mm1, ebx

	mov  esi, [ebp + i3000_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3000_two]	;# two*Heps2 
	movapd xmm3, [esp + i3000_qq]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addpd  xmm5, [esp + i3000_vctot]
	movapd [esp + i3000_vctot], xmm5 

	xorpd  xmm4, xmm4

	mulpd xmm3, [esp + i3000_tsc]
	mulpd xmm3, xmm0
	subpd  xmm4, xmm3

	movapd xmm0, [esp + i3000_dx]
	movapd xmm1, [esp + i3000_dy]
	movapd xmm2, [esp + i3000_dz]

	movd eax, mm0	
	movd ebx, mm1

	mov    edi, [ebp + i3000_faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i3000_fix]
	movapd xmm4, [esp + i3000_fiy]
	movapd xmm5, [esp + i3000_fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + i3000_fix], xmm3
	movapd [esp + i3000_fiy], xmm4
	movapd [esp + i3000_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	;# should we do one more iteration? 
	sub dword ptr [esp + i3000_innerk],  2
	jl    .i3000_checksingle
	jmp   .i3000_unroll_loop
.i3000_checksingle:
	mov   edx, [esp + i3000_innerk]
	and   edx, 1
	jnz    .i3000_dosingle
	jmp    .i3000_updateouterdata
.i3000_dosingle:
	mov esi, [ebp + i3000_charge]
	mov edi, [ebp + i3000_pos]
	mov   ecx, [esp + i3000_innerjjnr]
	mov   eax, [ecx]	
	xorpd  xmm6, xmm6
	movlpd xmm6, [esi + eax*8]	;# xmm6(0) has the charge 	
	mulsd  xmm6, [esp + i3000_iq]
	movapd [esp + i3000_qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]

	;# move i3000_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i3000_ix]
	movapd xmm5, [esp + i3000_iy]
	movapd xmm6, [esp + i3000_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i3000_dx], xmm4
	movapd [esp + i3000_dy], xmm5
	movapd [esp + i3000_dz], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i3000_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3000_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i3000_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3000_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	
	mulsd xmm4, xmm0	;# xmm4=r 
	mulsd xmm4, [esp + i3000_tsc]
	
	movd mm0, eax	

	cvttsd2si eax, xmm4	;# mm6 = lu idx 
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	
	mov  esi, [ebp + i3000_VFtab]

	;# Coulomb 
	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  	
	;# table ready in xmm4-xmm7 

	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3000_two]	;# two*Heps2 
	movapd xmm3, [esp + i3000_qq]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addsd  xmm5, [esp + i3000_vctot]
	movsd [esp + i3000_vctot], xmm5 

	xorpd xmm4, xmm4
	movd eax, mm0

	mulpd xmm3, [esp + i3000_tsc]
	mulpd xmm3, xmm0
	subpd  xmm4, xmm3
	mov    edi, [ebp + i3000_faction]

	movapd xmm0, [esp + i3000_dx]
	movapd xmm1, [esp + i3000_dy]
	movapd xmm2, [esp + i3000_dz]

	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i3000_fix]
	movapd xmm4, [esp + i3000_fiy]
	movapd xmm5, [esp + i3000_fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + i3000_fix], xmm3
	movlpd [esp + i3000_fiy], xmm4
	movlpd [esp + i3000_fiz], xmm5
	;# update fj 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i3000_updateouterdata:
	mov   ecx, [esp + i3000_ii3]
	mov   edi, [ebp + i3000_faction]
	mov   esi, [ebp + i3000_fshift]
	mov   edx, [esp + i3000_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3000_fix]
	movapd xmm1, [esp + i3000_fiy]
	movapd xmm2, [esp + i3000_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# increment fshift force  
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i3000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i3000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i3000_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3000_nri]
	dec ecx
	jecxz .i3000_end
	;# not last, iterate once more!  
	mov [ebp + i3000_nri], ecx
	jmp .i3000_outer
.i3000_end:
	emms
	mov eax, [esp + i3000_salign]
	add esp, eax
	add esp, 292
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl inl3020_sse2
.globl _inl3020_sse2
inl3020_sse2:	
_inl3020_sse2:	
.equiv		i3020_nri,			8
.equiv		i3020_iinr,			12
.equiv		i3020_jindex,		16
.equiv		i3020_jjnr,			20
.equiv		i3020_shift,		24
.equiv		i3020_shiftvec,		28
.equiv		i3020_fshift,		32
.equiv		i3020_gid,			36
.equiv		i3020_pos,			40		
.equiv		i3020_faction,		44
.equiv		i3020_charge,		48
.equiv		i3020_facel,		52 ;# double  
.equiv		i3020_Vc,			60	
.equiv		i3020_tabscale,		64 ;# double  	
.equiv		i3020_VFtab,		72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i3020_ixO,			0
.equiv		i3020_iyO,			16
.equiv		i3020_izO,			32
.equiv		i3020_ixH1,			48
.equiv		i3020_iyH1,			64
.equiv		i3020_izH1,			80
.equiv		i3020_ixH2,			96
.equiv		i3020_iyH2,			112
.equiv		i3020_izH2,			128
.equiv		i3020_iqO,			144 
.equiv		i3020_iqH,			160 
.equiv		i3020_dxO,			176
.equiv		i3020_dyO,			192
.equiv		i3020_dzO,			208	
.equiv		i3020_dxH1,			224
.equiv		i3020_dyH1,			240
.equiv		i3020_dzH1,			256	
.equiv		i3020_dxH2,			272
.equiv		i3020_dyH2,			288
.equiv		i3020_dzH2,			304	
.equiv		i3020_qqO,			320
.equiv		i3020_qqH,			336
.equiv		i3020_rinvO,		352
.equiv		i3020_rinvH1,		368
.equiv		i3020_rinvH2,		384		
.equiv		i3020_rO,			400
.equiv		i3020_rH1,			416
.equiv		i3020_rH2,			432
.equiv		i3020_tsc,			448	
.equiv		i3020_two,			464
.equiv		i3020_vctot,		480
.equiv		i3020_fixO,			496
.equiv		i3020_fiyO,			512
.equiv		i3020_fizO,			528
.equiv		i3020_fixH1,		544
.equiv		i3020_fiyH1,		560
.equiv		i3020_fizH1,		576
.equiv		i3020_fixH2,		592
.equiv		i3020_fiyH2,		608
.equiv		i3020_fizH2,		624
.equiv		i3020_fjx,			640
.equiv		i3020_fjy,			656
.equiv		i3020_fjz,			672
.equiv		i3020_half,			688
.equiv		i3020_three,		704
.equiv		i3020_is3,			720
.equiv		i3020_ii3,			724
.equiv		i3020_innerjjnr,	728
.equiv		i3020_innerk,		732
.equiv		i3020_salign,		736
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 740		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3020_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + i3020_tabscale]
	
	movapd [esp + i3020_half],  xmm0
	movapd [esp + i3020_two],  xmm1
	movapd [esp + i3020_three],  xmm2
	shufpd xmm3, xmm3, 0 
	movapd [esp + i3020_tsc], xmm3
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3020_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + i3020_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + i3020_iqO], xmm3
	movapd [esp + i3020_iqH], xmm4
	
.i3020_outer:
	mov   eax, [ebp + i3020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3020_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3020_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i3020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3020_pos]    ;# eax = base of pos[]  
	mov   [esp + i3020_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3020_ixO], xmm3
	movapd [esp + i3020_iyO], xmm4
	movapd [esp + i3020_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3020_ixH1], xmm0
	movapd [esp + i3020_iyH1], xmm1
	movapd [esp + i3020_izH1], xmm2
	movapd [esp + i3020_ixH2], xmm3
	movapd [esp + i3020_iyH2], xmm4
	movapd [esp + i3020_izH2], xmm5
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i3020_vctot], xmm4
	movapd [esp + i3020_fixO], xmm4
	movapd [esp + i3020_fiyO], xmm4
	movapd [esp + i3020_fizO], xmm4
	movapd [esp + i3020_fixH1], xmm4
	movapd [esp + i3020_fiyH1], xmm4
	movapd [esp + i3020_fizH1], xmm4
	movapd [esp + i3020_fixH2], xmm4
	movapd [esp + i3020_fiyH2], xmm4
	movapd [esp + i3020_fizH2], xmm4
	
	mov   eax, [ebp + i3020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3020_pos]
	mov   edi, [ebp + i3020_faction]	
	mov   eax, [ebp + i3020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i3020_innerk], edx    ;# number of innerloop atoms 
	jge   .i3020_unroll_loop
	jmp   .i3020_checksingle
.i3020_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i3020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add dword ptr [esp + i3020_innerjjnr],  8	;# advance pointer (unrolled 2) 
	mov esi, [ebp + i3020_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + i3020_iqO]
	mulpd  xmm4, [esp + i3020_iqH]

	movapd  [esp + i3020_qqO], xmm3
	movapd  [esp + i3020_qqH], xmm4	

	mov esi, [ebp + i3020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i3020_ixO]
	movapd xmm5, [esp + i3020_iyO]
	movapd xmm6, [esp + i3020_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i3020_dxO], xmm4
	movapd [esp + i3020_dyO], xmm5
	movapd [esp + i3020_dzO], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i3020_ixH1]
	movapd xmm5, [esp + i3020_iyH1]
	movapd xmm6, [esp + i3020_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i3020_dxH1], xmm4
	movapd [esp + i3020_dyH1], xmm5
	movapd [esp + i3020_dzH1], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i3020_ixH2]
	movapd xmm4, [esp + i3020_iyH2]
	movapd xmm5, [esp + i3020_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# store dr 
	movapd [esp + i3020_dxH2], xmm3
	movapd [esp + i3020_dyH2], xmm4
	movapd [esp + i3020_dzH2], xmm5
	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i3020_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3020_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i3020_half] ;# rinv 
	movapd  [esp + i3020_rinvO], xmm4	;# rinvO in xmm4 
	mulpd   xmm7, xmm4
	movapd  [esp + i3020_rO], xmm7	;# r in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i3020_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3020_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i3020_half] ;# rinv 
	movapd [esp + i3020_rinvH1], xmm4	;# rinvH1 
	mulpd  xmm6, xmm4
	movapd [esp + i3020_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i3020_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3020_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i3020_half] ;# rinv 
	movapd [esp + i3020_rinvH2], xmm4 ;# rinv 
	mulpd xmm5, xmm4
	movapd [esp + i3020_rH2], xmm5 ;# r 

	;# do O interactions 
	;# rO is still in xmm7 
	mulpd xmm7, [esp + i3020_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + i3020_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3020_two]	;# two*Heps2 
	movapd xmm3, [esp + i3020_qqO]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addpd  xmm5, [esp + i3020_vctot]
    movapd [esp + i3020_vctot], xmm5 
	xorpd  xmm4, xmm4

	mulpd  xmm3, [esp + i3020_tsc]
	mulpd  xmm3, [esp + i3020_rinvO]	
	subpd  xmm4, xmm3

	movapd xmm0, [esp + i3020_dxO]
	movapd xmm1, [esp + i3020_dyO]
	movapd xmm2, [esp + i3020_dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4	;# tx in xmm0-xmm2 

	;# update O forces 
	movapd xmm3, [esp + i3020_fixO]
	movapd xmm4, [esp + i3020_fiyO]
	movapd xmm7, [esp + i3020_fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i3020_fixO], xmm3
	movapd [esp + i3020_fiyO], xmm4
	movapd [esp + i3020_fizO], xmm7
	;# update j forces with water O 
	movapd [esp + i3020_fjx], xmm0
	movapd [esp + i3020_fjy], xmm1
	movapd [esp + i3020_fjz], xmm2

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + i3020_rH1]
	mulpd xmm7, [esp + i3020_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3020_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3020_two]	;# two*Heps2 
	movapd xmm3, [esp + i3020_qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addpd  xmm5, [esp + i3020_vctot]
	mulpd  xmm3, [esp + i3020_rinvH1]
    movapd [esp + i3020_vctot], xmm5 
	mulpd  xmm3, [esp + i3020_tsc]
	subpd xmm4, xmm3

	movapd xmm0, [esp + i3020_dxH1]
	movapd xmm1, [esp + i3020_dyH1]
	movapd xmm2, [esp + i3020_dzH1]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i3020_fixH1]
	movapd xmm4, [esp + i3020_fiyH1]
	movapd xmm7, [esp + i3020_fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i3020_fixH1], xmm3
	movapd [esp + i3020_fiyH1], xmm4
	movapd [esp + i3020_fizH1], xmm7
	;# update j forces with water H1 
	addpd  xmm0, [esp + i3020_fjx]
	addpd  xmm1, [esp + i3020_fjy]
	addpd  xmm2, [esp + i3020_fjz]
	movapd [esp + i3020_fjx], xmm0
	movapd [esp + i3020_fjy], xmm1
	movapd [esp + i3020_fjz], xmm2

	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + i3020_rH2]
	mulpd   xmm7, [esp + i3020_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3020_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3020_two]	;# two*Heps2 
	movapd xmm3, [esp + i3020_qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addpd  xmm5, [esp + i3020_vctot]
	mulpd  xmm3, [esp + i3020_rinvH2]
    movapd [esp + i3020_vctot], xmm5 
	mulpd  xmm3, [esp + i3020_tsc]
	subpd  xmm4, xmm3

	movapd xmm0, [esp + i3020_dxH2]
	movapd xmm1, [esp + i3020_dyH2]
	movapd xmm2, [esp + i3020_dzH2]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

    movd eax, mm0   
    movd ebx, mm1
	
	;# update H2 forces 
	movapd xmm3, [esp + i3020_fixH2]
	movapd xmm4, [esp + i3020_fiyH2]
	movapd xmm7, [esp + i3020_fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i3020_fixH2], xmm3
	movapd [esp + i3020_fiyH2], xmm4
	movapd [esp + i3020_fizH2], xmm7

	mov edi, [ebp + i3020_faction]
	;# update j forces 
	;# update j forces with water H1 
	addpd  xmm0, [esp + i3020_fjx]
	addpd  xmm1, [esp + i3020_fjy]
	addpd  xmm2, [esp + i3020_fjz]

	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	;# should we do one more iteration? 
	sub dword ptr [esp + i3020_innerk],  2
	jl    .i3020_checksingle
	jmp   .i3020_unroll_loop
.i3020_checksingle:	
	mov   edx, [esp + i3020_innerk]
	and   edx, 1
	jnz   .i3020_dosingle
	jmp   .i3020_updateouterdata
.i3020_dosingle:
	mov   edx, [esp + i3020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	

	mov esi, [ebp + i3020_charge]    ;# base of charge[] 
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + i3020_iqO]
	mulpd  xmm4, [esp + i3020_iqH]

	movapd  [esp + i3020_qqO], xmm3
	movapd  [esp + i3020_qqH], xmm4	

	mov esi, [ebp + i3020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	;# move coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i3020_ixO]
	movapd xmm5, [esp + i3020_iyO]
	movapd xmm6, [esp + i3020_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i3020_dxO], xmm4
	movapd [esp + i3020_dyO], xmm5
	movapd [esp + i3020_dzO], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i3020_ixH1]
	movapd xmm5, [esp + i3020_iyH1]
	movapd xmm6, [esp + i3020_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i3020_dxH1], xmm4
	movapd [esp + i3020_dyH1], xmm5
	movapd [esp + i3020_dzH1], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i3020_ixH2]
	movapd xmm4, [esp + i3020_iyH2]
	movapd xmm5, [esp + i3020_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# store dr 
	movapd [esp + i3020_dxH2], xmm3
	movapd [esp + i3020_dyH2], xmm4
	movapd [esp + i3020_dzH2], xmm5
	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i3020_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3020_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i3020_half] ;# rinv 
	movapd  [esp + i3020_rinvO], xmm4	;# rinvO in xmm4 
	mulsd   xmm7, xmm4
	movapd  [esp + i3020_rO], xmm7	;# r in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i3020_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3020_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i3020_half] ;# rinv 
	movapd [esp + i3020_rinvH1], xmm4	;# rinvH1 
	mulsd  xmm6, xmm4
	movapd [esp + i3020_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i3020_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3020_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i3020_half] ;# rinv 
	movapd [esp + i3020_rinvH2], xmm4 ;# rinv 
	mulsd xmm5, xmm4
	movapd [esp + i3020_rH2], xmm5 ;# r 

	;# do O interactions 
	movd mm0, eax	
	;# rO is still in xmm7 
	mulsd   xmm7, [esp + i3020_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3020_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3	
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3020_two]	;# two*Heps2 
	movapd xmm3, [esp + i3020_qqO]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addsd  xmm5, [esp + i3020_vctot]
    movlpd [esp + i3020_vctot], xmm5 
	xorpd  xmm4, xmm4

	mulsd  xmm3, [esp + i3020_tsc]
	mulsd  xmm3, [esp + i3020_rinvO]	
	subsd  xmm4, xmm3

	movapd xmm0, [esp + i3020_dxO]
	movapd xmm1, [esp + i3020_dyO]
	movapd xmm2, [esp + i3020_dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4	;# tx in xmm0-xmm2 

	;# update O forces 
	movapd xmm3, [esp + i3020_fixO]
	movapd xmm4, [esp + i3020_fiyO]
	movapd xmm7, [esp + i3020_fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i3020_fixO], xmm3
	movlpd [esp + i3020_fiyO], xmm4
	movlpd [esp + i3020_fizO], xmm7
	;# update j forces with water O 
	movlpd [esp + i3020_fjx], xmm0
	movlpd [esp + i3020_fjy], xmm1
	movlpd [esp + i3020_fjz], xmm2

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + i3020_rH1]
	mulsd xmm7, [esp + i3020_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3020_VFtab]
	
	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3020_two]	;# two*Heps2 
	movapd xmm3, [esp + i3020_qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addsd  xmm5, [esp + i3020_vctot]
	mulsd  xmm3, [esp + i3020_rinvH1]
    movlpd [esp + i3020_vctot], xmm5 
	mulsd  xmm3, [esp + i3020_tsc]
	subsd xmm4, xmm3

	movapd xmm0, [esp + i3020_dxH1]
	movapd xmm1, [esp + i3020_dyH1]
	movapd xmm2, [esp + i3020_dzH1]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i3020_fixH1]
	movapd xmm4, [esp + i3020_fiyH1]
	movapd xmm7, [esp + i3020_fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i3020_fixH1], xmm3
	movlpd [esp + i3020_fiyH1], xmm4
	movlpd [esp + i3020_fizH1], xmm7
	;# update j forces with water H1 
	addsd  xmm0, [esp + i3020_fjx]
	addsd  xmm1, [esp + i3020_fjy]
	addsd  xmm2, [esp + i3020_fjz]
	movlpd [esp + i3020_fjx], xmm0
	movlpd [esp + i3020_fjy], xmm1
	movlpd [esp + i3020_fjz], xmm2

	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + i3020_rH2]
	mulsd   xmm7, [esp + i3020_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3020_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3020_two]	;# two*Heps2 
	movapd xmm3, [esp + i3020_qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addsd  xmm5, [esp + i3020_vctot]
	mulsd  xmm3, [esp + i3020_rinvH2]
    movlpd [esp + i3020_vctot], xmm5 
	mulsd  xmm3, [esp + i3020_tsc]
	subsd  xmm4, xmm3

	movapd xmm0, [esp + i3020_dxH2]
	movapd xmm1, [esp + i3020_dyH2]
	movapd xmm2, [esp + i3020_dzH2]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

    movd eax, mm0   
	
	;# update H2 forces 
	movapd xmm3, [esp + i3020_fixH2]
	movapd xmm4, [esp + i3020_fiyH2]
	movapd xmm7, [esp + i3020_fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i3020_fixH2], xmm3
	movlpd [esp + i3020_fiyH2], xmm4
	movlpd [esp + i3020_fizH2], xmm7

	mov edi, [ebp + i3020_faction]
	;# update j forces 
	;# update j forces with water H1 
	addsd  xmm0, [esp + i3020_fjx]
	addsd  xmm1, [esp + i3020_fjy]
	addsd  xmm2, [esp + i3020_fjz]

	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i3020_updateouterdata:
	mov   ecx, [esp + i3020_ii3]
	mov   edi, [ebp + i3020_faction]
	mov   esi, [ebp + i3020_fshift]
	mov   edx, [esp + i3020_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3020_fixO]
	movapd xmm1, [esp + i3020_fiyO]
	movapd xmm2, [esp + i3020_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3020_fixH1]
	movapd xmm1, [esp + i3020_fiyH1]
	movapd xmm2, [esp + i3020_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3020_fixH2]
	movapd xmm1, [esp + i3020_fiyH2]
	movapd xmm2, [esp + i3020_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i3020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i3020_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i3020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + i3020_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3020_nri]
	dec ecx
	jecxz .i3020_end
	;# not last, iterate once more!  
	mov [ebp + i3020_nri], ecx
	jmp .i3020_outer
.i3020_end:
	emms
	mov eax, [esp + i3020_salign]
	add esp, eax
	add esp, 740
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

		
.globl inl3030_sse2
.globl _inl3030_sse2
inl3030_sse2:	
_inl3030_sse2:	
.equiv		i3030_nri,			8
.equiv		i3030_iinr,			12
.equiv		i3030_jindex,		16
.equiv		i3030_jjnr,			20
.equiv		i3030_shift,		24
.equiv		i3030_shiftvec,		28
.equiv		i3030_fshift,		32
.equiv		i3030_gid,			36
.equiv		i3030_pos,			40		
.equiv		i3030_faction,		44
.equiv		i3030_charge,		48
.equiv		i3030_facel,		52 ;# double  
.equiv		i3030_Vc,			60	
.equiv		i3030_tabscale,		64 ;# double  	
.equiv		i3030_VFtab,		72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i3030_ixO,			0
.equiv		i3030_iyO,			16
.equiv		i3030_izO,			32
.equiv		i3030_ixH1,			48
.equiv		i3030_iyH1,			64
.equiv		i3030_izH1,			80
.equiv		i3030_ixH2,			96
.equiv		i3030_iyH2,			112
.equiv		i3030_izH2,			128
.equiv		i3030_jxO,			144
.equiv		i3030_jyO,			160
.equiv		i3030_jzO,			176
.equiv		i3030_jxH1,			192
.equiv		i3030_jyH1,			208
.equiv		i3030_jzH1,			224
.equiv		i3030_jxH2,			240
.equiv		i3030_jyH2,			256
.equiv		i3030_jzH2,			272
.equiv		i3030_dxOO,			288
.equiv		i3030_dyOO,			304
.equiv		i3030_dzOO,			320	
.equiv		i3030_dxOH1,		336
.equiv		i3030_dyOH1,		352
.equiv		i3030_dzOH1,		368	
.equiv		i3030_dxOH2,		384
.equiv		i3030_dyOH2,		400
.equiv		i3030_dzOH2,		416	
.equiv		i3030_dxH1O,		432
.equiv		i3030_dyH1O,		448
.equiv		i3030_dzH1O,		464	
.equiv		i3030_dxH1H1,		480
.equiv		i3030_dyH1H1,		496
.equiv		i3030_dzH1H1,		512	
.equiv		i3030_dxH1H2,		528
.equiv		i3030_dyH1H2,		544
.equiv		i3030_dzH1H2,		560	
.equiv		i3030_dxH2O,		576
.equiv		i3030_dyH2O,		592
.equiv		i3030_dzH2O,		608	
.equiv		i3030_dxH2H1,		624
.equiv		i3030_dyH2H1,		640
.equiv		i3030_dzH2H1,		656	
.equiv		i3030_dxH2H2,		672
.equiv		i3030_dyH2H2,		688
.equiv		i3030_dzH2H2,		704
.equiv		i3030_qqOO,			720
.equiv		i3030_qqOH,			736
.equiv		i3030_qqHH,			752
.equiv		i3030_two,			768
.equiv		i3030_tsc,			784
.equiv		i3030_vctot,		800
.equiv		i3030_fixO,			816
.equiv		i3030_fiyO,			832
.equiv		i3030_fizO,			848
.equiv		i3030_fixH1,		864
.equiv		i3030_fiyH1,		880
.equiv		i3030_fizH1,		896
.equiv		i3030_fixH2,		912
.equiv		i3030_fiyH2,		928
.equiv		i3030_fizH2,		944
.equiv		i3030_fjxO,			960
.equiv		i3030_fjyO,			976
.equiv		i3030_fjzO,			992
.equiv		i3030_fjxH1,		1008
.equiv		i3030_fjyH1,		1024
.equiv		i3030_fjzH1,		1040
.equiv		i3030_fjxH2,		1056
.equiv		i3030_fjyH2,		1072
.equiv		i3030_fjzH2,		1088
.equiv		i3030_half,			1104
.equiv		i3030_three,		1120
.equiv		i3030_rsqOO,		1136
.equiv		i3030_rsqOH1,		1152
.equiv		i3030_rsqOH2,		1168
.equiv		i3030_rsqH1O,		1184
.equiv		i3030_rsqH1H1,		1200
.equiv		i3030_rsqH1H2,		1216
.equiv		i3030_rsqH2O,		1232
.equiv		i3030_rsqH2H1,		1248
.equiv		i3030_rsqH2H2,		1264
.equiv		i3030_rinvOO,		1280
.equiv		i3030_rinvOH1,		1296
.equiv		i3030_rinvOH2,		1312
.equiv		i3030_rinvH1O,		1328
.equiv		i3030_rinvH1H1,		1344
.equiv		i3030_rinvH1H2,		1360
.equiv		i3030_rinvH2O,		1376
.equiv		i3030_rinvH2H1,		1392
.equiv		i3030_rinvH2H2,		1408	
.equiv		i3030_is3,			1424
.equiv		i3030_ii3,			1428
.equiv		i3030_innerjjnr,	1432
.equiv		i3030_innerk,		1436
.equiv		i3030_salign,		1440							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1444		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3030_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + i3030_tabscale]
	movapd [esp + i3030_half],  xmm0
	movapd [esp + i3030_two],  xmm1
	movapd [esp + i3030_three], xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + i3030_tsc],  xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3030_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + i3030_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3030_qqOO], xmm3
	movapd [esp + i3030_qqOH], xmm4
	movapd [esp + i3030_qqHH], xmm5		

.i3030_outer:
	mov   eax, [ebp + i3030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3030_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3030_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i3030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3030_pos]    ;# eax = base of pos[]  
	mov   [esp + i3030_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3030_ixO], xmm3
	movapd [esp + i3030_iyO], xmm4
	movapd [esp + i3030_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3030_ixH1], xmm0
	movapd [esp + i3030_iyH1], xmm1
	movapd [esp + i3030_izH1], xmm2
	movapd [esp + i3030_ixH2], xmm3
	movapd [esp + i3030_iyH2], xmm4
	movapd [esp + i3030_izH2], xmm5

	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i3030_vctot], xmm4
	movapd [esp + i3030_fixO], xmm4
	movapd [esp + i3030_fiyO], xmm4
	movapd [esp + i3030_fizO], xmm4
	movapd [esp + i3030_fixH1], xmm4
	movapd [esp + i3030_fiyH1], xmm4
	movapd [esp + i3030_fizH1], xmm4
	movapd [esp + i3030_fixH2], xmm4
	movapd [esp + i3030_fiyH2], xmm4
	movapd [esp + i3030_fizH2], xmm4
	
	mov   eax, [ebp + i3030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3030_pos]
	mov   edi, [ebp + i3030_faction]	
	mov   eax, [ebp + i3030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i3030_innerk], edx    ;# number of innerloop atoms 
	jge   .i3030_unroll_loop
	jmp   .i3030_checksingle
.i3030_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + i3030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + i3030_innerjjnr], 8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + i3030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + i3030_jxO], xmm2
	movapd 	[esp + i3030_jyO], xmm3
	movapd 	[esp + i3030_jzO], xmm4
	movapd 	[esp + i3030_jxH1], xmm5
	movapd 	[esp + i3030_jyH1], xmm6
	movapd 	[esp + i3030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + i3030_jxH2], xmm2
	movapd 	[esp + i3030_jyH2], xmm3
	movapd 	[esp + i3030_jzH2], xmm4
	
	movapd xmm0, [esp + i3030_ixO]
	movapd xmm1, [esp + i3030_iyO]
	movapd xmm2, [esp + i3030_izO]
	movapd xmm3, [esp + i3030_ixO]
	movapd xmm4, [esp + i3030_iyO]
	movapd xmm5, [esp + i3030_izO]
	subpd  xmm0, [esp + i3030_jxO]
	subpd  xmm1, [esp + i3030_jyO]
	subpd  xmm2, [esp + i3030_jzO]
	subpd  xmm3, [esp + i3030_jxH1]
	subpd  xmm4, [esp + i3030_jyH1]
	subpd  xmm5, [esp + i3030_jzH1]
	movapd [esp + i3030_dxOO], xmm0
	movapd [esp + i3030_dyOO], xmm1
	movapd [esp + i3030_dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3030_dxOH1], xmm3
	movapd [esp + i3030_dyOH1], xmm4
	movapd [esp + i3030_dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i3030_rsqOO], xmm0
	movapd [esp + i3030_rsqOH1], xmm3

	movapd xmm0, [esp + i3030_ixO]
	movapd xmm1, [esp + i3030_iyO]
	movapd xmm2, [esp + i3030_izO]
	movapd xmm3, [esp + i3030_ixH1]
	movapd xmm4, [esp + i3030_iyH1]
	movapd xmm5, [esp + i3030_izH1]
	subpd  xmm0, [esp + i3030_jxH2]
	subpd  xmm1, [esp + i3030_jyH2]
	subpd  xmm2, [esp + i3030_jzH2]
	subpd  xmm3, [esp + i3030_jxO]
	subpd  xmm4, [esp + i3030_jyO]
	subpd  xmm5, [esp + i3030_jzO]
	movapd [esp + i3030_dxOH2], xmm0
	movapd [esp + i3030_dyOH2], xmm1
	movapd [esp + i3030_dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3030_dxH1O], xmm3
	movapd [esp + i3030_dyH1O], xmm4
	movapd [esp + i3030_dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i3030_rsqOH2], xmm0
	movapd [esp + i3030_rsqH1O], xmm3

	movapd xmm0, [esp + i3030_ixH1]
	movapd xmm1, [esp + i3030_iyH1]
	movapd xmm2, [esp + i3030_izH1]
	movapd xmm3, [esp + i3030_ixH1]
	movapd xmm4, [esp + i3030_iyH1]
	movapd xmm5, [esp + i3030_izH1]
	subpd  xmm0, [esp + i3030_jxH1]
	subpd  xmm1, [esp + i3030_jyH1]
	subpd  xmm2, [esp + i3030_jzH1]
	subpd  xmm3, [esp + i3030_jxH2]
	subpd  xmm4, [esp + i3030_jyH2]
	subpd  xmm5, [esp + i3030_jzH2]
	movapd [esp + i3030_dxH1H1], xmm0
	movapd [esp + i3030_dyH1H1], xmm1
	movapd [esp + i3030_dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3030_dxH1H2], xmm3
	movapd [esp + i3030_dyH1H2], xmm4
	movapd [esp + i3030_dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i3030_rsqH1H1], xmm0
	movapd [esp + i3030_rsqH1H2], xmm3

	movapd xmm0, [esp + i3030_ixH2]
	movapd xmm1, [esp + i3030_iyH2]
	movapd xmm2, [esp + i3030_izH2]
	movapd xmm3, [esp + i3030_ixH2]
	movapd xmm4, [esp + i3030_iyH2]
	movapd xmm5, [esp + i3030_izH2]
	subpd  xmm0, [esp + i3030_jxO]
	subpd  xmm1, [esp + i3030_jyO]
	subpd  xmm2, [esp + i3030_jzO]
	subpd  xmm3, [esp + i3030_jxH1]
	subpd  xmm4, [esp + i3030_jyH1]
	subpd  xmm5, [esp + i3030_jzH1]
	movapd [esp + i3030_dxH2O], xmm0
	movapd [esp + i3030_dyH2O], xmm1
	movapd [esp + i3030_dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3030_dxH2H1], xmm3
	movapd [esp + i3030_dyH2H1], xmm4
	movapd [esp + i3030_dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + i3030_rsqH2O], xmm0
	movapd [esp + i3030_rsqH2H1], xmm4

	movapd xmm0, [esp + i3030_ixH2]
	movapd xmm1, [esp + i3030_iyH2]
	movapd xmm2, [esp + i3030_izH2]
	subpd  xmm0, [esp + i3030_jxH2]
	subpd  xmm1, [esp + i3030_jyH2]
	subpd  xmm2, [esp + i3030_jzH2]
	movapd [esp + i3030_dxH2H2], xmm0
	movapd [esp + i3030_dyH2H2], xmm1
	movapd [esp + i3030_dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + i3030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3030_half] ;# iter1 
	mulpd   xmm7, [esp + i3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3030_half] ;# rinv 
	mulpd   xmm5, [esp + i3030_half] ;# rinv 
	movapd [esp + i3030_rinvH2H2], xmm1
	movapd [esp + i3030_rinvH2H1], xmm5

	movapd xmm0, [esp + i3030_rsqOO]
	movapd xmm4, [esp + i3030_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3030_half] ;# iter1 of  
	mulpd   xmm7, [esp + i3030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3030_half] ;# rinv 
	mulpd   xmm5, [esp + i3030_half] ;# rinv
	movapd [esp + i3030_rinvOO], xmm1
	movapd [esp + i3030_rinvOH1], xmm5

	movapd xmm0, [esp + i3030_rsqOH2]
	movapd xmm4, [esp + i3030_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3030_half] ;# iter1 
	mulpd   xmm7, [esp + i3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3030_half] ;# rinv 
	mulpd   xmm5, [esp + i3030_half] ;# rinv 
	movapd [esp + i3030_rinvOH2], xmm1
	movapd [esp + i3030_rinvH1O], xmm5

	movapd xmm0, [esp + i3030_rsqH1H1]
	movapd xmm4, [esp + i3030_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3030_half] ;# iter1a 
	mulpd   xmm7, [esp + i3030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3030_half] ;# rinv 
	mulpd   xmm5, [esp + i3030_half] ;# rinv 
	movapd [esp + i3030_rinvH1H1], xmm1
	movapd [esp + i3030_rinvH1H2], xmm5

	movapd xmm0, [esp + i3030_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i3030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + i3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i3030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + i3030_half] ;# rinv 
	movapd [esp + i3030_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + i3030_rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3030_rsqOO] ;# xmm1=r 
	mulpd  xmm1, [esp + i3030_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + i3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqOO]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addpd  xmm5, [esp + i3030_vctot]
	xorpd  xmm2, xmm2
    movapd [esp + i3030_vctot], xmm5
	mulpd  xmm3, [esp + i3030_tsc]
	
	subpd  xmm2, xmm3
	mulpd  xmm0, xmm2	;# mult by rinv 
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0		

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3030_dxOO]
	mulpd xmm1, [esp + i3030_dyOO]
	mulpd xmm2, [esp + i3030_dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3030_fixO]
	addpd xmm1, [esp + i3030_fiyO]
	addpd xmm2, [esp + i3030_fizO]
	movapd [esp + i3030_fjxO], xmm3
	movapd [esp + i3030_fjyO], xmm4
	movapd [esp + i3030_fjzO], xmm5
	movapd [esp + i3030_fixO], xmm0
	movapd [esp + i3030_fiyO], xmm1
	movapd [esp + i3030_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i3030_rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3030_rsqOH1] ;# xmm1=r 
	mulpd  xmm1, [esp + i3030_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3030_vctot]
    movapd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3030_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3030_dxOH1]
	mulpd xmm1, [esp + i3030_dyOH1]
	mulpd xmm2, [esp + i3030_dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3030_fixO]
	addpd xmm1, [esp + i3030_fiyO]
	addpd xmm2, [esp + i3030_fizO]
	movapd [esp + i3030_fjxH1], xmm3
	movapd [esp + i3030_fjyH1], xmm4
	movapd [esp + i3030_fjzH1], xmm5
	movapd [esp + i3030_fixO], xmm0
	movapd [esp + i3030_fiyO], xmm1
	movapd [esp + i3030_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i3030_rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3030_rsqOH2] ;# xmm1=r 
	mulpd  xmm1, [esp + i3030_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3030_vctot]
    movapd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3030_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3030_dxOH2]
	mulpd xmm1, [esp + i3030_dyOH2]
	mulpd xmm2, [esp + i3030_dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3030_fixO]
	addpd xmm1, [esp + i3030_fiyO]
	addpd xmm2, [esp + i3030_fizO]
	movapd [esp + i3030_fjxH2], xmm3
	movapd [esp + i3030_fjyH2], xmm4
	movapd [esp + i3030_fjzH2], xmm5
	movapd [esp + i3030_fixO], xmm0
	movapd [esp + i3030_fiyO], xmm1
	movapd [esp + i3030_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i3030_rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3030_rsqH1O] ;# xmm1=r 
	mulpd  xmm1, [esp + i3030_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3030_vctot]
    movapd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3030_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3030_fjxO]
	movapd xmm4, [esp + i3030_fjyO]
	movapd xmm5, [esp + i3030_fjzO]
	mulpd xmm0, [esp + i3030_dxH1O]
	mulpd xmm1, [esp + i3030_dyH1O]
	mulpd xmm2, [esp + i3030_dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3030_fixH1]
	addpd xmm1, [esp + i3030_fiyH1]
	addpd xmm2, [esp + i3030_fizH1]
	movapd [esp + i3030_fjxO], xmm3
	movapd [esp + i3030_fjyO], xmm4
	movapd [esp + i3030_fjzO], xmm5
	movapd [esp + i3030_fixH1], xmm0
	movapd [esp + i3030_fiyH1], xmm1
	movapd [esp + i3030_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i3030_rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3030_rsqH1H1] ;# xmm1=r 
	mulpd  xmm1, [esp + i3030_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3030_vctot]
    movapd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3030_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3030_fjxH1]
	movapd xmm4, [esp + i3030_fjyH1]
	movapd xmm5, [esp + i3030_fjzH1]
	mulpd xmm0, [esp + i3030_dxH1H1]
	mulpd xmm1, [esp + i3030_dyH1H1]
	mulpd xmm2, [esp + i3030_dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3030_fixH1]
	addpd xmm1, [esp + i3030_fiyH1]
	addpd xmm2, [esp + i3030_fizH1]
	movapd [esp + i3030_fjxH1], xmm3
	movapd [esp + i3030_fjyH1], xmm4
	movapd [esp + i3030_fjzH1], xmm5
	movapd [esp + i3030_fixH1], xmm0
	movapd [esp + i3030_fiyH1], xmm1
	movapd [esp + i3030_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i3030_rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3030_rsqH1H2] ;# xmm1=r 
	mulpd  xmm1, [esp + i3030_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3030_vctot]
    movapd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3030_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3030_fjxH2]
	movapd xmm4, [esp + i3030_fjyH2]
	movapd xmm5, [esp + i3030_fjzH2]
	mulpd xmm0, [esp + i3030_dxH1H2]
	mulpd xmm1, [esp + i3030_dyH1H2]
	mulpd xmm2, [esp + i3030_dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3030_fixH1]
	addpd xmm1, [esp + i3030_fiyH1]
	addpd xmm2, [esp + i3030_fizH1]
	movapd [esp + i3030_fjxH2], xmm3
	movapd [esp + i3030_fjyH2], xmm4
	movapd [esp + i3030_fjzH2], xmm5
	movapd [esp + i3030_fixH1], xmm0
	movapd [esp + i3030_fiyH1], xmm1
	movapd [esp + i3030_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i3030_rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3030_rsqH2O] ;# xmm1=r 
	mulpd  xmm1, [esp + i3030_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3030_vctot]
    movapd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3030_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + i3030_fjxO]
	movapd xmm4, [esp + i3030_fjyO]
	movapd xmm5, [esp + i3030_fjzO]
	mulpd xmm0, [esp + i3030_dxH2O]
	mulpd xmm1, [esp + i3030_dyH2O]
	mulpd xmm2, [esp + i3030_dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3030_fixH2]
	addpd xmm1, [esp + i3030_fiyH2]
	addpd xmm2, [esp + i3030_fizH2]
	movapd [esp + i3030_fjxO], xmm3
	movapd [esp + i3030_fjyO], xmm4
	movapd [esp + i3030_fjzO], xmm5
	movapd [esp + i3030_fixH2], xmm0
	movapd [esp + i3030_fiyH2], xmm1
	movapd [esp + i3030_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i3030_rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3030_rsqH2H1] ;# xmm1=r 
	mulpd  xmm1, [esp + i3030_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3030_vctot]
    movapd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3030_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3030_fjxH1]
	movapd xmm4, [esp + i3030_fjyH1]
	movapd xmm5, [esp + i3030_fjzH1]
	mulpd xmm0, [esp + i3030_dxH2H1]
	mulpd xmm1, [esp + i3030_dyH2H1]
	mulpd xmm2, [esp + i3030_dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3030_fixH2]
	addpd xmm1, [esp + i3030_fiyH2]
	addpd xmm2, [esp + i3030_fizH2]
	movapd [esp + i3030_fjxH1], xmm3
	movapd [esp + i3030_fjyH1], xmm4
	movapd [esp + i3030_fjzH1], xmm5
	movapd [esp + i3030_fixH2], xmm0
	movapd [esp + i3030_fiyH2], xmm1
	movapd [esp + i3030_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i3030_rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3030_rsqH2H2] ;# xmm1=r 
	mulpd  xmm1, [esp + i3030_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
	
    addpd  xmm5, [esp + i3030_vctot]
    movapd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3030_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3030_fjxH2]
	movapd xmm4, [esp + i3030_fjyH2]
	movapd xmm5, [esp + i3030_fjzH2]
	mulpd xmm0, [esp + i3030_dxH2H2]
	mulpd xmm1, [esp + i3030_dyH2H2]
	mulpd xmm2, [esp + i3030_dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3030_fixH2]
	addpd xmm1, [esp + i3030_fiyH2]
	addpd xmm2, [esp + i3030_fizH2]
	movapd [esp + i3030_fjxH2], xmm3
	movapd [esp + i3030_fjyH2], xmm4
	movapd [esp + i3030_fjzH2], xmm5
	movapd [esp + i3030_fixH2], xmm0
	movapd [esp + i3030_fiyH2], xmm1
	movapd [esp + i3030_fizH2], xmm2

	mov edi, [ebp + i3030_faction]

	movd eax, mm0
	movd ebx, mm1
	
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + i3030_fjxO]
	addpd xmm1, [esp + i3030_fjyO]
	addpd xmm2, [esp + i3030_fjzO]
	addpd xmm3, [esp + i3030_fjxH1]
	addpd xmm4, [esp + i3030_fjyH1]
	addpd xmm5, [esp + i3030_fjzH1]
	addpd xmm6, [esp + i3030_fjxH2]
	addpd xmm7, [esp + i3030_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + i3030_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3030_innerk],  2
	jl    .i3030_checksingle
	jmp   .i3030_unroll_loop
.i3030_checksingle:
	mov   edx, [esp + i3030_innerk]
	and   edx, 1
	jnz   .i3030_dosingle
	jmp   .i3030_updateouterdata
.i3030_dosingle:
	mov   edx, [esp + i3030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]

	mov esi, [ebp + i3030_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + i3030_jxO], xmm2
	movapd 	[esp + i3030_jyO], xmm3
	movapd 	[esp + i3030_jzO], xmm4
	movapd 	[esp + i3030_jxH1], xmm5
	movapd 	[esp + i3030_jyH1], xmm6
	movapd 	[esp + i3030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + i3030_jxH2], xmm2
	movapd 	[esp + i3030_jyH2], xmm3
	movapd 	[esp + i3030_jzH2], xmm4
	
	movapd xmm0, [esp + i3030_ixO]
	movapd xmm1, [esp + i3030_iyO]
	movapd xmm2, [esp + i3030_izO]
	movapd xmm3, [esp + i3030_ixO]
	movapd xmm4, [esp + i3030_iyO]
	movapd xmm5, [esp + i3030_izO]
	subsd  xmm0, [esp + i3030_jxO]
	subsd  xmm1, [esp + i3030_jyO]
	subsd  xmm2, [esp + i3030_jzO]
	subsd  xmm3, [esp + i3030_jxH1]
	subsd  xmm4, [esp + i3030_jyH1]
	subsd  xmm5, [esp + i3030_jzH1]
	movapd [esp + i3030_dxOO], xmm0
	movapd [esp + i3030_dyOO], xmm1
	movapd [esp + i3030_dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3030_dxOH1], xmm3
	movapd [esp + i3030_dyOH1], xmm4
	movapd [esp + i3030_dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i3030_rsqOO], xmm0
	movapd [esp + i3030_rsqOH1], xmm3

	movapd xmm0, [esp + i3030_ixO]
	movapd xmm1, [esp + i3030_iyO]
	movapd xmm2, [esp + i3030_izO]
	movapd xmm3, [esp + i3030_ixH1]
	movapd xmm4, [esp + i3030_iyH1]
	movapd xmm5, [esp + i3030_izH1]
	subsd  xmm0, [esp + i3030_jxH2]
	subsd  xmm1, [esp + i3030_jyH2]
	subsd  xmm2, [esp + i3030_jzH2]
	subsd  xmm3, [esp + i3030_jxO]
	subsd  xmm4, [esp + i3030_jyO]
	subsd  xmm5, [esp + i3030_jzO]
	movapd [esp + i3030_dxOH2], xmm0
	movapd [esp + i3030_dyOH2], xmm1
	movapd [esp + i3030_dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3030_dxH1O], xmm3
	movapd [esp + i3030_dyH1O], xmm4
	movapd [esp + i3030_dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i3030_rsqOH2], xmm0
	movapd [esp + i3030_rsqH1O], xmm3

	movapd xmm0, [esp + i3030_ixH1]
	movapd xmm1, [esp + i3030_iyH1]
	movapd xmm2, [esp + i3030_izH1]
	movapd xmm3, [esp + i3030_ixH1]
	movapd xmm4, [esp + i3030_iyH1]
	movapd xmm5, [esp + i3030_izH1]
	subsd  xmm0, [esp + i3030_jxH1]
	subsd  xmm1, [esp + i3030_jyH1]
	subsd  xmm2, [esp + i3030_jzH1]
	subsd  xmm3, [esp + i3030_jxH2]
	subsd  xmm4, [esp + i3030_jyH2]
	subsd  xmm5, [esp + i3030_jzH2]
	movapd [esp + i3030_dxH1H1], xmm0
	movapd [esp + i3030_dyH1H1], xmm1
	movapd [esp + i3030_dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3030_dxH1H2], xmm3
	movapd [esp + i3030_dyH1H2], xmm4
	movapd [esp + i3030_dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i3030_rsqH1H1], xmm0
	movapd [esp + i3030_rsqH1H2], xmm3

	movapd xmm0, [esp + i3030_ixH2]
	movapd xmm1, [esp + i3030_iyH2]
	movapd xmm2, [esp + i3030_izH2]
	movapd xmm3, [esp + i3030_ixH2]
	movapd xmm4, [esp + i3030_iyH2]
	movapd xmm5, [esp + i3030_izH2]
	subsd  xmm0, [esp + i3030_jxO]
	subsd  xmm1, [esp + i3030_jyO]
	subsd  xmm2, [esp + i3030_jzO]
	subsd  xmm3, [esp + i3030_jxH1]
	subsd  xmm4, [esp + i3030_jyH1]
	subsd  xmm5, [esp + i3030_jzH1]
	movapd [esp + i3030_dxH2O], xmm0
	movapd [esp + i3030_dyH2O], xmm1
	movapd [esp + i3030_dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3030_dxH2H1], xmm3
	movapd [esp + i3030_dyH2H1], xmm4
	movapd [esp + i3030_dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + i3030_rsqH2O], xmm0
	movapd [esp + i3030_rsqH2H1], xmm4

	movapd xmm0, [esp + i3030_ixH2]
	movapd xmm1, [esp + i3030_iyH2]
	movapd xmm2, [esp + i3030_izH2]
	subsd  xmm0, [esp + i3030_jxH2]
	subsd  xmm1, [esp + i3030_jyH2]
	subsd  xmm2, [esp + i3030_jzH2]
	movapd [esp + i3030_dxH2H2], xmm0
	movapd [esp + i3030_dyH2H2], xmm1
	movapd [esp + i3030_dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + i3030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3030_half] ;# iter1 
	mulsd   xmm7, [esp + i3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3030_half] ;# rinv 
	mulsd   xmm5, [esp + i3030_half] ;# rinv 
	movapd [esp + i3030_rinvH2H2], xmm1
	movapd [esp + i3030_rinvH2H1], xmm5

	movapd xmm0, [esp + i3030_rsqOO]
	movapd xmm4, [esp + i3030_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3030_half] ;# iter1 of  
	mulsd   xmm7, [esp + i3030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3030_half] ;# rinv 
	mulsd   xmm5, [esp + i3030_half] ;# rinv
	movapd [esp + i3030_rinvOO], xmm1
	movapd [esp + i3030_rinvOH1], xmm5

	movapd xmm0, [esp + i3030_rsqOH2]
	movapd xmm4, [esp + i3030_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3030_half] ;# iter1 
	mulsd   xmm7, [esp + i3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3030_half] ;# rinv 
	mulsd   xmm5, [esp + i3030_half] ;# rinv 
	movapd [esp + i3030_rinvOH2], xmm1
	movapd [esp + i3030_rinvH1O], xmm5

	movapd xmm0, [esp + i3030_rsqH1H1]
	movapd xmm4, [esp + i3030_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3030_half] ;# iter1a 
	mulsd   xmm7, [esp + i3030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3030_half] ;# rinv 
	mulsd   xmm5, [esp + i3030_half] ;# rinv 
	movapd [esp + i3030_rinvH1H1], xmm1
	movapd [esp + i3030_rinvH1H2], xmm5

	movapd xmm0, [esp + i3030_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i3030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + i3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i3030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + i3030_half] ;# rinv 
	movapd [esp + i3030_rinvH2O], xmm1
	
	movd mm0, eax	
	;# start with OO interaction 
	movapd xmm0, [esp + i3030_rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3030_rsqOO] ;# xmm1=r 
	mulsd  xmm1, [esp + i3030_tsc]

	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqOO]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addsd  xmm5, [esp + i3030_vctot]
	xorpd  xmm2, xmm2
    movlpd [esp + i3030_vctot], xmm5
	mulsd  xmm3, [esp + i3030_tsc]
	
	subsd  xmm2, xmm3
	mulsd  xmm0, xmm2
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0		

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i3030_dxOO]
	mulsd xmm1, [esp + i3030_dyOO]
	mulsd xmm2, [esp + i3030_dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3030_fixO]
	addsd xmm1, [esp + i3030_fiyO]
	addsd xmm2, [esp + i3030_fizO]
	movlpd [esp + i3030_fjxO], xmm3
	movlpd [esp + i3030_fjyO], xmm4
	movlpd [esp + i3030_fjzO], xmm5
	movlpd [esp + i3030_fixO], xmm0
	movlpd [esp + i3030_fiyO], xmm1
	movlpd [esp + i3030_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i3030_rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3030_rsqOH1] ;# xmm1=r 
	mulsd  xmm1, [esp + i3030_tsc]

	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3030_vctot]
    movlpd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3030_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i3030_dxOH1]
	mulsd xmm1, [esp + i3030_dyOH1]
	mulsd xmm2, [esp + i3030_dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3030_fixO]
	addsd xmm1, [esp + i3030_fiyO]
	addsd xmm2, [esp + i3030_fizO]
	movlpd [esp + i3030_fjxH1], xmm3
	movlpd [esp + i3030_fjyH1], xmm4
	movlpd [esp + i3030_fjzH1], xmm5
	movlpd [esp + i3030_fixO], xmm0
	movlpd [esp + i3030_fiyO], xmm1
	movlpd [esp + i3030_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i3030_rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3030_rsqOH2] ;# xmm1=r 
	mulsd  xmm1, [esp + i3030_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3030_vctot]
    movlpd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3030_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i3030_dxOH2]
	mulsd xmm1, [esp + i3030_dyOH2]
	mulsd xmm2, [esp + i3030_dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3030_fixO]
	addsd xmm1, [esp + i3030_fiyO]
	addsd xmm2, [esp + i3030_fizO]
	movlpd [esp + i3030_fjxH2], xmm3
	movlpd [esp + i3030_fjyH2], xmm4
	movlpd [esp + i3030_fjzH2], xmm5
	movlpd [esp + i3030_fixO], xmm0
	movlpd [esp + i3030_fiyO], xmm1
	movlpd [esp + i3030_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i3030_rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3030_rsqH1O] ;# xmm1=r 
	mulsd  xmm1, [esp + i3030_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3030_vctot]
    movlpd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3030_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3030_fjxO]
	movapd xmm4, [esp + i3030_fjyO]
	movapd xmm5, [esp + i3030_fjzO]
	mulsd xmm0, [esp + i3030_dxH1O]
	mulsd xmm1, [esp + i3030_dyH1O]
	mulsd xmm2, [esp + i3030_dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3030_fixH1]
	addsd xmm1, [esp + i3030_fiyH1]
	addsd xmm2, [esp + i3030_fizH1]
	movlpd [esp + i3030_fjxO], xmm3
	movlpd [esp + i3030_fjyO], xmm4
	movlpd [esp + i3030_fjzO], xmm5
	movlpd [esp + i3030_fixH1], xmm0
	movlpd [esp + i3030_fiyH1], xmm1
	movlpd [esp + i3030_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i3030_rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3030_rsqH1H1] ;# xmm1=r 
	mulsd  xmm1, [esp + i3030_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3030_vctot]
    movlpd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3030_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3030_fjxH1]
	movapd xmm4, [esp + i3030_fjyH1]
	movapd xmm5, [esp + i3030_fjzH1]
	mulsd xmm0, [esp + i3030_dxH1H1]
	mulsd xmm1, [esp + i3030_dyH1H1]
	mulsd xmm2, [esp + i3030_dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3030_fixH1]
	addsd xmm1, [esp + i3030_fiyH1]
	addsd xmm2, [esp + i3030_fizH1]
	movlpd [esp + i3030_fjxH1], xmm3
	movlpd [esp + i3030_fjyH1], xmm4
	movlpd [esp + i3030_fjzH1], xmm5
	movlpd [esp + i3030_fixH1], xmm0
	movlpd [esp + i3030_fiyH1], xmm1
	movlpd [esp + i3030_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i3030_rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3030_rsqH1H2] ;# xmm1=r 
	mulsd  xmm1, [esp + i3030_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3030_vctot]
    movlpd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3030_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3030_fjxH2]
	movapd xmm4, [esp + i3030_fjyH2]
	movapd xmm5, [esp + i3030_fjzH2]
	mulsd xmm0, [esp + i3030_dxH1H2]
	mulsd xmm1, [esp + i3030_dyH1H2]
	mulsd xmm2, [esp + i3030_dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3030_fixH1]
	addsd xmm1, [esp + i3030_fiyH1]
	addsd xmm2, [esp + i3030_fizH1]
	movlpd [esp + i3030_fjxH2], xmm3
	movlpd [esp + i3030_fjyH2], xmm4
	movlpd [esp + i3030_fjzH2], xmm5
	movlpd [esp + i3030_fixH1], xmm0
	movlpd [esp + i3030_fiyH1], xmm1
	movlpd [esp + i3030_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i3030_rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3030_rsqH2O] ;# xmm1=r 
	mulsd  xmm1, [esp + i3030_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3030_vctot]
    movlpd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3030_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + i3030_fjxO]
	movapd xmm4, [esp + i3030_fjyO]
	movapd xmm5, [esp + i3030_fjzO]
	mulsd xmm0, [esp + i3030_dxH2O]
	mulsd xmm1, [esp + i3030_dyH2O]
	mulsd xmm2, [esp + i3030_dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3030_fixH2]
	addsd xmm1, [esp + i3030_fiyH2]
	addsd xmm2, [esp + i3030_fizH2]
	movlpd [esp + i3030_fjxO], xmm3
	movlpd [esp + i3030_fjyO], xmm4
	movlpd [esp + i3030_fjzO], xmm5
	movlpd [esp + i3030_fixH2], xmm0
	movlpd [esp + i3030_fiyH2], xmm1
	movlpd [esp + i3030_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i3030_rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3030_rsqH2H1] ;# xmm1=r 
	mulsd  xmm1, [esp + i3030_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3030_vctot]
    movlpd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3030_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3030_fjxH1]
	movapd xmm4, [esp + i3030_fjyH1]
	movapd xmm5, [esp + i3030_fjzH1]
	mulsd xmm0, [esp + i3030_dxH2H1]
	mulsd xmm1, [esp + i3030_dyH2H1]
	mulsd xmm2, [esp + i3030_dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3030_fixH2]
	addsd xmm1, [esp + i3030_fiyH2]
	addsd xmm2, [esp + i3030_fizH2]
	movlpd [esp + i3030_fjxH1], xmm3
	movlpd [esp + i3030_fjyH1], xmm4
	movlpd [esp + i3030_fjzH1], xmm5
	movlpd [esp + i3030_fixH2], xmm0
	movlpd [esp + i3030_fiyH2], xmm1
	movlpd [esp + i3030_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i3030_rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3030_rsqH2H2] ;# xmm1=r 
	mulsd  xmm1, [esp + i3030_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3030_two]	;# two*Heps2 
	movapd xmm3, [esp + i3030_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3030_vctot]
    movlpd [esp + i3030_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3030_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3030_fjxH2]
	movapd xmm4, [esp + i3030_fjyH2]
	movapd xmm5, [esp + i3030_fjzH2]
	mulsd xmm0, [esp + i3030_dxH2H2]
	mulsd xmm1, [esp + i3030_dyH2H2]
	mulsd xmm2, [esp + i3030_dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3030_fixH2]
	addsd xmm1, [esp + i3030_fiyH2]
	addsd xmm2, [esp + i3030_fizH2]
	movlpd [esp + i3030_fjxH2], xmm3
	movlpd [esp + i3030_fjyH2], xmm4
	movlpd [esp + i3030_fjzH2], xmm5
	movlpd [esp + i3030_fixH2], xmm0
	movlpd [esp + i3030_fiyH2], xmm1
	movlpd [esp + i3030_fizH2], xmm2

	mov edi, [ebp + i3030_faction]

	movd eax, mm0
	
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + i3030_fjxO]
	addsd xmm1, [esp + i3030_fjyO]
	addsd xmm2, [esp + i3030_fjzO]
	addsd xmm3, [esp + i3030_fjxH1]
	addsd xmm4, [esp + i3030_fjyH1]
	addsd xmm5, [esp + i3030_fjzH1]
	addsd xmm6, [esp + i3030_fjxH2]
	addsd xmm7, [esp + i3030_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + i3030_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
.i3030_updateouterdata:
	mov   ecx, [esp + i3030_ii3]
	mov   edi, [ebp + i3030_faction]
	mov   esi, [ebp + i3030_fshift]
	mov   edx, [esp + i3030_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3030_fixO]
	movapd xmm1, [esp + i3030_fiyO]
	movapd xmm2, [esp + i3030_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3030_fixH1]
	movapd xmm1, [esp + i3030_fiyH1]
	movapd xmm2, [esp + i3030_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3030_fixH2]
	movapd xmm1, [esp + i3030_fiyH2]
	movapd xmm2, [esp + i3030_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i3030_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i3030_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i3030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + i3030_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3030_nri]
	dec ecx
	jecxz .i3030_end
	;# not last, iterate once more!  
	mov [ebp + i3030_nri], ecx
	jmp .i3030_outer
.i3030_end:
	emms
	mov eax, [esp + i3030_salign]
	add esp, eax
	add esp, 1444
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	



.globl inl3100_sse2
.globl _inl3100_sse2
inl3100_sse2:	
_inl3100_sse2:	
.equiv		i3100_nri,			8
.equiv		i3100_iinr,			12
.equiv		i3100_jindex,		16
.equiv		i3100_jjnr,			20
.equiv		i3100_shift,		24
.equiv		i3100_shiftvec,		28
.equiv		i3100_fshift,		32
.equiv		i3100_gid,			36
.equiv		i3100_pos,			40
.equiv		i3100_faction,		44
.equiv		i3100_charge,		48
.equiv		i3100_facel,		52 ;# double  
.equiv		i3100_Vc,			60	
.equiv		i3100_type,			64
.equiv		i3100_ntype,		68
.equiv		i3100_nbfp,			72	
.equiv		i3100_Vnb,			76
.equiv		i3100_tabscale,		80 ;# double  
.equiv		i3100_VFtab,		88
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i3100_ix,			0
.equiv		i3100_iy,			16
.equiv		i3100_iz,			32
.equiv		i3100_iq,			48
.equiv		i3100_dx,			64
.equiv		i3100_dy,			80
.equiv		i3100_dz,			96
.equiv		i3100_two,			112
.equiv		i3100_six,			128
.equiv		i3100_twelve,		144
.equiv		i3100_tsc,			160
.equiv		i3100_qq,			176	
.equiv		i3100_c6,			192
.equiv		i3100_c12,			208
.equiv		i3100_fscal,		224
.equiv		i3100_vctot,		240
.equiv		i3100_vnbtot,		256
.equiv		i3100_fix,			272
.equiv		i3100_fiy,			288
.equiv		i3100_fiz,			304
.equiv		i3100_half,			320
.equiv		i3100_three,		336
.equiv		i3100_is3,			352
.equiv		i3100_ii3,			356
.equiv		i3100_ntia,			360	
.equiv		i3100_innerjjnr,	364
.equiv		i3100_innerk,		368
.equiv		i3100_salign,		372
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 376		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3100_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movupd xmm3, [sse2_six]
	movupd xmm4, [sse2_twelve]
	movsd xmm5, [ebp + i3100_tabscale]
	movapd [esp + i3100_half],  xmm0
	movapd [esp + i3100_two], xmm1
	movapd [esp + i3100_three],  xmm2
	movapd [esp + i3100_six],  xmm3
	movapd [esp + i3100_twelve],  xmm4
	shufpd xmm5, xmm5, 0
	movapd [esp + i3100_tsc], xmm5

	;# assume we have at least one i particle - start directly 	
.i3100_outer:
	mov   eax, [ebp + i3100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3100_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3100_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i3100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3100_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + i3100_facel]
	shufpd xmm3, xmm3, 0

    mov   edx, [ebp + i3100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i3100_ntype]
    shl   edx, 1
    mov   [esp + i3100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3100_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + i3100_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + i3100_ix], xmm0
	movapd [esp + i3100_iy], xmm1
	movapd [esp + i3100_iz], xmm2

	mov   [esp + i3100_ii3], ebx
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i3100_vctot], xmm4
	movapd [esp + i3100_vnbtot], xmm4
	movapd [esp + i3100_fix], xmm4
	movapd [esp + i3100_fiy], xmm4
	movapd [esp + i3100_fiz], xmm4
	
	mov   eax, [ebp + i3100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3100_pos]
	mov   edi, [ebp + i3100_faction]	
	mov   eax, [ebp + i3100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i3100_innerk], edx    ;# number of innerloop atoms 
	jge   .i3100_unroll_loop
	jmp   .i3100_checksingle
.i3100_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + i3100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add dword ptr [esp + i3100_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + i3100_charge]    ;# base of charge[] 
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + i3100_iq]
	mulpd  xmm3, xmm2
	movapd [esp + i3100_qq], xmm3	
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + i3100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + i3100_nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + i3100_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + i3100_c6], xmm4
	movapd [esp + i3100_c12], xmm6
	
	mov esi, [ebp + i3100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i3100_ix]
	movapd xmm5, [esp + i3100_iy]
	movapd xmm6, [esp + i3100_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i3100_dx], xmm4
	movapd [esp + i3100_dy], xmm5
	movapd [esp + i3100_dz], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i3100_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3100_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i3100_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3100_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=rinv 
	
	mulpd xmm4, xmm0	;# xmm4=r 
	mulpd xmm4, [esp + i3100_tsc]

	cvttpd2pi mm6, xmm4	;# mm6 = lu idx 
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	
	movd mm0, eax	
	movd mm1, ebx

	mov  esi, [ebp + i3100_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3100_two]	;# two*Heps2 
	movapd xmm3, [esp + i3100_qq]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	
	;# L-J 
	movapd xmm4, xmm0
	mulpd  xmm4, xmm0	;# xmm4=rinvsq 

	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addpd  xmm5, [esp + i3100_vctot]

	movapd xmm6, xmm4
	mulpd  xmm6, xmm4

	movapd [esp + i3100_vctot], xmm5 

	mulpd  xmm6, xmm4	;# xmm6=rinvsix 
	movapd xmm4, xmm6
	mulpd  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulpd  xmm6, [esp + i3100_c6]
	mulpd  xmm4, [esp + i3100_c12]
	movapd xmm7, [esp + i3100_vnbtot]
	addpd  xmm7, xmm4
	mulpd  xmm4, [esp + i3100_twelve]
	subpd  xmm7, xmm6
	mulpd  xmm3, [esp + i3100_tsc]
	mulpd  xmm6, [esp + i3100_six]
	movapd [esp + i3100_vnbtot], xmm7
	subpd  xmm4, xmm6
	mulpd  xmm4, xmm0
	subpd  xmm4, xmm3
	mulpd  xmm4, xmm0

	movapd xmm0, [esp + i3100_dx]
	movapd xmm1, [esp + i3100_dy]
	movapd xmm2, [esp + i3100_dz]

	movd eax, mm0	
	movd ebx, mm1

	mov    edi, [ebp + i3100_faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i3100_fix]
	movapd xmm4, [esp + i3100_fiy]
	movapd xmm5, [esp + i3100_fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + i3100_fix], xmm3
	movapd [esp + i3100_fiy], xmm4
	movapd [esp + i3100_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	;# should we do one more iteration? 
	sub dword ptr [esp + i3100_innerk],  2
	jl    .i3100_checksingle
	jmp   .i3100_unroll_loop
.i3100_checksingle:
	mov   edx, [esp + i3100_innerk]
	and   edx, 1
	jnz    .i3100_dosingle
	jmp    .i3100_updateouterdata
.i3100_dosingle:
	mov esi, [ebp + i3100_charge]
	mov edi, [ebp + i3100_pos]
	mov   ecx, [esp + i3100_innerjjnr]
	mov   eax, [ecx]
	
	xorpd  xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm2, [esp + i3100_iq]
	mulpd  xmm3, xmm2
	movapd [esp + i3100_qq], xmm3	
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	mov esi, [ebp + i3100_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + i3100_nbfp]
	shl eax, 1
	mov edi, [esp + i3100_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + i3100_c6], xmm4
	movapd [esp + i3100_c12], xmm6
	
	mov esi, [ebp + i3100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i3100_ix]
	movapd xmm5, [esp + i3100_iy]
	movapd xmm6, [esp + i3100_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i3100_dx], xmm4
	movapd [esp + i3100_dy], xmm5
	movapd [esp + i3100_dz], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i3100_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3100_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i3100_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3100_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=rinv 
	
	mulsd xmm4, xmm0	;# xmm4=r 
	mulsd xmm4, [esp + i3100_tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm4	;# mm6 = lu idx 
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	
	mov  esi, [ebp + i3100_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3100_two]	;# two*Heps2 
	movapd xmm3, [esp + i3100_qq]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	
	;# L-J 
	movapd xmm4, xmm0
	mulsd  xmm4, xmm0	;# xmm4=rinvsq 

	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addsd  xmm5, [esp + i3100_vctot]

	movapd xmm6, xmm4
	mulsd  xmm6, xmm4

	movlpd [esp + i3100_vctot], xmm5 

	mulsd  xmm6, xmm4	;# xmm6=rinvsix 
	movapd xmm4, xmm6
	mulsd  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulsd  xmm6, [esp + i3100_c6]
	mulsd  xmm4, [esp + i3100_c12]
	movapd xmm7, [esp + i3100_vnbtot]
	addsd  xmm7, xmm4
	mulsd  xmm4, [esp + i3100_twelve]
	subsd  xmm7, xmm6
	mulsd  xmm3, [esp + i3100_tsc]
	mulsd  xmm6, [esp + i3100_six]
	movlpd [esp + i3100_vnbtot], xmm7
	subsd  xmm4, xmm6
	mulsd  xmm4, xmm0
	subsd  xmm4, xmm3
	mulsd  xmm4, xmm0

	movapd xmm0, [esp + i3100_dx]
	movapd xmm1, [esp + i3100_dy]
	movapd xmm2, [esp + i3100_dz]

	movd eax, mm0	

	mov    edi, [ebp + i3100_faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i3100_fix]
	movapd xmm4, [esp + i3100_fiy]
	movapd xmm5, [esp + i3100_fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + i3100_fix], xmm3
	movlpd [esp + i3100_fiy], xmm4
	movlpd [esp + i3100_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
		
.i3100_updateouterdata:
	mov   ecx, [esp + i3100_ii3]
	mov   edi, [ebp + i3100_faction]
	mov   esi, [ebp + i3100_fshift]
	mov   edx, [esp + i3100_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3100_fix]
	movapd xmm1, [esp + i3100_fiy]
	movapd xmm2, [esp + i3100_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# increment fshift force  
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i3100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i3100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i3100_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i3100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + i3100_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3100_nri]
	dec ecx
	jecxz .i3100_end
	;# not last, iterate once more!  
	mov [ebp + i3100_nri], ecx
	jmp .i3100_outer
.i3100_end:
	emms
	mov eax, [esp + i3100_salign]
	add esp, eax
	add esp, 376
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl inl3120_sse2
.globl _inl3120_sse2
inl3120_sse2:
_inl3120_sse2:
.equiv		i3120_nri,			8
.equiv		i3120_iinr,			12
.equiv		i3120_jindex,		16
.equiv		i3120_jjnr,			20
.equiv		i3120_shift,		24
.equiv		i3120_shiftvec,		28
.equiv		i3120_fshift,		32
.equiv		i3120_gid,			36
.equiv		i3120_pos,			40		
.equiv		i3120_faction,		44
.equiv		i3120_charge,		48
.equiv		i3120_facel,		52 ;# double  
.equiv		i3120_Vc,			60	
.equiv		i3120_type,			64
.equiv		i3120_ntype,		68
.equiv		i3120_nbfp,			72	
.equiv		i3120_Vnb,			76	
.equiv		i3120_tabscale,		80 ;# double  	
.equiv		i3120_VFtab,		88
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i3120_ixO,			0
.equiv		i3120_iyO,			16
.equiv		i3120_izO,			32
.equiv		i3120_ixH1,			48
.equiv		i3120_iyH1,			64
.equiv		i3120_izH1,			80
.equiv		i3120_ixH2,			96
.equiv		i3120_iyH2,			112
.equiv		i3120_izH2,			128
.equiv		i3120_iqO,			144 
.equiv		i3120_iqH,			160 
.equiv		i3120_dxO,			176
.equiv		i3120_dyO,			192
.equiv		i3120_dzO,			208	
.equiv		i3120_dxH1,			224
.equiv		i3120_dyH1,			240
.equiv		i3120_dzH1,			256	
.equiv		i3120_dxH2,			272
.equiv		i3120_dyH2,			288
.equiv		i3120_dzH2,			304	
.equiv		i3120_qqO,			320
.equiv		i3120_qqH,			336
.equiv		i3120_rinvO,		352
.equiv		i3120_rinvH1,		368
.equiv		i3120_rinvH2,		384		
.equiv		i3120_rO,			400
.equiv		i3120_rH1,			416
.equiv		i3120_rH2,			432
.equiv		i3120_tsc,			448	
.equiv		i3120_two,			464
.equiv		i3120_c6,			480
.equiv		i3120_c12,			496
.equiv		i3120_six,			512
.equiv		i3120_twelve,		528
.equiv		i3120_vctot,		544
.equiv		i3120_vnbtot,		560
.equiv		i3120_fixO,			576
.equiv		i3120_fiyO,			592
.equiv		i3120_fizO,			608
.equiv		i3120_fixH1,		624
.equiv		i3120_fiyH1,		640
.equiv		i3120_fizH1,		656
.equiv		i3120_fixH2,		672
.equiv		i3120_fiyH2,		688
.equiv		i3120_fizH2,		704
.equiv		i3120_fjx,			720
.equiv		i3120_fjy,			736
.equiv		i3120_fjz,			752
.equiv		i3120_half,			768
.equiv		i3120_three,		784
.equiv		i3120_is3,			800
.equiv		i3120_ii3,			804
.equiv		i3120_ntia,			808	
.equiv		i3120_innerjjnr,	812
.equiv		i3120_innerk,		816
.equiv		i3120_salign,		820
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 824		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3120_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movupd xmm3, [sse2_six]
	movupd xmm4, [sse2_twelve]
	movsd xmm5, [ebp + i3120_tabscale]
	
	movapd [esp + i3120_half],  xmm0
	movapd [esp + i3120_two],  xmm1
	movapd [esp + i3120_three],  xmm2
	movapd [esp + i3120_six],  xmm3
	movapd [esp + i3120_twelve],  xmm4
	shufpd xmm5, xmm5, 0
	movapd [esp + i3120_tsc], xmm5
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3120_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + i3120_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + i3120_iqO], xmm3
	movapd [esp + i3120_iqH], xmm4
	
	mov   edx, [ebp + i3120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + i3120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + i3120_ntia], ecx		
.i3120_outer:
	mov   eax, [ebp + i3120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3120_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3120_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i3120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3120_pos]    ;# eax = base of pos[]  
	mov   [esp + i3120_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3120_ixO], xmm3
	movapd [esp + i3120_iyO], xmm4
	movapd [esp + i3120_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3120_ixH1], xmm0
	movapd [esp + i3120_iyH1], xmm1
	movapd [esp + i3120_izH1], xmm2
	movapd [esp + i3120_ixH2], xmm3
	movapd [esp + i3120_iyH2], xmm4
	movapd [esp + i3120_izH2], xmm5
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i3120_vctot], xmm4
	movapd [esp + i3120_vnbtot], xmm4
	movapd [esp + i3120_fixO], xmm4
	movapd [esp + i3120_fiyO], xmm4
	movapd [esp + i3120_fizO], xmm4
	movapd [esp + i3120_fixH1], xmm4
	movapd [esp + i3120_fiyH1], xmm4
	movapd [esp + i3120_fizH1], xmm4
	movapd [esp + i3120_fixH2], xmm4
	movapd [esp + i3120_fiyH2], xmm4
	movapd [esp + i3120_fizH2], xmm4
	
	mov   eax, [ebp + i3120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3120_pos]
	mov   edi, [ebp + i3120_faction]	
	mov   eax, [ebp + i3120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i3120_innerk], edx    ;# number of innerloop atoms 
	jge   .i3120_unroll_loop
	jmp   .i3120_checksingle
.i3120_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i3120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add dword ptr [esp + i3120_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + i3120_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + i3120_iqO]
	mulpd  xmm4, [esp + i3120_iqH]
	movapd  [esp + i3120_qqO], xmm3
	movapd  [esp + i3120_qqH], xmm4	

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mov esi, [ebp + i3120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + i3120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + i3120_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + i3120_c6], xmm4
	movapd [esp + i3120_c12], xmm6

	mov esi, [ebp + i3120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i3120_ixO]
	movapd xmm5, [esp + i3120_iyO]
	movapd xmm6, [esp + i3120_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i3120_dxO], xmm4
	movapd [esp + i3120_dyO], xmm5
	movapd [esp + i3120_dzO], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i3120_ixH1]
	movapd xmm5, [esp + i3120_iyH1]
	movapd xmm6, [esp + i3120_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i3120_dxH1], xmm4
	movapd [esp + i3120_dyH1], xmm5
	movapd [esp + i3120_dzH1], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i3120_ixH2]
	movapd xmm4, [esp + i3120_iyH2]
	movapd xmm5, [esp + i3120_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# store dr 
	movapd [esp + i3120_dxH2], xmm3
	movapd [esp + i3120_dyH2], xmm4
	movapd [esp + i3120_dzH2], xmm5
	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i3120_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3120_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i3120_half] ;# rinv 
	movapd  [esp + i3120_rinvO], xmm4	;# rinvO in xmm4 
	mulpd   xmm7, xmm4
	movapd  [esp + i3120_rO], xmm7	;# r in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i3120_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3120_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i3120_half] ;# rinv 
	movapd [esp + i3120_rinvH1], xmm4	;# rinvH1 
	mulpd  xmm6, xmm4
	movapd [esp + i3120_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i3120_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3120_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i3120_half] ;# rinv 
	movapd [esp + i3120_rinvH2], xmm4 ;# rinv 
	mulpd xmm5, xmm4
	movapd [esp + i3120_rH2], xmm5 ;# r 

	;# do O interactions 
	;# rO is still in xmm7 
	movapd xmm0, [esp + i3120_rinvO]
	mulpd   xmm7, [esp + i3120_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + i3120_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  
    mulpd  xmm6, xmm1       ;# xmm6=Geps 
    mulpd  xmm7, xmm2       ;# xmm7=Heps2 
    addpd  xmm5, xmm6
    addpd  xmm5, xmm7       ;# xmm5=Fp        
    mulpd  xmm7, [esp + i3120_two]       ;# two*Heps2 
    movapd xmm0, [esp + i3120_qqO]
    addpd  xmm7, xmm6
    addpd  xmm7, xmm5 ;# xmm7=FF 
    mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
    addpd  xmm5, xmm4 ;# xmm5=VV 
    mulpd  xmm5, xmm0 ;# vcoul=qq*VV  
    mulpd  xmm0, xmm7 ;# fijC=FF*qq 

	;# do nontable L-J 
	movapd xmm2, [esp + i3120_rinvO]
	mulpd  xmm2, xmm2

    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addpd  xmm5, [esp + i3120_vctot]
    movapd [esp + i3120_vctot], xmm5 

	movapd xmm1, xmm2
	mulpd  xmm1, xmm1
	mulpd  xmm1, xmm2	;# xmm1=rinvsix 
	movapd xmm4, xmm1
	mulpd  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulpd  xmm1, [esp + i3120_c6]
	mulpd  xmm4, [esp + i3120_c12]
	movapd xmm3, xmm4
	subpd  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	mulpd  xmm1, [esp + i3120_six]
	mulpd  xmm4, [esp + i3120_twelve]
	subpd  xmm4, xmm1
	addpd  xmm3, [esp + i3120_vnbtot]
	mulpd  xmm4, [esp + i3120_rinvO]
	mulpd  xmm0, [esp + i3120_tsc]
	subpd  xmm4, xmm0
	movapd [esp + i3120_vnbtot], xmm3
	mulpd  xmm4, [esp + i3120_rinvO]	

	movapd xmm0, [esp + i3120_dxO]
	movapd xmm1, [esp + i3120_dyO]
	movapd xmm2, [esp + i3120_dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4	;# tx in xmm0-xmm2 

	;# update O forces 
	movapd xmm3, [esp + i3120_fixO]
	movapd xmm4, [esp + i3120_fiyO]
	movapd xmm7, [esp + i3120_fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i3120_fixO], xmm3
	movapd [esp + i3120_fiyO], xmm4
	movapd [esp + i3120_fizO], xmm7
	;# update j forces with water O 
	movapd [esp + i3120_fjx], xmm0
	movapd [esp + i3120_fjy], xmm1
	movapd [esp + i3120_fjz], xmm2

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + i3120_rH1]
	mulpd xmm7, [esp + i3120_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3120_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3120_two]	;# two*Heps2 
	movapd xmm3, [esp + i3120_qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addpd  xmm5, [esp + i3120_vctot]
	mulpd  xmm3, [esp + i3120_rinvH1]
    movapd [esp + i3120_vctot], xmm5 
	mulpd  xmm3, [esp + i3120_tsc]
	subpd xmm4, xmm3

	movapd xmm0, [esp + i3120_dxH1]
	movapd xmm1, [esp + i3120_dyH1]
	movapd xmm2, [esp + i3120_dzH1]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i3120_fixH1]
	movapd xmm4, [esp + i3120_fiyH1]
	movapd xmm7, [esp + i3120_fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i3120_fixH1], xmm3
	movapd [esp + i3120_fiyH1], xmm4
	movapd [esp + i3120_fizH1], xmm7
	;# update j forces with water H1 
	addpd  xmm0, [esp + i3120_fjx]
	addpd  xmm1, [esp + i3120_fjy]
	addpd  xmm2, [esp + i3120_fjz]
	movapd [esp + i3120_fjx], xmm0
	movapd [esp + i3120_fjy], xmm1
	movapd [esp + i3120_fjz], xmm2

	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + i3120_rH2]
	mulpd   xmm7, [esp + i3120_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3120_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3120_two]	;# two*Heps2 
	movapd xmm3, [esp + i3120_qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addpd  xmm5, [esp + i3120_vctot]
	mulpd  xmm3, [esp + i3120_rinvH2]
    movapd [esp + i3120_vctot], xmm5 
	mulpd  xmm3, [esp + i3120_tsc]
	subpd  xmm4, xmm3

	movapd xmm0, [esp + i3120_dxH2]
	movapd xmm1, [esp + i3120_dyH2]
	movapd xmm2, [esp + i3120_dzH2]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

    movd eax, mm0   
    movd ebx, mm1
	
	;# update H2 forces 
	movapd xmm3, [esp + i3120_fixH2]
	movapd xmm4, [esp + i3120_fiyH2]
	movapd xmm7, [esp + i3120_fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i3120_fixH2], xmm3
	movapd [esp + i3120_fiyH2], xmm4
	movapd [esp + i3120_fizH2], xmm7

	mov edi, [ebp + i3120_faction]
	;# update j forces 
	addpd  xmm0, [esp + i3120_fjx]
	addpd  xmm1, [esp + i3120_fjy]
	addpd  xmm2, [esp + i3120_fjz]

	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
			
	;# should we do one more iteration? 
	sub dword ptr [esp + i3120_innerk],  2
	jl    .i3120_checksingle
	jmp   .i3120_unroll_loop
.i3120_checksingle:	
	mov   edx, [esp + i3120_innerk]
	and   edx, 1
	jnz   .i3120_dosingle
	jmp   .i3120_updateouterdata
.i3120_dosingle:
	mov   edx, [esp + i3120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]

	mov esi, [ebp + i3120_charge]    ;# base of charge[] 
	xorpd xmm3, xmm3	
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + i3120_iqO]
	mulpd  xmm4, [esp + i3120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movapd  [esp + i3120_qqO], xmm3
	movapd  [esp + i3120_qqH], xmm4	

	mov esi, [ebp + i3120_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + i3120_nbfp]
	shl eax, 1	
	mov edi, [esp + i3120_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + i3120_c6], xmm4
	movapd [esp + i3120_c12], xmm6
	
	mov esi, [ebp + i3120_pos]       ;# base of pos[] 
	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	
	;# move coords to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i3120_ixO]
	movapd xmm5, [esp + i3120_iyO]
	movapd xmm6, [esp + i3120_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i3120_dxO], xmm4
	movapd [esp + i3120_dyO], xmm5
	movapd [esp + i3120_dzO], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i3120_ixH1]
	movapd xmm5, [esp + i3120_iyH1]
	movapd xmm6, [esp + i3120_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i3120_dxH1], xmm4
	movapd [esp + i3120_dyH1], xmm5
	movapd [esp + i3120_dzH1], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i3120_ixH2]
	movapd xmm4, [esp + i3120_iyH2]
	movapd xmm5, [esp + i3120_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# store dr 
	movapd [esp + i3120_dxH2], xmm3
	movapd [esp + i3120_dyH2], xmm4
	movapd [esp + i3120_dzH2], xmm5
	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i3120_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3120_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i3120_half] ;# rinv 
	movapd  [esp + i3120_rinvO], xmm4	;# rinvO in xmm4 
	mulsd   xmm7, xmm4
	movapd  [esp + i3120_rO], xmm7	;# r in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i3120_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3120_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i3120_half] ;# rinv 
	movapd [esp + i3120_rinvH1], xmm4	;# rinvH1 
	mulsd  xmm6, xmm4
	movapd [esp + i3120_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i3120_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3120_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i3120_half] ;# rinv 
	movapd [esp + i3120_rinvH2], xmm4 ;# rinv 
	mulsd xmm5, xmm4
	movapd [esp + i3120_rH2], xmm5 ;# r 

	;# do O interactions 
	movd mm0, eax	
	;# rO is still in xmm7 
	movapd xmm0, [esp + i3120_rinvO]
	mulsd   xmm7, [esp + i3120_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3120_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  
    mulsd  xmm6, xmm1       ;# xmm6=Geps 
    mulsd  xmm7, xmm2       ;# xmm7=Heps2 
    addsd  xmm5, xmm6
    addsd  xmm5, xmm7       ;# xmm5=Fp        
    mulsd  xmm7, [esp + i3120_two]       ;# two*Heps2 
    movapd xmm0, [esp + i3120_qqO]
    addsd  xmm7, xmm6
    addsd  xmm7, xmm5 ;# xmm7=FF 
    mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
    addsd  xmm5, xmm4 ;# xmm5=VV 
    mulsd  xmm5, xmm0 ;# vcoul=qq*VV  
    mulsd  xmm0, xmm7 ;# fijC=FF*qq 

	;# do nontable L-J 
	movapd xmm2, [esp + i3120_rinvO]
	mulsd  xmm2, xmm2

    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addsd  xmm5, [esp + i3120_vctot]
    movlpd [esp + i3120_vctot], xmm5 

	movapd xmm1, xmm2
	mulsd  xmm1, xmm1
	mulsd  xmm1, xmm2	;# xmm1=rinvsix 
	movapd xmm4, xmm1
	mulsd  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulsd  xmm1, [esp + i3120_c6]
	mulsd  xmm4, [esp + i3120_c12]
	movapd xmm3, xmm4
	subsd  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	mulsd  xmm1, [esp + i3120_six]
	mulsd  xmm4, [esp + i3120_twelve]
	subsd  xmm4, xmm1
	addsd  xmm3, [esp + i3120_vnbtot]
	mulsd  xmm4, [esp + i3120_rinvO]
	mulsd  xmm0, [esp + i3120_tsc]
	subsd  xmm4, xmm0
	movlpd [esp + i3120_vnbtot], xmm3
	mulsd  xmm4, [esp + i3120_rinvO]	

	movapd xmm0, [esp + i3120_dxO]
	movapd xmm1, [esp + i3120_dyO]
	movapd xmm2, [esp + i3120_dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4	;# tx in xmm0-xmm2 

	;# update O forces 
	movapd xmm3, [esp + i3120_fixO]
	movapd xmm4, [esp + i3120_fiyO]
	movapd xmm7, [esp + i3120_fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i3120_fixO], xmm3
	movlpd [esp + i3120_fiyO], xmm4
	movlpd [esp + i3120_fizO], xmm7
	;# update j forces with water O 
	movlpd [esp + i3120_fjx], xmm0
	movlpd [esp + i3120_fjy], xmm1
	movlpd [esp + i3120_fjz], xmm2

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + i3120_rH1]
	mulpd xmm7, [esp + i3120_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3120_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3120_two]	;# two*Heps2 
	movapd xmm3, [esp + i3120_qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addsd  xmm5, [esp + i3120_vctot]
	mulsd  xmm3, [esp + i3120_rinvH1]
    movlpd [esp + i3120_vctot], xmm5 
	mulsd  xmm3, [esp + i3120_tsc]
	subsd xmm4, xmm3

	movapd xmm0, [esp + i3120_dxH1]
	movapd xmm1, [esp + i3120_dyH1]
	movapd xmm2, [esp + i3120_dzH1]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i3120_fixH1]
	movapd xmm4, [esp + i3120_fiyH1]
	movapd xmm7, [esp + i3120_fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i3120_fixH1], xmm3
	movlpd [esp + i3120_fiyH1], xmm4
	movlpd [esp + i3120_fizH1], xmm7
	;# update j forces with water H1 
	addsd  xmm0, [esp + i3120_fjx]
	addsd  xmm1, [esp + i3120_fjy]
	addsd  xmm2, [esp + i3120_fjz]
	movlpd [esp + i3120_fjx], xmm0
	movlpd [esp + i3120_fjy], xmm1
	movlpd [esp + i3120_fjz], xmm2

	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + i3120_rH2]
	mulsd   xmm7, [esp + i3120_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3120_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3120_two]	;# two*Heps2 
	movapd xmm3, [esp + i3120_qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addsd  xmm5, [esp + i3120_vctot]
	mulsd  xmm3, [esp + i3120_rinvH2]
    movlpd [esp + i3120_vctot], xmm5 
	mulsd  xmm3, [esp + i3120_tsc]
	subsd  xmm4, xmm3

	movapd xmm0, [esp + i3120_dxH2]
	movapd xmm1, [esp + i3120_dyH2]
	movapd xmm2, [esp + i3120_dzH2]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

    movd eax, mm0   
	
	;# update H2 forces 
	movapd xmm3, [esp + i3120_fixH2]
	movapd xmm4, [esp + i3120_fiyH2]
	movapd xmm7, [esp + i3120_fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i3120_fixH2], xmm3
	movlpd [esp + i3120_fiyH2], xmm4
	movlpd [esp + i3120_fizH2], xmm7

	mov edi, [ebp + i3120_faction]
	;# update j forces 
	addsd  xmm0, [esp + i3120_fjx]
	addsd  xmm1, [esp + i3120_fjy]
	addsd  xmm2, [esp + i3120_fjz]

	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i3120_updateouterdata:
	mov   ecx, [esp + i3120_ii3]
	mov   edi, [ebp + i3120_faction]
	mov   esi, [ebp + i3120_fshift]
	mov   edx, [esp + i3120_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3120_fixO]
	movapd xmm1, [esp + i3120_fiyO]
	movapd xmm2, [esp + i3120_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3120_fixH1]
	movapd xmm1, [esp + i3120_fiyH1]
	movapd xmm2, [esp + i3120_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3120_fixH2]
	movapd xmm1, [esp + i3120_fiyH2]
	movapd xmm2, [esp + i3120_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i3120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i3120_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i3120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + i3120_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i3120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i3120_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3120_nri]
	dec ecx
	jecxz .i3120_end
	;# not last, iterate once more!  
	mov [ebp + i3120_nri], ecx
	jmp .i3120_outer
.i3120_end:
	emms
	mov eax, [esp + i3120_salign]
	add esp, eax
	add esp, 824
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

	
.globl inl3130_sse2
.globl _inl3130_sse2
inl3130_sse2:	
_inl3130_sse2:	
.equiv		i3130_nri,			8
.equiv		i3130_iinr,			12
.equiv		i3130_jindex,		16
.equiv		i3130_jjnr,			20
.equiv		i3130_shift,		24
.equiv		i3130_shiftvec,		28
.equiv		i3130_fshift,		32
.equiv		i3130_gid,			36
.equiv		i3130_pos,			40		
.equiv		i3130_faction,		44
.equiv		i3130_charge,		48
.equiv		i3130_facel,		52 ;# double  
.equiv		i3130_Vc,			60	
.equiv		i3130_type,			64
.equiv		i3130_ntype,		68
.equiv		i3130_nbfp,			72	
.equiv		i3130_Vnb,			76
.equiv		i3130_tabscale,		80 ;# double  	
.equiv		i3130_VFtab,		88
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i3130_ixO,			0
.equiv		i3130_iyO,			16
.equiv		i3130_izO,			32
.equiv		i3130_ixH1,			48
.equiv		i3130_iyH1,			64
.equiv		i3130_izH1,			80
.equiv		i3130_ixH2,			96
.equiv		i3130_iyH2,			112
.equiv		i3130_izH2,			128
.equiv		i3130_jxO,			144
.equiv		i3130_jyO,			160
.equiv		i3130_jzO,			176
.equiv		i3130_jxH1,			192
.equiv		i3130_jyH1,			208
.equiv		i3130_jzH1,			224 
.equiv		i3130_jxH2,			240
.equiv		i3130_jyH2,			256
.equiv		i3130_jzH2,			272
.equiv		i3130_dxOO,			288
.equiv		i3130_dyOO,			304
.equiv		i3130_dzOO,			320	
.equiv		i3130_dxOH1,		336
.equiv		i3130_dyOH1,		352
.equiv		i3130_dzOH1,		368	
.equiv		i3130_dxOH2,		384
.equiv		i3130_dyOH2,		400
.equiv		i3130_dzOH2,		416	
.equiv		i3130_dxH1O,		432
.equiv		i3130_dyH1O,		448
.equiv		i3130_dzH1O,		464	
.equiv		i3130_dxH1H1,		480
.equiv		i3130_dyH1H1,		496
.equiv		i3130_dzH1H1,		512	
.equiv		i3130_dxH1H2,		528
.equiv		i3130_dyH1H2,		544
.equiv		i3130_dzH1H2,		560	
.equiv		i3130_dxH2O,		576
.equiv		i3130_dyH2O,		592
.equiv		i3130_dzH2O,		608	
.equiv		i3130_dxH2H1,		624
.equiv		i3130_dyH2H1,		640
.equiv		i3130_dzH2H1,		656	
.equiv		i3130_dxH2H2,		672
.equiv		i3130_dyH2H2,		688
.equiv		i3130_dzH2H2,		704
.equiv		i3130_qqOO,			720
.equiv		i3130_qqOH,			736
.equiv		i3130_qqHH,			752
.equiv		i3130_two,			768
.equiv		i3130_tsc,			784
.equiv		i3130_c6,			800
.equiv		i3130_c12,			816		 
.equiv		i3130_six,			832
.equiv		i3130_twelve,		848		 
.equiv		i3130_vctot,		864
.equiv		i3130_vnbtot,		880
.equiv		i3130_fixO,			896
.equiv		i3130_fiyO,			912
.equiv		i3130_fizO,			928
.equiv		i3130_fixH1,		944
.equiv		i3130_fiyH1,		960
.equiv		i3130_fizH1,		976
.equiv		i3130_fixH2,		992
.equiv		i3130_fiyH2,		1008
.equiv		i3130_fizH2,		1024
.equiv		i3130_fjxO,			1040
.equiv		i3130_fjyO,			1056
.equiv		i3130_fjzO,			1072
.equiv		i3130_fjxH1,		1088
.equiv		i3130_fjyH1,		1104
.equiv		i3130_fjzH1,		1120
.equiv		i3130_fjxH2,		1136
.equiv		i3130_fjyH2,		1152
.equiv		i3130_fjzH2,		1168
.equiv		i3130_half,			1184
.equiv		i3130_three,		1200
.equiv		i3130_rsqOO,		1216
.equiv		i3130_rsqOH1,		1232
.equiv		i3130_rsqOH2,		1248
.equiv		i3130_rsqH1O,		1264
.equiv		i3130_rsqH1H1,		1280
.equiv		i3130_rsqH1H2,		1296
.equiv		i3130_rsqH2O,		1312
.equiv		i3130_rsqH2H1,		1328
.equiv		i3130_rsqH2H2,		1344
.equiv		i3130_rinvOO,		1360
.equiv		i3130_rinvOH1,		1376
.equiv		i3130_rinvOH2,		1392
.equiv		i3130_rinvH1O,		1408
.equiv		i3130_rinvH1H1,		1424
.equiv		i3130_rinvH1H2,		1440
.equiv		i3130_rinvH2O,		1456
.equiv		i3130_rinvH2H1,		1472
.equiv		i3130_rinvH2H2,		1488
.equiv		i3130_fstmp,		1504	
.equiv		i3130_is3,			1520
.equiv		i3130_ii3,			1524
.equiv		i3130_innerjjnr,	1528
.equiv		i3130_innerk,		1532
.equiv		i3130_salign,		1536							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1540		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3130_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movupd xmm3, [sse2_six]
	movupd xmm4, [sse2_twelve]
	movsd xmm5, [ebp + i3130_tabscale]
	movapd [esp + i3130_half],  xmm0
	movapd [esp + i3130_two],  xmm1
	movapd [esp + i3130_three], xmm2
	movapd [esp + i3130_six], xmm3
	movapd [esp + i3130_twelve], xmm4
	shufpd xmm5, xmm5, 0
	movapd [esp + i3130_tsc],  xmm5

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3130_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + i3130_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3130_qqOO], xmm3
	movapd [esp + i3130_qqOH], xmm4
	movapd [esp + i3130_qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + i3130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + i3130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + i3130_nbfp]
	movupd xmm0, [eax + edx*8] 
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + i3130_c6], xmm0
	movapd [esp + i3130_c12], xmm1

.i3130_outer:
	mov   eax, [ebp + i3130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3130_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3130_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i3130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3130_pos]    ;# eax = base of pos[]  
	mov   [esp + i3130_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3130_ixO], xmm3
	movapd [esp + i3130_iyO], xmm4
	movapd [esp + i3130_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3130_ixH1], xmm0
	movapd [esp + i3130_iyH1], xmm1
	movapd [esp + i3130_izH1], xmm2
	movapd [esp + i3130_ixH2], xmm3
	movapd [esp + i3130_iyH2], xmm4
	movapd [esp + i3130_izH2], xmm5

	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i3130_vctot], xmm4
	movapd [esp + i3130_vnbtot], xmm4
	movapd [esp + i3130_fixO], xmm4
	movapd [esp + i3130_fiyO], xmm4
	movapd [esp + i3130_fizO], xmm4
	movapd [esp + i3130_fixH1], xmm4
	movapd [esp + i3130_fiyH1], xmm4
	movapd [esp + i3130_fizH1], xmm4
	movapd [esp + i3130_fixH2], xmm4
	movapd [esp + i3130_fiyH2], xmm4
	movapd [esp + i3130_fizH2], xmm4
	
	mov   eax, [ebp + i3130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3130_pos]
	mov   edi, [ebp + i3130_faction]	
	mov   eax, [ebp + i3130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i3130_innerk], edx    ;# number of innerloop atoms 
	jge   .i3130_unroll_loop
	jmp   .i3130_checksingle
.i3130_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + i3130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + i3130_innerjjnr], 8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + i3130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + i3130_jxO], xmm2
	movapd 	[esp + i3130_jyO], xmm3
	movapd 	[esp + i3130_jzO], xmm4
	movapd 	[esp + i3130_jxH1], xmm5
	movapd 	[esp + i3130_jyH1], xmm6
	movapd 	[esp + i3130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + i3130_jxH2], xmm2
	movapd 	[esp + i3130_jyH2], xmm3
	movapd 	[esp + i3130_jzH2], xmm4
	
	movapd xmm0, [esp + i3130_ixO]
	movapd xmm1, [esp + i3130_iyO]
	movapd xmm2, [esp + i3130_izO]
	movapd xmm3, [esp + i3130_ixO]
	movapd xmm4, [esp + i3130_iyO]
	movapd xmm5, [esp + i3130_izO]
	subpd  xmm0, [esp + i3130_jxO]
	subpd  xmm1, [esp + i3130_jyO]
	subpd  xmm2, [esp + i3130_jzO]
	subpd  xmm3, [esp + i3130_jxH1]
	subpd  xmm4, [esp + i3130_jyH1]
	subpd  xmm5, [esp + i3130_jzH1]
	movapd [esp + i3130_dxOO], xmm0
	movapd [esp + i3130_dyOO], xmm1
	movapd [esp + i3130_dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3130_dxOH1], xmm3
	movapd [esp + i3130_dyOH1], xmm4
	movapd [esp + i3130_dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i3130_rsqOO], xmm0
	movapd [esp + i3130_rsqOH1], xmm3

	movapd xmm0, [esp + i3130_ixO]
	movapd xmm1, [esp + i3130_iyO]
	movapd xmm2, [esp + i3130_izO]
	movapd xmm3, [esp + i3130_ixH1]
	movapd xmm4, [esp + i3130_iyH1]
	movapd xmm5, [esp + i3130_izH1]
	subpd  xmm0, [esp + i3130_jxH2]
	subpd  xmm1, [esp + i3130_jyH2]
	subpd  xmm2, [esp + i3130_jzH2]
	subpd  xmm3, [esp + i3130_jxO]
	subpd  xmm4, [esp + i3130_jyO]
	subpd  xmm5, [esp + i3130_jzO]
	movapd [esp + i3130_dxOH2], xmm0
	movapd [esp + i3130_dyOH2], xmm1
	movapd [esp + i3130_dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3130_dxH1O], xmm3
	movapd [esp + i3130_dyH1O], xmm4
	movapd [esp + i3130_dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i3130_rsqOH2], xmm0
	movapd [esp + i3130_rsqH1O], xmm3

	movapd xmm0, [esp + i3130_ixH1]
	movapd xmm1, [esp + i3130_iyH1]
	movapd xmm2, [esp + i3130_izH1]
	movapd xmm3, [esp + i3130_ixH1]
	movapd xmm4, [esp + i3130_iyH1]
	movapd xmm5, [esp + i3130_izH1]
	subpd  xmm0, [esp + i3130_jxH1]
	subpd  xmm1, [esp + i3130_jyH1]
	subpd  xmm2, [esp + i3130_jzH1]
	subpd  xmm3, [esp + i3130_jxH2]
	subpd  xmm4, [esp + i3130_jyH2]
	subpd  xmm5, [esp + i3130_jzH2]
	movapd [esp + i3130_dxH1H1], xmm0
	movapd [esp + i3130_dyH1H1], xmm1
	movapd [esp + i3130_dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3130_dxH1H2], xmm3
	movapd [esp + i3130_dyH1H2], xmm4
	movapd [esp + i3130_dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i3130_rsqH1H1], xmm0
	movapd [esp + i3130_rsqH1H2], xmm3

	movapd xmm0, [esp + i3130_ixH2]
	movapd xmm1, [esp + i3130_iyH2]
	movapd xmm2, [esp + i3130_izH2]
	movapd xmm3, [esp + i3130_ixH2]
	movapd xmm4, [esp + i3130_iyH2]
	movapd xmm5, [esp + i3130_izH2]
	subpd  xmm0, [esp + i3130_jxO]
	subpd  xmm1, [esp + i3130_jyO]
	subpd  xmm2, [esp + i3130_jzO]
	subpd  xmm3, [esp + i3130_jxH1]
	subpd  xmm4, [esp + i3130_jyH1]
	subpd  xmm5, [esp + i3130_jzH1]
	movapd [esp + i3130_dxH2O], xmm0
	movapd [esp + i3130_dyH2O], xmm1
	movapd [esp + i3130_dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3130_dxH2H1], xmm3
	movapd [esp + i3130_dyH2H1], xmm4
	movapd [esp + i3130_dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + i3130_rsqH2O], xmm0
	movapd [esp + i3130_rsqH2H1], xmm4

	movapd xmm0, [esp + i3130_ixH2]
	movapd xmm1, [esp + i3130_iyH2]
	movapd xmm2, [esp + i3130_izH2]
	subpd  xmm0, [esp + i3130_jxH2]
	subpd  xmm1, [esp + i3130_jyH2]
	subpd  xmm2, [esp + i3130_jzH2]
	movapd [esp + i3130_dxH2H2], xmm0
	movapd [esp + i3130_dyH2H2], xmm1
	movapd [esp + i3130_dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + i3130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3130_half] ;# iter1 
	mulpd   xmm7, [esp + i3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3130_half] ;# rinv 
	mulpd   xmm5, [esp + i3130_half] ;# rinv 
	movapd [esp + i3130_rinvH2H2], xmm1
	movapd [esp + i3130_rinvH2H1], xmm5

	movapd xmm0, [esp + i3130_rsqOO]
	movapd xmm4, [esp + i3130_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3130_half] ;# iter1 of  
	mulpd   xmm7, [esp + i3130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3130_half] ;# rinv 
	mulpd   xmm5, [esp + i3130_half] ;# rinv
	movapd [esp + i3130_rinvOO], xmm1
	movapd [esp + i3130_rinvOH1], xmm5

	movapd xmm0, [esp + i3130_rsqOH2]
	movapd xmm4, [esp + i3130_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3130_half] ;# iter1 
	mulpd   xmm7, [esp + i3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3130_half] ;# rinv 
	mulpd   xmm5, [esp + i3130_half] ;# rinv 
	movapd [esp + i3130_rinvOH2], xmm1
	movapd [esp + i3130_rinvH1O], xmm5

	movapd xmm0, [esp + i3130_rsqH1H1]
	movapd xmm4, [esp + i3130_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3130_half] ;# iter1a 
	mulpd   xmm7, [esp + i3130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3130_half] ;# rinv 
	mulpd   xmm5, [esp + i3130_half] ;# rinv 
	movapd [esp + i3130_rinvH1H1], xmm1
	movapd [esp + i3130_rinvH1H2], xmm5

	movapd xmm0, [esp + i3130_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i3130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + i3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i3130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + i3130_half] ;# rinv 
	movapd [esp + i3130_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + i3130_rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3130_rsqOO] ;# xmm1=r 
	mulpd  xmm1, [esp + i3130_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + i3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqOO]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addpd  xmm5, [esp + i3130_vctot]
	xorpd  xmm2, xmm2
    movapd [esp + i3130_vctot], xmm5
	mulpd  xmm3, [esp + i3130_tsc]

	;# start doing lj 
	movapd xmm2, xmm0
	mulpd  xmm2, xmm2
	movapd xmm1, xmm2
	mulpd  xmm1, xmm2
	mulpd  xmm1, xmm2	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm1, [esp + i3130_c6]
	mulpd  xmm2, [esp + i3130_c12]
	movapd xmm4, xmm2
	subpd  xmm4, xmm1
	addpd  xmm4, [esp + i3130_vnbtot]
	mulpd  xmm1, [esp + i3130_six]
	mulpd  xmm2, [esp + i3130_twelve]
	movapd [esp + i3130_vnbtot], xmm4
	subpd  xmm2, xmm1
	mulpd  xmm2, xmm0

	subpd  xmm2, xmm3
	mulpd  xmm0, xmm2
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0		

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3130_dxOO]
	mulpd xmm1, [esp + i3130_dyOO]
	mulpd xmm2, [esp + i3130_dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3130_fixO]
	addpd xmm1, [esp + i3130_fiyO]
	addpd xmm2, [esp + i3130_fizO]
	movapd [esp + i3130_fjxO], xmm3
	movapd [esp + i3130_fjyO], xmm4
	movapd [esp + i3130_fjzO], xmm5
	movapd [esp + i3130_fixO], xmm0
	movapd [esp + i3130_fiyO], xmm1
	movapd [esp + i3130_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i3130_rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3130_rsqOH1] ;# xmm1=r 
	mulpd  xmm1, [esp + i3130_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3130_vctot]
    movapd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3130_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3130_dxOH1]
	mulpd xmm1, [esp + i3130_dyOH1]
	mulpd xmm2, [esp + i3130_dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3130_fixO]
	addpd xmm1, [esp + i3130_fiyO]
	addpd xmm2, [esp + i3130_fizO]
	movapd [esp + i3130_fjxH1], xmm3
	movapd [esp + i3130_fjyH1], xmm4
	movapd [esp + i3130_fjzH1], xmm5
	movapd [esp + i3130_fixO], xmm0
	movapd [esp + i3130_fiyO], xmm1
	movapd [esp + i3130_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i3130_rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3130_rsqOH2] ;# xmm1=r 
	mulpd  xmm1, [esp + i3130_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3130_vctot]
    movapd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3130_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3130_dxOH2]
	mulpd xmm1, [esp + i3130_dyOH2]
	mulpd xmm2, [esp + i3130_dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3130_fixO]
	addpd xmm1, [esp + i3130_fiyO]
	addpd xmm2, [esp + i3130_fizO]
	movapd [esp + i3130_fjxH2], xmm3
	movapd [esp + i3130_fjyH2], xmm4
	movapd [esp + i3130_fjzH2], xmm5
	movapd [esp + i3130_fixO], xmm0
	movapd [esp + i3130_fiyO], xmm1
	movapd [esp + i3130_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i3130_rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3130_rsqH1O] ;# xmm1=r 
	mulpd  xmm1, [esp + i3130_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3130_vctot]
    movapd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3130_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3130_fjxO]
	movapd xmm4, [esp + i3130_fjyO]
	movapd xmm5, [esp + i3130_fjzO]
	mulpd xmm0, [esp + i3130_dxH1O]
	mulpd xmm1, [esp + i3130_dyH1O]
	mulpd xmm2, [esp + i3130_dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3130_fixH1]
	addpd xmm1, [esp + i3130_fiyH1]
	addpd xmm2, [esp + i3130_fizH1]
	movapd [esp + i3130_fjxO], xmm3
	movapd [esp + i3130_fjyO], xmm4
	movapd [esp + i3130_fjzO], xmm5
	movapd [esp + i3130_fixH1], xmm0
	movapd [esp + i3130_fiyH1], xmm1
	movapd [esp + i3130_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i3130_rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3130_rsqH1H1] ;# xmm1=r 
	mulpd  xmm1, [esp + i3130_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3130_vctot]
    movapd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3130_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3130_fjxH1]
	movapd xmm4, [esp + i3130_fjyH1]
	movapd xmm5, [esp + i3130_fjzH1]
	mulpd xmm0, [esp + i3130_dxH1H1]
	mulpd xmm1, [esp + i3130_dyH1H1]
	mulpd xmm2, [esp + i3130_dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3130_fixH1]
	addpd xmm1, [esp + i3130_fiyH1]
	addpd xmm2, [esp + i3130_fizH1]
	movapd [esp + i3130_fjxH1], xmm3
	movapd [esp + i3130_fjyH1], xmm4
	movapd [esp + i3130_fjzH1], xmm5
	movapd [esp + i3130_fixH1], xmm0
	movapd [esp + i3130_fiyH1], xmm1
	movapd [esp + i3130_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i3130_rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3130_rsqH1H2] ;# xmm1=r 
	mulpd  xmm1, [esp + i3130_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3130_vctot]
    movapd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3130_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3130_fjxH2]
	movapd xmm4, [esp + i3130_fjyH2]
	movapd xmm5, [esp + i3130_fjzH2]
	mulpd xmm0, [esp + i3130_dxH1H2]
	mulpd xmm1, [esp + i3130_dyH1H2]
	mulpd xmm2, [esp + i3130_dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3130_fixH1]
	addpd xmm1, [esp + i3130_fiyH1]
	addpd xmm2, [esp + i3130_fizH1]
	movapd [esp + i3130_fjxH2], xmm3
	movapd [esp + i3130_fjyH2], xmm4
	movapd [esp + i3130_fjzH2], xmm5
	movapd [esp + i3130_fixH1], xmm0
	movapd [esp + i3130_fiyH1], xmm1
	movapd [esp + i3130_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i3130_rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3130_rsqH2O] ;# xmm1=r 
	mulpd  xmm1, [esp + i3130_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3130_vctot]
    movapd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3130_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + i3130_fjxO]
	movapd xmm4, [esp + i3130_fjyO]
	movapd xmm5, [esp + i3130_fjzO]
	mulpd xmm0, [esp + i3130_dxH2O]
	mulpd xmm1, [esp + i3130_dyH2O]
	mulpd xmm2, [esp + i3130_dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3130_fixH2]
	addpd xmm1, [esp + i3130_fiyH2]
	addpd xmm2, [esp + i3130_fizH2]
	movapd [esp + i3130_fjxO], xmm3
	movapd [esp + i3130_fjyO], xmm4
	movapd [esp + i3130_fjzO], xmm5
	movapd [esp + i3130_fixH2], xmm0
	movapd [esp + i3130_fiyH2], xmm1
	movapd [esp + i3130_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i3130_rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3130_rsqH2H1] ;# xmm1=r 
	mulpd  xmm1, [esp + i3130_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3130_vctot]
    movapd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3130_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3130_fjxH1]
	movapd xmm4, [esp + i3130_fjyH1]
	movapd xmm5, [esp + i3130_fjzH1]
	mulpd xmm0, [esp + i3130_dxH2H1]
	mulpd xmm1, [esp + i3130_dyH2H1]
	mulpd xmm2, [esp + i3130_dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3130_fixH2]
	addpd xmm1, [esp + i3130_fiyH2]
	addpd xmm2, [esp + i3130_fizH2]
	movapd [esp + i3130_fjxH1], xmm3
	movapd [esp + i3130_fjyH1], xmm4
	movapd [esp + i3130_fjzH1], xmm5
	movapd [esp + i3130_fixH2], xmm0
	movapd [esp + i3130_fiyH2], xmm1
	movapd [esp + i3130_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i3130_rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3130_rsqH2H2] ;# xmm1=r 
	mulpd  xmm1, [esp + i3130_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
	
    addpd  xmm5, [esp + i3130_vctot]
    movapd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3130_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3130_fjxH2]
	movapd xmm4, [esp + i3130_fjyH2]
	movapd xmm5, [esp + i3130_fjzH2]
	mulpd xmm0, [esp + i3130_dxH2H2]
	mulpd xmm1, [esp + i3130_dyH2H2]
	mulpd xmm2, [esp + i3130_dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3130_fixH2]
	addpd xmm1, [esp + i3130_fiyH2]
	addpd xmm2, [esp + i3130_fizH2]
	movapd [esp + i3130_fjxH2], xmm3
	movapd [esp + i3130_fjyH2], xmm4
	movapd [esp + i3130_fjzH2], xmm5
	movapd [esp + i3130_fixH2], xmm0
	movapd [esp + i3130_fiyH2], xmm1
	movapd [esp + i3130_fizH2], xmm2

	mov edi, [ebp + i3130_faction]

	movd eax, mm0
	movd ebx, mm1
	
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + i3130_fjxO]
	addpd xmm1, [esp + i3130_fjyO]
	addpd xmm2, [esp + i3130_fjzO]
	addpd xmm3, [esp + i3130_fjxH1]
	addpd xmm4, [esp + i3130_fjyH1]
	addpd xmm5, [esp + i3130_fjzH1]
	addpd xmm6, [esp + i3130_fjxH2]
	addpd xmm7, [esp + i3130_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7
	
	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + i3130_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0

	;# should we do one more iteration? 
	sub dword ptr [esp + i3130_innerk],  2
	jl    .i3130_checksingle
	jmp   .i3130_unroll_loop
.i3130_checksingle:
	mov   edx, [esp + i3130_innerk]
	and   edx, 1
	jnz   .i3130_dosingle
	jmp   .i3130_updateouterdata
.i3130_dosingle:
	mov   edx, [esp + i3130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]

	mov esi, [ebp + i3130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + i3130_jxO], xmm2
	movapd 	[esp + i3130_jyO], xmm3
	movapd 	[esp + i3130_jzO], xmm4
	movapd 	[esp + i3130_jxH1], xmm5
	movapd 	[esp + i3130_jyH1], xmm6
	movapd 	[esp + i3130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + i3130_jxH2], xmm2
	movapd 	[esp + i3130_jyH2], xmm3
	movapd 	[esp + i3130_jzH2], xmm4
	
	movapd xmm0, [esp + i3130_ixO]
	movapd xmm1, [esp + i3130_iyO]
	movapd xmm2, [esp + i3130_izO]
	movapd xmm3, [esp + i3130_ixO]
	movapd xmm4, [esp + i3130_iyO]
	movapd xmm5, [esp + i3130_izO]
	subsd  xmm0, [esp + i3130_jxO]
	subsd  xmm1, [esp + i3130_jyO]
	subsd  xmm2, [esp + i3130_jzO]
	subsd  xmm3, [esp + i3130_jxH1]
	subsd  xmm4, [esp + i3130_jyH1]
	subsd  xmm5, [esp + i3130_jzH1]
	movapd [esp + i3130_dxOO], xmm0
	movapd [esp + i3130_dyOO], xmm1
	movapd [esp + i3130_dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3130_dxOH1], xmm3
	movapd [esp + i3130_dyOH1], xmm4
	movapd [esp + i3130_dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i3130_rsqOO], xmm0
	movapd [esp + i3130_rsqOH1], xmm3

	movapd xmm0, [esp + i3130_ixO]
	movapd xmm1, [esp + i3130_iyO]
	movapd xmm2, [esp + i3130_izO]
	movapd xmm3, [esp + i3130_ixH1]
	movapd xmm4, [esp + i3130_iyH1]
	movapd xmm5, [esp + i3130_izH1]
	subsd  xmm0, [esp + i3130_jxH2]
	subsd  xmm1, [esp + i3130_jyH2]
	subsd  xmm2, [esp + i3130_jzH2]
	subsd  xmm3, [esp + i3130_jxO]
	subsd  xmm4, [esp + i3130_jyO]
	subsd  xmm5, [esp + i3130_jzO]
	movapd [esp + i3130_dxOH2], xmm0
	movapd [esp + i3130_dyOH2], xmm1
	movapd [esp + i3130_dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3130_dxH1O], xmm3
	movapd [esp + i3130_dyH1O], xmm4
	movapd [esp + i3130_dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i3130_rsqOH2], xmm0
	movapd [esp + i3130_rsqH1O], xmm3

	movapd xmm0, [esp + i3130_ixH1]
	movapd xmm1, [esp + i3130_iyH1]
	movapd xmm2, [esp + i3130_izH1]
	movapd xmm3, [esp + i3130_ixH1]
	movapd xmm4, [esp + i3130_iyH1]
	movapd xmm5, [esp + i3130_izH1]
	subsd  xmm0, [esp + i3130_jxH1]
	subsd  xmm1, [esp + i3130_jyH1]
	subsd  xmm2, [esp + i3130_jzH1]
	subsd  xmm3, [esp + i3130_jxH2]
	subsd  xmm4, [esp + i3130_jyH2]
	subsd  xmm5, [esp + i3130_jzH2]
	movapd [esp + i3130_dxH1H1], xmm0
	movapd [esp + i3130_dyH1H1], xmm1
	movapd [esp + i3130_dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3130_dxH1H2], xmm3
	movapd [esp + i3130_dyH1H2], xmm4
	movapd [esp + i3130_dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i3130_rsqH1H1], xmm0
	movapd [esp + i3130_rsqH1H2], xmm3

	movapd xmm0, [esp + i3130_ixH2]
	movapd xmm1, [esp + i3130_iyH2]
	movapd xmm2, [esp + i3130_izH2]
	movapd xmm3, [esp + i3130_ixH2]
	movapd xmm4, [esp + i3130_iyH2]
	movapd xmm5, [esp + i3130_izH2]
	subsd  xmm0, [esp + i3130_jxO]
	subsd  xmm1, [esp + i3130_jyO]
	subsd  xmm2, [esp + i3130_jzO]
	subsd  xmm3, [esp + i3130_jxH1]
	subsd  xmm4, [esp + i3130_jyH1]
	subsd  xmm5, [esp + i3130_jzH1]
	movapd [esp + i3130_dxH2O], xmm0
	movapd [esp + i3130_dyH2O], xmm1
	movapd [esp + i3130_dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3130_dxH2H1], xmm3
	movapd [esp + i3130_dyH2H1], xmm4
	movapd [esp + i3130_dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + i3130_rsqH2O], xmm0
	movapd [esp + i3130_rsqH2H1], xmm4

	movapd xmm0, [esp + i3130_ixH2]
	movapd xmm1, [esp + i3130_iyH2]
	movapd xmm2, [esp + i3130_izH2]
	subsd  xmm0, [esp + i3130_jxH2]
	subsd  xmm1, [esp + i3130_jyH2]
	subsd  xmm2, [esp + i3130_jzH2]
	movapd [esp + i3130_dxH2H2], xmm0
	movapd [esp + i3130_dyH2H2], xmm1
	movapd [esp + i3130_dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + i3130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3130_half] ;# iter1 
	mulsd   xmm7, [esp + i3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3130_half] ;# rinv 
	mulsd   xmm5, [esp + i3130_half] ;# rinv 
	movapd [esp + i3130_rinvH2H2], xmm1
	movapd [esp + i3130_rinvH2H1], xmm5

	movapd xmm0, [esp + i3130_rsqOO]
	movapd xmm4, [esp + i3130_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3130_half] ;# iter1 of  
	mulsd   xmm7, [esp + i3130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3130_half] ;# rinv 
	mulsd   xmm5, [esp + i3130_half] ;# rinv
	movapd [esp + i3130_rinvOO], xmm1
	movapd [esp + i3130_rinvOH1], xmm5

	movapd xmm0, [esp + i3130_rsqOH2]
	movapd xmm4, [esp + i3130_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3130_half] ;# iter1 
	mulsd   xmm7, [esp + i3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3130_half] ;# rinv 
	mulsd   xmm5, [esp + i3130_half] ;# rinv 
	movapd [esp + i3130_rinvOH2], xmm1
	movapd [esp + i3130_rinvH1O], xmm5

	movapd xmm0, [esp + i3130_rsqH1H1]
	movapd xmm4, [esp + i3130_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3130_half] ;# iter1a 
	mulsd   xmm7, [esp + i3130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3130_half] ;# rinv 
	mulsd   xmm5, [esp + i3130_half] ;# rinv 
	movapd [esp + i3130_rinvH1H1], xmm1
	movapd [esp + i3130_rinvH1H2], xmm5

	movapd xmm0, [esp + i3130_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i3130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + i3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i3130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + i3130_half] ;# rinv 
	movapd [esp + i3130_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + i3130_rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3130_rsqOO] ;# xmm1=r 
	mulsd  xmm1, [esp + i3130_tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqOO]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addsd  xmm5, [esp + i3130_vctot]
	xorpd  xmm2, xmm2
    movlpd [esp + i3130_vctot], xmm5
	mulsd  xmm3, [esp + i3130_tsc]

	;# start doing lj 
	movapd xmm2, xmm0
	mulsd  xmm2, xmm2
	movapd xmm1, xmm2
	mulsd  xmm1, xmm2
	mulsd  xmm1, xmm2	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm1, [esp + i3130_c6]
	mulsd  xmm2, [esp + i3130_c12]
	movapd xmm4, xmm2
	subsd  xmm4, xmm1
	addsd  xmm4, [esp + i3130_vnbtot]
	mulsd  xmm1, [esp + i3130_six]
	mulsd  xmm2, [esp + i3130_twelve]
	movlpd [esp + i3130_vnbtot], xmm4
	subsd  xmm2, xmm1
	mulsd  xmm2, xmm0

	subsd  xmm2, xmm3
	mulsd  xmm0, xmm2
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0		

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3130_dxOO]
	mulpd xmm1, [esp + i3130_dyOO]
	mulpd xmm2, [esp + i3130_dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3130_fixO]
	addsd xmm1, [esp + i3130_fiyO]
	addsd xmm2, [esp + i3130_fizO]
	movlpd [esp + i3130_fjxO], xmm3
	movlpd [esp + i3130_fjyO], xmm4
	movlpd [esp + i3130_fjzO], xmm5
	movlpd [esp + i3130_fixO], xmm0
	movlpd [esp + i3130_fiyO], xmm1
	movlpd [esp + i3130_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i3130_rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3130_rsqOH1] ;# xmm1=r 
	mulsd  xmm1, [esp + i3130_tsc]

	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3130_vctot]
    movlpd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3130_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i3130_dxOH1]
	mulsd xmm1, [esp + i3130_dyOH1]
	mulsd xmm2, [esp + i3130_dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3130_fixO]
	addsd xmm1, [esp + i3130_fiyO]
	addsd xmm2, [esp + i3130_fizO]
	movlpd [esp + i3130_fjxH1], xmm3
	movlpd [esp + i3130_fjyH1], xmm4
	movlpd [esp + i3130_fjzH1], xmm5
	movlpd [esp + i3130_fixO], xmm0
	movlpd [esp + i3130_fiyO], xmm1
	movlpd [esp + i3130_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i3130_rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3130_rsqOH2] ;# xmm1=r 
	mulsd  xmm1, [esp + i3130_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3130_vctot]
    movlpd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3130_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i3130_dxOH2]
	mulsd xmm1, [esp + i3130_dyOH2]
	mulsd xmm2, [esp + i3130_dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3130_fixO]
	addsd xmm1, [esp + i3130_fiyO]
	addsd xmm2, [esp + i3130_fizO]
	movlpd [esp + i3130_fjxH2], xmm3
	movlpd [esp + i3130_fjyH2], xmm4
	movlpd [esp + i3130_fjzH2], xmm5
	movlpd [esp + i3130_fixO], xmm0
	movlpd [esp + i3130_fiyO], xmm1
	movlpd [esp + i3130_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i3130_rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3130_rsqH1O] ;# xmm1=r 
	mulsd  xmm1, [esp + i3130_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3130_vctot]
    movlpd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3130_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3130_fjxO]
	movapd xmm4, [esp + i3130_fjyO]
	movapd xmm5, [esp + i3130_fjzO]
	mulsd xmm0, [esp + i3130_dxH1O]
	mulsd xmm1, [esp + i3130_dyH1O]
	mulsd xmm2, [esp + i3130_dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3130_fixH1]
	addsd xmm1, [esp + i3130_fiyH1]
	addsd xmm2, [esp + i3130_fizH1]
	movlpd [esp + i3130_fjxO], xmm3
	movlpd [esp + i3130_fjyO], xmm4
	movlpd [esp + i3130_fjzO], xmm5
	movlpd [esp + i3130_fixH1], xmm0
	movlpd [esp + i3130_fiyH1], xmm1
	movlpd [esp + i3130_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i3130_rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3130_rsqH1H1] ;# xmm1=r 
	mulsd  xmm1, [esp + i3130_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3130_vctot]
    movlpd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3130_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3130_fjxH1]
	movapd xmm4, [esp + i3130_fjyH1]
	movapd xmm5, [esp + i3130_fjzH1]
	mulsd xmm0, [esp + i3130_dxH1H1]
	mulsd xmm1, [esp + i3130_dyH1H1]
	mulsd xmm2, [esp + i3130_dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3130_fixH1]
	addsd xmm1, [esp + i3130_fiyH1]
	addsd xmm2, [esp + i3130_fizH1]
	movlpd [esp + i3130_fjxH1], xmm3
	movlpd [esp + i3130_fjyH1], xmm4
	movlpd [esp + i3130_fjzH1], xmm5
	movlpd [esp + i3130_fixH1], xmm0
	movlpd [esp + i3130_fiyH1], xmm1
	movlpd [esp + i3130_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i3130_rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3130_rsqH1H2] ;# xmm1=r 
	mulsd  xmm1, [esp + i3130_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3130_vctot]
    movlpd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3130_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3130_fjxH2]
	movapd xmm4, [esp + i3130_fjyH2]
	movapd xmm5, [esp + i3130_fjzH2]
	mulsd xmm0, [esp + i3130_dxH1H2]
	mulsd xmm1, [esp + i3130_dyH1H2]
	mulsd xmm2, [esp + i3130_dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3130_fixH1]
	addsd xmm1, [esp + i3130_fiyH1]
	addsd xmm2, [esp + i3130_fizH1]
	movlpd [esp + i3130_fjxH2], xmm3
	movlpd [esp + i3130_fjyH2], xmm4
	movlpd [esp + i3130_fjzH2], xmm5
	movlpd [esp + i3130_fixH1], xmm0
	movlpd [esp + i3130_fiyH1], xmm1
	movlpd [esp + i3130_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i3130_rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3130_rsqH2O] ;# xmm1=r 
	mulsd  xmm1, [esp + i3130_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3130_vctot]
    movlpd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3130_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + i3130_fjxO]
	movapd xmm4, [esp + i3130_fjyO]
	movapd xmm5, [esp + i3130_fjzO]
	mulsd xmm0, [esp + i3130_dxH2O]
	mulsd xmm1, [esp + i3130_dyH2O]
	mulsd xmm2, [esp + i3130_dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3130_fixH2]
	addsd xmm1, [esp + i3130_fiyH2]
	addsd xmm2, [esp + i3130_fizH2]
	movlpd [esp + i3130_fjxO], xmm3
	movlpd [esp + i3130_fjyO], xmm4
	movlpd [esp + i3130_fjzO], xmm5
	movlpd [esp + i3130_fixH2], xmm0
	movlpd [esp + i3130_fiyH2], xmm1
	movlpd [esp + i3130_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i3130_rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3130_rsqH2H1] ;# xmm1=r 
	mulsd  xmm1, [esp + i3130_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3130_vctot]
    movlpd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3130_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3130_fjxH1]
	movapd xmm4, [esp + i3130_fjyH1]
	movapd xmm5, [esp + i3130_fjzH1]
	mulsd xmm0, [esp + i3130_dxH2H1]
	mulsd xmm1, [esp + i3130_dyH2H1]
	mulsd xmm2, [esp + i3130_dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3130_fixH2]
	addsd xmm1, [esp + i3130_fiyH2]
	addsd xmm2, [esp + i3130_fizH2]
	movlpd [esp + i3130_fjxH1], xmm3
	movlpd [esp + i3130_fjyH1], xmm4
	movlpd [esp + i3130_fjzH1], xmm5
	movlpd [esp + i3130_fixH2], xmm0
	movlpd [esp + i3130_fiyH2], xmm1
	movlpd [esp + i3130_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i3130_rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3130_rsqH2H2] ;# xmm1=r 
	mulsd  xmm1, [esp + i3130_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3130_two]	;# two*Heps2 
	movapd xmm3, [esp + i3130_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3130_vctot]
    movlpd [esp + i3130_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3130_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3130_fjxH2]
	movapd xmm4, [esp + i3130_fjyH2]
	movapd xmm5, [esp + i3130_fjzH2]
	mulsd xmm0, [esp + i3130_dxH2H2]
	mulsd xmm1, [esp + i3130_dyH2H2]
	mulsd xmm2, [esp + i3130_dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3130_fixH2]
	addsd xmm1, [esp + i3130_fiyH2]
	addsd xmm2, [esp + i3130_fizH2]
	movlpd [esp + i3130_fjxH2], xmm3
	movlpd [esp + i3130_fjyH2], xmm4
	movlpd [esp + i3130_fjzH2], xmm5
	movlpd [esp + i3130_fixH2], xmm0
	movlpd [esp + i3130_fiyH2], xmm1
	movlpd [esp + i3130_fizH2], xmm2

	mov edi, [ebp + i3130_faction]

	movd eax, mm0
	
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + i3130_fjxO]
	addsd xmm1, [esp + i3130_fjyO]
	addsd xmm2, [esp + i3130_fjzO]
	addsd xmm3, [esp + i3130_fjxH1]
	addsd xmm4, [esp + i3130_fjyH1]
	addsd xmm5, [esp + i3130_fjzH1]
	addsd xmm6, [esp + i3130_fjxH2]
	addsd xmm7, [esp + i3130_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + i3130_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
.i3130_updateouterdata:
	mov   ecx, [esp + i3130_ii3]
	mov   edi, [ebp + i3130_faction]
	mov   esi, [ebp + i3130_fshift]
	mov   edx, [esp + i3130_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3130_fixO]
	movapd xmm1, [esp + i3130_fiyO]
	movapd xmm2, [esp + i3130_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3130_fixH1]
	movapd xmm1, [esp + i3130_fiyH1]
	movapd xmm2, [esp + i3130_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3130_fixH2]
	movapd xmm1, [esp + i3130_fiyH2]
	movapd xmm2, [esp + i3130_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i3130_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i3130_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i3130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + i3130_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i3130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i3130_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3130_nri]
	dec ecx
	jecxz .i3130_end
	;# not last, iterate once more!  
	mov [ebp + i3130_nri], ecx
	jmp .i3130_outer
.i3130_end:
	emms
	mov eax, [esp + i3130_salign]
	add esp, eax
	add esp, 1540
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	


.globl inl3300_sse2
.globl _inl3300_sse2
inl3300_sse2:	
_inl3300_sse2:	
.equiv		i3300_nri,			8
.equiv		i3300_iinr,			12
.equiv		i3300_jindex,		16
.equiv		i3300_jjnr,			20
.equiv		i3300_shift,		24
.equiv		i3300_shiftvec,		28
.equiv		i3300_fshift,		32
.equiv		i3300_gid,			36
.equiv		i3300_pos,			40		
.equiv		i3300_faction,		44
.equiv		i3300_charge,		48
.equiv		i3300_facel,		52 ;# double  
.equiv		i3300_Vc,			60	
.equiv		i3300_type,			64
.equiv		i3300_ntype,		68
.equiv		i3300_nbfp,			72	
.equiv		i3300_Vnb,			76
.equiv		i3300_tabscale,		80 ;# double  
.equiv		i3300_VFtab,		88
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i3300_ix,			0
.equiv		i3300_iy,			16
.equiv		i3300_iz,			32
.equiv		i3300_iq,			48
.equiv		i3300_dx,			64
.equiv		i3300_dy,			80
.equiv		i3300_dz,			96
.equiv		i3300_two,			112
.equiv		i3300_tsc,			128
.equiv		i3300_qq,			144	
.equiv		i3300_c6,			160
.equiv		i3300_c12,			176
.equiv		i3300_fscal,		192
.equiv		i3300_vctot,		208
.equiv		i3300_vnbtot,		224
.equiv		i3300_fix,			240
.equiv		i3300_fiy,			256
.equiv		i3300_fiz,			272
.equiv		i3300_half,			288
.equiv		i3300_three,		304
.equiv		i3300_is3,			320
.equiv		i3300_ii3,			324
.equiv		i3300_ntia,			328	
.equiv		i3300_innerjjnr,	332
.equiv		i3300_innerk,		336
.equiv		i3300_salign,		340								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 344		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3300_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + i3300_tabscale]
	movapd [esp + i3300_half],  xmm0
	movapd [esp + i3300_two], xmm1
	movapd [esp + i3300_three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + i3300_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.i3300_outer:
	mov   eax, [ebp + i3300_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3300_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3300_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3300_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i3300_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3300_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3300_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + i3300_facel]
	shufpd xmm3, xmm3, 0

    mov   edx, [ebp + i3300_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i3300_ntype]
    shl   edx, 1
    mov   [esp + i3300_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3300_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + i3300_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + i3300_ix], xmm0
	movapd [esp + i3300_iy], xmm1
	movapd [esp + i3300_iz], xmm2

	mov   [esp + i3300_ii3], ebx
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i3300_vctot], xmm4
	movapd [esp + i3300_vnbtot], xmm4
	movapd [esp + i3300_fix], xmm4
	movapd [esp + i3300_fiy], xmm4
	movapd [esp + i3300_fiz], xmm4
	
	mov   eax, [ebp + i3300_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3300_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3300_pos]
	mov   edi, [ebp + i3300_faction]	
	mov   eax, [ebp + i3300_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3300_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i3300_innerk], edx    ;# number of innerloop atoms 
	jge   .i3300_unroll_loop
	jmp   .i3300_checksingle
.i3300_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + i3300_innerjjnr]   ;# pointer to jjnr[k] 
	mov   eax, [edx]
	mov   ebx, [edx + 4]
	add dword ptr [esp + i3300_innerjjnr], 8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + i3300_charge]    ;# base of charge[] 

	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + i3300_iq]
	mulpd  xmm3, xmm2
	movapd [esp + i3300_qq], xmm3	

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + i3300_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + i3300_nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + i3300_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + i3300_c6], xmm4
	movapd [esp + i3300_c12], xmm6
	
	mov esi, [ebp + i3300_pos]		;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	mov    edi, [ebp + i3300_faction]
	
	;# move i3300_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i3300_ix]
	movapd xmm5, [esp + i3300_iy]
	movapd xmm6, [esp + i3300_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i3300_dx], xmm4
	movapd [esp + i3300_dy], xmm5
	movapd [esp + i3300_dz], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i3300_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3300_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i3300_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3300_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	mulpd xmm4, xmm0	;# xmm4=r 
	mulpd xmm4, [esp + i3300_tsc]

	cvttpd2pi mm6, xmm4	;# mm6 = lu idx 
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 

	movd mm0, eax	
	movd mm1, ebx

	mov  esi, [ebp + i3300_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	;# Coulomb 
	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3300_two]	;# two*Heps2 
	movapd xmm3, [esp + i3300_qq]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addpd  xmm5, [esp + i3300_vctot]
	movapd [esp + i3300_vctot], xmm5 

	;# put scalar force on stack temporarily 
	movapd [esp + i3300_fscal], xmm3

	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 32]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 48]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3300_two]	;# two*Heps2 
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3300_c6]
	mulpd  xmm7, xmm4	 ;# fijD 
	mulpd  xmm5, xmm4	 ;# vnb6 
	addpd  xmm7, [esp + i3300_fscal] ;# add to fscal 

	;# put scalar force back on stack Update vnbtot directly 
	addpd  xmm5, [esp + i3300_vnbtot]
	movapd [esp + i3300_fscal], xmm7
	movapd [esp + i3300_vnbtot], xmm5

	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 64]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 80]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3300_two]	;# two*Heps2 
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3300_c12]
	mulpd  xmm7, xmm4 ;# fijR 
	mulpd  xmm5, xmm4 ;# vnb12 
	addpd  xmm7, [esp + i3300_fscal] 
	
	addpd  xmm5, [esp + i3300_vnbtot]
	movapd [esp + i3300_vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulpd xmm7, [esp + i3300_tsc]
	mulpd xmm7, xmm0
	subpd xmm4, xmm7

	movapd xmm0, [esp + i3300_dx]
	movapd xmm1, [esp + i3300_dy]
	movapd xmm2, [esp + i3300_dz]

	movd eax, mm0	
	movd ebx, mm1

	mov    edi, [ebp + i3300_faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i3300_fix]
	movapd xmm4, [esp + i3300_fiy]
	movapd xmm5, [esp + i3300_fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + i3300_fix], xmm3
	movapd [esp + i3300_fiy], xmm4
	movapd [esp + i3300_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3300_innerk],  2
	jl    .i3300_checksingle
	jmp   .i3300_unroll_loop
.i3300_checksingle:
	mov   edx, [esp + i3300_innerk]
	and   edx, 1
	jnz    .i3300_dosingle
	jmp    .i3300_updateouterdata
.i3300_dosingle:
	mov esi, [ebp + i3300_charge]
	mov edi, [ebp + i3300_pos]
	mov   ecx, [esp + i3300_innerjjnr]
	mov   eax, [ecx]	
	xorpd  xmm3, xmm3
	movlpd xmm3, [esi + eax*8]	;# xmm6(0) has the charge 	
	mulpd  xmm3, [esp + i3300_iq]
	movapd [esp + i3300_qq], xmm3

	movd  mm0, eax		;# use mmx registers as temp storage 
	
	mov esi, [ebp + i3300_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + i3300_nbfp]
	shl eax, 1
	mov edi, [esp + i3300_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + i3300_c6], xmm4
	movapd [esp + i3300_c12], xmm6
	
	mov esi, [ebp + i3300_pos]		;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	mov    edi, [ebp + i3300_faction]

	;# move i3300_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + i3300_ix]
	movapd xmm5, [esp + i3300_iy]
	movapd xmm6, [esp + i3300_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i3300_dx], xmm4
	movapd [esp + i3300_dy], xmm5
	movapd [esp + i3300_dz], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + i3300_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3300_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + i3300_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + i3300_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	mulsd xmm4, xmm0	;# xmm4=r 
	mulsd xmm4, [esp + i3300_tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm4	;# mm6 = lu idx 
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3300_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	;# Coulomb 
	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3300_two]	;# two*Heps2 
	movapd xmm3, [esp + i3300_qq]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addsd  xmm5, [esp + i3300_vctot]
	movlpd [esp + i3300_vctot], xmm5 

	;# put scalar force on stack temporarily 
	movapd [esp + i3300_fscal], xmm3

	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3300_two]	;# two*Heps2 
	movapd xmm3, [esp + i3300_qq]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3300_c6]
	mulsd  xmm7, xmm4	 ;# fijD 
	mulsd  xmm5, xmm4	 ;# vnb6 
	addsd  xmm7, [esp + i3300_fscal] ;# add to fscal 

	;# put scalar force back on stack Update vnbtot directly 
	addsd  xmm5, [esp + i3300_vnbtot]
	movlpd [esp + i3300_fscal], xmm7
	movlpd [esp + i3300_vnbtot], xmm5

	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3300_two]	;# two*Heps2 
	movapd xmm3, [esp + i3300_qq]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3300_c12]
	mulsd  xmm7, xmm4 ;# fijR 
	mulsd  xmm5, xmm4 ;# vnb12 
	addsd  xmm7, [esp + i3300_fscal] 
	
	addsd  xmm5, [esp + i3300_vnbtot]
	movlpd [esp + i3300_vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulsd xmm7, [esp + i3300_tsc]
	mulsd xmm7, xmm0
	subsd xmm4, xmm7

	movapd xmm0, [esp + i3300_dx]
	movapd xmm1, [esp + i3300_dy]
	movapd xmm2, [esp + i3300_dz]

	movd eax, mm0	

	mov    edi, [ebp + i3300_faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movapd xmm3, [esp + i3300_fix]
	movapd xmm4, [esp + i3300_fiy]
	movapd xmm5, [esp + i3300_fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + i3300_fix], xmm3
	movlpd [esp + i3300_fiy], xmm4
	movlpd [esp + i3300_fiz], xmm5
	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
.i3300_updateouterdata:
	mov   ecx, [esp + i3300_ii3]
	mov   edi, [ebp + i3300_faction]
	mov   esi, [ebp + i3300_fshift]
	mov   edx, [esp + i3300_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3300_fix]
	movapd xmm1, [esp + i3300_fiy]
	movapd xmm2, [esp + i3300_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# increment fshift force  
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i3300_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3300_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i3300_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i3300_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i3300_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + i3300_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3300_nri]
	dec ecx
	jecxz .i3300_end
	;# not last, iterate once more!  
	mov [ebp + i3300_nri], ecx
	jmp .i3300_outer
.i3300_end:
	emms
	mov eax, [esp + i3300_salign]
	add esp, eax
	add esp, 344
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


.globl inl3320_sse2
.globl _inl3320_sse2
inl3320_sse2:	
_inl3320_sse2:	
.equiv		i3320_nri,			8
.equiv		i3320_iinr,			12
.equiv		i3320_jindex,		16
.equiv		i3320_jjnr,			20
.equiv		i3320_shift,		24
.equiv		i3320_shiftvec,		28
.equiv		i3320_fshift,		32
.equiv		i3320_gid,			36
.equiv		i3320_pos,			40		
.equiv		i3320_faction,		44
.equiv		i3320_charge,		48
.equiv		i3320_facel,		52 ;# double  
.equiv		i3320_Vc,			60	
.equiv		i3320_type,			64
.equiv		i3320_ntype,		68
.equiv		i3320_nbfp,			72	
.equiv		i3320_Vnb,			76	
.equiv		i3320_tabscale,		80 ;# double  	
.equiv		i3320_VFtab,		88
	;# stack offsets for local variables 
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i3320_ixO,			0
.equiv		i3320_iyO,			16
.equiv		i3320_izO,			32
.equiv		i3320_ixH1,			48
.equiv		i3320_iyH1,			64
.equiv		i3320_izH1,			80
.equiv		i3320_ixH2,			96
.equiv		i3320_iyH2,			112
.equiv		i3320_izH2,			128
.equiv		i3320_iqO,			144 
.equiv		i3320_iqH,			160 
.equiv		i3320_dxO,			176
.equiv		i3320_dyO,			192
.equiv		i3320_dzO,			208	
.equiv		i3320_dxH1,			224
.equiv		i3320_dyH1,			240
.equiv		i3320_dzH1,			256	
.equiv		i3320_dxH2,			272
.equiv		i3320_dyH2,			288
.equiv		i3320_dzH2,			304	
.equiv		i3320_qqO,			320
.equiv		i3320_qqH,			336
.equiv		i3320_rinvO,		352
.equiv		i3320_rinvH1,		368
.equiv		i3320_rinvH2,		384		
.equiv		i3320_rO,			400
.equiv		i3320_rH1,			416
.equiv		i3320_rH2,			432
.equiv		i3320_tsc,			448	
.equiv		i3320_two,			464
.equiv		i3320_c6,			480
.equiv		i3320_c12,			496
.equiv		i3320_vctot,		512
.equiv		i3320_vnbtot,		528
.equiv		i3320_fixO,			544
.equiv		i3320_fiyO,			560
.equiv		i3320_fizO,			576
.equiv		i3320_fixH1,		592
.equiv		i3320_fiyH1,		608
.equiv		i3320_fizH1,		624
.equiv		i3320_fixH2,		640
.equiv		i3320_fiyH2,		656
.equiv		i3320_fizH2,		672
.equiv		i3320_fjx,			688
.equiv		i3320_fjy,			704
.equiv		i3320_fjz,			720
.equiv		i3320_half,			736
.equiv		i3320_three,		752
.equiv		i3320_is3,			768
.equiv		i3320_ii3,			772
.equiv		i3320_ntia,			776	
.equiv		i3320_innerjjnr,	780
.equiv		i3320_innerk,		784
.equiv		i3320_salign,		788
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 792		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3320_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm5, [ebp + i3320_tabscale]
	
	movapd [esp + i3320_half],  xmm0
	movapd [esp + i3320_two],  xmm1
	movapd [esp + i3320_three],  xmm2
	shufpd xmm5, xmm5, 0
	movapd [esp + i3320_tsc], xmm5
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3320_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3320_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + i3320_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + i3320_iqO], xmm3
	movapd [esp + i3320_iqH], xmm4
	
	mov   edx, [ebp + i3320_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + i3320_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + i3320_ntia], ecx		
.i3320_outer:
	mov   eax, [ebp + i3320_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3320_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3320_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3320_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i3320_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3320_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3320_pos]    ;# eax = base of pos[]  
	mov   [esp + i3320_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3320_ixO], xmm3
	movapd [esp + i3320_iyO], xmm4
	movapd [esp + i3320_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3320_ixH1], xmm0
	movapd [esp + i3320_iyH1], xmm1
	movapd [esp + i3320_izH1], xmm2
	movapd [esp + i3320_ixH2], xmm3
	movapd [esp + i3320_iyH2], xmm4
	movapd [esp + i3320_izH2], xmm5
	
	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i3320_vctot], xmm4
	movapd [esp + i3320_vnbtot], xmm4
	movapd [esp + i3320_fixO], xmm4
	movapd [esp + i3320_fiyO], xmm4
	movapd [esp + i3320_fizO], xmm4
	movapd [esp + i3320_fixH1], xmm4
	movapd [esp + i3320_fiyH1], xmm4
	movapd [esp + i3320_fizH1], xmm4
	movapd [esp + i3320_fixH2], xmm4
	movapd [esp + i3320_fiyH2], xmm4
	movapd [esp + i3320_fizH2], xmm4
	
	mov   eax, [ebp + i3320_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3320_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3320_pos]
	mov   edi, [ebp + i3320_faction]	
	mov   eax, [ebp + i3320_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3320_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i3320_innerk], edx    ;# number of innerloop atoms 
	jge   .i3320_unroll_loop
	jmp   .i3320_checksingle
.i3320_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i3320_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	
	add dword ptr [esp + i3320_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + i3320_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + i3320_iqO]
	mulpd  xmm4, [esp + i3320_iqH]
	movapd  [esp + i3320_qqO], xmm3
	movapd  [esp + i3320_qqH], xmm4	

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mov esi, [ebp + i3320_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + i3320_nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + i3320_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + i3320_c6], xmm4
	movapd [esp + i3320_c12], xmm6

	mov esi, [ebp + i3320_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i3320_ixO]
	movapd xmm5, [esp + i3320_iyO]
	movapd xmm6, [esp + i3320_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i3320_dxO], xmm4
	movapd [esp + i3320_dyO], xmm5
	movapd [esp + i3320_dzO], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i3320_ixH1]
	movapd xmm5, [esp + i3320_iyH1]
	movapd xmm6, [esp + i3320_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# store dr 
	movapd [esp + i3320_dxH1], xmm4
	movapd [esp + i3320_dyH1], xmm5
	movapd [esp + i3320_dzH1], xmm6
	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i3320_ixH2]
	movapd xmm4, [esp + i3320_iyH2]
	movapd xmm5, [esp + i3320_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# store dr 
	movapd [esp + i3320_dxH2], xmm3
	movapd [esp + i3320_dyH2], xmm4
	movapd [esp + i3320_dzH2], xmm5
	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i3320_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3320_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i3320_half] ;# rinv 
	movapd  [esp + i3320_rinvO], xmm4	;# rinvO in xmm4 
	mulpd   xmm7, xmm4
	movapd  [esp + i3320_rO], xmm7	;# r in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i3320_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3320_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i3320_half] ;# rinv 
	movapd [esp + i3320_rinvH1], xmm4	;# rinvH1 
	mulpd  xmm6, xmm4
	movapd [esp + i3320_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + i3320_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + i3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3320_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + i3320_half] ;# rinv 
	movapd [esp + i3320_rinvH2], xmm4 ;# rinv 
	mulpd xmm5, xmm4
	movapd [esp + i3320_rH2], xmm5 ;# r 

	;# do O interactions 
	;# rO is still in xmm7 
	movapd xmm0, [esp + i3320_rinvO]
	mulpd   xmm7, [esp + i3320_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + i3320_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now) 
	lea   ebx, [ebx + ebx*2]
	
	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  
    mulpd  xmm6, xmm1       ;# xmm6=Geps 
    mulpd  xmm7, xmm2       ;# xmm7=Heps2 
    addpd  xmm5, xmm6
    addpd  xmm5, xmm7       ;# xmm5=Fp        
    mulpd  xmm7, [esp + i3320_two]       ;# two*Heps2 
    movapd xmm0, [esp + i3320_qqO]
    addpd  xmm7, xmm6
    addpd  xmm7, xmm5 ;# xmm7=FF 
    mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
    addpd  xmm5, xmm4 ;# xmm5=VV 
    mulpd  xmm5, xmm0 ;# vcoul=qq*VV  
    mulpd  xmm0, xmm7 ;# fijC=FF*qq 
	;# at this point xmm5 contains vcoul and xmm0 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addpd  xmm5, [esp + i3320_vctot]
	movapd [esp + i3320_vctot], xmm5 
	
	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 32]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 48]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3320_two]	;# two*Heps2 
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3320_c6]
	mulpd  xmm7, xmm4	 ;# fijD 
	mulpd  xmm5, xmm4	 ;# vnb6 
	addpd  xmm0, xmm7	;# fscal summation 
		
	addpd  xmm5, [esp + i3320_vnbtot]
	movapd [esp + i3320_vnbtot], xmm5
	
	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 64]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 80]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3320_two]	;# two*Heps2 
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3320_c12]
	mulpd  xmm7, xmm4 ;# fijR 
	mulpd  xmm5, xmm4 ;# vnb12 
	addpd  xmm7, xmm0	;# fscal summation 
	mulpd xmm7, [esp + i3320_tsc]
	mulpd xmm7, [esp + i3320_rinvO]

	addpd  xmm5, [esp + i3320_vnbtot]
	movapd [esp + i3320_vnbtot], xmm5

	xorpd xmm4, xmm4
	subpd xmm4, xmm7
	movapd xmm0, [esp + i3320_dxO]
	movapd xmm1, [esp + i3320_dyO]
	movapd xmm2, [esp + i3320_dzO]

	movd eax, mm0	
	movd ebx, mm1
	
	movapd xmm0, [esp + i3320_dxO]
	movapd xmm1, [esp + i3320_dyO]
	movapd xmm2, [esp + i3320_dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4	;# tx in xmm0-xmm2 

	;# update O forces 
	movapd xmm3, [esp + i3320_fixO]
	movapd xmm4, [esp + i3320_fiyO]
	movapd xmm7, [esp + i3320_fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i3320_fixO], xmm3
	movapd [esp + i3320_fiyO], xmm4
	movapd [esp + i3320_fizO], xmm7
	;# update j forces with water O 
	movapd [esp + i3320_fjx], xmm0
	movapd [esp + i3320_fjy], xmm1
	movapd [esp + i3320_fjz], xmm2

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + i3320_rH1]
	mulpd xmm7, [esp + i3320_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3320_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now) 	
	lea   ebx, [ebx + ebx*2]
	
	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3320_two]	;# two*Heps2 
	movapd xmm3, [esp + i3320_qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addpd  xmm5, [esp + i3320_vctot]
	mulpd  xmm3, [esp + i3320_rinvH1]
    movapd [esp + i3320_vctot], xmm5 
	mulpd  xmm3, [esp + i3320_tsc]
	subpd xmm4, xmm3

	movapd xmm0, [esp + i3320_dxH1]
	movapd xmm1, [esp + i3320_dyH1]
	movapd xmm2, [esp + i3320_dzH1]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i3320_fixH1]
	movapd xmm4, [esp + i3320_fiyH1]
	movapd xmm7, [esp + i3320_fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i3320_fixH1], xmm3
	movapd [esp + i3320_fiyH1], xmm4
	movapd [esp + i3320_fizH1], xmm7
	;# update j forces with water H1 
	addpd  xmm0, [esp + i3320_fjx]
	addpd  xmm1, [esp + i3320_fjy]
	addpd  xmm2, [esp + i3320_fjz]
	movapd [esp + i3320_fjx], xmm0
	movapd [esp + i3320_fjy], xmm1
	movapd [esp + i3320_fjz], xmm2

	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + i3320_rH2]
	mulpd   xmm7, [esp + i3320_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3320_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now)
	lea   ebx, [ebx + ebx*2]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3320_two]	;# two*Heps2 
	movapd xmm3, [esp + i3320_qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addpd  xmm5, [esp + i3320_vctot]
	mulpd  xmm3, [esp + i3320_rinvH2]
    movapd [esp + i3320_vctot], xmm5 
	mulpd  xmm3, [esp + i3320_tsc]
	subpd  xmm4, xmm3

	movapd xmm0, [esp + i3320_dxH2]
	movapd xmm1, [esp + i3320_dyH2]
	movapd xmm2, [esp + i3320_dzH2]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

    movd eax, mm0   
    movd ebx, mm1
	
	;# update H2 forces 
	movapd xmm3, [esp + i3320_fixH2]
	movapd xmm4, [esp + i3320_fiyH2]
	movapd xmm7, [esp + i3320_fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + i3320_fixH2], xmm3
	movapd [esp + i3320_fiyH2], xmm4
	movapd [esp + i3320_fizH2], xmm7

	mov edi, [ebp + i3320_faction]
	;# update j forces 
	addpd  xmm0, [esp + i3320_fjx]
	addpd  xmm1, [esp + i3320_fjy]
	addpd  xmm2, [esp + i3320_fjz]

	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
			
	;# should we do one more iteration? 
	sub dword ptr [esp + i3320_innerk],  2
	jl    .i3320_checksingle
	jmp   .i3320_unroll_loop
.i3320_checksingle:	
	mov   edx, [esp + i3320_innerk]
	and   edx, 1
	jnz   .i3320_dosingle
	jmp   .i3320_updateouterdata
.i3320_dosingle:
	mov   edx, [esp + i3320_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]

	mov esi, [ebp + i3320_charge]    ;# base of charge[] 
	xorpd xmm3, xmm3	
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + i3320_iqO]
	mulpd  xmm4, [esp + i3320_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movapd  [esp + i3320_qqO], xmm3
	movapd  [esp + i3320_qqH], xmm4	
	
	mov esi, [ebp + i3320_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + i3320_nbfp]
	shl eax, 1	
	mov edi, [esp + i3320_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + i3320_c6], xmm4
	movapd [esp + i3320_c12], xmm6
	
	mov esi, [ebp + i3320_pos]       ;# base of pos[] 
	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	
	;# move coords to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + i3320_ixO]
	movapd xmm5, [esp + i3320_iyO]
	movapd xmm6, [esp + i3320_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i3320_dxO], xmm4
	movapd [esp + i3320_dyO], xmm5
	movapd [esp + i3320_dzO], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + i3320_ixH1]
	movapd xmm5, [esp + i3320_iyH1]
	movapd xmm6, [esp + i3320_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# store dr 
	movapd [esp + i3320_dxH1], xmm4
	movapd [esp + i3320_dyH1], xmm5
	movapd [esp + i3320_dzH1], xmm6
	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + i3320_ixH2]
	movapd xmm4, [esp + i3320_iyH2]
	movapd xmm5, [esp + i3320_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# store dr 
	movapd [esp + i3320_dxH2], xmm3
	movapd [esp + i3320_dyH2], xmm4
	movapd [esp + i3320_dzH2], xmm5
	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i3320_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3320_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i3320_half] ;# rinv 
	movapd  [esp + i3320_rinvO], xmm4	;# rinvO in xmm4 
	mulsd   xmm7, xmm4
	movapd  [esp + i3320_rO], xmm7	;# r in xmm7 

	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i3320_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3320_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i3320_half] ;# rinv 
	movapd [esp + i3320_rinvH1], xmm4	;# rinvH1 
	mulsd  xmm6, xmm4
	movapd [esp + i3320_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + i3320_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + i3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + i3320_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + i3320_half] ;# rinv 
	movapd [esp + i3320_rinvH2], xmm4 ;# rinv 
	mulsd xmm5, xmm4
	movapd [esp + i3320_rH2], xmm5 ;# r 

	;# do O interactions 
	movd mm0, eax	
	;# rO is still in xmm7 
	mulsd   xmm7, [esp + i3320_tsc]
	cvttsd2si eax, xmm7	;# lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm7
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	 	
	shl eax, 2		
	mov  esi, [ebp + i3320_VFtab]
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now) 	
	
	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  
    mulsd  xmm6, xmm1       ;# xmm6=Geps 
    mulsd  xmm7, xmm2       ;# xmm7=Heps2 
    addsd  xmm5, xmm6	;# F+Geps 
    addsd  xmm5, xmm7       ;# xmm5=Fp=F+Geps+Heps2        
    mulsd  xmm7, [esp + i3320_two]       ;# two*Heps2 
    addsd  xmm7, xmm6	;# Geps + 2*Heps2 
    addsd  xmm7, xmm5 ;# xmm7=FF 
    mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
    addsd  xmm5, xmm4 ;# xmm5=VV 
	
    movapd  xmm0, [esp + i3320_qqO]
    mulsd  xmm5, xmm0 ;# vcoul=qq*VV  
    mulsd  xmm0, xmm7 ;# fijC=FF*qq 
	;# at this point xmm5 contains vcoul and xmm0 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addsd  xmm5, [esp + i3320_vctot]
	movlpd [esp + i3320_vctot], xmm5 
	
	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3320_two]	;# two*Heps2 
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3320_c6]
	mulsd  xmm7, xmm4	 ;# fijD 
	mulsd  xmm5, xmm4	 ;# vnb6 
	addsd  xmm0, xmm7	;# fscal summation 
		
	addsd  xmm5, [esp + i3320_vnbtot]
	movsd [esp + i3320_vnbtot], xmm5
	
	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3320_two]	;# two*Heps2 
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3320_c12]
	mulsd  xmm7, xmm4 ;# fijR 
	mulsd  xmm5, xmm4 ;# vnb12 
	addsd  xmm7, xmm0	;# fscal summation 
	mulsd xmm7, [esp + i3320_tsc]
	mulsd xmm7, [esp + i3320_rinvO]

	addsd  xmm5, [esp + i3320_vnbtot]
	movsd [esp + i3320_vnbtot], xmm5

	xorpd xmm4, xmm4
	subsd xmm4, xmm7	
	
	movapd xmm0, [esp + i3320_dxO]
	movapd xmm1, [esp + i3320_dyO]
	movapd xmm2, [esp + i3320_dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4	;# tx in xmm0-xmm2 

	;# update O forces 
	movapd xmm3, [esp + i3320_fixO]
	movapd xmm4, [esp + i3320_fiyO]
	movapd xmm7, [esp + i3320_fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i3320_fixO], xmm3
	movlpd [esp + i3320_fiyO], xmm4
	movlpd [esp + i3320_fizO], xmm7
	;# update j forces with water O 
	movlpd [esp + i3320_fjx], xmm0
	movlpd [esp + i3320_fjy], xmm1
	movlpd [esp + i3320_fjz], xmm2

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + i3320_rH1]
	mulpd xmm7, [esp + i3320_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3320_VFtab]
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now)	

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3320_two]	;# two*Heps2 
	movapd xmm3, [esp + i3320_qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addsd  xmm5, [esp + i3320_vctot]
	mulsd  xmm3, [esp + i3320_rinvH1]
    movlpd [esp + i3320_vctot], xmm5 
	mulsd  xmm3, [esp + i3320_tsc]
	subsd xmm4, xmm3

	movapd xmm0, [esp + i3320_dxH1]
	movapd xmm1, [esp + i3320_dyH1]
	movapd xmm2, [esp + i3320_dzH1]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	;# update H1 forces 
	movapd xmm3, [esp + i3320_fixH1]
	movapd xmm4, [esp + i3320_fiyH1]
	movapd xmm7, [esp + i3320_fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i3320_fixH1], xmm3
	movlpd [esp + i3320_fiyH1], xmm4
	movlpd [esp + i3320_fizH1], xmm7
	;# update j forces with water H1 
	addsd  xmm0, [esp + i3320_fjx]
	addsd  xmm1, [esp + i3320_fjy]
	addsd  xmm2, [esp + i3320_fjz]
	movlpd [esp + i3320_fjx], xmm0
	movlpd [esp + i3320_fjy], xmm1
	movlpd [esp + i3320_fjz], xmm2

	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + i3320_rH2]
	mulsd   xmm7, [esp + i3320_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3320_VFtab]
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now)	

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3320_two]	;# two*Heps2 
	movapd xmm3, [esp + i3320_qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul 
	xorpd  xmm4, xmm4
    addsd  xmm5, [esp + i3320_vctot]
	mulsd  xmm3, [esp + i3320_rinvH2]
    movlpd [esp + i3320_vctot], xmm5 
	mulsd  xmm3, [esp + i3320_tsc]
	subsd  xmm4, xmm3

	movapd xmm0, [esp + i3320_dxH2]
	movapd xmm1, [esp + i3320_dyH2]
	movapd xmm2, [esp + i3320_dzH2]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

    movd eax, mm0   
	
	;# update H2 forces 
	movapd xmm3, [esp + i3320_fixH2]
	movapd xmm4, [esp + i3320_fiyH2]
	movapd xmm7, [esp + i3320_fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + i3320_fixH2], xmm3
	movlpd [esp + i3320_fiyH2], xmm4
	movlpd [esp + i3320_fizH2], xmm7

	mov edi, [ebp + i3320_faction]
	;# update j forces 
	addsd  xmm0, [esp + i3320_fjx]
	addsd  xmm1, [esp + i3320_fjy]
	addsd  xmm2, [esp + i3320_fjz]

	;# the fj's - start by accumulating forces from memory 
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i3320_updateouterdata:
	mov   ecx, [esp + i3320_ii3]
	mov   edi, [ebp + i3320_faction]
	mov   esi, [ebp + i3320_fshift]
	mov   edx, [esp + i3320_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3320_fixO]
	movapd xmm1, [esp + i3320_fiyO]
	movapd xmm2, [esp + i3320_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3320_fixH1]
	movapd xmm1, [esp + i3320_fiyH1]
	movapd xmm2, [esp + i3320_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3320_fixH2]
	movapd xmm1, [esp + i3320_fiyH2]
	movapd xmm2, [esp + i3320_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i3320_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i3320_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i3320_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + i3320_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i3320_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i3320_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3320_nri]
	dec ecx
	jecxz .i3320_end
	;# not last, iterate once more!  
	mov [ebp + i3320_nri], ecx
	jmp .i3320_outer
.i3320_end:
	emms
	mov eax, [esp + i3320_salign]
	add esp, eax
	add esp, 792
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

	
		

	
.globl inl3330_sse2
.globl _inl3330_sse2
inl3330_sse2:	
_inl3330_sse2:	
.equiv		i3330_nri,			8
.equiv		i3330_iinr,			12
.equiv		i3330_jindex,		16
.equiv		i3330_jjnr,			20
.equiv		i3330_shift,		24
.equiv		i3330_shiftvec,		28
.equiv		i3330_fshift,		32
.equiv		i3330_gid,			36
.equiv		i3330_pos,			40		
.equiv		i3330_faction,		44
.equiv		i3330_charge,		48
.equiv		i3330_facel,		52 ;# double  
.equiv		i3330_Vc,			60
.equiv		i3330_type,			64
.equiv		i3330_ntype,		68
.equiv		i3330_nbfp,			72	
.equiv		i3330_Vnb,			76
.equiv		i3330_tabscale,		80 ;# double  
.equiv		i3330_VFtab,		88
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		i3330_ixO,			0
.equiv		i3330_iyO,			16
.equiv		i3330_izO,			32
.equiv		i3330_ixH1,			48
.equiv		i3330_iyH1,			64
.equiv		i3330_izH1,			80
.equiv		i3330_ixH2,			96
.equiv		i3330_iyH2,			112
.equiv		i3330_izH2,			128
.equiv		i3330_jxO,			144
.equiv		i3330_jyO,			160
.equiv		i3330_jzO,			176
.equiv		i3330_jxH1,			192
.equiv		i3330_jyH1,			208
.equiv		i3330_jzH1,			224
.equiv		i3330_jxH2,			240
.equiv		i3330_jyH2,			256
.equiv		i3330_jzH2,			272
.equiv		i3330_dxOO,			288
.equiv		i3330_dyOO,			304
.equiv		i3330_dzOO,			320	
.equiv		i3330_dxOH1,		336
.equiv		i3330_dyOH1,		352
.equiv		i3330_dzOH1,		368	
.equiv		i3330_dxOH2,		384
.equiv		i3330_dyOH2,		400
.equiv		i3330_dzOH2,		416	
.equiv		i3330_dxH1O,		432
.equiv		i3330_dyH1O,		448
.equiv		i3330_dzH1O,		464	
.equiv		i3330_dxH1H1,		480
.equiv		i3330_dyH1H1,		496
.equiv		i3330_dzH1H1,		512	
.equiv		i3330_dxH1H2,		528
.equiv		i3330_dyH1H2,		544
.equiv		i3330_dzH1H2,		560	
.equiv		i3330_dxH2O,		576
.equiv		i3330_dyH2O,		592
.equiv		i3330_dzH2O,		608	
.equiv		i3330_dxH2H1,		624
.equiv		i3330_dyH2H1,		640
.equiv		i3330_dzH2H1,		656	
.equiv		i3330_dxH2H2,		672
.equiv		i3330_dyH2H2,		688
.equiv		i3330_dzH2H2,		704
.equiv		i3330_qqOO,			720
.equiv		i3330_qqOH,			736
.equiv		i3330_qqHH,			752
.equiv		i3330_two,			768
.equiv		i3330_tsc,			784
.equiv		i3330_c6,			800
.equiv		i3330_c12,			816		 
.equiv		i3330_vctot,		832
.equiv		i3330_vnbtot,		848
.equiv		i3330_fixO,			864
.equiv		i3330_fiyO,			880
.equiv		i3330_fizO,			896
.equiv		i3330_fixH1,		912
.equiv		i3330_fiyH1,		928
.equiv		i3330_fizH1,		944
.equiv		i3330_fixH2,		960
.equiv		i3330_fiyH2,		976
.equiv		i3330_fizH2,		992
.equiv		i3330_fjxO,			1008
.equiv		i3330_fjyO,			1024
.equiv		i3330_fjzO,			1040
.equiv		i3330_fjxH1,		1056
.equiv		i3330_fjyH1,		1072
.equiv		i3330_fjzH1,		1088
.equiv		i3330_fjxH2,		1104
.equiv		i3330_fjyH2,		1120
.equiv		i3330_fjzH2,		1136
.equiv		i3330_half,			1152
.equiv		i3330_three,		1168
.equiv		i3330_rsqOO,		1184
.equiv		i3330_rsqOH1,		1200
.equiv		i3330_rsqOH2,		1216
.equiv		i3330_rsqH1O,		1232
.equiv		i3330_rsqH1H1,		1248
.equiv		i3330_rsqH1H2,		1264
.equiv		i3330_rsqH2O,		1280
.equiv		i3330_rsqH2H1,		1296
.equiv		i3330_rsqH2H2,		1312
.equiv		i3330_rinvOO,		1328
.equiv		i3330_rinvOH1,		1344
.equiv		i3330_rinvOH2,		1360
.equiv		i3330_rinvH1O,		1376
.equiv		i3330_rinvH1H1,		1392
.equiv		i3330_rinvH1H2,		1408
.equiv		i3330_rinvH2O,		1424
.equiv		i3330_rinvH2H1,		1440
.equiv		i3330_rinvH2H2,		1456
.equiv		i3330_fscal,		1472	
.equiv		i3330_is3,			1488
.equiv		i3330_ii3,			1492
.equiv		i3330_innerjjnr,	1496
.equiv		i3330_innerk,		1500
.equiv		i3330_salign,		1504							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1508		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3330_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + i3330_tabscale]
	movapd [esp + i3330_half],  xmm0
	movapd [esp + i3330_two],  xmm1
	movapd [esp + i3330_three], xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + i3330_tsc],  xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3330_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3330_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + i3330_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3330_qqOO], xmm3
	movapd [esp + i3330_qqOH], xmm4
	movapd [esp + i3330_qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + i3330_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + i3330_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + i3330_nbfp]
	movupd xmm0, [eax + edx*8]
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + i3330_c6], xmm0
	movapd [esp + i3330_c12], xmm1

.i3330_outer:
	mov   eax, [ebp + i3330_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3330_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3330_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3330_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + i3330_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3330_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3330_pos]    ;# eax = base of pos[]  
	mov   [esp + i3330_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3330_ixO], xmm3
	movapd [esp + i3330_iyO], xmm4
	movapd [esp + i3330_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + i3330_ixH1], xmm0
	movapd [esp + i3330_iyH1], xmm1
	movapd [esp + i3330_izH1], xmm2
	movapd [esp + i3330_ixH2], xmm3
	movapd [esp + i3330_iyH2], xmm4
	movapd [esp + i3330_izH2], xmm5

	;# clear vctot and i forces 
	xorpd xmm4, xmm4
	movapd [esp + i3330_vctot], xmm4
	movapd [esp + i3330_vnbtot], xmm4
	movapd [esp + i3330_fixO], xmm4
	movapd [esp + i3330_fiyO], xmm4
	movapd [esp + i3330_fizO], xmm4
	movapd [esp + i3330_fixH1], xmm4
	movapd [esp + i3330_fiyH1], xmm4
	movapd [esp + i3330_fizH1], xmm4
	movapd [esp + i3330_fixH2], xmm4
	movapd [esp + i3330_fiyH2], xmm4
	movapd [esp + i3330_fizH2], xmm4
	
	mov   eax, [ebp + i3330_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3330_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3330_pos] 
	mov   edi, [ebp + i3330_faction]	
	mov   eax, [ebp + i3330_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3330_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + i3330_innerk], edx    ;# number of innerloop atoms 
	jge   .i3330_unroll_loop
	jmp   .i3330_checksingle
.i3330_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + i3330_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + i3330_innerjjnr], 8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + i3330_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + i3330_jxO], xmm2
	movapd 	[esp + i3330_jyO], xmm3
	movapd 	[esp + i3330_jzO], xmm4
	movapd 	[esp + i3330_jxH1], xmm5
	movapd 	[esp + i3330_jyH1], xmm6
	movapd 	[esp + i3330_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + i3330_jxH2], xmm2
	movapd 	[esp + i3330_jyH2], xmm3
	movapd 	[esp + i3330_jzH2], xmm4
	
	movapd xmm0, [esp + i3330_ixO]
	movapd xmm1, [esp + i3330_iyO]
	movapd xmm2, [esp + i3330_izO]
	movapd xmm3, [esp + i3330_ixO]
	movapd xmm4, [esp + i3330_iyO]
	movapd xmm5, [esp + i3330_izO]
	subpd  xmm0, [esp + i3330_jxO]
	subpd  xmm1, [esp + i3330_jyO]
	subpd  xmm2, [esp + i3330_jzO]
	subpd  xmm3, [esp + i3330_jxH1]
	subpd  xmm4, [esp + i3330_jyH1]
	subpd  xmm5, [esp + i3330_jzH1]
	movapd [esp + i3330_dxOO], xmm0
	movapd [esp + i3330_dyOO], xmm1
	movapd [esp + i3330_dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3330_dxOH1], xmm3
	movapd [esp + i3330_dyOH1], xmm4
	movapd [esp + i3330_dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i3330_rsqOO], xmm0
	movapd [esp + i3330_rsqOH1], xmm3

	movapd xmm0, [esp + i3330_ixO]
	movapd xmm1, [esp + i3330_iyO]
	movapd xmm2, [esp + i3330_izO]
	movapd xmm3, [esp + i3330_ixH1]
	movapd xmm4, [esp + i3330_iyH1]
	movapd xmm5, [esp + i3330_izH1]
	subpd  xmm0, [esp + i3330_jxH2]
	subpd  xmm1, [esp + i3330_jyH2]
	subpd  xmm2, [esp + i3330_jzH2]
	subpd  xmm3, [esp + i3330_jxO]
	subpd  xmm4, [esp + i3330_jyO]
	subpd  xmm5, [esp + i3330_jzO]
	movapd [esp + i3330_dxOH2], xmm0
	movapd [esp + i3330_dyOH2], xmm1
	movapd [esp + i3330_dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3330_dxH1O], xmm3
	movapd [esp + i3330_dyH1O], xmm4
	movapd [esp + i3330_dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i3330_rsqOH2], xmm0
	movapd [esp + i3330_rsqH1O], xmm3

	movapd xmm0, [esp + i3330_ixH1]
	movapd xmm1, [esp + i3330_iyH1]
	movapd xmm2, [esp + i3330_izH1]
	movapd xmm3, [esp + i3330_ixH1]
	movapd xmm4, [esp + i3330_iyH1]
	movapd xmm5, [esp + i3330_izH1]
	subpd  xmm0, [esp + i3330_jxH1]
	subpd  xmm1, [esp + i3330_jyH1]
	subpd  xmm2, [esp + i3330_jzH1]
	subpd  xmm3, [esp + i3330_jxH2]
	subpd  xmm4, [esp + i3330_jyH2]
	subpd  xmm5, [esp + i3330_jzH2]
	movapd [esp + i3330_dxH1H1], xmm0
	movapd [esp + i3330_dyH1H1], xmm1
	movapd [esp + i3330_dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3330_dxH1H2], xmm3
	movapd [esp + i3330_dyH1H2], xmm4
	movapd [esp + i3330_dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + i3330_rsqH1H1], xmm0
	movapd [esp + i3330_rsqH1H2], xmm3

	movapd xmm0, [esp + i3330_ixH2]
	movapd xmm1, [esp + i3330_iyH2]
	movapd xmm2, [esp + i3330_izH2]
	movapd xmm3, [esp + i3330_ixH2]
	movapd xmm4, [esp + i3330_iyH2]
	movapd xmm5, [esp + i3330_izH2]
	subpd  xmm0, [esp + i3330_jxO]
	subpd  xmm1, [esp + i3330_jyO]
	subpd  xmm2, [esp + i3330_jzO]
	subpd  xmm3, [esp + i3330_jxH1]
	subpd  xmm4, [esp + i3330_jyH1]
	subpd  xmm5, [esp + i3330_jzH1]
	movapd [esp + i3330_dxH2O], xmm0
	movapd [esp + i3330_dyH2O], xmm1
	movapd [esp + i3330_dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + i3330_dxH2H1], xmm3
	movapd [esp + i3330_dyH2H1], xmm4
	movapd [esp + i3330_dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + i3330_rsqH2O], xmm0
	movapd [esp + i3330_rsqH2H1], xmm4

	movapd xmm0, [esp + i3330_ixH2]
	movapd xmm1, [esp + i3330_iyH2]
	movapd xmm2, [esp + i3330_izH2]
	subpd  xmm0, [esp + i3330_jxH2]
	subpd  xmm1, [esp + i3330_jyH2]
	subpd  xmm2, [esp + i3330_jzH2]
	movapd [esp + i3330_dxH2H2], xmm0
	movapd [esp + i3330_dyH2H2], xmm1
	movapd [esp + i3330_dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + i3330_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3330_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3330_half] ;# iter1 
	mulpd   xmm7, [esp + i3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3330_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3330_half] ;# rinv 
	mulpd   xmm5, [esp + i3330_half] ;# rinv 
	movapd [esp + i3330_rinvH2H2], xmm1
	movapd [esp + i3330_rinvH2H1], xmm5

	movapd xmm0, [esp + i3330_rsqOO]
	movapd xmm4, [esp + i3330_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3330_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3330_half] ;# iter1 of  
	mulpd   xmm7, [esp + i3330_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3330_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3330_half] ;# rinv 
	mulpd   xmm5, [esp + i3330_half] ;# rinv
	movapd [esp + i3330_rinvOO], xmm1
	movapd [esp + i3330_rinvOH1], xmm5

	movapd xmm0, [esp + i3330_rsqOH2]
	movapd xmm4, [esp + i3330_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3330_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3330_half] ;# iter1 
	mulpd   xmm7, [esp + i3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3330_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3330_half] ;# rinv 
	mulpd   xmm5, [esp + i3330_half] ;# rinv 
	movapd [esp + i3330_rinvOH2], xmm1
	movapd [esp + i3330_rinvH1O], xmm5

	movapd xmm0, [esp + i3330_rsqH1H1]
	movapd xmm4, [esp + i3330_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3330_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + i3330_half] ;# iter1a 
	mulpd   xmm7, [esp + i3330_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3330_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + i3330_half] ;# rinv 
	mulpd   xmm5, [esp + i3330_half] ;# rinv 
	movapd [esp + i3330_rinvH1H1], xmm1
	movapd [esp + i3330_rinvH1H2], xmm5

	movapd xmm0, [esp + i3330_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i3330_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + i3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i3330_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + i3330_half] ;# rinv 
	movapd [esp + i3330_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + i3330_rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3330_rsqOO] ;# xmm1=r 
	mulpd  xmm1, [esp + i3330_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + i3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqOO]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addpd  xmm5, [esp + i3330_vctot]
    movapd [esp + i3330_vctot], xmm5

	;# put scalar force on stack temporarily 
	movapd [esp + i3330_fscal], xmm3

	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 32]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 48]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3330_c6]
	mulpd  xmm7, xmm4	 ;# fijD 
	mulpd  xmm5, xmm4	 ;# vnb6 
	addpd  xmm7, [esp + i3330_fscal] ;# add to fscal 

	;# put scalar force back on stack Update vnbtot directly 
	addpd  xmm5, [esp + i3330_vnbtot]
	movapd [esp + i3330_fscal], xmm7
	movapd [esp + i3330_vnbtot], xmm5

	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 64]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 80]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3330_c12]
	mulpd  xmm7, xmm4 ;# fijR 
	mulpd  xmm5, xmm4 ;# vnb12 
	addpd  xmm7, [esp + i3330_fscal]

	addpd  xmm5, [esp + i3330_vnbtot]
	movapd [esp + i3330_vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulpd xmm7, [esp + i3330_tsc]
	mulpd xmm7, [esp + i3330_rinvOO]
	subpd xmm4, xmm7

	movapd xmm0, xmm4
	movapd xmm1, xmm4
	movapd xmm2, xmm4

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3330_dxOO]
	mulpd xmm1, [esp + i3330_dyOO]
	mulpd xmm2, [esp + i3330_dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3330_fixO]
	addpd xmm1, [esp + i3330_fiyO]
	addpd xmm2, [esp + i3330_fizO]
	movapd [esp + i3330_fjxO], xmm3
	movapd [esp + i3330_fjyO], xmm4
	movapd [esp + i3330_fjzO], xmm5
	movapd [esp + i3330_fixO], xmm0
	movapd [esp + i3330_fiyO], xmm1
	movapd [esp + i3330_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i3330_rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3330_rsqOH1] ;# xmm1=r 
	mulpd  xmm1, [esp + i3330_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3330_vctot]
    movapd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3330_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3330_dxOH1]
	mulpd xmm1, [esp + i3330_dyOH1]
	mulpd xmm2, [esp + i3330_dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3330_fixO]
	addpd xmm1, [esp + i3330_fiyO]
	addpd xmm2, [esp + i3330_fizO]
	movapd [esp + i3330_fjxH1], xmm3
	movapd [esp + i3330_fjyH1], xmm4
	movapd [esp + i3330_fjzH1], xmm5
	movapd [esp + i3330_fixO], xmm0
	movapd [esp + i3330_fiyO], xmm1
	movapd [esp + i3330_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i3330_rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3330_rsqOH2] ;# xmm1=r 
	mulpd  xmm1, [esp + i3330_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3330_vctot]
    movapd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3330_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3330_dxOH2]
	mulpd xmm1, [esp + i3330_dyOH2]
	mulpd xmm2, [esp + i3330_dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3330_fixO]
	addpd xmm1, [esp + i3330_fiyO]
	addpd xmm2, [esp + i3330_fizO]
	movapd [esp + i3330_fjxH2], xmm3
	movapd [esp + i3330_fjyH2], xmm4
	movapd [esp + i3330_fjzH2], xmm5
	movapd [esp + i3330_fixO], xmm0
	movapd [esp + i3330_fiyO], xmm1
	movapd [esp + i3330_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i3330_rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3330_rsqH1O] ;# xmm1=r 
	mulpd  xmm1, [esp + i3330_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3330_vctot]
    movapd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3330_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3330_fjxO]
	movapd xmm4, [esp + i3330_fjyO]
	movapd xmm5, [esp + i3330_fjzO]
	mulpd xmm0, [esp + i3330_dxH1O]
	mulpd xmm1, [esp + i3330_dyH1O]
	mulpd xmm2, [esp + i3330_dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3330_fixH1]
	addpd xmm1, [esp + i3330_fiyH1]
	addpd xmm2, [esp + i3330_fizH1]
	movapd [esp + i3330_fjxO], xmm3
	movapd [esp + i3330_fjyO], xmm4
	movapd [esp + i3330_fjzO], xmm5
	movapd [esp + i3330_fixH1], xmm0
	movapd [esp + i3330_fiyH1], xmm1
	movapd [esp + i3330_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i3330_rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3330_rsqH1H1] ;# xmm1=r 
	mulpd  xmm1, [esp + i3330_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3330_vctot]
    movapd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3330_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3330_fjxH1]
	movapd xmm4, [esp + i3330_fjyH1]
	movapd xmm5, [esp + i3330_fjzH1]
	mulpd xmm0, [esp + i3330_dxH1H1]
	mulpd xmm1, [esp + i3330_dyH1H1]
	mulpd xmm2, [esp + i3330_dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3330_fixH1]
	addpd xmm1, [esp + i3330_fiyH1]
	addpd xmm2, [esp + i3330_fizH1]
	movapd [esp + i3330_fjxH1], xmm3
	movapd [esp + i3330_fjyH1], xmm4
	movapd [esp + i3330_fjzH1], xmm5
	movapd [esp + i3330_fixH1], xmm0
	movapd [esp + i3330_fiyH1], xmm1
	movapd [esp + i3330_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i3330_rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3330_rsqH1H2] ;# xmm1=r 
	mulpd  xmm1, [esp + i3330_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3330_vctot]
    movapd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3330_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3330_fjxH2]
	movapd xmm4, [esp + i3330_fjyH2]
	movapd xmm5, [esp + i3330_fjzH2]
	mulpd xmm0, [esp + i3330_dxH1H2]
	mulpd xmm1, [esp + i3330_dyH1H2]
	mulpd xmm2, [esp + i3330_dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3330_fixH1]
	addpd xmm1, [esp + i3330_fiyH1]
	addpd xmm2, [esp + i3330_fizH1]
	movapd [esp + i3330_fjxH2], xmm3
	movapd [esp + i3330_fjyH2], xmm4
	movapd [esp + i3330_fjzH2], xmm5
	movapd [esp + i3330_fixH1], xmm0
	movapd [esp + i3330_fiyH1], xmm1
	movapd [esp + i3330_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i3330_rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3330_rsqH2O] ;# xmm1=r 
	mulpd  xmm1, [esp + i3330_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3330_vctot]
    movapd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3330_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + i3330_fjxO]
	movapd xmm4, [esp + i3330_fjyO]
	movapd xmm5, [esp + i3330_fjzO]
	mulpd xmm0, [esp + i3330_dxH2O]
	mulpd xmm1, [esp + i3330_dyH2O]
	mulpd xmm2, [esp + i3330_dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3330_fixH2]
	addpd xmm1, [esp + i3330_fiyH2]
	addpd xmm2, [esp + i3330_fizH2]
	movapd [esp + i3330_fjxO], xmm3
	movapd [esp + i3330_fjyO], xmm4
	movapd [esp + i3330_fjzO], xmm5
	movapd [esp + i3330_fixH2], xmm0
	movapd [esp + i3330_fiyH2], xmm1
	movapd [esp + i3330_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i3330_rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3330_rsqH2H1] ;# xmm1=r 
	mulpd  xmm1, [esp + i3330_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addpd  xmm5, [esp + i3330_vctot]
    movapd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3330_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3330_fjxH1]
	movapd xmm4, [esp + i3330_fjyH1]
	movapd xmm5, [esp + i3330_fjzH1]
	mulpd xmm0, [esp + i3330_dxH2H1]
	mulpd xmm1, [esp + i3330_dyH2H1]
	mulpd xmm2, [esp + i3330_dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3330_fixH2]
	addpd xmm1, [esp + i3330_fiyH2]
	addpd xmm2, [esp + i3330_fizH2]
	movapd [esp + i3330_fjxH1], xmm3
	movapd [esp + i3330_fjyH1], xmm4
	movapd [esp + i3330_fjzH1], xmm5
	movapd [esp + i3330_fixH2], xmm0
	movapd [esp + i3330_fiyH2], xmm1
	movapd [esp + i3330_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i3330_rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + i3330_rsqH2H2] ;# xmm1=r 
	mulpd  xmm1, [esp + i3330_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 ;# xmm7=FF 
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulpd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 
	
    addpd  xmm5, [esp + i3330_vctot]
    movapd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + i3330_tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3330_fjxH2]
	movapd xmm4, [esp + i3330_fjyH2]
	movapd xmm5, [esp + i3330_fjzH2]
	mulpd xmm0, [esp + i3330_dxH2H2]
	mulpd xmm1, [esp + i3330_dyH2H2]
	mulpd xmm2, [esp + i3330_dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + i3330_fixH2]
	addpd xmm1, [esp + i3330_fiyH2]
	addpd xmm2, [esp + i3330_fizH2]
	movapd [esp + i3330_fjxH2], xmm3
	movapd [esp + i3330_fjyH2], xmm4
	movapd [esp + i3330_fjzH2], xmm5
	movapd [esp + i3330_fixH2], xmm0
	movapd [esp + i3330_fiyH2], xmm1
	movapd [esp + i3330_fizH2], xmm2

	mov edi, [ebp + i3330_faction]

	movd eax, mm0
	movd ebx, mm1
	
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + i3330_fjxO]
	addpd xmm1, [esp + i3330_fjyO]
	addpd xmm2, [esp + i3330_fjzO]
	addpd xmm3, [esp + i3330_fjxH1]
	addpd xmm4, [esp + i3330_fjyH1]
	addpd xmm5, [esp + i3330_fjzH1]
	addpd xmm6, [esp + i3330_fjxH2]
	addpd xmm7, [esp + i3330_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7
	
	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + i3330_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3330_innerk],  2
	jl    .i3330_checksingle
	jmp   .i3330_unroll_loop
.i3330_checksingle:
	mov   edx, [esp + i3330_innerk]
	and   edx, 1
	jnz   .i3330_dosingle
	jmp   .i3330_updateouterdata
.i3330_dosingle:
	mov   edx, [esp + i3330_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]

	mov esi, [ebp + i3330_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + i3330_jxO], xmm2
	movapd 	[esp + i3330_jyO], xmm3
	movapd 	[esp + i3330_jzO], xmm4
	movapd 	[esp + i3330_jxH1], xmm5
	movapd 	[esp + i3330_jyH1], xmm6
	movapd 	[esp + i3330_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + i3330_jxH2], xmm2
	movapd 	[esp + i3330_jyH2], xmm3
	movapd 	[esp + i3330_jzH2], xmm4
	
	movapd xmm0, [esp + i3330_ixO]
	movapd xmm1, [esp + i3330_iyO]
	movapd xmm2, [esp + i3330_izO]
	movapd xmm3, [esp + i3330_ixO]
	movapd xmm4, [esp + i3330_iyO]
	movapd xmm5, [esp + i3330_izO]
	subsd  xmm0, [esp + i3330_jxO]
	subsd  xmm1, [esp + i3330_jyO]
	subsd  xmm2, [esp + i3330_jzO]
	subsd  xmm3, [esp + i3330_jxH1]
	subsd  xmm4, [esp + i3330_jyH1]
	subsd  xmm5, [esp + i3330_jzH1]
	movapd [esp + i3330_dxOO], xmm0
	movapd [esp + i3330_dyOO], xmm1
	movapd [esp + i3330_dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3330_dxOH1], xmm3
	movapd [esp + i3330_dyOH1], xmm4
	movapd [esp + i3330_dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i3330_rsqOO], xmm0
	movapd [esp + i3330_rsqOH1], xmm3

	movapd xmm0, [esp + i3330_ixO]
	movapd xmm1, [esp + i3330_iyO]
	movapd xmm2, [esp + i3330_izO]
	movapd xmm3, [esp + i3330_ixH1]
	movapd xmm4, [esp + i3330_iyH1]
	movapd xmm5, [esp + i3330_izH1]
	subsd  xmm0, [esp + i3330_jxH2]
	subsd  xmm1, [esp + i3330_jyH2]
	subsd  xmm2, [esp + i3330_jzH2]
	subsd  xmm3, [esp + i3330_jxO]
	subsd  xmm4, [esp + i3330_jyO]
	subsd  xmm5, [esp + i3330_jzO]
	movapd [esp + i3330_dxOH2], xmm0
	movapd [esp + i3330_dyOH2], xmm1
	movapd [esp + i3330_dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3330_dxH1O], xmm3
	movapd [esp + i3330_dyH1O], xmm4
	movapd [esp + i3330_dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i3330_rsqOH2], xmm0
	movapd [esp + i3330_rsqH1O], xmm3

	movapd xmm0, [esp + i3330_ixH1]
	movapd xmm1, [esp + i3330_iyH1]
	movapd xmm2, [esp + i3330_izH1]
	movapd xmm3, [esp + i3330_ixH1]
	movapd xmm4, [esp + i3330_iyH1]
	movapd xmm5, [esp + i3330_izH1]
	subsd  xmm0, [esp + i3330_jxH1]
	subsd  xmm1, [esp + i3330_jyH1]
	subsd  xmm2, [esp + i3330_jzH1]
	subsd  xmm3, [esp + i3330_jxH2]
	subsd  xmm4, [esp + i3330_jyH2]
	subsd  xmm5, [esp + i3330_jzH2]
	movapd [esp + i3330_dxH1H1], xmm0
	movapd [esp + i3330_dyH1H1], xmm1
	movapd [esp + i3330_dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3330_dxH1H2], xmm3
	movapd [esp + i3330_dyH1H2], xmm4
	movapd [esp + i3330_dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + i3330_rsqH1H1], xmm0
	movapd [esp + i3330_rsqH1H2], xmm3

	movapd xmm0, [esp + i3330_ixH2]
	movapd xmm1, [esp + i3330_iyH2]
	movapd xmm2, [esp + i3330_izH2]
	movapd xmm3, [esp + i3330_ixH2]
	movapd xmm4, [esp + i3330_iyH2]
	movapd xmm5, [esp + i3330_izH2]
	subsd  xmm0, [esp + i3330_jxO]
	subsd  xmm1, [esp + i3330_jyO]
	subsd  xmm2, [esp + i3330_jzO]
	subsd  xmm3, [esp + i3330_jxH1]
	subsd  xmm4, [esp + i3330_jyH1]
	subsd  xmm5, [esp + i3330_jzH1]
	movapd [esp + i3330_dxH2O], xmm0
	movapd [esp + i3330_dyH2O], xmm1
	movapd [esp + i3330_dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + i3330_dxH2H1], xmm3
	movapd [esp + i3330_dyH2H1], xmm4
	movapd [esp + i3330_dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + i3330_rsqH2O], xmm0
	movapd [esp + i3330_rsqH2H1], xmm4

	movapd xmm0, [esp + i3330_ixH2]
	movapd xmm1, [esp + i3330_iyH2]
	movapd xmm2, [esp + i3330_izH2]
	subsd  xmm0, [esp + i3330_jxH2]
	subsd  xmm1, [esp + i3330_jyH2]
	subsd  xmm2, [esp + i3330_jzH2]
	movapd [esp + i3330_dxH2H2], xmm0
	movapd [esp + i3330_dyH2H2], xmm1
	movapd [esp + i3330_dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + i3330_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3330_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3330_half] ;# iter1 
	mulsd   xmm7, [esp + i3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3330_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3330_half] ;# rinv 
	mulsd   xmm5, [esp + i3330_half] ;# rinv 
	movapd [esp + i3330_rinvH2H2], xmm1
	movapd [esp + i3330_rinvH2H1], xmm5

	movapd xmm0, [esp + i3330_rsqOO]
	movapd xmm4, [esp + i3330_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3330_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3330_half] ;# iter1 of  
	mulsd   xmm7, [esp + i3330_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3330_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3330_half] ;# rinv 
	mulsd   xmm5, [esp + i3330_half] ;# rinv
	movapd [esp + i3330_rinvOO], xmm1
	movapd [esp + i3330_rinvOH1], xmm5

	movapd xmm0, [esp + i3330_rsqOH2]
	movapd xmm4, [esp + i3330_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3330_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3330_half] ;# iter1 
	mulsd   xmm7, [esp + i3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3330_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3330_half] ;# rinv 
	mulsd   xmm5, [esp + i3330_half] ;# rinv 
	movapd [esp + i3330_rinvOH2], xmm1
	movapd [esp + i3330_rinvH1O], xmm5

	movapd xmm0, [esp + i3330_rsqH1H1]
	movapd xmm4, [esp + i3330_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + i3330_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + i3330_half] ;# iter1a 
	mulsd   xmm7, [esp + i3330_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + i3330_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + i3330_half] ;# rinv 
	mulsd   xmm5, [esp + i3330_half] ;# rinv 
	movapd [esp + i3330_rinvH1H1], xmm1
	movapd [esp + i3330_rinvH1H2], xmm5

	movapd xmm0, [esp + i3330_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + i3330_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + i3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + i3330_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + i3330_half] ;# rinv 
	movapd [esp + i3330_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + i3330_rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3330_rsqOO] ;# xmm1=r 
	mulsd  xmm1, [esp + i3330_tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqOO]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addsd  xmm5, [esp + i3330_vctot]
    movlpd [esp + i3330_vctot], xmm5

	;# put scalar force on stack temporarily 
	movapd [esp + i3330_fscal], xmm3

	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3330_c6]
	mulsd  xmm7, xmm4	 ;# fijD 
	mulsd  xmm5, xmm4	 ;# vnb6 
	addsd  xmm7, [esp + i3330_fscal] ;# add to fscal 

	;# put scalar force back on stack Update vnbtot directly 
	addsd  xmm5, [esp + i3330_vnbtot]
	movapd [esp + i3330_fscal], xmm7
	movlpd [esp + i3330_vnbtot], xmm5

	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Repulsion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	movapd xmm4, [esp + i3330_c12]
	mulsd  xmm7, xmm4 ;# fijR 
	mulsd  xmm5, xmm4 ;# vnb12 
	addsd  xmm7, [esp + i3330_fscal]

	addsd  xmm5, [esp + i3330_vnbtot]
	movlpd [esp + i3330_vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulsd xmm7, [esp + i3330_tsc]
	mulsd xmm7, [esp + i3330_rinvOO]
	subsd xmm4, xmm7

	movapd xmm0, xmm4
	movapd xmm1, xmm4
	movapd xmm2, xmm4

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + i3330_dxOO]
	mulpd xmm1, [esp + i3330_dyOO]
	mulpd xmm2, [esp + i3330_dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3330_fixO]
	addsd xmm1, [esp + i3330_fiyO]
	addsd xmm2, [esp + i3330_fizO]
	movlpd [esp + i3330_fjxO], xmm3
	movlpd [esp + i3330_fjyO], xmm4
	movlpd [esp + i3330_fjzO], xmm5
	movlpd [esp + i3330_fixO], xmm0
	movlpd [esp + i3330_fiyO], xmm1
	movlpd [esp + i3330_fizO], xmm2

	;# O-H1 interaction 
	movapd xmm0, [esp + i3330_rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3330_rsqOH1] ;# xmm1=r 
	mulsd  xmm1, [esp + i3330_tsc]

	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3330_vctot]
    movlpd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3330_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i3330_dxOH1]
	mulsd xmm1, [esp + i3330_dyOH1]
	mulsd xmm2, [esp + i3330_dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3330_fixO]
	addsd xmm1, [esp + i3330_fiyO]
	addsd xmm2, [esp + i3330_fizO]
	movlpd [esp + i3330_fjxH1], xmm3
	movlpd [esp + i3330_fjyH1], xmm4
	movlpd [esp + i3330_fjzH1], xmm5
	movlpd [esp + i3330_fixO], xmm0
	movlpd [esp + i3330_fiyO], xmm1
	movlpd [esp + i3330_fizO], xmm2

	;# O-H2 interaction  
	movapd xmm0, [esp + i3330_rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3330_rsqOH2] ;# xmm1=r 
	mulsd  xmm1, [esp + i3330_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3330_vctot]
    movlpd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3330_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + i3330_dxOH2]
	mulsd xmm1, [esp + i3330_dyOH2]
	mulsd xmm2, [esp + i3330_dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3330_fixO]
	addsd xmm1, [esp + i3330_fiyO]
	addsd xmm2, [esp + i3330_fizO]
	movlpd [esp + i3330_fjxH2], xmm3
	movlpd [esp + i3330_fjyH2], xmm4
	movlpd [esp + i3330_fjzH2], xmm5
	movlpd [esp + i3330_fixO], xmm0
	movlpd [esp + i3330_fiyO], xmm1
	movlpd [esp + i3330_fizO], xmm2

	;# H1-O interaction 
	movapd xmm0, [esp + i3330_rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3330_rsqH1O] ;# xmm1=r 
	mulsd  xmm1, [esp + i3330_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3330_vctot]
    movlpd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3330_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3330_fjxO]
	movapd xmm4, [esp + i3330_fjyO]
	movapd xmm5, [esp + i3330_fjzO]
	mulsd xmm0, [esp + i3330_dxH1O]
	mulsd xmm1, [esp + i3330_dyH1O]
	mulsd xmm2, [esp + i3330_dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3330_fixH1]
	addsd xmm1, [esp + i3330_fiyH1]
	addsd xmm2, [esp + i3330_fizH1]
	movlpd [esp + i3330_fjxO], xmm3
	movlpd [esp + i3330_fjyO], xmm4
	movlpd [esp + i3330_fjzO], xmm5
	movlpd [esp + i3330_fixH1], xmm0
	movlpd [esp + i3330_fiyH1], xmm1
	movlpd [esp + i3330_fizH1], xmm2

	;# H1-H1 interaction 
	movapd xmm0, [esp + i3330_rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3330_rsqH1H1] ;# xmm1=r 
	mulsd  xmm1, [esp + i3330_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3330_vctot]
    movlpd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3330_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3330_fjxH1]
	movapd xmm4, [esp + i3330_fjyH1]
	movapd xmm5, [esp + i3330_fjzH1]
	mulsd xmm0, [esp + i3330_dxH1H1]
	mulsd xmm1, [esp + i3330_dyH1H1]
	mulsd xmm2, [esp + i3330_dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3330_fixH1]
	addsd xmm1, [esp + i3330_fiyH1]
	addsd xmm2, [esp + i3330_fizH1]
	movlpd [esp + i3330_fjxH1], xmm3
	movlpd [esp + i3330_fjyH1], xmm4
	movlpd [esp + i3330_fjzH1], xmm5
	movlpd [esp + i3330_fixH1], xmm0
	movlpd [esp + i3330_fiyH1], xmm1
	movlpd [esp + i3330_fizH1], xmm2

	;# H1-H2 interaction 
	movapd xmm0, [esp + i3330_rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3330_rsqH1H2] ;# xmm1=r 
	mulsd  xmm1, [esp + i3330_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3330_vctot]
    movlpd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3330_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3330_fjxH2]
	movapd xmm4, [esp + i3330_fjyH2]
	movapd xmm5, [esp + i3330_fjzH2]
	mulsd xmm0, [esp + i3330_dxH1H2]
	mulsd xmm1, [esp + i3330_dyH1H2]
	mulsd xmm2, [esp + i3330_dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3330_fixH1]
	addsd xmm1, [esp + i3330_fiyH1]
	addsd xmm2, [esp + i3330_fizH1]
	movlpd [esp + i3330_fjxH2], xmm3
	movlpd [esp + i3330_fjyH2], xmm4
	movlpd [esp + i3330_fjzH2], xmm5
	movlpd [esp + i3330_fixH1], xmm0
	movlpd [esp + i3330_fiyH1], xmm1
	movlpd [esp + i3330_fizH1], xmm2

	;# H2-O interaction 
	movapd xmm0, [esp + i3330_rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3330_rsqH2O] ;# xmm1=r 
	mulsd  xmm1, [esp + i3330_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3330_vctot]
    movlpd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3330_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + i3330_fjxO]
	movapd xmm4, [esp + i3330_fjyO]
	movapd xmm5, [esp + i3330_fjzO]
	mulsd xmm0, [esp + i3330_dxH2O]
	mulsd xmm1, [esp + i3330_dyH2O]
	mulsd xmm2, [esp + i3330_dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3330_fixH2]
	addsd xmm1, [esp + i3330_fiyH2]
	addsd xmm2, [esp + i3330_fizH2]
	movlpd [esp + i3330_fjxO], xmm3
	movlpd [esp + i3330_fjyO], xmm4
	movlpd [esp + i3330_fjzO], xmm5
	movlpd [esp + i3330_fixH2], xmm0
	movlpd [esp + i3330_fiyH2], xmm1
	movlpd [esp + i3330_fizH2], xmm2

	;# H2-H1 interaction 
	movapd xmm0, [esp + i3330_rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3330_rsqH2H1] ;# xmm1=r 
	mulsd  xmm1, [esp + i3330_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3330_vctot]
    movlpd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3330_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3330_fjxH1]
	movapd xmm4, [esp + i3330_fjyH1]
	movapd xmm5, [esp + i3330_fjzH1]
	mulsd xmm0, [esp + i3330_dxH2H1]
	mulsd xmm1, [esp + i3330_dyH2H1]
	mulsd xmm2, [esp + i3330_dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3330_fixH2]
	addsd xmm1, [esp + i3330_fiyH2]
	addsd xmm2, [esp + i3330_fizH2]
	movlpd [esp + i3330_fjxH1], xmm3
	movlpd [esp + i3330_fjyH1], xmm4
	movlpd [esp + i3330_fjzH1], xmm5
	movlpd [esp + i3330_fixH2], xmm0
	movlpd [esp + i3330_fiyH2], xmm1
	movlpd [esp + i3330_fizH2], xmm2

	;# H2-H2 interaction 
	movapd xmm0, [esp + i3330_rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + i3330_rsqH2H2] ;# xmm1=r 
	mulsd  xmm1, [esp + i3330_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + i3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm7, [esp + i3330_two]	;# two*Heps2 
	movapd xmm3, [esp + i3330_qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 ;# xmm7=FF 
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	mulsd  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm3 fijC 

    addsd  xmm5, [esp + i3330_vctot]
    movlpd [esp + i3330_vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + i3330_tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + i3330_fjxH2]
	movapd xmm4, [esp + i3330_fjyH2]
	movapd xmm5, [esp + i3330_fjzH2]
	mulsd xmm0, [esp + i3330_dxH2H2]
	mulsd xmm1, [esp + i3330_dyH2H2]
	mulsd xmm2, [esp + i3330_dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + i3330_fixH2]
	addsd xmm1, [esp + i3330_fiyH2]
	addsd xmm2, [esp + i3330_fizH2]
	movlpd [esp + i3330_fjxH2], xmm3
	movlpd [esp + i3330_fjyH2], xmm4
	movlpd [esp + i3330_fjzH2], xmm5
	movlpd [esp + i3330_fixH2], xmm0
	movlpd [esp + i3330_fiyH2], xmm1
	movlpd [esp + i3330_fizH2], xmm2

	mov edi, [ebp + i3330_faction]

	movd eax, mm0
	
	;# Did all interactions - now update j forces 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + i3330_fjxO]
	addsd xmm1, [esp + i3330_fjyO]
	addsd xmm2, [esp + i3330_fjzO]
	addsd xmm3, [esp + i3330_fjxH1]
	addsd xmm4, [esp + i3330_fjyH1]
	addsd xmm5, [esp + i3330_fjzH1]
	addsd xmm6, [esp + i3330_fjxH2]
	addsd xmm7, [esp + i3330_fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + i3330_fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
.i3330_updateouterdata:
	mov   ecx, [esp + i3330_ii3]
	mov   edi, [ebp + i3330_faction]
	mov   esi, [ebp + i3330_fshift]
	mov   edx, [esp + i3330_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3330_fixO]
	movapd xmm1, [esp + i3330_fiyO]
	movapd xmm2, [esp + i3330_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3330_fixH1]
	movapd xmm1, [esp + i3330_fiyH1]
	movapd xmm2, [esp + i3330_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movapd xmm0, [esp + i3330_fixH2]
	movapd xmm1, [esp + i3330_fiyH2]
	movapd xmm2, [esp + i3330_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 ;# sum is in low xmm0-xmm2 

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	;# increment i force 
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	;# increment fshift force 
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + i3330_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i3330_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + i3330_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + i3330_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + i3330_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + i3330_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3330_nri]
	dec ecx
	jecxz .i3330_end
	;# not last, iterate once more!  
	mov [ebp + i3330_nri], ecx
	jmp .i3330_outer
.i3330_end:
	emms
	mov eax, [esp + i3330_salign]
	add esp, eax
	add esp, 1508
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




	
.globl mcinl0100_sse2
.globl _mcinl0100_sse2
mcinl0100_sse2:	
_mcinl0100_sse2:	
.equiv		mci0100_nri,		8
.equiv		mci0100_iinr,		12
.equiv		mci0100_jindex,		16
.equiv		mci0100_jjnr,		20
.equiv		mci0100_shift,		24
.equiv		mci0100_shiftvec,	28
.equiv		mci0100_gid,		32
.equiv		mci0100_pos,		36		
.equiv		mci0100_type,		40
.equiv		mci0100_ntype,		44
.equiv		mci0100_nbfp,		48	
.equiv		mci0100_Vnb,		52	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci0100_ix,			0
.equiv		mci0100_iy,	        16
.equiv		mci0100_iz,         32
.equiv		mci0100_two,        48
.equiv		mci0100_c6,			64
.equiv		mci0100_c12,		80 
.equiv		mci0100_vnbtot,		96
.equiv		mci0100_half,		112
.equiv		mci0100_three,		128
.equiv		mci0100_is3,		144
.equiv		mci0100_ii3,		148
.equiv		mci0100_ntia,		152	
.equiv		mci0100_innerjjnr,  156
.equiv		mci0100_innerk,     160
.equiv		mci0100_salign,     164							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 168		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci0100_salign], eax

	emms

	movupd xmm1, [sse2_two]
	movapd [esp + mci0100_two], xmm1

	;# assume we have at least one i particle - start directly 	
.mci0100_outer:
	mov   eax, [ebp + mci0100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add   dword ptr [ebp + mci0100_shift],  4  ;# advance pointer one step 

	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci0100_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci0100_iinr]       ;# ecx = pointer into iinr[] 	
	add   dword ptr [ebp + mci0100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

    mov   edx, [ebp + mci0100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci0100_ntype]
    shl   edx, 1
    mov   [esp + mci0100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci0100_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + mci0100_ix], xmm0
	movapd [esp + mci0100_iy], xmm1
	movapd [esp + mci0100_iz], xmm2

	mov   [esp + mci0100_ii3], ebx
	
	;# clear vnbtot 
	xorpd xmm4, xmm4
	movapd [esp + mci0100_vnbtot], xmm4
	
	mov   eax, [ebp + mci0100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add   dword ptr [ebp + mci0100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci0100_pos]
	mov   eax, [ebp + mci0100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci0100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci0100_innerk], edx    ;# number of innerloop atoms 
	
	jge   .mci0100_unroll_loop
	jmp   .mci0100_checksingle
.mci0100_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci0100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   dword ptr [esp + mci0100_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + mci0100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + mci0100_nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + mci0100_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7

	movd  eax, mm0		
	movd  ebx, mm1	
	
	movapd [esp + mci0100_c6], xmm4
	movapd [esp + mci0100_c12], xmm6

	mov esi, [ebp + mci0100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	

	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci0100_ix]
	movapd xmm5, [esp + mci0100_iy]
	movapd xmm6, [esp + mci0100_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6	;# rsq in xmm4 

	cvtpd2ps xmm6, xmm4	
	rcpps xmm6, xmm6
	cvtps2pd xmm6, xmm6	;# lu in low xmm6 
	
	;# 1/x lookup seed in xmm6 
	movapd xmm0, [esp + mci0100_two]
	movapd xmm5, xmm4
	mulpd xmm4, xmm6	;# lu*rsq 
	subpd xmm0, xmm4	;# 2-lu*rsq 
	mulpd xmm6, xmm0	;# (new lu) 
	
	movapd xmm0, [esp + mci0100_two]
	mulpd xmm5, xmm6	;# lu*rsq 
	subpd xmm0, xmm5	;# 2-lu*rsq 
	mulpd xmm0, xmm6	;# xmm0=rinvsq 

	movapd xmm1, xmm0
	mulpd  xmm1, xmm0
	mulpd  xmm1, xmm0	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulpd  xmm1, [esp + mci0100_c6]
	mulpd  xmm2, [esp + mci0100_c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addpd  xmm5, [esp + mci0100_vnbtot]
	movapd [esp + mci0100_vnbtot], xmm5
		
	;# should we do one more iteration? 
	sub   dword ptr [esp + mci0100_innerk],  2
	jl    .mci0100_checksingle
	jmp   .mci0100_unroll_loop
.mci0100_checksingle:				
	mov   edx, [esp + mci0100_innerk]
	and   edx, 1
	jnz    .mci0100_dosingle
	jmp    .mci0100_updateouterdata
.mci0100_dosingle:
	mov edi, [ebp + mci0100_pos]
	mov   ecx, [esp + mci0100_innerjjnr]
	mov   eax, [ecx]		

	movd  mm0, eax		;# use mmx registers as temp storage 	
	mov esi, [ebp + mci0100_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + mci0100_nbfp]
	shl eax, 1
	mov edi, [esp + mci0100_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7

	movd  eax, mm0		
	
	movapd [esp + mci0100_c6], xmm4
	movapd [esp + mci0100_c12], xmm6
	
	mov esi, [ebp + mci0100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 	

	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci0100_ix]
	movapd xmm5, [esp + mci0100_iy]
	movapd xmm6, [esp + mci0100_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6	;# rsq in xmm4 

	cvtsd2ss xmm6, xmm4	
	rcpss xmm6, xmm6
	cvtss2sd xmm6, xmm6	;# lu in low xmm6 
	
	;# 1/x lookup seed in xmm6 
	movapd xmm0, [esp + mci0100_two]
	movapd xmm5, xmm4
	mulsd xmm4, xmm6	;# lu*rsq 
	subsd xmm0, xmm4	;# 2-lu*rsq 
	mulsd xmm6, xmm0	;# (new lu) 
	
	movapd xmm0, [esp + mci0100_two]
	mulsd xmm5, xmm6	;# lu*rsq 
	subsd xmm0, xmm5	;# 2-lu*rsq 
	mulsd xmm0, xmm6	;# xmm0=rinvsq 
	movapd xmm4, xmm0
	
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulsd  xmm1, [esp + mci0100_c6]
	mulsd  xmm2, [esp + mci0100_c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addsd  xmm5, [esp + mci0100_vnbtot]
	movlpd [esp + mci0100_vnbtot], xmm5

.mci0100_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci0100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add   dword ptr [ebp + mci0100_gid],  4  ;# advance pointer 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci0100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 have the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci0100_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 

	;# finish if last 
	mov   ecx, [ebp + mci0100_nri]
	dec ecx
	jecxz .mci0100_end

	;# not last, iterate once more!  
	mov [ebp + mci0100_nri], ecx
	jmp .mci0100_outer
.mci0100_end:
	emms
	mov eax, [esp + mci0100_salign]
	add esp, eax
	add esp, 168
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl0300_sse2
.globl _mcinl0300_sse2
mcinl0300_sse2:	
_mcinl0300_sse2:	
.equiv		mci0300_nri,		8
.equiv		mci0300_iinr,		12
.equiv		mci0300_jindex,		16
.equiv		mci0300_jjnr,		20
.equiv		mci0300_shift,		24
.equiv		mci0300_shiftvec,	28
.equiv		mci0300_gid,		32
.equiv		mci0300_pos,		36		
.equiv		mci0300_type,		40
.equiv		mci0300_ntype,		44
.equiv		mci0300_nbfp,		48	
.equiv		mci0300_Vnb,		52
.equiv		mci0300_tabscale,	56 ;# double 
.equiv		mci0300_VFtab,		64
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci0300_ix,	        0
.equiv		mci0300_iy,			16
.equiv		mci0300_iz,         32
.equiv		mci0300_tsc,		48
.equiv		mci0300_c6,         64
.equiv		mci0300_c12,        80
.equiv		mci0300_vnbtot,     96
.equiv		mci0300_half,       112
.equiv		mci0300_three,      128
.equiv		mci0300_is3,        144
.equiv		mci0300_ii3,        148
.equiv		mci0300_ntia,	    152	
.equiv		mci0300_innerjjnr,  156
.equiv		mci0300_innerk,     160
.equiv		mci0300_salign,     164	
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 168		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci0300_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + mci0300_tabscale]
	movapd [esp + mci0300_half],  xmm0
	movapd [esp + mci0300_three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + mci0300_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.mci0300_outer:
	mov   eax, [ebp + mci0300_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci0300_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci0300_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci0300_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci0300_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

    mov   edx, [ebp + mci0300_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci0300_ntype]
    shl   edx, 1
    mov   [esp + mci0300_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci0300_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + mci0300_ix], xmm0
	movapd [esp + mci0300_iy], xmm1
	movapd [esp + mci0300_iz], xmm2

	mov   [esp + mci0300_ii3], ebx
	
	;# clear tot potential 
	xorpd xmm4, xmm4
	movapd [esp + mci0300_vnbtot], xmm4
	
	mov   eax, [ebp + mci0300_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci0300_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci0300_pos]
	mov   eax, [ebp + mci0300_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci0300_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci0300_innerk], edx    ;# number of innerloop atoms 
	jge   .mci0300_unroll_loop
	jmp   .mci0300_checksingle
.mci0300_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci0300_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	add dword ptr [esp + mci0300_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + mci0300_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + mci0300_nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + mci0300_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movd  ebx, mm1

	movapd [esp + mci0300_c6], xmm4
	movapd [esp + mci0300_c12], xmm6
	
	mov esi, [ebp + mci0300_pos]		;# base of pos[] 
	lea   eax, [eax + eax*2]	;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	;# move mci0300_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci0300_ix]
	movapd xmm5, [esp + mci0300_iy]
	movapd xmm6, [esp + mci0300_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci0300_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci0300_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci0300_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci0300_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	
	mulpd xmm4, xmm0	;# xmm4=r 
	mulpd xmm4, [esp + mci0300_tsc]
	
	cvttpd2pi mm6, xmm4	;# mm6 = lu idx 
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3		;# idx *= 8 
	
	movd mm0, eax	
	movd mm1, ebx

	mov  esi, [ebp + mci0300_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6

	;# dispersion 
	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# dispersion table ready, in xmm4-xmm7 	
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	mulpd  xmm5, [esp + mci0300_c6] ;# vnb6 

	;# Update vnbtot directly 
	addpd  xmm5, [esp + mci0300_vnbtot]
	movapd [esp + mci0300_vnbtot], xmm5

	;# repulsion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 32]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 48]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	
	;# table ready, in xmm4-xmm7 	
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	
	mulpd  xmm5, [esp + mci0300_c12]
	
	addpd  xmm5, [esp + mci0300_vnbtot]
	movapd [esp + mci0300_vnbtot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci0300_innerk],  2
	jl    .mci0300_checksingle
	jmp   .mci0300_unroll_loop

.mci0300_checksingle:				
	mov   edx, [esp + mci0300_innerk]
	and   edx, 1
	jnz    .mci0300_dosingle
	jmp    .mci0300_updateouterdata
.mci0300_dosingle:
	mov   edx, [esp + mci0300_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	

	movd  mm0, eax		;# use mmx registers as temp storage 
	
	mov esi, [ebp + mci0300_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + mci0300_nbfp]
	shl eax, 1	
	mov edi, [esp + mci0300_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		

	movapd [esp + mci0300_c6], xmm4
	movapd [esp + mci0300_c12], xmm6
	
	mov esi, [ebp + mci0300_pos]		;# base of pos[] 
	lea   eax, [eax + eax*2]	;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move mci0300_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci0300_ix]
	movapd xmm5, [esp + mci0300_iy]
	movapd xmm6, [esp + mci0300_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci0300_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci0300_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci0300_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci0300_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	
	mulsd xmm4, xmm0	;# xmm4=r 
	mulsd xmm4, [esp + mci0300_tsc]

	movd mm0, eax
	
	cvttsd2si eax, xmm4	;# mm6 = lu idx 
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	shl eax, 3	

	mov  esi, [ebp + mci0300_VFtab]

	;# dispersion 
	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  
	;# dispersion table ready, in xmm4-xmm7 	
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	mulsd  xmm5, [esp + mci0300_c6];# vnb6 

	;# Update vnbtot directly 
	addsd  xmm5, [esp + mci0300_vnbtot]
	movlpd [esp + mci0300_vnbtot], xmm5

	;# repulsion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 
	xorpd xmm3,xmm3	
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  
	
	;# table ready, in xmm4-xmm7 	
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	
	mulsd  xmm5, [esp + mci0300_c12]
	
	addsd  xmm5, [esp + mci0300_vnbtot]
	movlpd [esp + mci0300_vnbtot], xmm5

.mci0300_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci0300_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci0300_gid],  4  ;# advance pointer 

	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci0300_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + mci0300_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci0300_nri]
	dec ecx
	jecxz .mci0300_end
	;# not last, iterate once more!  
	mov [ebp + mci0300_nri], ecx
	jmp .mci0300_outer
.mci0300_end:
	emms
	mov eax, [esp + mci0300_salign]
	add esp, eax
	add esp, 168
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	


.globl mcinl1000_sse2
.globl _mcinl1000_sse2
mcinl1000_sse2:	
_mcinl1000_sse2:	
.equiv		mci1000_nri,		8
.equiv		mci1000_iinr,		12
.equiv		mci1000_jindex,		16
.equiv		mci1000_jjnr,		20
.equiv		mci1000_shift,		24
.equiv		mci1000_shiftvec,	28
.equiv		mci1000_gid,		32
.equiv		mci1000_pos,		36		
.equiv		mci1000_charge,		40
.equiv		mci1000_facel,		44 ;# double 
.equiv		mci1000_Vc,			52
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1000_ix,         0
.equiv		mci1000_iy,	        16
.equiv		mci1000_iz,         32
.equiv		mci1000_iq,         48
.equiv		mci1000_vctot,      64
.equiv		mci1000_half,       80
.equiv		mci1000_three,      96
.equiv		mci1000_is3,        112
.equiv		mci1000_ii3,        116
.equiv		mci1000_innerjjnr,  120
.equiv		mci1000_innerk,     124		
.equiv		mci1000_salign,     128
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 132		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1000_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + mci1000_half],  xmm0
	movapd [esp + mci1000_three], xmm1

	;# assume we have at least one i particle - start directly 	
mci1000_outer:
	mov   eax, [ebp + mci1000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci1000_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci1000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1000_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + mci1000_facel]
	shufpd xmm3, xmm3, 0	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1000_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + mci1000_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + mci1000_ix], xmm0
	movapd [esp + mci1000_iy], xmm1
	movapd [esp + mci1000_iz], xmm2

	mov   [esp + mci1000_ii3], ebx
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci1000_vctot], xmm4
	
	mov   eax, [ebp + mci1000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1000_pos]
	mov   eax, [ebp + mci1000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci1000_innerk], edx    ;# number of innerloop atoms 
	jge   mci1000_unroll_loop
	jmp   mci1000_checksingle
mci1000_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci1000_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	add dword ptr [esp + mci1000_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci1000_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]	;# jq A 
	movhpd xmm3, [esi + ebx*8]	;# jq B 

	movapd xmm5, [esp + mci1000_iq]
	
	mulpd xmm3, xmm5		;# qq 
	
	mov esi, [ebp + mci1000_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move mci1000_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci1000_ix]
	movapd xmm5, [esp + mci1000_iy]
	movapd xmm6, [esp + mci1000_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4  

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci1000_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci1000_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci1000_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci1000_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	
	movapd xmm5, [esp + mci1000_vctot]
	mulpd  xmm3, xmm0	;# xmm3=vcoul 
	addpd  xmm5, xmm3
	movapd [esp + mci1000_vctot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci1000_innerk],  2
	jl    mci1000_checksingle
	jmp   mci1000_unroll_loop

mci1000_checksingle:				
	mov   edx, [esp + mci1000_innerk]
	and   edx, 1
	jnz    mci1000_dosingle
	jmp    mci1000_updateouterdata
mci1000_dosingle:			
	mov esi, [ebp + mci1000_charge]
	mov edi, [ebp + mci1000_pos]

	mov edx, [esp + mci1000_innerjjnr]     ;# pointer to jjnr[k] 
	mov eax, [edx]	

	xorpd xmm3, xmm3
	movsd xmm3, [esi + eax*8]	;# jq A 
	movapd xmm5, [esp + mci1000_iq]
	unpcklpd xmm3, xmm6
	mulpd xmm3, xmm5		;# qq 
	
	mov esi, [ebp + mci1000_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move mci1000_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci1000_ix]
	movapd xmm5, [esp + mci1000_iy]
	movapd xmm6, [esp + mci1000_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci1000_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci1000_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci1000_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci1000_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 

	movlpd xmm5, [esp + mci1000_vctot]
	mulsd  xmm3, xmm0	;# xmm3=vcoul 
	addsd  xmm5, xmm3
	movlpd [esp + mci1000_vctot], xmm5

mci1000_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci1000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci1000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci1000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci1000_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci1000_nri]
	dec  ecx
	jecxz mci1000_end
	;# not last, iterate once more!  
	mov [ebp + mci1000_nri], ecx
	jmp mci1000_outer
mci1000_end:
	emms
	mov eax, [esp + mci1000_salign]
	add esp, eax
	add esp, 132
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret





.globl mcinl1020_sse2
.globl _mcinl1020_sse2
mcinl1020_sse2:	
_mcinl1020_sse2:	
.equiv		mci1020_nri,		8
.equiv		mci1020_iinr,		12
.equiv		mci1020_jindex,		16
.equiv		mci1020_jjnr,		20
.equiv		mci1020_shift,		24
.equiv		mci1020_shiftvec,	28
.equiv		mci1020_gid,		32
.equiv		mci1020_pos,		36		
.equiv		mci1020_charge,		40
.equiv		mci1020_facel,		44 ;# double 
.equiv		mci1020_Vc,			52
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1020_ixO,	    0
.equiv		mci1020_iyO,	    16
.equiv		mci1020_izO,        32
.equiv		mci1020_ixH1,	    48
.equiv		mci1020_iyH1,	    64
.equiv		mci1020_izH1,       80
.equiv		mci1020_ixH2,	    96
.equiv		mci1020_iyH2,	    112
.equiv		mci1020_izH2,       128
.equiv		mci1020_iqO,        144 
.equiv		mci1020_iqH,        160 
.equiv		mci1020_qqO,        176
.equiv		mci1020_qqH,        192
.equiv		mci1020_vctot,      208
.equiv		mci1020_half,       224
.equiv		mci1020_three,      240
.equiv		mci1020_is3,        256
.equiv		mci1020_ii3,        260
.equiv		mci1020_innerjjnr,  264
.equiv		mci1020_innerk,     268
.equiv		mci1020_salign,     272
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 276		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1020_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + mci1020_half],  xmm0
	movapd [esp + mci1020_three], xmm1

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci1020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1020_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + mci1020_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + mci1020_iqO], xmm3
	movapd [esp + mci1020_iqH], xmm4
	
mci1020_outer:
	mov   eax, [ebp + mci1020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci1020_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci1020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1020_pos]    ;# eax = base of pos[]  
	mov   [esp + mci1020_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci1020_ixO], xmm3
	movapd [esp + mci1020_iyO], xmm4
	movapd [esp + mci1020_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci1020_ixH1], xmm0
	movapd [esp + mci1020_iyH1], xmm1
	movapd [esp + mci1020_izH1], xmm2
	movapd [esp + mci1020_ixH2], xmm3
	movapd [esp + mci1020_iyH2], xmm4
	movapd [esp + mci1020_izH2], xmm5
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci1020_vctot], xmm4
	
	mov   eax, [ebp + mci1020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1020_pos]
	mov   eax, [ebp + mci1020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci1020_innerk], edx    ;# number of innerloop atoms 
	jge   mci1020_unroll_loop
	jmp   mci1020_checksingle
mci1020_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci1020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              

	add dword ptr [esp + mci1020_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci1020_charge]    ;# base of charge[] 
	
	
	movlpd xmm6, [esi + eax*8]	;# jq A 
	movhpd xmm6, [esi + ebx*8]	;# jq B 
	movapd xmm3, [esp + mci1020_iqO]
	movapd xmm4, [esp + mci1020_iqH]
	mulpd xmm3, xmm6		;# qqO 
	mulpd xmm4, xmm6		;# qqH 
	
	movapd  [esp + mci1020_qqO], xmm3
	movapd  [esp + mci1020_qqH], xmm4	

	mov esi, [ebp + mci1020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci1020_ixO]
	movapd xmm5, [esp + mci1020_iyO]
	movapd xmm6, [esp + mci1020_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci1020_ixH1]
	movapd xmm5, [esp + mci1020_iyH1]
	movapd xmm6, [esp + mci1020_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci1020_ixH2]
	movapd xmm4, [esp + mci1020_iyH2]
	movapd xmm5, [esp + mci1020_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci1020_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1020_three]
	subpd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci1020_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci1020_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1020_three]
	subpd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci1020_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci1020_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1020_three]
	subpd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci1020_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	mulpd  xmm7, [esp + mci1020_qqO]	;# xmm7=vcoul 
	addpd  xmm7, [esp + mci1020_vctot]
	movapd [esp + mci1020_vctot], xmm7

	;# H1 interactions 
	mulpd  xmm6, [esp + mci1020_qqH]	;# xmm6=vcoul 
	addpd  xmm6, [esp + mci1020_vctot]
	movapd [esp + mci1020_vctot], xmm6

	;# H2 interactions 
	mulpd  xmm5, [esp + mci1020_qqH]	;# xmm5=vcoul 
	addpd  xmm5, [esp + mci1020_vctot]
	movapd [esp + mci1020_vctot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci1020_innerk],  2
	jl    mci1020_checksingle
	jmp   mci1020_unroll_loop
mci1020_checksingle:				
	mov   edx, [esp + mci1020_innerk]
	and   edx, 1
	jnz    mci1020_dosingle
	jmp    mci1020_updateouterdata
mci1020_dosingle:
	mov   edx, [esp + mci1020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	

	mov esi, [ebp + mci1020_charge]    ;# base of charge[] 
	xorpd xmm6, xmm6
	movlpd xmm6, [esi + eax*8]	;# jq A 
	
	movapd xmm3, [esp + mci1020_iqO]
	movapd xmm4, [esp + mci1020_iqH]
	mulsd xmm3, xmm6		;# qqO 
	mulsd xmm4, xmm6		;# qqH 
	
	movapd  [esp + mci1020_qqO], xmm3
	movapd  [esp + mci1020_qqH], xmm4	

	mov esi, [ebp + mci1020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci1020_ixO]
	movapd xmm5, [esp + mci1020_iyO]
	movapd xmm6, [esp + mci1020_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci1020_ixH1]
	movapd xmm5, [esp + mci1020_iyH1]
	movapd xmm6, [esp + mci1020_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci1020_ixH2]
	movapd xmm4, [esp + mci1020_iyH2]
	movapd xmm5, [esp + mci1020_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci1020_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1020_three]
	subsd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci1020_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci1020_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1020_three]
	subsd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci1020_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci1020_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci1020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1020_three]
	subsd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci1020_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	mulsd  xmm7, [esp + mci1020_qqO]	;# xmm7=vcoul 
	addsd  xmm7, [esp + mci1020_vctot]
	movlpd [esp + mci1020_vctot], xmm7

	;# H1 interactions 
	mulsd  xmm6, [esp + mci1020_qqH]	;# xmm6=vcoul 
	addsd  xmm6, [esp + mci1020_vctot]
	movlpd [esp + mci1020_vctot], xmm6

	;# H2 interactions 
	mulsd  xmm5, [esp + mci1020_qqH]	;# xmm5=vcoul 
	addsd  xmm5, [esp + mci1020_vctot]
	movlpd [esp + mci1020_vctot], xmm5

mci1020_updateouterdata:
	;# accumulate total potential energy and update it 
	mov   edx, [ebp + mci1020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci1020_gid],  4	

	movapd xmm7, [esp + mci1020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	        
	;# add earlier value from mem 
	mov   eax, [ebp + mci1020_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 	
	
	;# finish if last 
	mov   ecx, [ebp + mci1020_nri]
	dec ecx
	jecxz mci1020_end
	;# not last, iterate once more!  
	mov [ebp + mci1020_nri], ecx
	jmp mci1020_outer
mci1020_end:
	emms
	mov eax, [esp + mci1020_salign]
	add esp, eax
	add esp, 276
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl mcinl1030_sse2
.globl _mcinl1030_sse2
mcinl1030_sse2:	
_mcinl1030_sse2:	
.equiv		mci1030_nri,		8
.equiv		mci1030_iinr,		12
.equiv		mci1030_jindex,		16
.equiv		mci1030_jjnr,		20
.equiv		mci1030_shift,		24
.equiv		mci1030_shiftvec,	28
.equiv		mci1030_gid,		32
.equiv		mci1030_pos,		36		
.equiv		mci1030_charge,		40
.equiv		mci1030_facel,		44 ;# double 
.equiv		mci1030_Vc,			52 
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		mci1030_ixO,	    0
.equiv		mci1030_iyO,	    16
.equiv		mci1030_izO,        32
.equiv		mci1030_ixH1,	    48
.equiv		mci1030_iyH1,	    64
.equiv		mci1030_izH1,       80
.equiv		mci1030_ixH2,	    96
.equiv		mci1030_iyH2,	    112
.equiv		mci1030_izH2,       128
.equiv		mci1030_jxO,	    144
.equiv		mci1030_jyO,	    160
.equiv		mci1030_jzO,        176
.equiv		mci1030_jxH1,	    192
.equiv		mci1030_jyH1,	    208
.equiv		mci1030_jzH1,       224
.equiv		mci1030_jxH2,	    240
.equiv		mci1030_jyH2,	    256
.equiv		mci1030_jzH2,       272
.equiv		mci1030_qqOO,       288
.equiv		mci1030_qqOH,       304
.equiv		mci1030_qqHH,       320
.equiv		mci1030_vctot,      336
.equiv		mci1030_half,       352
.equiv		mci1030_three,      368
.equiv		mci1030_rsqOO,      384
.equiv		mci1030_rsqOH1,     400
.equiv		mci1030_rsqOH2,     416
.equiv		mci1030_rsqH1O,     432
.equiv		mci1030_rsqH1H1,    448
.equiv		mci1030_rsqH1H2,    464
.equiv		mci1030_rsqH2O,     480
.equiv		mci1030_rsqH2H1,    496
.equiv		mci1030_rsqH2H2,    512
.equiv		mci1030_rinvOO,     528
.equiv		mci1030_rinvOH1,    544
.equiv		mci1030_rinvOH2,    560
.equiv		mci1030_rinvH1O,    576
.equiv		mci1030_rinvH1H1,   592
.equiv		mci1030_rinvH1H2,   608
.equiv		mci1030_rinvH2O,    624
.equiv		mci1030_rinvH2H1,   640
.equiv		mci1030_rinvH2H2,   656
.equiv		mci1030_is3,        672
.equiv		mci1030_ii3,        676
.equiv		mci1030_innerjjnr,  680
.equiv		mci1030_innerk,     684
.equiv		mci1030_salign,     688								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 692		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1030_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + mci1030_half],  xmm0
	movapd [esp + mci1030_three], xmm1
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci1030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1030_charge]
	movsd xmm3, [edx + ebx*8]	;# qO 
	movsd xmm4, xmm3		;# qO 
	movsd xmm5, [edx + ebx*8 + 8]	;# qH 
	movsd xmm6, [ebp + mci1030_facel]	;# facel 
	mulsd  xmm3, xmm3		;# qO*qO 
	mulsd  xmm4, xmm5		;# qO*qH 
	mulsd  xmm5, xmm5		;# qH*qH 
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci1030_qqOO], xmm3
	movapd [esp + mci1030_qqOH], xmm4
	movapd [esp + mci1030_qqHH], xmm5

mci1030_outer:
	mov   eax, [ebp + mci1030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci1030_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci1030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1030_pos]    ;# eax = base of pos[]  
	mov   [esp + mci1030_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci1030_ixO], xmm3
	movapd [esp + mci1030_iyO], xmm4
	movapd [esp + mci1030_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci1030_ixH1], xmm0
	movapd [esp + mci1030_iyH1], xmm1
	movapd [esp + mci1030_izH1], xmm2
	movapd [esp + mci1030_ixH2], xmm3
	movapd [esp + mci1030_iyH2], xmm4
	movapd [esp + mci1030_izH2], xmm5

	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci1030_vctot], xmm4
	
	mov   eax, [ebp + mci1030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1030_pos]
	mov   eax, [ebp + mci1030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci1030_innerk], edx    ;# number of innerloop atoms 
	jge   mci1030_unroll_loop
	jmp   mci1030_checksingle
mci1030_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci1030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + mci1030_innerjjnr], 8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci1030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + mci1030_jxO], xmm2
	movapd 	[esp + mci1030_jyO], xmm3
	movapd 	[esp + mci1030_jzO], xmm4
	movapd 	[esp + mci1030_jxH1], xmm5
	movapd 	[esp + mci1030_jyH1], xmm6
	movapd 	[esp + mci1030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + mci1030_jxH2], xmm2
	movapd 	[esp + mci1030_jyH2], xmm3
	movapd 	[esp + mci1030_jzH2], xmm4
	
	movapd xmm0, [esp + mci1030_ixO]
	movapd xmm1, [esp + mci1030_iyO]
	movapd xmm2, [esp + mci1030_izO]
	movapd xmm3, [esp + mci1030_ixO]
	movapd xmm4, [esp + mci1030_iyO]
	movapd xmm5, [esp + mci1030_izO]
	subpd  xmm0, [esp + mci1030_jxO]
	subpd  xmm1, [esp + mci1030_jyO]
	subpd  xmm2, [esp + mci1030_jzO]
	subpd  xmm3, [esp + mci1030_jxH1]
	subpd  xmm4, [esp + mci1030_jyH1]
	subpd  xmm5, [esp + mci1030_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci1030_rsqOO], xmm0
	movapd [esp + mci1030_rsqOH1], xmm3

	movapd xmm0, [esp + mci1030_ixO]
	movapd xmm1, [esp + mci1030_iyO]
	movapd xmm2, [esp + mci1030_izO]
	movapd xmm3, [esp + mci1030_ixH1]
	movapd xmm4, [esp + mci1030_iyH1]
	movapd xmm5, [esp + mci1030_izH1]
	subpd  xmm0, [esp + mci1030_jxH2]
	subpd  xmm1, [esp + mci1030_jyH2]
	subpd  xmm2, [esp + mci1030_jzH2]
	subpd  xmm3, [esp + mci1030_jxO]
	subpd  xmm4, [esp + mci1030_jyO]
	subpd  xmm5, [esp + mci1030_jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci1030_rsqOH2], xmm0
	movapd [esp + mci1030_rsqH1O], xmm3

	movapd xmm0, [esp + mci1030_ixH1]
	movapd xmm1, [esp + mci1030_iyH1]
	movapd xmm2, [esp + mci1030_izH1]
	movapd xmm3, [esp + mci1030_ixH1]
	movapd xmm4, [esp + mci1030_iyH1]
	movapd xmm5, [esp + mci1030_izH1]
	subpd  xmm0, [esp + mci1030_jxH1]
	subpd  xmm1, [esp + mci1030_jyH1]
	subpd  xmm2, [esp + mci1030_jzH1]
	subpd  xmm3, [esp + mci1030_jxH2]
	subpd  xmm4, [esp + mci1030_jyH2]
	subpd  xmm5, [esp + mci1030_jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci1030_rsqH1H1], xmm0
	movapd [esp + mci1030_rsqH1H2], xmm3

	movapd xmm0, [esp + mci1030_ixH2]
	movapd xmm1, [esp + mci1030_iyH2]
	movapd xmm2, [esp + mci1030_izH2]
	movapd xmm3, [esp + mci1030_ixH2]
	movapd xmm4, [esp + mci1030_iyH2]
	movapd xmm5, [esp + mci1030_izH2]
	subpd  xmm0, [esp + mci1030_jxO]
	subpd  xmm1, [esp + mci1030_jyO]
	subpd  xmm2, [esp + mci1030_jzO]
	subpd  xmm3, [esp + mci1030_jxH1]
	subpd  xmm4, [esp + mci1030_jyH1]
	subpd  xmm5, [esp + mci1030_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + mci1030_rsqH2O], xmm0
	movapd [esp + mci1030_rsqH2H1], xmm4

	movapd xmm0, [esp + mci1030_ixH2]
	movapd xmm1, [esp + mci1030_iyH2]
	movapd xmm2, [esp + mci1030_izH2]
	subpd  xmm0, [esp + mci1030_jxH2]
	subpd  xmm1, [esp + mci1030_jyH2]
	subpd  xmm2, [esp + mci1030_jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + mci1030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0 (h2h2) , xmm4 (h2h1) 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci1030_half] ;# iter1 
	mulpd   xmm7, [esp + mci1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci1030_half] ;# rinv 
	mulpd   xmm5, [esp + mci1030_half] ;# rinv 
	movapd [esp + mci1030_rinvH2H2], xmm1
	movapd [esp + mci1030_rinvH2H1], xmm5

	movapd xmm0, [esp + mci1030_rsqOO]
	movapd xmm4, [esp + mci1030_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci1030_half] ;# iter1 of  
	mulpd   xmm7, [esp + mci1030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci1030_half] ;# rinv 
	mulpd   xmm5, [esp + mci1030_half] ;# rinv
	movapd [esp + mci1030_rinvOO], xmm1
	movapd [esp + mci1030_rinvOH1], xmm5

	movapd xmm0, [esp + mci1030_rsqOH2]
	movapd xmm4, [esp + mci1030_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci1030_half] ;# iter1 
	mulpd   xmm7, [esp + mci1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci1030_half] ;# rinv 
	mulpd   xmm5, [esp + mci1030_half] ;# rinv 
	movapd [esp + mci1030_rinvOH2], xmm1
	movapd [esp + mci1030_rinvH1O], xmm5

	movapd xmm0, [esp + mci1030_rsqH1H1]
	movapd xmm4, [esp + mci1030_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci1030_half] ;# iter1a 
	mulpd   xmm7, [esp + mci1030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci1030_half] ;# rinv 
	mulpd   xmm5, [esp + mci1030_half] ;# rinv 
	movapd [esp + mci1030_rinvH1H1], xmm1
	movapd [esp + mci1030_rinvH1H2], xmm5

	movapd xmm0, [esp + mci1030_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci1030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + mci1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci1030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + mci1030_half] ;# rinv 
	movapd [esp + mci1030_rinvH2O], xmm1

	;# start with OO interaction 
	movapd xmm0, [esp + mci1030_rinvOO]
	mulpd  xmm0, [esp + mci1030_qqOO]	
	addpd  xmm0, [esp + mci1030_vctot]
	
	;# other interactions 
	movapd xmm1, [esp + mci1030_rinvOH1]
	movapd xmm2, [esp + mci1030_rinvH1H1]
	
	addpd xmm1, [esp + mci1030_rinvOH2]
	addpd xmm2, [esp + mci1030_rinvH1H2]
	
	addpd xmm1, [esp + mci1030_rinvH1O]
	addpd xmm2, [esp + mci1030_rinvH2H1]

	addpd xmm1, [esp + mci1030_rinvH2O]
	addpd xmm2, [esp + mci1030_rinvH2H2]

	mulpd xmm1, [esp + mci1030_qqOH]
	mulpd xmm2, [esp + mci1030_qqHH]
	
	addpd xmm0, xmm1	
	addpd xmm0, xmm2

	movapd [esp + mci1030_vctot], xmm0
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci1030_innerk],  2
	jl    mci1030_checksingle
	jmp   mci1030_unroll_loop
mci1030_checksingle:
	mov   edx, [esp + mci1030_innerk]
	and   edx, 1
	jnz   mci1030_dosingle
	jmp   mci1030_updateouterdata
mci1030_dosingle:
	mov   edx, [esp + mci1030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	

	mov esi, [ebp + mci1030_pos]
	lea   eax, [eax + eax*2]  

	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + mci1030_jxO], xmm2
	movapd 	[esp + mci1030_jyO], xmm3
	movapd 	[esp + mci1030_jzO], xmm4
	movapd 	[esp + mci1030_jxH1], xmm5
	movapd 	[esp + mci1030_jyH1], xmm6
	movapd 	[esp + mci1030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + mci1030_jxH2], xmm2
	movapd 	[esp + mci1030_jyH2], xmm3
	movapd 	[esp + mci1030_jzH2], xmm4
	
	movapd xmm0, [esp + mci1030_ixO]
	movapd xmm1, [esp + mci1030_iyO]
	movapd xmm2, [esp + mci1030_izO]
	movapd xmm3, [esp + mci1030_ixO]
	movapd xmm4, [esp + mci1030_iyO]
	movapd xmm5, [esp + mci1030_izO]
	subsd  xmm0, [esp + mci1030_jxO]
	subsd  xmm1, [esp + mci1030_jyO]
	subsd  xmm2, [esp + mci1030_jzO]
	subsd  xmm3, [esp + mci1030_jxH1]
	subsd  xmm4, [esp + mci1030_jyH1]
	subsd  xmm5, [esp + mci1030_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci1030_rsqOO], xmm0
	movapd [esp + mci1030_rsqOH1], xmm3

	movapd xmm0, [esp + mci1030_ixO]
	movapd xmm1, [esp + mci1030_iyO]
	movapd xmm2, [esp + mci1030_izO]
	movapd xmm3, [esp + mci1030_ixH1]
	movapd xmm4, [esp + mci1030_iyH1]
	movapd xmm5, [esp + mci1030_izH1]
	subsd  xmm0, [esp + mci1030_jxH2]
	subsd  xmm1, [esp + mci1030_jyH2]
	subsd  xmm2, [esp + mci1030_jzH2]
	subsd  xmm3, [esp + mci1030_jxO]
	subsd  xmm4, [esp + mci1030_jyO]
	subsd  xmm5, [esp + mci1030_jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci1030_rsqOH2], xmm0
	movapd [esp + mci1030_rsqH1O], xmm3

	movapd xmm0, [esp + mci1030_ixH1]
	movapd xmm1, [esp + mci1030_iyH1]
	movapd xmm2, [esp + mci1030_izH1]
	movapd xmm3, [esp + mci1030_ixH1]
	movapd xmm4, [esp + mci1030_iyH1]
	movapd xmm5, [esp + mci1030_izH1]
	subsd  xmm0, [esp + mci1030_jxH1]
	subsd  xmm1, [esp + mci1030_jyH1]
	subsd  xmm2, [esp + mci1030_jzH1]
	subsd  xmm3, [esp + mci1030_jxH2]
	subsd  xmm4, [esp + mci1030_jyH2]
	subsd  xmm5, [esp + mci1030_jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci1030_rsqH1H1], xmm0
	movapd [esp + mci1030_rsqH1H2], xmm3

	movapd xmm0, [esp + mci1030_ixH2]
	movapd xmm1, [esp + mci1030_iyH2]
	movapd xmm2, [esp + mci1030_izH2]
	movapd xmm3, [esp + mci1030_ixH2]
	movapd xmm4, [esp + mci1030_iyH2]
	movapd xmm5, [esp + mci1030_izH2]
	subsd  xmm0, [esp + mci1030_jxO]
	subsd  xmm1, [esp + mci1030_jyO]
	subsd  xmm2, [esp + mci1030_jzO]
	subsd  xmm3, [esp + mci1030_jxH1]
	subsd  xmm4, [esp + mci1030_jyH1]
	subsd  xmm5, [esp + mci1030_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + mci1030_rsqH2O], xmm0
	movapd [esp + mci1030_rsqH2H1], xmm4

	movapd xmm0, [esp + mci1030_ixH2]
	movapd xmm1, [esp + mci1030_iyH2]
	movapd xmm2, [esp + mci1030_izH2]
	subsd  xmm0, [esp + mci1030_jxH2]
	subsd  xmm1, [esp + mci1030_jyH2]
	subsd  xmm2, [esp + mci1030_jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + mci1030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci1030_half] ;# iter1 
	mulsd   xmm7, [esp + mci1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci1030_half] ;# rinv 
	mulsd   xmm5, [esp + mci1030_half] ;# rinv 
	movapd [esp + mci1030_rinvH2H2], xmm1
	movapd [esp + mci1030_rinvH2H1], xmm5

	movapd xmm0, [esp + mci1030_rsqOO]
	movapd xmm4, [esp + mci1030_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci1030_half] ;# iter1 of  
	mulsd   xmm7, [esp + mci1030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci1030_half] ;# rinv 
	mulsd   xmm5, [esp + mci1030_half] ;# rinv
	movapd [esp + mci1030_rinvOO], xmm1
	movapd [esp + mci1030_rinvOH1], xmm5

	movapd xmm0, [esp + mci1030_rsqOH2]
	movapd xmm4, [esp + mci1030_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci1030_half] ;# iter1 
	mulsd   xmm7, [esp + mci1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci1030_half] ;# rinv 
	mulsd   xmm5, [esp + mci1030_half] ;# rinv 
	movapd [esp + mci1030_rinvOH2], xmm1
	movapd [esp + mci1030_rinvH1O], xmm5

	movapd xmm0, [esp + mci1030_rsqH1H1]
	movapd xmm4, [esp + mci1030_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci1030_half] ;# iter1a 
	mulsd   xmm7, [esp + mci1030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci1030_half] ;# rinv 
	mulsd   xmm5, [esp + mci1030_half] ;# rinv 
	movapd [esp + mci1030_rinvH1H1], xmm1
	movapd [esp + mci1030_rinvH1H2], xmm5

	movapd xmm0, [esp + mci1030_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci1030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + mci1030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci1030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + mci1030_half] ;# rinv 
	movapd [esp + mci1030_rinvH2O], xmm1

	;# start with OO interaction 
	movapd xmm0, [esp + mci1030_rinvOO]
	mulpd  xmm0, [esp + mci1030_qqOO]	
	addpd  xmm0, [esp + mci1030_vctot]
	
	;# other interactions 
	movapd xmm1, [esp + mci1030_rinvOH1]
	movapd xmm2, [esp + mci1030_rinvH1H1]
	
	addsd xmm1, [esp + mci1030_rinvOH2]
	addsd xmm2, [esp + mci1030_rinvH1H2]
	
	addsd xmm1, [esp + mci1030_rinvH1O]
	addsd xmm2, [esp + mci1030_rinvH2H1]

	addsd xmm1, [esp + mci1030_rinvH2O]
	addsd xmm2, [esp + mci1030_rinvH2H2]

	mulsd xmm1, [esp + mci1030_qqOH]
	mulsd xmm2, [esp + mci1030_qqHH]
	
	addsd xmm0, xmm1	
	addsd xmm0, xmm2

	movlpd [esp + mci1030_vctot], xmm0
	
mci1030_updateouterdata:
	;# accumulate total potential energy and update it 
	mov   edx, [ebp + mci1030_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci1030_gid],  4	

	movapd xmm7, [esp + mci1030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	        
	;# add earlier value from mem 
	mov   eax, [ebp + mci1030_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 	
	
	;# finish if last 
	mov   ecx, [ebp + mci1030_nri]
	dec ecx
	jecxz mci1030_end
	;# not last, iterate once more!  
	mov [ebp + mci1030_nri], ecx
	jmp mci1030_outer
mci1030_end:
	emms
	mov eax, [esp + mci1030_salign]
	add esp, eax
	add esp, 692
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret







.globl mcinl1100_sse2
.globl _mcinl1100_sse2
mcinl1100_sse2:	
_mcinl1100_sse2:	
.equiv		mci1100_nri,		8
.equiv		mci1100_iinr,		12
.equiv		mci1100_jindex,		16
.equiv		mci1100_jjnr,		20
.equiv		mci1100_shift,		24
.equiv		mci1100_shiftvec,	28
.equiv		mci1100_gid,		32
.equiv		mci1100_pos,		36		
.equiv		mci1100_charge,		40
.equiv		mci1100_facel,		44 ;# double 
.equiv		mci1100_Vc,			52
.equiv		mci1100_type,		56
.equiv		mci1100_ntype,		60
.equiv		mci1100_nbfp,		64	
.equiv		mci1100_Vnb,		68	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse2 use 
.equiv		mci1100_ix,	        0
.equiv		mci1100_iy,	        16
.equiv		mci1100_iz,         32
.equiv		mci1100_iq,         48	
.equiv		mci1100_c6,         64
.equiv		mci1100_c12,        80		 
.equiv		mci1100_vctot,      96
.equiv		mci1100_vnbtot,     112
.equiv		mci1100_half,       128
.equiv		mci1100_three,      144
.equiv		mci1100_is3,        160
.equiv		mci1100_ii3,        164
.equiv		mci1100_ntia,	    168	
.equiv		mci1100_innerjjnr,  172
.equiv		mci1100_innerk,     176
.equiv		mci1100_salign,     180	
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  184		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1100_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + mci1100_half],  xmm0
	movapd [esp + mci1100_three], xmm1

	;# assume we have at least one i particle - start directly 	
mci1100_outer:
	mov   eax, [ebp + mci1100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci1100_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci1100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1100_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + mci1100_facel]
	shufpd xmm3, xmm3, 0

    mov   edx, [ebp + mci1100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci1100_ntype]
    shl   edx, 1
    mov   [esp + mci1100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1100_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + mci1100_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + mci1100_ix], xmm0
	movapd [esp + mci1100_iy], xmm1
	movapd [esp + mci1100_iz], xmm2

	mov   [esp + mci1100_ii3], ebx
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci1100_vctot], xmm4
	movapd [esp + mci1100_vnbtot], xmm4
	
	mov   eax, [ebp + mci1100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1100_pos]
	mov   eax, [ebp + mci1100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci1100_innerk], edx    ;# number of innerloop atoms 
	jge   mci1100_unroll_loop
	jmp   mci1100_checksingle
mci1100_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci1100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add dword ptr [esp + mci1100_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci1100_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + mci1100_iq]
	mulpd xmm3, xmm5		;# qq 
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + mci1100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + mci1100_nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + mci1100_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + mci1100_c6], xmm4
	movapd [esp + mci1100_c12], xmm6
	
	mov esi, [ebp + mci1100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci1100_ix]
	movapd xmm5, [esp + mci1100_iy]
	movapd xmm6, [esp + mci1100_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci1100_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci1100_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci1100_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci1100_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=rinv 
	
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm3, xmm0	;# xmm3=vcoul 
	mulpd  xmm1, [esp + mci1100_c6]
	mulpd  xmm2, [esp + mci1100_c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addpd  xmm5, [esp + mci1100_vnbtot]
	addpd  xmm3, [esp + mci1100_vctot]
	movapd [esp + mci1100_vctot], xmm3
	movapd [esp + mci1100_vnbtot], xmm5
		
	;# should we do one more iteration? 
	sub dword ptr [esp + mci1100_innerk],  2
	jl    mci1100_checksingle
	jmp   mci1100_unroll_loop	
mci1100_checksingle:
	mov   edx, [esp + mci1100_innerk]
	and   edx, 1
	jnz    mci1100_dosingle
	jmp    mci1100_updateouterdata
mci1100_dosingle:
	mov esi, [ebp + mci1100_charge]
	mov edi, [ebp + mci1100_pos]
	mov ecx, [esp + mci1100_innerjjnr]
	mov   eax, [ecx]
	
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]

	movapd xmm5, [esp + mci1100_iq]
	mulsd xmm3, xmm5		;# qq 
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	
	mov esi, [ebp + mci1100_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + mci1100_nbfp]
	shl eax, 1
	mov edi, [esp + mci1100_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	
	movapd [esp + mci1100_c6], xmm4
	movapd [esp + mci1100_c12], xmm6
	
	mov esi, [ebp + mci1100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci1100_ix]
	movapd xmm5, [esp + mci1100_iy]
	movapd xmm6, [esp + mci1100_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci1100_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci1100_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci1100_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci1100_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=rinv 
	
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm3, xmm0	;# xmm3=vcoul 
	mulsd  xmm1, [esp + mci1100_c6]
	mulsd  xmm2, [esp + mci1100_c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addsd  xmm5, [esp + mci1100_vnbtot]
	addsd  xmm3, [esp + mci1100_vctot]
	movlpd [esp + mci1100_vctot], xmm3
	movlpd [esp + mci1100_vnbtot], xmm5
	
mci1100_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci1100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci1100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci1100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci1100_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci1100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + mci1100_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci1100_nri]
	dec ecx
	jecxz mci1100_end
	;# not last, iterate once more!  
	mov [ebp + mci1100_nri], ecx
	jmp mci1100_outer
mci1100_end:
	emms
	mov eax, [esp + mci1100_salign]
	add esp, eax
	add esp,  184
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl2100_sse2
.globl _mcinl2100_sse2
mcinl2100_sse2:	
_mcinl2100_sse2:	
.equiv		mci2100_nri,		8
.equiv		mci2100_iinr,		12
.equiv		mci2100_jindex,		16
.equiv		mci2100_jjnr,		20
.equiv		mci2100_shift,		24
.equiv		mci2100_shiftvec,	28
.equiv		mci2100_gid,		32
.equiv		mci2100_pos,		36		
.equiv		mci2100_charge,		40
.equiv		mci2100_facel,		44 ;# double 
.equiv		mci2100_Vc,			52			
.equiv		mci2100_argkrf,		56 ;# double 	
.equiv		mci2100_argcrf,		64 ;# double 	
.equiv		mci2100_type,		72
.equiv		mci2100_ntype,		76
.equiv		mci2100_nbfp,		80	
.equiv		mci2100_Vnb,		84	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2100_ix,	        0
.equiv		mci2100_iy,	        16
.equiv		mci2100_iz,         32
.equiv		mci2100_iq,         48	
.equiv		mci2100_c6,         64
.equiv		mci2100_c12,        80		 
.equiv		mci2100_vctot,      96
.equiv		mci2100_vnbtot,     112
.equiv		mci2100_half,       128
.equiv		mci2100_three,      144
.equiv		mci2100_krf,		160	 
.equiv		mci2100_crf,		176	 
.equiv		mci2100_is3,        192
.equiv		mci2100_ii3,        196
.equiv		mci2100_ntia,	    200
.equiv		mci2100_innerjjnr,  204
.equiv		mci2100_innerk,     208
.equiv		mci2100_salign,     212
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  216		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2100_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + mci2100_argkrf]
	movsd xmm6, [ebp + mci2100_argcrf]
	
	movapd [esp + mci2100_half],  xmm0
	movapd [esp + mci2100_three], xmm1
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + mci2100_krf], xmm5
	movapd [esp + mci2100_crf], xmm6

	;# assume we have at least one i particle - start directly 	
.mci2100_outer:
	mov   eax, [ebp + mci2100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci2100_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci2100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2100_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + mci2100_facel]
	shufpd xmm3, xmm3, 0

    mov   edx, [ebp + mci2100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci2100_ntype]
    shl   edx, 1
    mov   [esp + mci2100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2100_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + mci2100_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + mci2100_ix], xmm0
	movapd [esp + mci2100_iy], xmm1
	movapd [esp + mci2100_iz], xmm2

	mov   [esp + mci2100_ii3], ebx
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci2100_vctot], xmm4
	movapd [esp + mci2100_vnbtot], xmm4
	
	mov   eax, [ebp + mci2100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2100_pos]
	mov   eax, [ebp + mci2100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci2100_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2100_unroll_loop
	jmp   .mci2100_checksingle
.mci2100_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci2100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add dword ptr [esp + mci2100_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci2100_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + mci2100_iq]
	mulpd xmm3, xmm5		;# qq 
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + mci2100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + mci2100_nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + mci2100_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movd  ebx, mm1
	movapd [esp + mci2100_c6], xmm4
	movapd [esp + mci2100_c12], xmm6
	
	mov esi, [ebp + mci2100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci2100_ix]
	movapd xmm5, [esp + mci2100_iy]
	movapd xmm6, [esp + mci2100_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	movapd xmm7, [esp + mci2100_krf]	
	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci2100_three]
	mulpd xmm7, xmm4	;# krsq 
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci2100_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci2100_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci2100_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=rinv 
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm6, xmm0
	addpd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movapd xmm1, xmm4
	subpd  xmm6, [esp + mci2100_crf]
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	mulpd  xmm1, [esp + mci2100_c6]
	mulpd  xmm2, [esp + mci2100_c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addpd  xmm5, [esp + mci2100_vnbtot]
	addpd  xmm6, [esp + mci2100_vctot]
	movapd [esp + mci2100_vctot], xmm6
	movapd [esp + mci2100_vnbtot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci2100_innerk],  2
	jl    .mci2100_checksingle
	jmp   .mci2100_unroll_loop

.mci2100_checksingle:				
	mov   edx, [esp + mci2100_innerk]
	and   edx, 1
	jnz    .mci2100_dosingle
	jmp    .mci2100_updateouterdata
.mci2100_dosingle:			
	mov esi, [ebp + mci2100_charge]
	mov edi, [ebp + mci2100_pos]
	mov   ecx, [esp + mci2100_innerjjnr]
	xorpd xmm3, xmm3
	mov   eax, [ecx]

	movlpd xmm3, [esi + eax*8]
	movapd xmm5, [esp + mci2100_iq]
	mulpd xmm3, xmm5		;# qq 
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	mov esi, [ebp + mci2100_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + mci2100_nbfp]
	shl eax, 1
	mov edi, [esp + mci2100_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movapd [esp + mci2100_c6], xmm4
	movapd [esp + mci2100_c12], xmm6
	
	mov esi, [ebp + mci2100_pos]       ;# base of pos[] 

	lea eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci2100_ix]
	movapd xmm5, [esp + mci2100_iy]
	movapd xmm6, [esp + mci2100_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	movapd xmm7, [esp + mci2100_krf]	
	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci2100_three]
	mulsd xmm7, xmm4	;# krsq 
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci2100_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci2100_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci2100_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=rinv 
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm6, xmm0
	addsd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movapd xmm1, xmm4
	subsd  xmm6, [esp + mci2100_crf]
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	mulsd  xmm1, [esp + mci2100_c6]
	mulsd  xmm2, [esp + mci2100_c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addsd  xmm5, [esp + mci2100_vnbtot]
	addsd  xmm6, [esp + mci2100_vctot]
	movlpd [esp + mci2100_vctot], xmm6
	movlpd [esp + mci2100_vnbtot], xmm5
	
.mci2100_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci2100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci2100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci2100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci2100_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci2100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci2100_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2100_nri]
	dec ecx
	jecxz .mci2100_end
	;# not last, iterate once more!  
	mov [ebp + mci2100_nri], ecx
	jmp .mci2100_outer
.mci2100_end:
	emms
	mov eax, [esp + mci2100_salign]
	add esp, eax
	add esp,  216
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl2000_sse2
.globl _mcinl2000_sse2
mcinl2000_sse2:	
_mcinl2000_sse2:	
.equiv		mci2000_nri,			8
.equiv		mci2000_iinr,			12
.equiv		mci2000_jindex,			16
.equiv		mci2000_jjnr,			20
.equiv		mci2000_shift,			24
.equiv		mci2000_shiftvec,		28
.equiv		mci2000_gid,			32
.equiv		mci2000_pos,			36		
.equiv		mci2000_charge,			40
.equiv		mci2000_facel,			44 ;# double 
.equiv		mci2000_Vc,				52			
.equiv		mci2000_argkrf,			56 ;# double 	
.equiv		mci2000_argcrf,			64 ;# double 
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2000_ix,				0
.equiv		mci2000_iy,				16
.equiv		mci2000_iz,				32
.equiv		mci2000_iq,				48	
.equiv		mci2000_vctot,			64
.equiv		mci2000_half,			80
.equiv		mci2000_three,			96
.equiv		mci2000_krf,	        112	 
.equiv		mci2000_crf,	        128	 
.equiv		mci2000_is3,			144
.equiv		mci2000_ii3,			148
.equiv		mci2000_innerjjnr,		152
.equiv		mci2000_innerk,			156
.equiv		mci2000_salign,			160	
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  164		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2000_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + mci2000_argkrf]
	movsd xmm6, [ebp + mci2000_argcrf]
	
	movapd [esp + mci2000_half],  xmm0
	movapd [esp + mci2000_three], xmm1
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2000_krf], xmm5
	shufpd xmm6, xmm6, 0
	movapd [esp + mci2000_crf], xmm6

	;# assume we have at least one i particle - start directly 	
.mci2000_outer:
	mov   eax, [ebp + mci2000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci2000_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci2000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2000_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + mci2000_facel]
	shufpd xmm3, xmm3, 0
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2000_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + mci2000_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + mci2000_ix], xmm0
	movapd [esp + mci2000_iy], xmm1
	movapd [esp + mci2000_iz], xmm2

	mov   [esp + mci2000_ii3], ebx
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci2000_vctot], xmm4
	
	mov   eax, [ebp + mci2000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2000_pos]
	mov   eax, [ebp + mci2000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci2000_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2000_unroll_loop
	jmp   .mci2000_checksingle
.mci2000_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci2000_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add dword ptr [esp + mci2000_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci2000_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + mci2000_iq]
	mulpd xmm3, xmm5		;# qq 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mov esi, [ebp + mci2000_pos]       ;# base of pos[] 

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci2000_ix]
	movapd xmm5, [esp + mci2000_iy]
	movapd xmm6, [esp + mci2000_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	movapd xmm7, [esp + mci2000_krf]	
	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci2000_three]
	mulpd xmm7, xmm4	;# krsq 
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci2000_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci2000_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci2000_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=rinv 
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm6, xmm0
	addpd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movapd xmm1, xmm4
	subpd  xmm6, [esp + mci2000_crf]
	mulpd  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	addpd  xmm6, [esp + mci2000_vctot]
	movapd [esp + mci2000_vctot], xmm6

	;# should we do one more iteration? 
	sub dword ptr [esp + mci2000_innerk],  2
	jl    .mci2000_checksingle
	jmp   .mci2000_unroll_loop

.mci2000_checksingle:				
	mov   edx, [esp + mci2000_innerk]
	and   edx, 1
	jnz    .mci2000_dosingle
	jmp    .mci2000_updateouterdata
.mci2000_dosingle:			
	mov esi, [ebp + mci2000_charge]
	mov edi, [ebp + mci2000_pos]
	mov   ecx, [esp + mci2000_innerjjnr]
	
	xorpd xmm3, xmm3
	mov   eax, [ecx]

	movlpd xmm3, [esi + eax*8]
	movapd xmm5, [esp + mci2000_iq]
	mulpd xmm3, xmm5		;# qq 
	
	mov esi, [ebp + mci2000_pos]       ;# base of pos[] 

	lea eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci2000_ix]
	movapd xmm5, [esp + mci2000_iy]
	movapd xmm6, [esp + mci2000_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	movapd xmm7, [esp + mci2000_krf]	
	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci2000_three]
	mulsd xmm7, xmm4	;# krsq 
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci2000_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci2000_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci2000_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=rinv 
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	;# xmm4=rinvsq 
	movapd xmm6, xmm0
	addsd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movapd xmm1, xmm4
	subsd  xmm6, [esp + mci2000_crf]
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	addsd  xmm6, [esp + mci2000_vctot]
	movlpd [esp + mci2000_vctot], xmm6

.mci2000_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci2000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci2000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci2000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + mci2000_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2000_nri]
	dec ecx
	jecxz .mci2000_end
	;# not last, iterate once more!  
	mov [ebp + mci2000_nri], ecx
	jmp .mci2000_outer
.mci2000_end:
	emms
	mov eax, [esp + mci2000_salign]
	add esp, eax
	add esp,  164
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl1120_sse2
.globl _mcinl1120_sse2
mcinl1120_sse2:	
_mcinl1120_sse2:	
.equiv		mci1120_nri,			8
.equiv		mci1120_iinr,			12
.equiv		mci1120_jindex,			16
.equiv		mci1120_jjnr,			20
.equiv		mci1120_shift,			24
.equiv		mci1120_shiftvec,		28
.equiv		mci1120_gid,			32
.equiv		mci1120_pos,			36		
.equiv		mci1120_charge,			40
.equiv		mci1120_facel,			44 ;# double 
.equiv		mci1120_Vc,				52			
.equiv		mci1120_type,			56
.equiv		mci1120_ntype,			60
.equiv		mci1120_nbfp,			64	
.equiv		mci1120_Vnb,			68	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1120_ixO,	        0
.equiv		mci1120_iyO,	        16
.equiv		mci1120_izO,			32
.equiv		mci1120_ixH1,	        48
.equiv		mci1120_iyH1,	        64
.equiv		mci1120_izH1,			80
.equiv		mci1120_ixH2,	        96
.equiv		mci1120_iyH2,	        112
.equiv		mci1120_izH2,			128
.equiv		mci1120_iqO,			144 
.equiv		mci1120_iqH,			160 	
.equiv		mci1120_qqO,			176
.equiv		mci1120_qqH,			192
.equiv		mci1120_c6,				208
.equiv		mci1120_c12,			224		 
.equiv		mci1120_vctot,			240
.equiv		mci1120_vnbtot,			256
.equiv		mci1120_half,			272
.equiv		mci1120_three,			288
.equiv		mci1120_is3,			304
.equiv		mci1120_ii3,			308
.equiv		mci1120_ntia,	        312	
.equiv		mci1120_innerjjnr,		316
.equiv		mci1120_innerk,			320
.equiv		mci1120_salign,			324
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 328		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1120_salign], eax
	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + mci1120_half],  xmm0
	movapd [esp + mci1120_three], xmm1

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci1120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1120_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + mci1120_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + mci1120_iqO], xmm3
	movapd [esp + mci1120_iqH], xmm4
	
	mov   edx, [ebp + mci1120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + mci1120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + mci1120_ntia], ecx		
mci1120_outer:
	mov   eax, [ebp + mci1120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci1120_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci1120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1120_pos]    ;# eax = base of pos[]  
	mov   [esp + mci1120_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci1120_ixO], xmm3
	movapd [esp + mci1120_iyO], xmm4
	movapd [esp + mci1120_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci1120_ixH1], xmm0
	movapd [esp + mci1120_iyH1], xmm1
	movapd [esp + mci1120_izH1], xmm2
	movapd [esp + mci1120_ixH2], xmm3
	movapd [esp + mci1120_iyH2], xmm4
	movapd [esp + mci1120_izH2], xmm5
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci1120_vctot], xmm4
	movapd [esp + mci1120_vnbtot], xmm4
	
	mov   eax, [ebp + mci1120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1120_pos]
	mov   eax, [ebp + mci1120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci1120_innerk], edx    ;# number of innerloop atoms 
	jge   mci1120_unroll_loop
	jmp   mci1120_checksingle
mci1120_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci1120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add dword ptr [esp + mci1120_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci1120_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + mci1120_iqO]
	mulpd  xmm4, [esp + mci1120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx

	movapd  [esp + mci1120_qqO], xmm3
	movapd  [esp + mci1120_qqH], xmm4
	
	mov esi, [ebp + mci1120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + mci1120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + mci1120_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + mci1120_c6], xmm4
	movapd [esp + mci1120_c12], xmm6
	
	mov esi, [ebp + mci1120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci1120_ixO]
	movapd xmm5, [esp + mci1120_iyO]
	movapd xmm6, [esp + mci1120_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci1120_ixH1]
	movapd xmm5, [esp + mci1120_iyH1]
	movapd xmm6, [esp + mci1120_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci1120_ixH2]
	movapd xmm4, [esp + mci1120_iyH2]
	movapd xmm5, [esp + mci1120_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci1120_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1120_three]
	subpd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci1120_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci1120_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1120_three]
	subpd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci1120_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci1120_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1120_three]
	subpd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci1120_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm7, [esp + mci1120_qqO]	;# xmm7=vcoul 
	
	mulpd  xmm1, [esp + mci1120_c6]
	mulpd  xmm2, [esp + mci1120_c12]
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addpd  xmm3, [esp + mci1120_vnbtot]
	addpd  xmm7, [esp + mci1120_vctot]	
	movapd [esp + mci1120_vnbtot], xmm3
	movapd [esp + mci1120_vctot], xmm7

	;# H1 interactions 
	mulpd  xmm6, [esp + mci1120_qqH]	;# xmm6=vcoul 
	addpd  xmm6, [esp + mci1120_vctot]
	movapd [esp + mci1120_vctot], xmm6

	;# H2 interactions 
	mulpd  xmm5, [esp + mci1120_qqH]	;# xmm5=vcoul 
	addpd  xmm5, [esp + mci1120_vctot]
	movapd [esp + mci1120_vctot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci1120_innerk],  2
	jl    mci1120_checksingle
	jmp   mci1120_unroll_loop
mci1120_checksingle:	
	mov   edx, [esp + mci1120_innerk]
	and   edx, 1
	jnz   mci1120_dosingle
	jmp   mci1120_updateouterdata
mci1120_dosingle:
	mov   edx, [esp + mci1120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci1120_innerjjnr],  4	

	mov esi, [ebp + mci1120_charge]    ;# base of charge[] 

	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + mci1120_iqO]
	mulpd  xmm4, [esp + mci1120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 

	movapd  [esp + mci1120_qqO], xmm3
	movapd  [esp + mci1120_qqH], xmm4
	
	mov esi, [ebp + mci1120_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + mci1120_nbfp]
	shl eax, 1	
	mov edi, [esp + mci1120_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + mci1120_c6], xmm4
	movapd [esp + mci1120_c12], xmm6
	
	mov esi, [ebp + mci1120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci1120_ixO]
	movapd xmm5, [esp + mci1120_iyO]
	movapd xmm6, [esp + mci1120_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci1120_ixH1]
	movapd xmm5, [esp + mci1120_iyH1]
	movapd xmm6, [esp + mci1120_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci1120_ixH2]
	movapd xmm4, [esp + mci1120_iyH2]
	movapd xmm5, [esp + mci1120_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci1120_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1120_three]
	subsd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci1120_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci1120_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1120_three]
	subsd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci1120_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci1120_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci1120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci1120_three]
	subsd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci1120_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm7, [esp + mci1120_qqO]	;# xmm7=vcoul 
	
	mulsd  xmm1, [esp + mci1120_c6]
	mulsd  xmm2, [esp + mci1120_c12]
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addsd  xmm3, [esp + mci1120_vnbtot]
	addsd  xmm7, [esp + mci1120_vctot]
	movsd [esp + mci1120_vnbtot], xmm3
	movsd [esp + mci1120_vctot], xmm7

	;# H1 interactions 
	mulsd  xmm6, [esp + mci1120_qqH]	;# xmm6=vcoul 
	addsd  xmm6, [esp + mci1120_vctot]
	movsd [esp + mci1120_vctot], xmm6

	;# H2 interactions 
	mulsd  xmm5, [esp + mci1120_qqH]	;# xmm5=vcoul 
	addsd  xmm5, [esp + mci1120_vctot]
	movsd [esp + mci1120_vctot], xmm5
	
mci1120_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci1120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci1120_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci1120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci1120_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci1120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci1120_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci1120_nri]
	dec ecx
	jecxz mci1120_end
	;# not last, iterate once more!  
	mov [ebp + mci1120_nri], ecx
	jmp mci1120_outer
mci1120_end:
	emms
	mov eax, [esp + mci1120_salign]
	add esp, eax
	add esp, 328
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	

	
.globl mcinl1130_sse2
.globl _mcinl1130_sse2
mcinl1130_sse2:	
_mcinl1130_sse2:	
.equiv		mci1130_nri,		8
.equiv		mci1130_iinr,		12
.equiv		mci1130_jindex,		16
.equiv		mci1130_jjnr,		20
.equiv		mci1130_shift,		24
.equiv		mci1130_shiftvec,	28
.equiv		mci1130_gid,		32
.equiv		mci1130_pos,		36
.equiv		mci1130_charge,		40
.equiv		mci1130_facel,		44 ;# double 
.equiv		mci1130_Vc,			52			
.equiv		mci1130_type,		56
.equiv		mci1130_ntype,		60
.equiv		mci1130_nbfp,		64
.equiv		mci1130_Vnb,		68
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1130_ixO,		0
.equiv		mci1130_iyO,		16
.equiv		mci1130_izO,		32
.equiv		mci1130_ixH1,		48
.equiv		mci1130_iyH1,		64
.equiv		mci1130_izH1,		80
.equiv		mci1130_ixH2,		96
.equiv		mci1130_iyH2,		112
.equiv		mci1130_izH2,		128
.equiv		mci1130_jxO,		144
.equiv		mci1130_jyO,		160
.equiv		mci1130_jzO,		176
.equiv		mci1130_jxH1,		192
.equiv		mci1130_jyH1,		208
.equiv		mci1130_jzH1,		224
.equiv		mci1130_jxH2,		240
.equiv		mci1130_jyH2,		256
.equiv		mci1130_jzH2,		272
.equiv		mci1130_qqOO,		288
.equiv		mci1130_qqOH,		304
.equiv		mci1130_qqHH,		320
.equiv		mci1130_c6,			336
.equiv		mci1130_c12,		352		 
.equiv		mci1130_vctot,		368
.equiv		mci1130_vnbtot,		384
.equiv		mci1130_half,		400
.equiv		mci1130_three,		416
.equiv		mci1130_rsqOO,		432
.equiv		mci1130_rsqOH1,		448
.equiv		mci1130_rsqOH2,		464
.equiv		mci1130_rsqH1O,		480
.equiv		mci1130_rsqH1H1,	496
.equiv		mci1130_rsqH1H2,	512
.equiv		mci1130_rsqH2O,		528 
.equiv		mci1130_rsqH2H1,	544
.equiv		mci1130_rsqH2H2,	560
.equiv		mci1130_rinvOO,		576
.equiv		mci1130_rinvOH1,	592
.equiv		mci1130_rinvOH2,	608
.equiv		mci1130_rinvH1O,	624
.equiv		mci1130_rinvH1H1,	640
.equiv		mci1130_rinvH1H2,	656
.equiv		mci1130_rinvH2O,	672
.equiv		mci1130_rinvH2H1,	688
.equiv		mci1130_rinvH2H2,	704
.equiv		mci1130_is3,		720
.equiv		mci1130_ii3,		724
.equiv		mci1130_innerjjnr,	728
.equiv		mci1130_innerk,		732
.equiv		mci1130_salign,		736							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 740		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1130_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + mci1130_half],  xmm0
	movapd [esp + mci1130_three], xmm1

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci1130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1130_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + mci1130_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci1130_qqOO], xmm3
	movapd [esp + mci1130_qqOH], xmm4
	movapd [esp + mci1130_qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + mci1130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + mci1130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + mci1130_nbfp]
	movupd xmm0, [eax + edx*8]
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0	
	movapd [esp + mci1130_c6], xmm0
	movapd [esp + mci1130_c12], xmm1

mci1130_outer:
	mov   eax, [ebp + mci1130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci1130_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci1130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1130_pos]    ;# eax = base of pos[]  
	mov   [esp + mci1130_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci1130_ixO], xmm3
	movapd [esp + mci1130_iyO], xmm4
	movapd [esp + mci1130_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci1130_ixH1], xmm0
	movapd [esp + mci1130_iyH1], xmm1
	movapd [esp + mci1130_izH1], xmm2
	movapd [esp + mci1130_ixH2], xmm3
	movapd [esp + mci1130_iyH2], xmm4
	movapd [esp + mci1130_izH2], xmm5

	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci1130_vctot], xmm4
	movapd [esp + mci1130_vnbtot], xmm4
	
	mov   eax, [ebp + mci1130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1130_pos]
	mov   eax, [ebp + mci1130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci1130_innerk], edx    ;# number of innerloop atoms 
	jge   mci1130_unroll_loop
	jmp   mci1130_checksingle
mci1130_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci1130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + mci1130_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci1130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + mci1130_jxO], xmm2
	movapd 	[esp + mci1130_jyO], xmm3
	movapd 	[esp + mci1130_jzO], xmm4
	movapd 	[esp + mci1130_jxH1], xmm5
	movapd 	[esp + mci1130_jyH1], xmm6
	movapd 	[esp + mci1130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + mci1130_jxH2], xmm2
	movapd 	[esp + mci1130_jyH2], xmm3
	movapd 	[esp + mci1130_jzH2], xmm4
	
	movapd xmm0, [esp + mci1130_ixO]
	movapd xmm1, [esp + mci1130_iyO]
	movapd xmm2, [esp + mci1130_izO]
	movapd xmm3, [esp + mci1130_ixO]
	movapd xmm4, [esp + mci1130_iyO]
	movapd xmm5, [esp + mci1130_izO]
	subpd  xmm0, [esp + mci1130_jxO]
	subpd  xmm1, [esp + mci1130_jyO]
	subpd  xmm2, [esp + mci1130_jzO]
	subpd  xmm3, [esp + mci1130_jxH1]
	subpd  xmm4, [esp + mci1130_jyH1]
	subpd  xmm5, [esp + mci1130_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci1130_rsqOO], xmm0
	movapd [esp + mci1130_rsqOH1], xmm3

	movapd xmm0, [esp + mci1130_ixO]
	movapd xmm1, [esp + mci1130_iyO]
	movapd xmm2, [esp + mci1130_izO]
	movapd xmm3, [esp + mci1130_ixH1]
	movapd xmm4, [esp + mci1130_iyH1]
	movapd xmm5, [esp + mci1130_izH1]
	subpd  xmm0, [esp + mci1130_jxH2]
	subpd  xmm1, [esp + mci1130_jyH2]
	subpd  xmm2, [esp + mci1130_jzH2]
	subpd  xmm3, [esp + mci1130_jxO]
	subpd  xmm4, [esp + mci1130_jyO]
	subpd  xmm5, [esp + mci1130_jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci1130_rsqOH2], xmm0
	movapd [esp + mci1130_rsqH1O], xmm3

	movapd xmm0, [esp + mci1130_ixH1]
	movapd xmm1, [esp + mci1130_iyH1]
	movapd xmm2, [esp + mci1130_izH1]
	movapd xmm3, [esp + mci1130_ixH1]
	movapd xmm4, [esp + mci1130_iyH1]
	movapd xmm5, [esp + mci1130_izH1]
	subpd  xmm0, [esp + mci1130_jxH1]
	subpd  xmm1, [esp + mci1130_jyH1]
	subpd  xmm2, [esp + mci1130_jzH1]
	subpd  xmm3, [esp + mci1130_jxH2]
	subpd  xmm4, [esp + mci1130_jyH2]
	subpd  xmm5, [esp + mci1130_jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci1130_rsqH1H1], xmm0
	movapd [esp + mci1130_rsqH1H2], xmm3

	movapd xmm0, [esp + mci1130_ixH2]
	movapd xmm1, [esp + mci1130_iyH2]
	movapd xmm2, [esp + mci1130_izH2]
	movapd xmm3, [esp + mci1130_ixH2]
	movapd xmm4, [esp + mci1130_iyH2]
	movapd xmm5, [esp + mci1130_izH2]
	subpd  xmm0, [esp + mci1130_jxO]
	subpd  xmm1, [esp + mci1130_jyO]
	subpd  xmm2, [esp + mci1130_jzO]
	subpd  xmm3, [esp + mci1130_jxH1]
	subpd  xmm4, [esp + mci1130_jyH1]
	subpd  xmm5, [esp + mci1130_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + mci1130_rsqH2O], xmm0
	movapd [esp + mci1130_rsqH2H1], xmm4

	movapd xmm0, [esp + mci1130_ixH2]
	movapd xmm1, [esp + mci1130_iyH2]
	movapd xmm2, [esp + mci1130_izH2]
	subpd  xmm0, [esp + mci1130_jxH2]
	subpd  xmm1, [esp + mci1130_jyH2]
	subpd  xmm2, [esp + mci1130_jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + mci1130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci1130_half] ;# iter1 
	mulpd   xmm7, [esp + mci1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci1130_half] ;# rinv 
	mulpd   xmm5, [esp + mci1130_half] ;# rinv 
	movapd [esp + mci1130_rinvH2H2], xmm1
	movapd [esp + mci1130_rinvH2H1], xmm5

	movapd xmm0, [esp + mci1130_rsqOO]
	movapd xmm4, [esp + mci1130_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci1130_half] ;# iter1 of  
	mulpd   xmm7, [esp + mci1130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci1130_half] ;# rinv 
	mulpd   xmm5, [esp + mci1130_half] ;# rinv
	movapd [esp + mci1130_rinvOO], xmm1
	movapd [esp + mci1130_rinvOH1], xmm5

	movapd xmm0, [esp + mci1130_rsqOH2]
	movapd xmm4, [esp + mci1130_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci1130_half] ;# iter1 
	mulpd   xmm7, [esp + mci1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci1130_half] ;# rinv 
	mulpd   xmm5, [esp + mci1130_half] ;# rinv 
	movapd [esp + mci1130_rinvOH2], xmm1
	movapd [esp + mci1130_rinvH1O], xmm5

	movapd xmm0, [esp + mci1130_rsqH1H1]
	movapd xmm4, [esp + mci1130_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci1130_half] ;# iter1a 
	mulpd   xmm7, [esp + mci1130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci1130_half] ;# rinv 
	mulpd   xmm5, [esp + mci1130_half] ;# rinv 
	movapd [esp + mci1130_rinvH1H1], xmm1
	movapd [esp + mci1130_rinvH1H2], xmm5

	movapd xmm0, [esp + mci1130_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci1130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + mci1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci1130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + mci1130_half] ;# rinv 
	movapd [esp + mci1130_rinvH2O], xmm1

	;# start with OO interaction 
	movapd xmm0, [esp + mci1130_rinvOO]
	movapd xmm7, xmm0
	mulpd  xmm0, xmm0
	movapd xmm1, xmm0
	mulpd  xmm1, xmm0
	mulpd  xmm1, xmm0	;# xmm1=rinvsix 
	mulpd  xmm7, [esp + mci1130_qqOO]
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm1, [esp + mci1130_c6]	
	mulpd  xmm2, [esp + mci1130_c12]	
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addpd  xmm3, [esp + mci1130_vnbtot]
	movapd [esp + mci1130_vnbtot], xmm3
	addpd  xmm7, [esp + mci1130_vctot]

	;# other interactions 
	movapd xmm1, [esp + mci1130_rinvOH1]
	movapd xmm2, [esp + mci1130_rinvH1H1]
	
	addpd xmm1, [esp + mci1130_rinvOH2]
	addpd xmm2, [esp + mci1130_rinvH1H2]
	
	addpd xmm1, [esp + mci1130_rinvH1O]
	addpd xmm2, [esp + mci1130_rinvH2H1]

	addpd xmm1, [esp + mci1130_rinvH2O]
	addpd xmm2, [esp + mci1130_rinvH2H2]

	mulpd xmm1, [esp + mci1130_qqOH]
	mulpd xmm2, [esp + mci1130_qqHH]
	
	addpd xmm7, xmm1	
	addpd xmm7, xmm2

	movapd [esp + mci1130_vctot], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci1130_innerk],  2
	jl    mci1130_checksingle
	jmp   mci1130_unroll_loop
mci1130_checksingle:
	mov   edx, [esp + mci1130_innerk]
	and   edx, 1
	jnz   mci1130_dosingle
	jmp   mci1130_updateouterdata
mci1130_dosingle:
	mov   edx, [esp + mci1130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci1130_innerjjnr],  4	

	mov esi, [ebp + mci1130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + mci1130_jxO], xmm2
	movapd 	[esp + mci1130_jyO], xmm3
	movapd 	[esp + mci1130_jzO], xmm4
	movapd 	[esp + mci1130_jxH1], xmm5
	movapd 	[esp + mci1130_jyH1], xmm6
	movapd 	[esp + mci1130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + mci1130_jxH2], xmm2
	movapd 	[esp + mci1130_jyH2], xmm3
	movapd 	[esp + mci1130_jzH2], xmm4
	
	movapd xmm0, [esp + mci1130_ixO]
	movapd xmm1, [esp + mci1130_iyO]
	movapd xmm2, [esp + mci1130_izO]
	movapd xmm3, [esp + mci1130_ixO]
	movapd xmm4, [esp + mci1130_iyO]
	movapd xmm5, [esp + mci1130_izO]
	subsd  xmm0, [esp + mci1130_jxO]
	subsd  xmm1, [esp + mci1130_jyO]
	subsd  xmm2, [esp + mci1130_jzO]
	subsd  xmm3, [esp + mci1130_jxH1]
	subsd  xmm4, [esp + mci1130_jyH1]
	subsd  xmm5, [esp + mci1130_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci1130_rsqOO], xmm0
	movapd [esp + mci1130_rsqOH1], xmm3

	movapd xmm0, [esp + mci1130_ixO]
	movapd xmm1, [esp + mci1130_iyO]
	movapd xmm2, [esp + mci1130_izO]
	movapd xmm3, [esp + mci1130_ixH1]
	movapd xmm4, [esp + mci1130_iyH1]
	movapd xmm5, [esp + mci1130_izH1]
	subsd  xmm0, [esp + mci1130_jxH2]
	subsd  xmm1, [esp + mci1130_jyH2]
	subsd  xmm2, [esp + mci1130_jzH2]
	subsd  xmm3, [esp + mci1130_jxO]
	subsd  xmm4, [esp + mci1130_jyO]
	subsd  xmm5, [esp + mci1130_jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci1130_rsqOH2], xmm0
	movapd [esp + mci1130_rsqH1O], xmm3

	movapd xmm0, [esp + mci1130_ixH1]
	movapd xmm1, [esp + mci1130_iyH1]
	movapd xmm2, [esp + mci1130_izH1]
	movapd xmm3, [esp + mci1130_ixH1]
	movapd xmm4, [esp + mci1130_iyH1]
	movapd xmm5, [esp + mci1130_izH1]
	subsd  xmm0, [esp + mci1130_jxH1]
	subsd  xmm1, [esp + mci1130_jyH1]
	subsd  xmm2, [esp + mci1130_jzH1]
	subsd  xmm3, [esp + mci1130_jxH2]
	subsd  xmm4, [esp + mci1130_jyH2]
	subsd  xmm5, [esp + mci1130_jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci1130_rsqH1H1], xmm0
	movapd [esp + mci1130_rsqH1H2], xmm3

	movapd xmm0, [esp + mci1130_ixH2]
	movapd xmm1, [esp + mci1130_iyH2]
	movapd xmm2, [esp + mci1130_izH2]
	movapd xmm3, [esp + mci1130_ixH2]
	movapd xmm4, [esp + mci1130_iyH2]
	movapd xmm5, [esp + mci1130_izH2]
	subsd  xmm0, [esp + mci1130_jxO]
	subsd  xmm1, [esp + mci1130_jyO]
	subsd  xmm2, [esp + mci1130_jzO]
	subsd  xmm3, [esp + mci1130_jxH1]
	subsd  xmm4, [esp + mci1130_jyH1]
	subsd  xmm5, [esp + mci1130_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + mci1130_rsqH2O], xmm0
	movapd [esp + mci1130_rsqH2H1], xmm4

	movapd xmm0, [esp + mci1130_ixH2]
	movapd xmm1, [esp + mci1130_iyH2]
	movapd xmm2, [esp + mci1130_izH2]
	subsd  xmm0, [esp + mci1130_jxH2]
	subsd  xmm1, [esp + mci1130_jyH2]
	subsd  xmm2, [esp + mci1130_jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + mci1130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci1130_half] ;# iter1 
	mulsd   xmm7, [esp + mci1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci1130_half] ;# rinv 
	mulsd   xmm5, [esp + mci1130_half] ;# rinv 
	movapd [esp + mci1130_rinvH2H2], xmm1
	movapd [esp + mci1130_rinvH2H1], xmm5

	movapd xmm0, [esp + mci1130_rsqOO]
	movapd xmm4, [esp + mci1130_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci1130_half] ;# iter1 of  
	mulsd   xmm7, [esp + mci1130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci1130_half] ;# rinv 
	mulsd   xmm5, [esp + mci1130_half] ;# rinv
	movapd [esp + mci1130_rinvOO], xmm1
	movapd [esp + mci1130_rinvOH1], xmm5

	movapd xmm0, [esp + mci1130_rsqOH2]
	movapd xmm4, [esp + mci1130_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci1130_half] ;# iter1 
	mulsd   xmm7, [esp + mci1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci1130_half] ;# rinv 
	mulsd   xmm5, [esp + mci1130_half] ;# rinv 
	movapd [esp + mci1130_rinvOH2], xmm1
	movapd [esp + mci1130_rinvH1O], xmm5

	movapd xmm0, [esp + mci1130_rsqH1H1]
	movapd xmm4, [esp + mci1130_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci1130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci1130_half] ;# iter1a 
	mulsd   xmm7, [esp + mci1130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci1130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci1130_half] ;# rinv 
	mulsd   xmm5, [esp + mci1130_half] ;# rinv 
	movapd [esp + mci1130_rinvH1H1], xmm1
	movapd [esp + mci1130_rinvH1H2], xmm5

	movapd xmm0, [esp + mci1130_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci1130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + mci1130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci1130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + mci1130_half] ;# rinv 
	movapd [esp + mci1130_rinvH2O], xmm1

	;# start with OO interaction 
	movapd xmm0, [esp + mci1130_rinvOO]
	movapd xmm7, xmm0
	mulsd  xmm0, xmm0
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	;# xmm1=rinvsix 
	mulsd  xmm7, [esp + mci1130_qqOO]
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm1, [esp + mci1130_c6]	
	mulsd  xmm2, [esp + mci1130_c12]	
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addsd  xmm3, [esp + mci1130_vnbtot]
	movlpd [esp + mci1130_vnbtot], xmm3
	addsd  xmm7, [esp + mci1130_vctot]

	;# other interactions 
	movapd xmm1, [esp + mci1130_rinvOH1]
	movapd xmm2, [esp + mci1130_rinvH1H1]
	
	addsd xmm1, [esp + mci1130_rinvOH2]
	addsd xmm2, [esp + mci1130_rinvH1H2]
	
	addsd xmm1, [esp + mci1130_rinvH1O]
	addsd xmm2, [esp + mci1130_rinvH2H1]

	addsd xmm1, [esp + mci1130_rinvH2O]
	addsd xmm2, [esp + mci1130_rinvH2H2]

	mulsd xmm1, [esp + mci1130_qqOH]
	mulsd xmm2, [esp + mci1130_qqHH]
	
	addsd xmm7, xmm1	
	addsd xmm7, xmm2

	movlpd [esp + mci1130_vctot], xmm7

mci1130_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci1130_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci1130_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci1130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci1130_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci1130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + mci1130_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci1130_nri]
	dec ecx
	jecxz mci1130_end
	;# not last, iterate once more!  
	mov [ebp + mci1130_nri], ecx
	jmp mci1130_outer
mci1130_end:
	emms
	mov eax, [esp + mci1130_salign]
	add esp, eax
	add esp, 740
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl2120_sse2
.globl _mcinl2120_sse2
mcinl2120_sse2:	
_mcinl2120_sse2:	
.equiv		mci2120_nri,		8
.equiv		mci2120_iinr,		12
.equiv		mci2120_jindex,		16
.equiv		mci2120_jjnr,		20
.equiv		mci2120_shift,		24
.equiv		mci2120_shiftvec,	28
.equiv		mci2120_gid,		32
.equiv		mci2120_pos,		36		
.equiv		mci2120_charge,		40
.equiv		mci2120_facel,		44 ;# double 
.equiv		mci2120_Vc,			52			
.equiv		mci2120_argkrf,		56 ;# double 	
.equiv		mci2120_argcrf,		64 ;# double 	
.equiv		mci2120_type,		72
.equiv		mci2120_ntype,		76
.equiv		mci2120_nbfp,		80	
.equiv		mci2120_Vnb,		84	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2120_ixO,		0
.equiv		mci2120_iyO,		16
.equiv		mci2120_izO,		32
.equiv		mci2120_ixH1,		48
.equiv		mci2120_iyH1,		64
.equiv		mci2120_izH1,		80
.equiv		mci2120_ixH2,		96
.equiv		mci2120_iyH2,		112
.equiv		mci2120_izH2,		128
.equiv		mci2120_iqO,		144 
.equiv		mci2120_iqH,		160 
.equiv		mci2120_qqO,		176
.equiv		mci2120_qqH,		192
.equiv		mci2120_c6,			208
.equiv		mci2120_c12,		224		 
.equiv		mci2120_vctot,		240
.equiv		mci2120_vnbtot,		256
.equiv		mci2120_half,		272
.equiv		mci2120_three,		288
.equiv		mci2120_krf,		304
.equiv		mci2120_crf,		320
.equiv		mci2120_krsqO,		336
.equiv		mci2120_krsqH1,		352
.equiv		mci2120_krsqH2,		368	 		
.equiv		mci2120_is3,		384
.equiv		mci2120_ii3,		388
.equiv		mci2120_ntia,		392	
.equiv		mci2120_innerjjnr,	396
.equiv		mci2120_innerk,		400
.equiv		mci2120_salign,		404
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 408		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2120_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + mci2120_argkrf]
	movsd xmm6, [ebp + mci2120_argcrf]

	movapd [esp + mci2120_half],  xmm0
	movapd [esp + mci2120_three], xmm1
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + mci2120_krf], xmm5
	movapd [esp + mci2120_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci2120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2120_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + mci2120_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + mci2120_iqO], xmm3
	movapd [esp + mci2120_iqH], xmm4
	
	mov   edx, [ebp + mci2120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + mci2120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + mci2120_ntia], ecx		
.mci2120_outer:
	mov   eax, [ebp + mci2120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci2120_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci2120_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci2120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2120_pos]    ;# eax = base of pos[]  
	mov   [esp + mci2120_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2120_ixO], xmm3
	movapd [esp + mci2120_iyO], xmm4
	movapd [esp + mci2120_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2120_ixH1], xmm0
	movapd [esp + mci2120_iyH1], xmm1
	movapd [esp + mci2120_izH1], xmm2
	movapd [esp + mci2120_ixH2], xmm3
	movapd [esp + mci2120_iyH2], xmm4
	movapd [esp + mci2120_izH2], xmm5
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci2120_vctot], xmm4
	movapd [esp + mci2120_vnbtot], xmm4
	
	mov   eax, [ebp + mci2120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2120_pos]
	mov   eax, [ebp + mci2120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci2120_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2120_unroll_loop
	jmp   .mci2120_checksingle
.mci2120_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci2120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add dword ptr [esp + mci2120_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci2120_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + mci2120_iqO]
	mulpd  xmm4, [esp + mci2120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx

	movapd  [esp + mci2120_qqO], xmm3
	movapd  [esp + mci2120_qqH], xmm4
	
	mov esi, [ebp + mci2120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + mci2120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + mci2120_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + mci2120_c6], xmm4
	movapd [esp + mci2120_c12], xmm6
	
	mov esi, [ebp + mci2120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci2120_ixO]
	movapd xmm5, [esp + mci2120_iyO]
	movapd xmm6, [esp + mci2120_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci2120_ixH1]
	movapd xmm5, [esp + mci2120_iyH1]
	movapd xmm6, [esp + mci2120_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci2120_ixH2]
	movapd xmm4, [esp + mci2120_iyH2]
	movapd xmm5, [esp + mci2120_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulpd  xmm0, [esp + mci2120_krf]	
	mulpd  xmm1, [esp + mci2120_krf]	
	mulpd  xmm2, [esp + mci2120_krf]	

	movapd [esp + mci2120_krsqH2], xmm0
	movapd [esp + mci2120_krsqH1], xmm1
	movapd [esp + mci2120_krsqO], xmm2
		
	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci2120_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2120_three]
	subpd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci2120_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci2120_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2120_three]
	subpd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci2120_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci2120_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2120_three]
	subpd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci2120_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm1, [esp + mci2120_c6]
	mulpd  xmm2, [esp + mci2120_c12]
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addpd  xmm3, [esp + mci2120_vnbtot]

	movapd xmm0, xmm7
	movapd xmm1, [esp + mci2120_krsqO]
	addpd  xmm0, xmm1
	subpd  xmm0, [esp + mci2120_crf] ;# xmm0=rinv+ krsq-crf 
	mulpd  xmm0, [esp + mci2120_qqO]

	addpd  xmm0, [esp + mci2120_vctot]
	movapd [esp + mci2120_vnbtot], xmm3
	movapd [esp + mci2120_vctot], xmm0

	;# H1 interactions 
	movapd  xmm0, [esp + mci2120_krsqH1]
	addpd   xmm6, xmm0	;# xmm6=rinv+ krsq 
	subpd   xmm6, [esp + mci2120_crf]
	mulpd   xmm6, [esp + mci2120_qqH] ;# vcoul 	
	addpd  xmm6, [esp + mci2120_vctot]
	movapd [esp + mci2120_vctot], xmm6

	;# H2 interactions 
	movapd  xmm0, [esp + mci2120_krsqH2]
	addpd   xmm5, xmm0	;# xmm5=rinv+ krsq 
	subpd   xmm5, [esp + mci2120_crf]
	mulpd   xmm5, [esp + mci2120_qqH] ;# vcoul 
	addpd  xmm5, [esp + mci2120_vctot]
	movapd [esp + mci2120_vctot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci2120_innerk],  2
	jl    .mci2120_checksingle
	jmp   .mci2120_unroll_loop
.mci2120_checksingle:	
	mov   edx, [esp + mci2120_innerk]
	and   edx, 1
	jnz   .mci2120_dosingle
	jmp   .mci2120_updateouterdata
.mci2120_dosingle:
	mov   edx, [esp + mci2120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci2120_innerjjnr],  4	

	mov esi, [ebp + mci2120_charge]    ;# base of charge[] 
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + mci2120_iqO]
	mulpd  xmm4, [esp + mci2120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 

	movapd  [esp + mci2120_qqO], xmm3
	movapd  [esp + mci2120_qqH], xmm4
	
	mov esi, [ebp + mci2120_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + mci2120_nbfp]
	shl eax, 1	
	mov edi, [esp + mci2120_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + mci2120_c6], xmm4
	movapd [esp + mci2120_c12], xmm6
	
	mov esi, [ebp + mci2120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci2120_ixO]
	movapd xmm5, [esp + mci2120_iyO]
	movapd xmm6, [esp + mci2120_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci2120_ixH1]
	movapd xmm5, [esp + mci2120_iyH1]
	movapd xmm6, [esp + mci2120_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci2120_ixH2]
	movapd xmm4, [esp + mci2120_iyH2]
	movapd xmm5, [esp + mci2120_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulsd  xmm0, [esp + mci2120_krf]	
	mulsd  xmm1, [esp + mci2120_krf]	
	mulsd  xmm2, [esp + mci2120_krf]	

	movapd [esp + mci2120_krsqH2], xmm0
	movapd [esp + mci2120_krsqH1], xmm1
	movapd [esp + mci2120_krsqO], xmm2

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci2120_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2120_three]
	subsd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci2120_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci2120_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2120_three]
	subsd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci2120_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci2120_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci2120_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2120_three]
	subsd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci2120_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm1, [esp + mci2120_c6]
	mulsd  xmm2, [esp + mci2120_c12]
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addsd  xmm3, [esp + mci2120_vnbtot]

	movapd xmm0, xmm7
	movapd xmm1, [esp + mci2120_krsqO]
	addsd  xmm0, xmm1
	subsd  xmm0, [esp + mci2120_crf] ;# xmm0=rinv+ krsq-crf 
	mulsd  xmm0, [esp + mci2120_qqO]
	addsd  xmm0, [esp + mci2120_vctot]
	movlpd [esp + mci2120_vnbtot], xmm3
	movlpd [esp + mci2120_vctot], xmm0

	;# H1 interactions 
	movapd  xmm0, [esp + mci2120_krsqH1]
	addsd   xmm6, xmm0	;# xmm6=rinv+ krsq 
	subsd   xmm6, [esp + mci2120_crf]
	mulsd   xmm6, [esp + mci2120_qqH] ;# vcoul 
	addsd  xmm6, [esp + mci2120_vctot]
	movlpd [esp + mci2120_vctot], xmm6

	;# H2 interactions 
	movapd  xmm0, [esp + mci2120_krsqH2]
	addsd   xmm5, xmm0	;# xmm5=rinv+ krsq 
	subsd   xmm5, [esp + mci2120_crf]
	mulsd   xmm5, [esp + mci2120_qqH] ;# vcoul 
	addsd  xmm5, [esp + mci2120_vctot]
	movlpd [esp + mci2120_vctot], xmm5

.mci2120_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci2120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci2120_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci2120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci2120_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci2120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + mci2120_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2120_nri]
	dec ecx
	jecxz .mci2120_end
	;# not last, iterate once more!  
	mov [ebp + mci2120_nri], ecx
	jmp .mci2120_outer
.mci2120_end:
	emms
	mov eax, [esp + mci2120_salign]
	add esp, eax
	add esp, 408
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



	
.globl mcinl2130_sse2
.globl _mcinl2130_sse2
mcinl2130_sse2:	
_mcinl2130_sse2:	
.equiv		mci2130_nri,		8
.equiv		mci2130_iinr,		12
.equiv		mci2130_jindex,		16
.equiv		mci2130_jjnr,		20
.equiv		mci2130_shift,		24
.equiv		mci2130_shiftvec,	28
.equiv		mci2130_gid,		32
.equiv		mci2130_pos,		36		
.equiv		mci2130_charge,		40
.equiv		mci2130_facel,		44 ;# double 
.equiv		mci2130_Vc,			52			
.equiv		mci2130_argkrf,		56 ;# double 
.equiv		mci2130_argcrf,		64 ;# double 
.equiv		mci2130_type,		72
.equiv		mci2130_ntype,		76
.equiv		mci2130_nbfp,		80	
.equiv		mci2130_Vnb,		84
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2130_ixO,		0
.equiv		mci2130_iyO,		16
.equiv		mci2130_izO,		32
.equiv		mci2130_ixH1,		48
.equiv		mci2130_iyH1,		64
.equiv		mci2130_izH1,		80
.equiv		mci2130_ixH2,		96
.equiv		mci2130_iyH2,		112
.equiv		mci2130_izH2,		128
.equiv		mci2130_jxO,		144
.equiv		mci2130_jyO,		160
.equiv		mci2130_jzO,		176
.equiv		mci2130_jxH1,		192
.equiv		mci2130_jyH1,		208
.equiv		mci2130_jzH1,		224
.equiv		mci2130_jxH2,		240
.equiv		mci2130_jyH2,		256
.equiv		mci2130_jzH2,		272
.equiv		mci2130_qqOO,		288
.equiv		mci2130_qqOH,		304
.equiv		mci2130_qqHH,		320
.equiv		mci2130_c6,			336
.equiv		mci2130_c12,		352		 
.equiv		mci2130_vctot,		368
.equiv		mci2130_vnbtot,		384
.equiv		mci2130_half,		400
.equiv		mci2130_three,		416
.equiv		mci2130_rsqOO,		432
.equiv		mci2130_rsqOH1,		448
.equiv		mci2130_rsqOH2,		464
.equiv		mci2130_rsqH1O,		480
.equiv		mci2130_rsqH1H1,	496
.equiv		mci2130_rsqH1H2,	512
.equiv		mci2130_rsqH2O,		528
.equiv		mci2130_rsqH2H1,	544
.equiv		mci2130_rsqH2H2,	560
.equiv		mci2130_rinvOO,		576
.equiv		mci2130_rinvOH1,	592
.equiv		mci2130_rinvOH2,	608
.equiv		mci2130_rinvH1O,	624
.equiv		mci2130_rinvH1H1,	640
.equiv		mci2130_rinvH1H2,	656
.equiv		mci2130_rinvH2O,	672
.equiv		mci2130_rinvH2H1,	688
.equiv		mci2130_rinvH2H2,	704
.equiv		mci2130_krf,		720	
.equiv		mci2130_crf,		736
.equiv		mci2130_is3,		752
.equiv		mci2130_ii3,		756
.equiv		mci2130_innerjjnr,	760
.equiv		mci2130_innerk,		764
.equiv		mci2130_salign,		768
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 772		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2130_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + mci2130_argkrf]
	movsd xmm6, [ebp + mci2130_argcrf]
	
	movapd [esp + mci2130_half],  xmm0
	movapd [esp + mci2130_three], xmm1
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + mci2130_krf], xmm5
	movapd [esp + mci2130_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci2130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2130_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + mci2130_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2130_qqOO], xmm3
	movapd [esp + mci2130_qqOH], xmm4
	movapd [esp + mci2130_qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + mci2130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + mci2130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + mci2130_nbfp]
	movupd xmm0, [eax + edx*8] 
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + mci2130_c6], xmm0
	movapd [esp + mci2130_c12], xmm1

.mci2130_outer:
	mov   eax, [ebp + mci2130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci2130_shiftvec]   ;# eax = base of shiftvec[] 

	movlpd xmm0, [eax + ebx*8]
	movlpd xmm1, [eax + ebx*8 + 8]
	movlpd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci2130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2130_pos]    ;# eax = base of pos[]  
	mov   [esp + mci2130_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2130_ixO], xmm3
	movapd [esp + mci2130_iyO], xmm4
	movapd [esp + mci2130_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2130_ixH1], xmm0
	movapd [esp + mci2130_iyH1], xmm1
	movapd [esp + mci2130_izH1], xmm2
	movapd [esp + mci2130_ixH2], xmm3
	movapd [esp + mci2130_iyH2], xmm4
	movapd [esp + mci2130_izH2], xmm5

	;# clear vctot & vnbtot 
	xorpd xmm4, xmm4
	movapd [esp + mci2130_vctot], xmm4
	movapd [esp + mci2130_vnbtot], xmm4
	
	mov   eax, [ebp + mci2130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2130_pos]
	mov   eax, [ebp + mci2130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci2130_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2130_unroll_loop
	jmp   .mci2130_checksingle
.mci2130_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci2130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + mci2130_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci2130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + mci2130_jxO], xmm2
	movapd 	[esp + mci2130_jyO], xmm3
	movapd 	[esp + mci2130_jzO], xmm4
	movapd 	[esp + mci2130_jxH1], xmm5
	movapd 	[esp + mci2130_jyH1], xmm6
	movapd 	[esp + mci2130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + mci2130_jxH2], xmm2
	movapd 	[esp + mci2130_jyH2], xmm3
	movapd 	[esp + mci2130_jzH2], xmm4
	
	movapd xmm0, [esp + mci2130_ixO]
	movapd xmm1, [esp + mci2130_iyO]
	movapd xmm2, [esp + mci2130_izO]
	movapd xmm3, [esp + mci2130_ixO]
	movapd xmm4, [esp + mci2130_iyO]
	movapd xmm5, [esp + mci2130_izO]
	subpd  xmm0, [esp + mci2130_jxO]
	subpd  xmm1, [esp + mci2130_jyO]
	subpd  xmm2, [esp + mci2130_jzO]
	subpd  xmm3, [esp + mci2130_jxH1]
	subpd  xmm4, [esp + mci2130_jyH1]
	subpd  xmm5, [esp + mci2130_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci2130_rsqOO], xmm0
	movapd [esp + mci2130_rsqOH1], xmm3

	movapd xmm0, [esp + mci2130_ixO]
	movapd xmm1, [esp + mci2130_iyO]
	movapd xmm2, [esp + mci2130_izO]
	movapd xmm3, [esp + mci2130_ixH1]
	movapd xmm4, [esp + mci2130_iyH1]
	movapd xmm5, [esp + mci2130_izH1]
	subpd  xmm0, [esp + mci2130_jxH2]
	subpd  xmm1, [esp + mci2130_jyH2]
	subpd  xmm2, [esp + mci2130_jzH2]
	subpd  xmm3, [esp + mci2130_jxO]
	subpd  xmm4, [esp + mci2130_jyO]
	subpd  xmm5, [esp + mci2130_jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci2130_rsqOH2], xmm0
	movapd [esp + mci2130_rsqH1O], xmm3

	movapd xmm0, [esp + mci2130_ixH1]
	movapd xmm1, [esp + mci2130_iyH1]
	movapd xmm2, [esp + mci2130_izH1]
	movapd xmm3, [esp + mci2130_ixH1]
	movapd xmm4, [esp + mci2130_iyH1]
	movapd xmm5, [esp + mci2130_izH1]
	subpd  xmm0, [esp + mci2130_jxH1]
	subpd  xmm1, [esp + mci2130_jyH1]
	subpd  xmm2, [esp + mci2130_jzH1]
	subpd  xmm3, [esp + mci2130_jxH2]
	subpd  xmm4, [esp + mci2130_jyH2]
	subpd  xmm5, [esp + mci2130_jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci2130_rsqH1H1], xmm0
	movapd [esp + mci2130_rsqH1H2], xmm3

	movapd xmm0, [esp + mci2130_ixH2]
	movapd xmm1, [esp + mci2130_iyH2]
	movapd xmm2, [esp + mci2130_izH2]
	movapd xmm3, [esp + mci2130_ixH2]
	movapd xmm4, [esp + mci2130_iyH2]
	movapd xmm5, [esp + mci2130_izH2]
	subpd  xmm0, [esp + mci2130_jxO]
	subpd  xmm1, [esp + mci2130_jyO]
	subpd  xmm2, [esp + mci2130_jzO]
	subpd  xmm3, [esp + mci2130_jxH1]
	subpd  xmm4, [esp + mci2130_jyH1]
	subpd  xmm5, [esp + mci2130_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + mci2130_rsqH2O], xmm0
	movapd [esp + mci2130_rsqH2H1], xmm4

	movapd xmm0, [esp + mci2130_ixH2]
	movapd xmm1, [esp + mci2130_iyH2]
	movapd xmm2, [esp + mci2130_izH2]
	subpd  xmm0, [esp + mci2130_jxH2]
	subpd  xmm1, [esp + mci2130_jyH2]
	subpd  xmm2, [esp + mci2130_jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + mci2130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci2130_half] ;# iter1 
	mulpd   xmm7, [esp + mci2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci2130_half] ;# rinv 
	mulpd   xmm5, [esp + mci2130_half] ;# rinv 
	movapd [esp + mci2130_rinvH2H2], xmm1
	movapd [esp + mci2130_rinvH2H1], xmm5

	movapd xmm0, [esp + mci2130_rsqOO]
	movapd xmm4, [esp + mci2130_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci2130_half] ;# iter1 of  
	mulpd   xmm7, [esp + mci2130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci2130_half] ;# rinv 
	mulpd   xmm5, [esp + mci2130_half] ;# rinv
	movapd [esp + mci2130_rinvOO], xmm1
	movapd [esp + mci2130_rinvOH1], xmm5

	movapd xmm0, [esp + mci2130_rsqOH2]
	movapd xmm4, [esp + mci2130_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci2130_half] ;# iter1 
	mulpd   xmm7, [esp + mci2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci2130_half] ;# rinv 
	mulpd   xmm5, [esp + mci2130_half] ;# rinv 
	movapd [esp + mci2130_rinvOH2], xmm1
	movapd [esp + mci2130_rinvH1O], xmm5

	movapd xmm0, [esp + mci2130_rsqH1H1]
	movapd xmm4, [esp + mci2130_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci2130_half] ;# iter1a 
	mulpd   xmm7, [esp + mci2130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci2130_half] ;# rinv 
	mulpd   xmm5, [esp + mci2130_half] ;# rinv 
	movapd [esp + mci2130_rinvH1H1], xmm1
	movapd [esp + mci2130_rinvH1H2], xmm5

	movapd xmm0, [esp + mci2130_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci2130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + mci2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci2130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + mci2130_half] ;# rinv 
	movapd [esp + mci2130_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + mci2130_rinvOO]
	movapd xmm7, xmm0		;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]
	mulpd  xmm0, xmm0		;# xmm0=rinvsq 
	movapd xmm1, xmm0
	mulpd  xmm1, xmm0		;# rinvsq*rinvsq 
	mulpd  xmm1, xmm0		;# xmm1=rinvsix 
	mulpd  xmm5, [esp + mci2130_rsqOO]	;# xmm5=krsq 
	movapd xmm6, xmm5		;# krsq 
	addpd  xmm6, xmm7		;# xmm6=rinv+ krsq 
	subpd  xmm6, [esp + mci2130_crf]	;# rinv+krsq-crf 
	
	mulpd  xmm6, [esp + mci2130_qqOO]	;# xmm6=voul=qq*(rinv+ krsq-crf) 
	
	movapd xmm2, xmm1		;# rinv6 
	mulpd  xmm2, xmm2		;# xmm2=rinvtwelve 
	mulpd  xmm1, [esp + mci2130_c6]	;# c6*rinv6 
	mulpd  xmm2, [esp + mci2130_c12]	;# c12*rinv12 
	movapd xmm3, xmm2		;# c12*rinv12 
	subpd  xmm3, xmm1		;# vnb12-vnb6 
	addpd  xmm3, [esp + mci2130_vnbtot]
	movapd [esp + mci2130_vnbtot], xmm3	
	addpd  xmm6, [esp + mci2130_vctot] ;# local vctot summation variable 

	;# O-H1 interaction 
	movapd xmm0, [esp + mci2130_rinvOH1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + mci2130_rsqOH1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulpd  xmm0, xmm0
	subpd  xmm4, [esp + mci2130_crf]
	mulpd  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addpd  xmm6, xmm4	;# add to local vctot 

	;# O-H2 interaction  
	movapd xmm0, [esp + mci2130_rinvOH2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + mci2130_rsqOH2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + mci2130_crf]
	mulpd  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addpd  xmm6, xmm4	;# add to local vctot 

	;# H1-O interaction 
	movapd xmm0, [esp + mci2130_rinvH1O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + mci2130_rsqH1O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + mci2130_crf]
	mulpd  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addpd  xmm6, xmm4	;# add to local vctot 

	;# H1-H1 interaction 
	movapd xmm0, [esp + mci2130_rinvH1H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + mci2130_rsqH1H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + mci2130_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addpd  xmm6, xmm4	;# add to local vctot 

	;# H1-H2 interaction 
	movapd xmm0, [esp + mci2130_rinvH1H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + mci2130_rsqH1H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + mci2130_crf]
	mulpd  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addpd  xmm6, xmm4	;# add to local vctot 

	;# H2-O interaction 
	movapd xmm0, [esp + mci2130_rinvH2O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + mci2130_rsqH2O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + mci2130_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addpd  xmm6, xmm4	;# add to local vctot 

	;# H2-H1 interaction 
	movapd xmm0, [esp + mci2130_rinvH2H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + mci2130_rsqH2H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + mci2130_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addpd  xmm6, xmm4	;# add to local vctot 

	;# H2-H2 interaction 
	movapd xmm0, [esp + mci2130_rinvH2H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + mci2130_rsqH2H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subpd  xmm4, [esp + mci2130_crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addpd  xmm6, xmm4	;# add to local vctot 
	movapd [esp + mci2130_vctot], xmm6
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci2130_innerk],  2
	jl    .mci2130_checksingle
	jmp   .mci2130_unroll_loop
.mci2130_checksingle:
	mov   edx, [esp + mci2130_innerk]
	and   edx, 1
	jnz   .mci2130_dosingle
	jmp   .mci2130_updateouterdata
.mci2130_dosingle:
	mov   edx, [esp + mci2130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]
	
	mov esi, [ebp + mci2130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + mci2130_jxO], xmm2
	movapd 	[esp + mci2130_jyO], xmm3
	movapd 	[esp + mci2130_jzO], xmm4
	movapd 	[esp + mci2130_jxH1], xmm5
	movapd 	[esp + mci2130_jyH1], xmm6
	movapd 	[esp + mci2130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + mci2130_jxH2], xmm2
	movapd 	[esp + mci2130_jyH2], xmm3
	movapd 	[esp + mci2130_jzH2], xmm4
	
	movapd xmm0, [esp + mci2130_ixO]
	movapd xmm1, [esp + mci2130_iyO]
	movapd xmm2, [esp + mci2130_izO]
	movapd xmm3, [esp + mci2130_ixO]
	movapd xmm4, [esp + mci2130_iyO]
	movapd xmm5, [esp + mci2130_izO]
	subsd  xmm0, [esp + mci2130_jxO]
	subsd  xmm1, [esp + mci2130_jyO]
	subsd  xmm2, [esp + mci2130_jzO]
	subsd  xmm3, [esp + mci2130_jxH1]
	subsd  xmm4, [esp + mci2130_jyH1]
	subsd  xmm5, [esp + mci2130_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci2130_rsqOO], xmm0
	movapd [esp + mci2130_rsqOH1], xmm3

	movapd xmm0, [esp + mci2130_ixO]
	movapd xmm1, [esp + mci2130_iyO]
	movapd xmm2, [esp + mci2130_izO]
	movapd xmm3, [esp + mci2130_ixH1]
	movapd xmm4, [esp + mci2130_iyH1]
	movapd xmm5, [esp + mci2130_izH1]
	subsd  xmm0, [esp + mci2130_jxH2]
	subsd  xmm1, [esp + mci2130_jyH2]
	subsd  xmm2, [esp + mci2130_jzH2]
	subsd  xmm3, [esp + mci2130_jxO]
	subsd  xmm4, [esp + mci2130_jyO]
	subsd  xmm5, [esp + mci2130_jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci2130_rsqOH2], xmm0
	movapd [esp + mci2130_rsqH1O], xmm3

	movapd xmm0, [esp + mci2130_ixH1]
	movapd xmm1, [esp + mci2130_iyH1]
	movapd xmm2, [esp + mci2130_izH1]
	movapd xmm3, [esp + mci2130_ixH1]
	movapd xmm4, [esp + mci2130_iyH1]
	movapd xmm5, [esp + mci2130_izH1]
	subsd  xmm0, [esp + mci2130_jxH1]
	subsd  xmm1, [esp + mci2130_jyH1]
	subsd  xmm2, [esp + mci2130_jzH1]
	subsd  xmm3, [esp + mci2130_jxH2]
	subsd  xmm4, [esp + mci2130_jyH2]
	subsd  xmm5, [esp + mci2130_jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci2130_rsqH1H1], xmm0
	movapd [esp + mci2130_rsqH1H2], xmm3

	movapd xmm0, [esp + mci2130_ixH2]
	movapd xmm1, [esp + mci2130_iyH2]
	movapd xmm2, [esp + mci2130_izH2]
	movapd xmm3, [esp + mci2130_ixH2]
	movapd xmm4, [esp + mci2130_iyH2]
	movapd xmm5, [esp + mci2130_izH2]
	subsd  xmm0, [esp + mci2130_jxO]
	subsd  xmm1, [esp + mci2130_jyO]
	subsd  xmm2, [esp + mci2130_jzO]
	subsd  xmm3, [esp + mci2130_jxH1]
	subsd  xmm4, [esp + mci2130_jyH1]
	subsd  xmm5, [esp + mci2130_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + mci2130_rsqH2O], xmm0
	movapd [esp + mci2130_rsqH2H1], xmm4

	movapd xmm0, [esp + mci2130_ixH2]
	movapd xmm1, [esp + mci2130_iyH2]
	movapd xmm2, [esp + mci2130_izH2]
	subsd  xmm0, [esp + mci2130_jxH2]
	subsd  xmm1, [esp + mci2130_jyH2]
	subsd  xmm2, [esp + mci2130_jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + mci2130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci2130_half] ;# iter1 
	mulsd   xmm7, [esp + mci2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci2130_half] ;# rinv 
	mulsd   xmm5, [esp + mci2130_half] ;# rinv 
	movapd [esp + mci2130_rinvH2H2], xmm1
	movapd [esp + mci2130_rinvH2H1], xmm5

	movapd xmm0, [esp + mci2130_rsqOO]
	movapd xmm4, [esp + mci2130_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci2130_half] ;# iter1 of  
	mulsd   xmm7, [esp + mci2130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci2130_half] ;# rinv 
	mulsd   xmm5, [esp + mci2130_half] ;# rinv
	movapd [esp + mci2130_rinvOO], xmm1
	movapd [esp + mci2130_rinvOH1], xmm5

	movapd xmm0, [esp + mci2130_rsqOH2]
	movapd xmm4, [esp + mci2130_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci2130_half] ;# iter1 
	mulsd   xmm7, [esp + mci2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci2130_half] ;# rinv 
	mulsd   xmm5, [esp + mci2130_half] ;# rinv 
	movapd [esp + mci2130_rinvOH2], xmm1
	movapd [esp + mci2130_rinvH1O], xmm5

	movapd xmm0, [esp + mci2130_rsqH1H1]
	movapd xmm4, [esp + mci2130_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci2130_half] ;# iter1a 
	mulsd   xmm7, [esp + mci2130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci2130_half] ;# rinv 
	mulsd   xmm5, [esp + mci2130_half] ;# rinv 
	movapd [esp + mci2130_rinvH1H1], xmm1
	movapd [esp + mci2130_rinvH1H2], xmm5

	movapd xmm0, [esp + mci2130_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci2130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + mci2130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci2130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + mci2130_half] ;# rinv 
	movapd [esp + mci2130_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + mci2130_rinvOO]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]
	mulsd  xmm0, xmm0
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	;# xmm1=rinvsix 
	mulsd  xmm5, [esp + mci2130_rsqOO] ;# xmm5=krsq 
	movapd xmm6, xmm5
	addsd  xmm6, xmm7	;# xmm6=rinv+ krsq 
	subsd  xmm6, [esp + mci2130_crf]
	
	mulsd  xmm6, [esp + mci2130_qqOO] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm1, [esp + mci2130_c6]	
	mulsd  xmm2, [esp + mci2130_c12]	
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addsd  xmm3, [esp + mci2130_vnbtot]
	movlpd [esp + mci2130_vnbtot], xmm3
	addsd  xmm6, [esp + mci2130_vctot] ;# local vctot summation variable 

	;# O-H1 interaction 
	movapd xmm0, [esp + mci2130_rinvOH1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + mci2130_rsqOH1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + mci2130_crf]
	mulsd  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addsd  xmm6, xmm4	;# add to local vctot 

	;# O-H2 interaction  
	movapd xmm0, [esp + mci2130_rinvOH2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + mci2130_rsqOH2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + mci2130_crf]
	mulsd  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addsd  xmm6, xmm4	;# add to local vctot 

	;# H1-O interaction 
	movapd xmm0, [esp + mci2130_rinvH1O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + mci2130_rsqH1O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + mci2130_crf]
	mulsd  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addsd  xmm6, xmm4	;# add to local vctot 

	;# H1-H1 interaction 
	movapd xmm0, [esp + mci2130_rinvH1H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + mci2130_rsqH1H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + mci2130_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addsd  xmm6, xmm4	;# add to local vctot 

	;# H1-H2 interaction 
	movapd xmm0, [esp + mci2130_rinvH1H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + mci2130_rsqH1H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + mci2130_crf]
	mulsd  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addsd  xmm6, xmm4	;# add to local vctot 

	;# H2-O interaction 
	movapd xmm0, [esp + mci2130_rinvH2O]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + mci2130_rsqH2O] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + mci2130_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addsd  xmm6, xmm4	;# add to local vctot 

	;# H2-H1 interaction 
	movapd xmm0, [esp + mci2130_rinvH2H1]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + mci2130_rsqH2H1] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + mci2130_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addsd  xmm6, xmm4	;# add to local vctot 

	;# H2-H2 interaction 
	movapd xmm0, [esp + mci2130_rinvH2H2]
	movapd xmm7, xmm0	;# xmm7=rinv 
	movapd xmm5, [esp + mci2130_krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + mci2130_rsqH2H2] ;# xmm5=krsq 
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subsd  xmm4, [esp + mci2130_crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addsd  xmm6, xmm4	;# add to local vctot 
	movlpd [esp + mci2130_vctot], xmm6
	
.mci2130_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci2130_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci2130_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci2130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci2130_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci2130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + mci2130_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2130_nri]
	dec ecx
	jecxz .mci2130_end
	;# not last, iterate once more!  
	mov [ebp + mci2130_nri], ecx
	jmp .mci2130_outer
.mci2130_end:
	emms
	mov eax, [esp + mci2130_salign]
	add esp, eax
	add esp, 772
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	

.globl mcinl2020_sse2
.globl _mcinl2020_sse2
mcinl2020_sse2:	
_mcinl2020_sse2:	
.equiv		mci2020_nri,		8
.equiv		mci2020_iinr,		12
.equiv		mci2020_jindex,		16
.equiv		mci2020_jjnr,		20
.equiv		mci2020_shift,		24
.equiv		mci2020_shiftvec,	28
.equiv		mci2020_gid,		32
.equiv		mci2020_pos,		36		
.equiv		mci2020_charge,		40
.equiv		mci2020_facel,		44 ;# double 
.equiv		mci2020_Vc,			52			
.equiv		mci2020_argkrf,		56 ;# double 
.equiv		mci2020_argcrf,		64 ;# double 	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2020_ixO,		0
.equiv		mci2020_iyO,		16
.equiv		mci2020_izO,		32
.equiv		mci2020_ixH1,		48
.equiv		mci2020_iyH1,		64
.equiv		mci2020_izH1,		80
.equiv		mci2020_ixH2,		96
.equiv		mci2020_iyH2,		112
.equiv		mci2020_izH2,		128
.equiv		mci2020_iqO,		144 
.equiv		mci2020_iqH,		160 
.equiv		mci2020_qqO,		176
.equiv		mci2020_qqH,		192
.equiv		mci2020_vctot,		208
.equiv		mci2020_half,		224
.equiv		mci2020_three,		240
.equiv		mci2020_krf,		256
.equiv		mci2020_crf,		272
.equiv		mci2020_krsqO,		288
.equiv		mci2020_krsqH1,		304
.equiv		mci2020_krsqH2,		320	 		
.equiv		mci2020_is3,		336
.equiv		mci2020_ii3,		340
.equiv		mci2020_innerjjnr,	344
.equiv		mci2020_innerk,		348
.equiv		mci2020_salign,		352
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 356		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2020_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + mci2020_argkrf]
	movsd xmm6, [ebp + mci2020_argcrf]

	movapd [esp + mci2020_half],  xmm0
	movapd [esp + mci2020_three], xmm1
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + mci2020_krf], xmm5
	movapd [esp + mci2020_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci2020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2020_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + mci2020_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + mci2020_iqO], xmm3
	movapd [esp + mci2020_iqH], xmm4
			
.mci2020_outer:
	mov   eax, [ebp + mci2020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci2020_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci2020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2020_pos]    ;# eax = base of pos[]  
	mov   [esp + mci2020_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2020_ixO], xmm3
	movapd [esp + mci2020_iyO], xmm4
	movapd [esp + mci2020_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2020_ixH1], xmm0
	movapd [esp + mci2020_iyH1], xmm1
	movapd [esp + mci2020_izH1], xmm2
	movapd [esp + mci2020_ixH2], xmm3
	movapd [esp + mci2020_iyH2], xmm4
	movapd [esp + mci2020_izH2], xmm5
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci2020_vctot], xmm4
	
	mov   eax, [ebp + mci2020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2020_pos]
	mov   eax, [ebp + mci2020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci2020_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2020_unroll_loop
	jmp   .mci2020_checksingle
.mci2020_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci2020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add dword ptr [esp + mci2020_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci2020_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + mci2020_iqO]
	mulpd  xmm4, [esp + mci2020_iqH]
	movapd  [esp + mci2020_qqO], xmm3
	movapd  [esp + mci2020_qqH], xmm4	

	mov esi, [ebp + mci2020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci2020_ixO]
	movapd xmm5, [esp + mci2020_iyO]
	movapd xmm6, [esp + mci2020_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci2020_ixH1]
	movapd xmm5, [esp + mci2020_iyH1]
	movapd xmm6, [esp + mci2020_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci2020_ixH2]
	movapd xmm4, [esp + mci2020_iyH2]
	movapd xmm5, [esp + mci2020_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulpd  xmm0, [esp + mci2020_krf]	
	mulpd  xmm1, [esp + mci2020_krf]	
	mulpd  xmm2, [esp + mci2020_krf]	

	movapd [esp + mci2020_krsqH2], xmm0
	movapd [esp + mci2020_krsqH1], xmm1
	movapd [esp + mci2020_krsqO], xmm2
	
	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci2020_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2020_three]
	subpd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci2020_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci2020_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2020_three]
	subpd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci2020_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci2020_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2020_three]
	subpd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci2020_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm0, [esp + mci2020_krsqO]
	addpd   xmm7, xmm0	;# xmm7=rinv+ krsq 
	subpd   xmm7, [esp + mci2020_crf]
	mulpd   xmm7, [esp + mci2020_qqO] ;# vcoul 	
	addpd  xmm7, [esp + mci2020_vctot]

	;# H1 interactions 
	movapd  xmm0, [esp + mci2020_krsqH1]
	addpd   xmm6, xmm0	;# xmm6=rinv+ krsq 
	subpd   xmm6, [esp + mci2020_crf]
	mulpd   xmm6, [esp + mci2020_qqH] ;# vcoul 
	addpd  xmm6, xmm7

	;# H2 interactions 
	movapd  xmm0, [esp + mci2020_krsqH2]
	addpd   xmm5, xmm0	;# xmm5=rinv+ krsq 
	subpd   xmm5, [esp + mci2020_crf]
	mulpd   xmm5, [esp + mci2020_qqH] ;# vcoul 
	addpd  xmm5, xmm6
	movapd [esp + mci2020_vctot], xmm5
		
	;# should we do one more iteration? 
	sub dword ptr [esp + mci2020_innerk],  2
	jl    .mci2020_checksingle
	jmp   .mci2020_unroll_loop
.mci2020_checksingle:	
	mov   edx, [esp + mci2020_innerk]
	and   edx, 1
	jnz   .mci2020_dosingle
	jmp   .mci2020_updateouterdata
.mci2020_dosingle:
	mov   edx, [esp + mci2020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci2020_innerjjnr],  4	

	mov esi, [ebp + mci2020_charge]    ;# base of charge[] 
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + mci2020_iqO]
	mulpd  xmm4, [esp + mci2020_iqH]
	movapd  [esp + mci2020_qqO], xmm3
	movapd  [esp + mci2020_qqH], xmm4
	
	mov esi, [ebp + mci2020_pos]       ;# base of pos[] 
	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci2020_ixO]
	movapd xmm5, [esp + mci2020_iyO]
	movapd xmm6, [esp + mci2020_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci2020_ixH1]
	movapd xmm5, [esp + mci2020_iyH1]
	movapd xmm6, [esp + mci2020_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci2020_ixH2]
	movapd xmm4, [esp + mci2020_iyH2]
	movapd xmm5, [esp + mci2020_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 
	
	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulsd  xmm0, [esp + mci2020_krf]	
	mulsd  xmm1, [esp + mci2020_krf]	
	mulsd  xmm2, [esp + mci2020_krf]	

	movapd [esp + mci2020_krsqH2], xmm0
	movapd [esp + mci2020_krsqH1], xmm1
	movapd [esp + mci2020_krsqO], xmm2
	
	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci2020_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm7, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2020_three]
	subsd xmm4, xmm7	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci2020_half] ;# rinv 
	movapd  xmm7, xmm4	;# rinvO in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci2020_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm6, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2020_three]
	subsd xmm4, xmm6	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci2020_half] ;# rinv 
	movapd  xmm6, xmm4	;# rinvH1 in xmm6 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci2020_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci2020_half] ;# iter1 ( new lu) 

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm5, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci2020_three]
	subsd xmm4, xmm5	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci2020_half] ;# rinv 
	movapd  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movapd  xmm0, [esp + mci2020_krsqO]
	addsd   xmm7, xmm0	;# xmm7=rinv+ krsq 
	subsd   xmm7, [esp + mci2020_crf]
	mulsd   xmm7, [esp + mci2020_qqO] ;# vcoul 	
	addsd  xmm7, [esp + mci2020_vctot]

	;# H1 interactions 
	movapd  xmm0, [esp + mci2020_krsqH1]
	addsd   xmm6, xmm0	;# xmm6=rinv+ krsq 
	subsd   xmm6, [esp + mci2020_crf]
	mulsd   xmm6, [esp + mci2020_qqH] ;# vcoul 
	addsd  xmm6, xmm7

	;# H2 interactions 
	movapd  xmm0, [esp + mci2020_krsqH2]
	addsd   xmm5, xmm0	;# xmm5=rinv+ krsq 
	subsd   xmm5, [esp + mci2020_crf]
	mulsd   xmm5, [esp + mci2020_qqH] ;# vcoul 
	addsd  xmm5, xmm6
	movlpd [esp + mci2020_vctot], xmm5
		
.mci2020_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci2020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci2020_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci2020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci2020_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2020_nri]
	dec ecx
	jecxz .mci2020_end
	;# not last, iterate once more!  
	mov [ebp + mci2020_nri], ecx
	jmp .mci2020_outer
.mci2020_end:
	emms
	mov eax, [esp + mci2020_salign]
	add esp, eax
	add esp, 356
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl mcinl2030_sse2
.globl _mcinl2030_sse2
mcinl2030_sse2:	
_mcinl2030_sse2:	
.equiv		mci2030_nri,		8
.equiv		mci2030_iinr,		12
.equiv		mci2030_jindex,		16
.equiv		mci2030_jjnr,		20
.equiv		mci2030_shift,		24
.equiv		mci2030_shiftvec,	28
.equiv		mci2030_gid,		32
.equiv		mci2030_pos,		36		
.equiv		mci2030_charge,		40
.equiv		mci2030_facel,		44 ;# double 
.equiv		mci2030_Vc,			52
.equiv		mci2030_argkrf,		56 ;# double 
.equiv		mci2030_argcrf,		64 ;# double 
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2030_ixO,		0
.equiv		mci2030_iyO,		16
.equiv		mci2030_izO,		32
.equiv		mci2030_ixH1,		48
.equiv		mci2030_iyH1,		64
.equiv		mci2030_izH1,		80
.equiv		mci2030_ixH2,		96
.equiv		mci2030_iyH2,		112
.equiv		mci2030_izH2,		128
.equiv		mci2030_jxO,		144
.equiv		mci2030_jyO,		160
.equiv		mci2030_jzO,		176
.equiv		mci2030_jxH1,		192
.equiv		mci2030_jyH1,		208
.equiv		mci2030_jzH1,		224
.equiv		mci2030_jxH2,		240
.equiv		mci2030_jyH2,		256
.equiv		mci2030_jzH2,		272
.equiv		mci2030_qqOO,		288
.equiv		mci2030_qqOH,		304
.equiv		mci2030_qqHH,		320
.equiv		mci2030_vctot,		336
.equiv		mci2030_half,		352
.equiv		mci2030_three,		368
.equiv		mci2030_rsqOO,		384
.equiv		mci2030_rsqOH1,		400
.equiv		mci2030_rsqOH2,		416
.equiv		mci2030_rsqH1O,		432
.equiv		mci2030_rsqH1H1,	448
.equiv		mci2030_rsqH1H2,	464
.equiv		mci2030_rsqH2O,		480
.equiv		mci2030_rsqH2H1,	496
.equiv		mci2030_rsqH2H2,	512
.equiv		mci2030_rinvOO,		528
.equiv		mci2030_rinvOH1,	544
.equiv		mci2030_rinvOH2,	560
.equiv		mci2030_rinvH1O,	576
.equiv		mci2030_rinvH1H1,	592
.equiv		mci2030_rinvH1H2,	608
.equiv		mci2030_rinvH2O,	624
.equiv		mci2030_rinvH2H1,	640
.equiv		mci2030_rinvH2H2,	656
.equiv		mci2030_krf,		672	
.equiv		mci2030_crf,		688
.equiv		mci2030_is3,		704
.equiv		mci2030_ii3,		708
.equiv		mci2030_innerjjnr,	712
.equiv		mci2030_innerk,		716
.equiv		mci2030_salign,		720
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 724		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2030_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + mci2030_argkrf]
	movsd xmm6, [ebp + mci2030_argcrf]
	
	movapd [esp + mci2030_half],  xmm0
	movapd [esp + mci2030_three], xmm1
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + mci2030_krf], xmm5
	movapd [esp + mci2030_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci2030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2030_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + mci2030_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2030_qqOO], xmm3
	movapd [esp + mci2030_qqOH], xmm4
	movapd [esp + mci2030_qqHH], xmm5
	
.mci2030_outer:
	mov   eax, [ebp + mci2030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci2030_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci2030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2030_pos]    ;# eax = base of pos[]  
	mov   [esp + mci2030_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2030_ixO], xmm3
	movapd [esp + mci2030_iyO], xmm4
	movapd [esp + mci2030_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci2030_ixH1], xmm0
	movapd [esp + mci2030_iyH1], xmm1
	movapd [esp + mci2030_izH1], xmm2
	movapd [esp + mci2030_ixH2], xmm3
	movapd [esp + mci2030_iyH2], xmm4
	movapd [esp + mci2030_izH2], xmm5

	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci2030_vctot], xmm4
	
	mov   eax, [ebp + mci2030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2030_pos]
	mov   eax, [ebp + mci2030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci2030_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2030_unroll_loop
	jmp   .mci2030_checksingle
.mci2030_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci2030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + mci2030_innerjjnr],  8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci2030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + mci2030_jxO], xmm2
	movapd 	[esp + mci2030_jyO], xmm3
	movapd 	[esp + mci2030_jzO], xmm4
	movapd 	[esp + mci2030_jxH1], xmm5
	movapd 	[esp + mci2030_jyH1], xmm6
	movapd 	[esp + mci2030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + mci2030_jxH2], xmm2
	movapd 	[esp + mci2030_jyH2], xmm3
	movapd 	[esp + mci2030_jzH2], xmm4
	
	movapd xmm0, [esp + mci2030_ixO]
	movapd xmm1, [esp + mci2030_iyO]
	movapd xmm2, [esp + mci2030_izO]
	movapd xmm3, [esp + mci2030_ixO]
	movapd xmm4, [esp + mci2030_iyO]
	movapd xmm5, [esp + mci2030_izO]
	subpd  xmm0, [esp + mci2030_jxO]
	subpd  xmm1, [esp + mci2030_jyO]
	subpd  xmm2, [esp + mci2030_jzO]
	subpd  xmm3, [esp + mci2030_jxH1]
	subpd  xmm4, [esp + mci2030_jyH1]
	subpd  xmm5, [esp + mci2030_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci2030_rsqOO], xmm0
	movapd [esp + mci2030_rsqOH1], xmm3

	movapd xmm0, [esp + mci2030_ixO]
	movapd xmm1, [esp + mci2030_iyO]
	movapd xmm2, [esp + mci2030_izO]
	movapd xmm3, [esp + mci2030_ixH1]
	movapd xmm4, [esp + mci2030_iyH1]
	movapd xmm5, [esp + mci2030_izH1]
	subpd  xmm0, [esp + mci2030_jxH2]
	subpd  xmm1, [esp + mci2030_jyH2]
	subpd  xmm2, [esp + mci2030_jzH2]
	subpd  xmm3, [esp + mci2030_jxO]
	subpd  xmm4, [esp + mci2030_jyO]
	subpd  xmm5, [esp + mci2030_jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci2030_rsqOH2], xmm0
	movapd [esp + mci2030_rsqH1O], xmm3

	movapd xmm0, [esp + mci2030_ixH1]
	movapd xmm1, [esp + mci2030_iyH1]
	movapd xmm2, [esp + mci2030_izH1]
	movapd xmm3, [esp + mci2030_ixH1]
	movapd xmm4, [esp + mci2030_iyH1]
	movapd xmm5, [esp + mci2030_izH1]
	subpd  xmm0, [esp + mci2030_jxH1]
	subpd  xmm1, [esp + mci2030_jyH1]
	subpd  xmm2, [esp + mci2030_jzH1]
	subpd  xmm3, [esp + mci2030_jxH2]
	subpd  xmm4, [esp + mci2030_jyH2]
	subpd  xmm5, [esp + mci2030_jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci2030_rsqH1H1], xmm0
	movapd [esp + mci2030_rsqH1H2], xmm3

	movapd xmm0, [esp + mci2030_ixH2]
	movapd xmm1, [esp + mci2030_iyH2]
	movapd xmm2, [esp + mci2030_izH2]
	movapd xmm3, [esp + mci2030_ixH2]
	movapd xmm4, [esp + mci2030_iyH2]
	movapd xmm5, [esp + mci2030_izH2]
	subpd  xmm0, [esp + mci2030_jxO]
	subpd  xmm1, [esp + mci2030_jyO]
	subpd  xmm2, [esp + mci2030_jzO]
	subpd  xmm3, [esp + mci2030_jxH1]
	subpd  xmm4, [esp + mci2030_jyH1]
	subpd  xmm5, [esp + mci2030_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + mci2030_rsqH2O], xmm0
	movapd [esp + mci2030_rsqH2H1], xmm4

	movapd xmm0, [esp + mci2030_ixH2]
	movapd xmm1, [esp + mci2030_iyH2]
	movapd xmm2, [esp + mci2030_izH2]
	subpd  xmm0, [esp + mci2030_jxH2]
	subpd  xmm1, [esp + mci2030_jyH2]
	subpd  xmm2, [esp + mci2030_jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + mci2030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci2030_half] ;# iter1 
	mulpd   xmm7, [esp + mci2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci2030_half] ;# rinv 
	mulpd   xmm5, [esp + mci2030_half] ;# rinv 
	movapd [esp + mci2030_rinvH2H2], xmm1
	movapd [esp + mci2030_rinvH2H1], xmm5

	movapd xmm0, [esp + mci2030_rsqOO]
	movapd xmm4, [esp + mci2030_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci2030_half] ;# iter1 of  
	mulpd   xmm7, [esp + mci2030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci2030_half] ;# rinv 
	mulpd   xmm5, [esp + mci2030_half] ;# rinv
	movapd [esp + mci2030_rinvOO], xmm1
	movapd [esp + mci2030_rinvOH1], xmm5

	movapd xmm0, [esp + mci2030_rsqOH2]
	movapd xmm4, [esp + mci2030_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci2030_half] ;# iter1 
	mulpd   xmm7, [esp + mci2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci2030_half] ;# rinv 
	mulpd   xmm5, [esp + mci2030_half] ;# rinv 
	movapd [esp + mci2030_rinvOH2], xmm1
	movapd [esp + mci2030_rinvH1O], xmm5

	movapd xmm0, [esp + mci2030_rsqH1H1]
	movapd xmm4, [esp + mci2030_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci2030_half] ;# iter1a 
	mulpd   xmm7, [esp + mci2030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci2030_half] ;# rinv 
	mulpd   xmm5, [esp + mci2030_half] ;# rinv 
	movapd [esp + mci2030_rinvH1H1], xmm1
	movapd [esp + mci2030_rinvH1H2], xmm5

	movapd xmm0, [esp + mci2030_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci2030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + mci2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci2030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + mci2030_half] ;# rinv 
	movapd [esp + mci2030_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm6, [esp + mci2030_krf]
	mulpd  xmm6, [esp + mci2030_rsqOO]	;# xmm5=krsq 
	addpd  xmm6, [esp + mci2030_rinvOO]	;# xmm6=rinv+ krsq 
	subpd  xmm6, [esp + mci2030_crf]
	
	mulpd  xmm6, [esp + mci2030_qqOO] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addpd  xmm6, [esp + mci2030_vctot] ;# local vctot summation variable 

	;# O-H1 interaction 
	movapd xmm5, [esp + mci2030_krf]
	mulpd  xmm5, [esp + mci2030_rsqOH1]	;# xmm5=krsq 
	addpd  xmm5, [esp + mci2030_rinvOH1]	;# xmm6=rinv+ krsq 
	subpd  xmm5, [esp + mci2030_crf]
	
	mulpd  xmm5, [esp + mci2030_qqOH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addpd  xmm6, xmm5 ;# local vctot summation variable 

	;# O-H2 interaction 
	movapd xmm7, [esp + mci2030_krf]
	mulpd  xmm7, [esp + mci2030_rsqOH2]	;# xmm5=krsq 
	addpd  xmm7, [esp + mci2030_rinvOH2]	;# xmm6=rinv+ krsq 
	subpd  xmm7, [esp + mci2030_crf]
	
	mulpd  xmm7, [esp + mci2030_qqOH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addpd  xmm6, xmm7 ;# local vctot summation variable 

	;# H1-O interaction 
	movapd xmm4, [esp + mci2030_krf]
	mulpd  xmm4, [esp + mci2030_rsqH1O]	;# xmm5=krsq 
	addpd  xmm4, [esp + mci2030_rinvH1O]	;# xmm6=rinv+ krsq 
	subpd  xmm4, [esp + mci2030_crf]
	
	mulpd  xmm4, [esp + mci2030_qqOH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addpd  xmm6, xmm4 ;# local vctot summation variable 
	
	;# H1-H1 interaction 
	movapd xmm5, [esp + mci2030_krf]
	mulpd  xmm5, [esp + mci2030_rsqH1H1]	;# xmm5=krsq 
	addpd  xmm5, [esp + mci2030_rinvH1H1]	;# xmm6=rinv+ krsq 
	subpd  xmm5, [esp + mci2030_crf]
	
	mulpd  xmm5, [esp + mci2030_qqHH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addpd  xmm6, xmm5 ;# local vctot summation variable 

	;# H1-H2 interaction 
	movapd xmm7, [esp + mci2030_krf]
	mulpd  xmm7, [esp + mci2030_rsqH1H2]	;# xmm5=krsq 
	addpd  xmm7, [esp + mci2030_rinvH1H2]	;# xmm6=rinv+ krsq 
	subpd  xmm7, [esp + mci2030_crf]
	
	mulpd  xmm7, [esp + mci2030_qqHH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addpd  xmm6, xmm7 ;# local vctot summation variable 

	;# H2-O interaction 
	movapd xmm4, [esp + mci2030_krf]
	mulpd  xmm4, [esp + mci2030_rsqH2O]	;# xmm5=krsq 
	addpd  xmm4, [esp + mci2030_rinvH2O]	;# xmm6=rinv+ krsq 
	subpd  xmm4, [esp + mci2030_crf]
	
	mulpd  xmm4, [esp + mci2030_qqOH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addpd  xmm6, xmm4 ;# local vctot summation variable 
	
	;# H2-H1 interaction 
	movapd xmm5, [esp + mci2030_krf]
	mulpd  xmm5, [esp + mci2030_rsqH2H1]	;# xmm5=krsq 
	addpd  xmm5, [esp + mci2030_rinvH2H1]	;# xmm6=rinv+ krsq 
	subpd  xmm5, [esp + mci2030_crf]
	
	mulpd  xmm5, [esp + mci2030_qqHH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addpd  xmm6, xmm5 ;# local vctot summation variable 

	;# H2-H2 interaction 
	movapd xmm7, [esp + mci2030_krf]
	mulpd  xmm7, [esp + mci2030_rsqH2H2]	;# xmm5=krsq 
	addpd  xmm7, [esp + mci2030_rinvH2H2]	;# xmm6=rinv+ krsq 
	subpd  xmm7, [esp + mci2030_crf]
	
	mulpd  xmm7, [esp + mci2030_qqHH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addpd  xmm6, xmm7 ;# local vctot summation variable 
	movapd [esp + mci2030_vctot], xmm6

	;# should we do one more iteration? 
	sub dword ptr [esp + mci2030_innerk],  2
	jl    .mci2030_checksingle
	jmp   .mci2030_unroll_loop
.mci2030_checksingle:
	mov   edx, [esp + mci2030_innerk]
	and   edx, 1
	jnz   .mci2030_dosingle
	jmp   .mci2030_updateouterdata
.mci2030_dosingle:
	mov   edx, [esp + mci2030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]
	
	mov esi, [ebp + mci2030_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + mci2030_jxO], xmm2
	movapd 	[esp + mci2030_jyO], xmm3
	movapd 	[esp + mci2030_jzO], xmm4
	movapd 	[esp + mci2030_jxH1], xmm5
	movapd 	[esp + mci2030_jyH1], xmm6
	movapd 	[esp + mci2030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + mci2030_jxH2], xmm2
	movapd 	[esp + mci2030_jyH2], xmm3
	movapd 	[esp + mci2030_jzH2], xmm4
	
	movapd xmm0, [esp + mci2030_ixO]
	movapd xmm1, [esp + mci2030_iyO]
	movapd xmm2, [esp + mci2030_izO]
	movapd xmm3, [esp + mci2030_ixO]
	movapd xmm4, [esp + mci2030_iyO]
	movapd xmm5, [esp + mci2030_izO]
	subsd  xmm0, [esp + mci2030_jxO]
	subsd  xmm1, [esp + mci2030_jyO]
	subsd  xmm2, [esp + mci2030_jzO]
	subsd  xmm3, [esp + mci2030_jxH1]
	subsd  xmm4, [esp + mci2030_jyH1]
	subsd  xmm5, [esp + mci2030_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci2030_rsqOO], xmm0
	movapd [esp + mci2030_rsqOH1], xmm3

	movapd xmm0, [esp + mci2030_ixO]
	movapd xmm1, [esp + mci2030_iyO]
	movapd xmm2, [esp + mci2030_izO]
	movapd xmm3, [esp + mci2030_ixH1]
	movapd xmm4, [esp + mci2030_iyH1]
	movapd xmm5, [esp + mci2030_izH1]
	subsd  xmm0, [esp + mci2030_jxH2]
	subsd  xmm1, [esp + mci2030_jyH2]
	subsd  xmm2, [esp + mci2030_jzH2]
	subsd  xmm3, [esp + mci2030_jxO]
	subsd  xmm4, [esp + mci2030_jyO]
	subsd  xmm5, [esp + mci2030_jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci2030_rsqOH2], xmm0
	movapd [esp + mci2030_rsqH1O], xmm3

	movapd xmm0, [esp + mci2030_ixH1]
	movapd xmm1, [esp + mci2030_iyH1]
	movapd xmm2, [esp + mci2030_izH1]
	movapd xmm3, [esp + mci2030_ixH1]
	movapd xmm4, [esp + mci2030_iyH1]
	movapd xmm5, [esp + mci2030_izH1]
	subsd  xmm0, [esp + mci2030_jxH1]
	subsd  xmm1, [esp + mci2030_jyH1]
	subsd  xmm2, [esp + mci2030_jzH1]
	subsd  xmm3, [esp + mci2030_jxH2]
	subsd  xmm4, [esp + mci2030_jyH2]
	subsd  xmm5, [esp + mci2030_jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci2030_rsqH1H1], xmm0
	movapd [esp + mci2030_rsqH1H2], xmm3

	movapd xmm0, [esp + mci2030_ixH2]
	movapd xmm1, [esp + mci2030_iyH2]
	movapd xmm2, [esp + mci2030_izH2]
	movapd xmm3, [esp + mci2030_ixH2]
	movapd xmm4, [esp + mci2030_iyH2]
	movapd xmm5, [esp + mci2030_izH2]
	subsd  xmm0, [esp + mci2030_jxO]
	subsd  xmm1, [esp + mci2030_jyO]
	subsd  xmm2, [esp + mci2030_jzO]
	subsd  xmm3, [esp + mci2030_jxH1]
	subsd  xmm4, [esp + mci2030_jyH1]
	subsd  xmm5, [esp + mci2030_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + mci2030_rsqH2O], xmm0
	movapd [esp + mci2030_rsqH2H1], xmm4

	movapd xmm0, [esp + mci2030_ixH2]
	movapd xmm1, [esp + mci2030_iyH2]
	movapd xmm2, [esp + mci2030_izH2]
	subsd  xmm0, [esp + mci2030_jxH2]
	subsd  xmm1, [esp + mci2030_jyH2]
	subsd  xmm2, [esp + mci2030_jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + mci2030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci2030_half] ;# iter1 
	mulsd   xmm7, [esp + mci2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci2030_half] ;# rinv 
	mulsd   xmm5, [esp + mci2030_half] ;# rinv 
	movapd [esp + mci2030_rinvH2H2], xmm1
	movapd [esp + mci2030_rinvH2H1], xmm5

	movapd xmm0, [esp + mci2030_rsqOO]
	movapd xmm4, [esp + mci2030_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci2030_half] ;# iter1 of  
	mulsd   xmm7, [esp + mci2030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci2030_half] ;# rinv 
	mulsd   xmm5, [esp + mci2030_half] ;# rinv
	movapd [esp + mci2030_rinvOO], xmm1
	movapd [esp + mci2030_rinvOH1], xmm5

	movapd xmm0, [esp + mci2030_rsqOH2]
	movapd xmm4, [esp + mci2030_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci2030_half] ;# iter1 
	mulsd   xmm7, [esp + mci2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci2030_half] ;# rinv 
	mulsd   xmm5, [esp + mci2030_half] ;# rinv 
	movapd [esp + mci2030_rinvOH2], xmm1
	movapd [esp + mci2030_rinvH1O], xmm5

	movapd xmm0, [esp + mci2030_rsqH1H1]
	movapd xmm4, [esp + mci2030_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci2030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci2030_half] ;# iter1a 
	mulsd   xmm7, [esp + mci2030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci2030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci2030_half] ;# rinv 
	mulsd   xmm5, [esp + mci2030_half] ;# rinv 
	movapd [esp + mci2030_rinvH1H1], xmm1
	movapd [esp + mci2030_rinvH1H2], xmm5

	movapd xmm0, [esp + mci2030_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci2030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + mci2030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci2030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + mci2030_half] ;# rinv 
	movapd [esp + mci2030_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm6, [esp + mci2030_krf]
	mulsd  xmm6, [esp + mci2030_rsqOO]	;# xmm5=krsq 
	addsd  xmm6, [esp + mci2030_rinvOO]	;# xmm6=rinv+ krsq 
	subsd  xmm6, [esp + mci2030_crf]
	
	mulsd  xmm6, [esp + mci2030_qqOO] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addsd  xmm6, [esp + mci2030_vctot] ;# local vctot summation variable 

	;# O-H1 interaction 
	movapd xmm5, [esp + mci2030_krf]
	mulsd  xmm5, [esp + mci2030_rsqOH1]	;# xmm5=krsq 
	addsd  xmm5, [esp + mci2030_rinvOH1]	;# xmm6=rinv+ krsq 
	subsd  xmm5, [esp + mci2030_crf]
	
	mulsd  xmm5, [esp + mci2030_qqOH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addsd  xmm6, xmm5 ;# local vctot summation variable 

	;# O-H2 interaction 
	movapd xmm7, [esp + mci2030_krf]
	mulsd  xmm7, [esp + mci2030_rsqOH2]	;# xmm5=krsq 
	addsd  xmm7, [esp + mci2030_rinvOH2]	;# xmm6=rinv+ krsq 
	subsd  xmm7, [esp + mci2030_crf]
	
	mulsd  xmm7, [esp + mci2030_qqOH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addsd  xmm6, xmm7 ;# local vctot summation variable 

	;# H1-O interaction 
	movapd xmm4, [esp + mci2030_krf]
	mulsd  xmm4, [esp + mci2030_rsqH1O]	;# xmm5=krsq 
	addsd  xmm4, [esp + mci2030_rinvH1O]	;# xmm6=rinv+ krsq 
	subsd  xmm4, [esp + mci2030_crf]
	
	mulsd  xmm4, [esp + mci2030_qqOH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addsd  xmm6, xmm4 ;# local vctot summation variable 
	
	;# H1-H1 interaction 
	movapd xmm5, [esp + mci2030_krf]
	mulsd  xmm5, [esp + mci2030_rsqH1H1]	;# xmm5=krsq 
	addsd  xmm5, [esp + mci2030_rinvH1H1]	;# xmm6=rinv+ krsq 
	subsd  xmm5, [esp + mci2030_crf]
	
	mulsd  xmm5, [esp + mci2030_qqHH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addsd  xmm6, xmm5 ;# local vctot summation variable 

	;# H1-H2 interaction 
	movapd xmm7, [esp + mci2030_krf]
	mulsd  xmm7, [esp + mci2030_rsqH1H2]	;# xmm5=krsq 
	addsd  xmm7, [esp + mci2030_rinvH1H2]	;# xmm6=rinv+ krsq 
	subsd  xmm7, [esp + mci2030_crf]
	
	mulsd  xmm7, [esp + mci2030_qqHH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addsd  xmm6, xmm7 ;# local vctot summation variable 

	;# H2-O interaction 
	movapd xmm4, [esp + mci2030_krf]
	mulsd  xmm4, [esp + mci2030_rsqH2O]	;# xmm5=krsq 
	addsd  xmm4, [esp + mci2030_rinvH2O]	;# xmm6=rinv+ krsq 
	subsd  xmm4, [esp + mci2030_crf]
	
	mulsd  xmm4, [esp + mci2030_qqOH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addsd  xmm6, xmm4 ;# local vctot summation variable 
	
	;# H2-H1 interaction 
	movapd xmm5, [esp + mci2030_krf]
	mulsd  xmm5, [esp + mci2030_rsqH2H1]	;# xmm5=krsq 
	addsd  xmm5, [esp + mci2030_rinvH2H1]	;# xmm6=rinv+ krsq 
	subsd  xmm5, [esp + mci2030_crf]
	
	mulsd  xmm5, [esp + mci2030_qqHH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addsd  xmm6, xmm5 ;# local vctot summation variable 

	;# H2-H2 interaction 
	movapd xmm7, [esp + mci2030_krf]
	mulsd  xmm7, [esp + mci2030_rsqH2H2]	;# xmm5=krsq 
	addsd  xmm7, [esp + mci2030_rinvH2H2]	;# xmm6=rinv+ krsq 
	subsd  xmm7, [esp + mci2030_crf]
	
	mulsd  xmm7, [esp + mci2030_qqHH] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addsd  xmm6, xmm7 ;# local vctot summation variable 
	movlpd [esp + mci2030_vctot], xmm6
	
.mci2030_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci2030_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci2030_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci2030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci2030_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2030_nri]
	dec ecx
	jecxz .mci2030_end
	;# not last, iterate once more!  
	mov [ebp + mci2030_nri], ecx
	jmp .mci2030_outer
.mci2030_end:
	emms
	mov eax, [esp + mci2030_salign]
	add esp, eax
	add esp, 724
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	
	

.globl mcinl3000_sse2
.globl _mcinl3000_sse2
mcinl3000_sse2:	
_mcinl3000_sse2:	
.equiv		mci3000_nri,		8
.equiv		mci3000_iinr,		12
.equiv		mci3000_jindex,		16
.equiv		mci3000_jjnr,		20
.equiv		mci3000_shift,		24
.equiv		mci3000_shiftvec,	28
.equiv		mci3000_gid,		32
.equiv		mci3000_pos,		36		
.equiv		mci3000_charge,		40
.equiv		mci3000_facel,		44 ;# double 
.equiv		mci3000_Vc,			52			
.equiv		mci3000_tabscale,	56 ;# double 
.equiv		mci3000_VFtab,		64
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3000_ix,			0
.equiv		mci3000_iy,			16
.equiv		mci3000_iz,			32
.equiv		mci3000_iq,			48
.equiv		mci3000_tsc,		64
.equiv		mci3000_qq,			80
.equiv		mci3000_vctot,		96
.equiv		mci3000_half,		112
.equiv		mci3000_three,		128
.equiv		mci3000_is3,		144
.equiv		mci3000_ii3,		148
.equiv		mci3000_innerjjnr,	152
.equiv		mci3000_innerk,		156
.equiv		mci3000_salign,		160
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 164		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3000_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + mci3000_tabscale]
	movapd [esp + mci3000_half],  xmm0
	movapd [esp + mci3000_three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + mci3000_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.mci3000_outer:
	mov   eax, [ebp + mci3000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci3000_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci3000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3000_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + mci3000_facel]
	shufpd xmm3, xmm3, 0

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3000_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + mci3000_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + mci3000_ix], xmm0
	movapd [esp + mci3000_iy], xmm1
	movapd [esp + mci3000_iz], xmm2

	mov   [esp + mci3000_ii3], ebx
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci3000_vctot], xmm4
	
	mov   eax, [ebp + mci3000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3000_pos]
	mov   eax, [ebp + mci3000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci3000_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3000_unroll_loop
	jmp   .mci3000_checksingle
.mci3000_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci3000_innerjjnr]   ;# pointer to jjnr[k] 
	mov   eax, [edx]
	mov   ebx, [edx + 4]
	add dword ptr [esp + mci3000_innerjjnr], 8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci3000_charge]    ;# base of charge[] 

	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + mci3000_iq]
	mulpd  xmm3, xmm2
	movapd [esp + mci3000_qq], xmm3	
	
	mov esi, [ebp + mci3000_pos]		;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move mci3000_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci3000_ix]
	movapd xmm5, [esp + mci3000_iy]
	movapd xmm6, [esp + mci3000_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci3000_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3000_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci3000_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3000_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	mulpd xmm4, xmm0	;# xmm4=r 
	mulpd xmm4, [esp + mci3000_tsc]

	cvttpd2pi mm6, xmm4	;# mm6 = lu idx 
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	
	mov  esi, [ebp + mci3000_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3000_qq]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul  
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addpd  xmm5, [esp + mci3000_vctot]
	movapd [esp + mci3000_vctot], xmm5 

	;# should we do one more iteration? 
	sub dword ptr [esp + mci3000_innerk],  2
	jl    .mci3000_checksingle
	jmp   .mci3000_unroll_loop
.mci3000_checksingle:
	mov   edx, [esp + mci3000_innerk]
	and   edx, 1
	jnz    .mci3000_dosingle
	jmp    .mci3000_updateouterdata
.mci3000_dosingle:
	mov esi, [ebp + mci3000_charge]
	mov edi, [ebp + mci3000_pos]
	mov   ecx, [esp + mci3000_innerjjnr]
	mov   eax, [ecx]	
	xorpd  xmm6, xmm6
	movlpd xmm6, [esi + eax*8]	;# xmm6(0) has the charge 	
	mulsd  xmm6, [esp + mci3000_iq]
	movapd [esp + mci3000_qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]

	;# move mci3000_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci3000_ix]
	movapd xmm5, [esp + mci3000_iy]
	movapd xmm6, [esp + mci3000_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci3000_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3000_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci3000_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3000_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	
	mulsd xmm4, xmm0	;# xmm4=r 
	mulsd xmm4, [esp + mci3000_tsc]
	
	cvttsd2si eax, xmm4	;# mm6 = lu idx 
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	
	mov  esi, [ebp + mci3000_VFtab]

	;# Coulomb 
	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  	
	;# table ready in xmm4-xmm7 

	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3000_qq]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addsd  xmm5, [esp + mci3000_vctot]
	movsd [esp + mci3000_vctot], xmm5 

.mci3000_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci3000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci3000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci3000_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3000_nri]
	dec ecx
	jecxz .mci3000_end
	;# not last, iterate once more!  
	mov [ebp + mci3000_nri], ecx
	jmp .mci3000_outer
.mci3000_end:
	emms
	mov eax, [esp + mci3000_salign]
	add esp, eax
	add esp, 164
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl mcinl3020_sse2
.globl _mcinl3020_sse2
mcinl3020_sse2:	
_mcinl3020_sse2:	
.equiv		mci3020_nri,		8
.equiv		mci3020_iinr,		12
.equiv		mci3020_jindex,		16
.equiv		mci3020_jjnr,		20
.equiv		mci3020_shift,		24
.equiv		mci3020_shiftvec,	28
.equiv		mci3020_gid,		32
.equiv		mci3020_pos,		36		
.equiv		mci3020_charge,		40
.equiv		mci3020_facel,		44 ;# double 
.equiv		mci3020_Vc,			52			
.equiv		mci3020_tabscale,	56 ;# double 	
.equiv		mci3020_VFtab,		64	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3020_ixO,		0
.equiv		mci3020_iyO,		16
.equiv		mci3020_izO,		32
.equiv		mci3020_ixH1,		48
.equiv		mci3020_iyH1,		64
.equiv		mci3020_izH1,		80
.equiv		mci3020_ixH2,		96
.equiv		mci3020_iyH2,		112
.equiv		mci3020_izH2,		128
.equiv		mci3020_iqO,		144 
.equiv		mci3020_iqH,		160 
.equiv		mci3020_qqO,		176
.equiv		mci3020_qqH,		192
.equiv		mci3020_rinvO,		208
.equiv		mci3020_rinvH1,		224
.equiv		mci3020_rinvH2,		240		
.equiv		mci3020_rO,			256
.equiv		mci3020_rH1,		272
.equiv		mci3020_rH2,		288
.equiv		mci3020_tsc,		304
.equiv		mci3020_vctot,		320
.equiv		mci3020_half,		336
.equiv		mci3020_three,		352
.equiv		mci3020_is3,		368
.equiv		mci3020_ii3,		372
.equiv		mci3020_innerjjnr,	376
.equiv		mci3020_innerk,		380
.equiv		mci3020_salign,		384
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 388		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3020_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + mci3020_tabscale]
	
	movapd [esp + mci3020_half],  xmm0
	movapd [esp + mci3020_three],  xmm2
	shufpd xmm3, xmm3, 0 
	movapd [esp + mci3020_tsc], xmm3
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3020_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + mci3020_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + mci3020_iqO], xmm3
	movapd [esp + mci3020_iqH], xmm4
	
.mci3020_outer:
	mov   eax, [ebp + mci3020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci3020_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci3020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3020_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3020_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3020_ixO], xmm3
	movapd [esp + mci3020_iyO], xmm4
	movapd [esp + mci3020_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3020_ixH1], xmm0
	movapd [esp + mci3020_iyH1], xmm1
	movapd [esp + mci3020_izH1], xmm2
	movapd [esp + mci3020_ixH2], xmm3
	movapd [esp + mci3020_iyH2], xmm4
	movapd [esp + mci3020_izH2], xmm5
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci3020_vctot], xmm4
	
	mov   eax, [ebp + mci3020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3020_pos]
	mov   eax, [ebp + mci3020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci3020_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3020_unroll_loop
	jmp   .mci3020_checksingle
.mci3020_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci3020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add dword ptr [esp + mci3020_innerjjnr],  8	;# advance pointer (unrolled 2) 
	mov esi, [ebp + mci3020_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + mci3020_iqO]
	mulpd  xmm4, [esp + mci3020_iqH]

	movapd  [esp + mci3020_qqO], xmm3
	movapd  [esp + mci3020_qqH], xmm4	

	mov esi, [ebp + mci3020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci3020_ixO]
	movapd xmm5, [esp + mci3020_iyO]
	movapd xmm6, [esp + mci3020_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci3020_ixH1]
	movapd xmm5, [esp + mci3020_iyH1]
	movapd xmm6, [esp + mci3020_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci3020_ixH2]
	movapd xmm4, [esp + mci3020_iyH2]
	movapd xmm5, [esp + mci3020_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci3020_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3020_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci3020_half] ;# rinv 
	movapd  [esp + mci3020_rinvO], xmm4	;# rinvO in xmm4 
	mulpd   xmm7, xmm4
	movapd  [esp + mci3020_rO], xmm7	;# r in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci3020_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3020_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci3020_half] ;# rinv 
	movapd [esp + mci3020_rinvH1], xmm4	;# rinvH1 
	mulpd  xmm6, xmm4
	movapd [esp + mci3020_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci3020_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3020_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci3020_half] ;# rinv 
	movapd [esp + mci3020_rinvH2], xmm4 ;# rinv 
	mulpd xmm5, xmm4
	movapd [esp + mci3020_rH2], xmm5 ;# r 

	;# do O interactions 
	;# rO is still in xmm7 
	mulpd xmm7, [esp + mci3020_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3020_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3020_qqO]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    addpd  xmm5, [esp + mci3020_vctot]
    movapd [esp + mci3020_vctot], xmm5 

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + mci3020_rH1]
	mulpd xmm7, [esp + mci3020_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3020_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3020_qqH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addpd  xmm5, [esp + mci3020_vctot]
	movapd [esp + mci3020_vctot], xmm5
	
	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + mci3020_rH2]
	mulpd   xmm7, [esp + mci3020_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3020_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3020_qqH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addpd  xmm5, [esp + mci3020_vctot]
	movapd [esp + mci3020_vctot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci3020_innerk],  2
	jl    .mci3020_checksingle
	jmp   .mci3020_unroll_loop
.mci3020_checksingle:	
	mov   edx, [esp + mci3020_innerk]
	and   edx, 1
	jnz   .mci3020_dosingle
	jmp   .mci3020_updateouterdata
.mci3020_dosingle:
	mov   edx, [esp + mci3020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	

	mov esi, [ebp + mci3020_charge]    ;# base of charge[] 
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + mci3020_iqO]
	mulpd  xmm4, [esp + mci3020_iqH]

	movapd  [esp + mci3020_qqO], xmm3
	movapd  [esp + mci3020_qqH], xmm4	

	mov esi, [ebp + mci3020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	;# move coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci3020_ixO]
	movapd xmm5, [esp + mci3020_iyO]
	movapd xmm6, [esp + mci3020_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci3020_ixH1]
	movapd xmm5, [esp + mci3020_iyH1]
	movapd xmm6, [esp + mci3020_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci3020_ixH2]
	movapd xmm4, [esp + mci3020_iyH2]
	movapd xmm5, [esp + mci3020_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci3020_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3020_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci3020_half] ;# rinv 
	movapd  [esp + mci3020_rinvO], xmm4	;# rinvO in xmm4 
	mulsd   xmm7, xmm4
	movapd  [esp + mci3020_rO], xmm7	;# r in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci3020_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3020_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci3020_half] ;# rinv 
	movapd [esp + mci3020_rinvH1], xmm4	;# rinvH1 
	mulsd  xmm6, xmm4
	movapd [esp + mci3020_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci3020_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci3020_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3020_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci3020_half] ;# rinv 
	movapd [esp + mci3020_rinvH2], xmm4 ;# rinv 
	mulsd xmm5, xmm4
	movapd [esp + mci3020_rH2], xmm5 ;# r 

	;# do O interactions 
	movd mm0, eax	
	;# rO is still in xmm7 
	mulsd   xmm7, [esp + mci3020_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3020_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3	
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3020_qqO]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    addsd  xmm5, [esp + mci3020_vctot]
    movlpd [esp + mci3020_vctot], xmm5 

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + mci3020_rH1]
	mulsd xmm7, [esp + mci3020_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3020_VFtab]
	
	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3020_qqH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addsd  xmm5, [esp + mci3020_vctot]
    movlpd [esp + mci3020_vctot], xmm5 


	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + mci3020_rH2]
	mulsd   xmm7, [esp + mci3020_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3020_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3020_qqH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addsd  xmm5, [esp + mci3020_vctot]
    movlpd [esp + mci3020_vctot], xmm5 

.mci3020_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci3020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci3020_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci3020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci3020_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3020_nri]
	dec ecx
	jecxz .mci3020_end
	;# not last, iterate once more!  
	mov [ebp + mci3020_nri], ecx
	jmp .mci3020_outer
.mci3020_end:
	emms
	mov eax, [esp + mci3020_salign]
	add esp, eax
	add esp, 388
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

.globl mcinl3030_sse2
.globl _mcinl3030_sse2
mcinl3030_sse2:
_mcinl3030_sse2:
.equiv		mci3030_nri,		8
.equiv		mci3030_iinr,		12
.equiv		mci3030_jindex,		16
.equiv		mci3030_jjnr,		20
.equiv		mci3030_shift,		24
.equiv		mci3030_shiftvec,	28
.equiv		mci3030_gid,		32
.equiv		mci3030_pos,		36		
.equiv		mci3030_charge,		40
.equiv		mci3030_facel,		44 ;# double 	
.equiv		mci3030_Vc,			52			
.equiv		mci3030_tabscale,	56 ;# double 	
.equiv		mci3030_VFtab,		64
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3030_ixO,		0
.equiv		mci3030_iyO,		16
.equiv		mci3030_izO,		32
.equiv		mci3030_ixH1,		48
.equiv		mci3030_iyH1,		64
.equiv		mci3030_izH1,		80
.equiv		mci3030_ixH2,		96
.equiv		mci3030_iyH2,		112
.equiv		mci3030_izH2,		128
.equiv		mci3030_jxO,		144
.equiv		mci3030_jyO,		160
.equiv		mci3030_jzO,		176
.equiv		mci3030_jxH1,		192
.equiv		mci3030_jyH1,		208
.equiv		mci3030_jzH1,		224
.equiv		mci3030_jxH2,		240
.equiv		mci3030_jyH2,		256
.equiv		mci3030_jzH2,		272
.equiv		mci3030_qqOO,		288
.equiv		mci3030_qqOH,		304
.equiv		mci3030_qqHH,		320
.equiv		mci3030_tsc,		336
.equiv		mci3030_vctot,		352
.equiv		mci3030_half,		368
.equiv		mci3030_three,		384
.equiv		mci3030_rsqOO,		400
.equiv		mci3030_rsqOH1,		416
.equiv		mci3030_rsqOH2,		432
.equiv		mci3030_rsqH1O,		448
.equiv		mci3030_rsqH1H1,	464
.equiv		mci3030_rsqH1H2,	480
.equiv		mci3030_rsqH2O,		496
.equiv		mci3030_rsqH2H1,	512
.equiv		mci3030_rsqH2H2,	528
.equiv		mci3030_rinvOO,		544
.equiv		mci3030_rinvOH1,	560
.equiv		mci3030_rinvOH2,	576
.equiv		mci3030_rinvH1O,	592
.equiv		mci3030_rinvH1H1,	608
.equiv		mci3030_rinvH1H2,	624
.equiv		mci3030_rinvH2O,	640
.equiv		mci3030_rinvH2H1,	656
.equiv		mci3030_rinvH2H2,	672	
.equiv		mci3030_is3,		688
.equiv		mci3030_ii3,		692
.equiv		mci3030_innerjjnr,	696
.equiv		mci3030_innerk,		700
.equiv		mci3030_salign,		704	
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 708		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3030_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + mci3030_tabscale]
	movapd [esp + mci3030_half],  xmm0
	movapd [esp + mci3030_three], xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + mci3030_tsc],  xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3030_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + mci3030_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3030_qqOO], xmm3
	movapd [esp + mci3030_qqOH], xmm4
	movapd [esp + mci3030_qqHH], xmm5		

.mci3030_outer:
	mov   eax, [ebp + mci3030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3030_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3030_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci3030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3030_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3030_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3030_ixO], xmm3
	movapd [esp + mci3030_iyO], xmm4
	movapd [esp + mci3030_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3030_ixH1], xmm0
	movapd [esp + mci3030_iyH1], xmm1
	movapd [esp + mci3030_izH1], xmm2
	movapd [esp + mci3030_ixH2], xmm3
	movapd [esp + mci3030_iyH2], xmm4
	movapd [esp + mci3030_izH2], xmm5

	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci3030_vctot], xmm4
	
	mov   eax, [ebp + mci3030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3030_pos]
	mov   eax, [ebp + mci3030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci3030_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3030_unroll_loop
	jmp   .mci3030_checksingle
.mci3030_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci3030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + mci3030_innerjjnr], 8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci3030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + mci3030_jxO], xmm2
	movapd 	[esp + mci3030_jyO], xmm3
	movapd 	[esp + mci3030_jzO], xmm4
	movapd 	[esp + mci3030_jxH1], xmm5
	movapd 	[esp + mci3030_jyH1], xmm6
	movapd 	[esp + mci3030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + mci3030_jxH2], xmm2
	movapd 	[esp + mci3030_jyH2], xmm3
	movapd 	[esp + mci3030_jzH2], xmm4
	
	movapd xmm0, [esp + mci3030_ixO]
	movapd xmm1, [esp + mci3030_iyO]
	movapd xmm2, [esp + mci3030_izO]
	movapd xmm3, [esp + mci3030_ixO]
	movapd xmm4, [esp + mci3030_iyO]
	movapd xmm5, [esp + mci3030_izO]
	subpd  xmm0, [esp + mci3030_jxO]
	subpd  xmm1, [esp + mci3030_jyO]
	subpd  xmm2, [esp + mci3030_jzO]
	subpd  xmm3, [esp + mci3030_jxH1]
	subpd  xmm4, [esp + mci3030_jyH1]
	subpd  xmm5, [esp + mci3030_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci3030_rsqOO], xmm0
	movapd [esp + mci3030_rsqOH1], xmm3

	movapd xmm0, [esp + mci3030_ixO]
	movapd xmm1, [esp + mci3030_iyO]
	movapd xmm2, [esp + mci3030_izO]
	movapd xmm3, [esp + mci3030_ixH1]
	movapd xmm4, [esp + mci3030_iyH1]
	movapd xmm5, [esp + mci3030_izH1]
	subpd  xmm0, [esp + mci3030_jxH2]
	subpd  xmm1, [esp + mci3030_jyH2]
	subpd  xmm2, [esp + mci3030_jzH2]
	subpd  xmm3, [esp + mci3030_jxO]
	subpd  xmm4, [esp + mci3030_jyO]
	subpd  xmm5, [esp + mci3030_jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci3030_rsqOH2], xmm0
	movapd [esp + mci3030_rsqH1O], xmm3

	movapd xmm0, [esp + mci3030_ixH1]
	movapd xmm1, [esp + mci3030_iyH1]
	movapd xmm2, [esp + mci3030_izH1]
	movapd xmm3, [esp + mci3030_ixH1]
	movapd xmm4, [esp + mci3030_iyH1]
	movapd xmm5, [esp + mci3030_izH1]
	subpd  xmm0, [esp + mci3030_jxH1]
	subpd  xmm1, [esp + mci3030_jyH1]
	subpd  xmm2, [esp + mci3030_jzH1]
	subpd  xmm3, [esp + mci3030_jxH2]
	subpd  xmm4, [esp + mci3030_jyH2]
	subpd  xmm5, [esp + mci3030_jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci3030_rsqH1H1], xmm0
	movapd [esp + mci3030_rsqH1H2], xmm3

	movapd xmm0, [esp + mci3030_ixH2]
	movapd xmm1, [esp + mci3030_iyH2]
	movapd xmm2, [esp + mci3030_izH2]
	movapd xmm3, [esp + mci3030_ixH2]
	movapd xmm4, [esp + mci3030_iyH2]
	movapd xmm5, [esp + mci3030_izH2]
	subpd  xmm0, [esp + mci3030_jxO]
	subpd  xmm1, [esp + mci3030_jyO]
	subpd  xmm2, [esp + mci3030_jzO]
	subpd  xmm3, [esp + mci3030_jxH1]
	subpd  xmm4, [esp + mci3030_jyH1]
	subpd  xmm5, [esp + mci3030_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + mci3030_rsqH2O], xmm0
	movapd [esp + mci3030_rsqH2H1], xmm4

	movapd xmm0, [esp + mci3030_ixH2]
	movapd xmm1, [esp + mci3030_iyH2]
	movapd xmm2, [esp + mci3030_izH2]
	subpd  xmm0, [esp + mci3030_jxH2]
	subpd  xmm1, [esp + mci3030_jyH2]
	subpd  xmm2, [esp + mci3030_jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + mci3030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3030_half] ;# iter1 
	mulpd   xmm7, [esp + mci3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3030_half] ;# rinv 
	mulpd   xmm5, [esp + mci3030_half] ;# rinv 
	movapd [esp + mci3030_rinvH2H2], xmm1
	movapd [esp + mci3030_rinvH2H1], xmm5

	movapd xmm0, [esp + mci3030_rsqOO]
	movapd xmm4, [esp + mci3030_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3030_half] ;# iter1 of  
	mulpd   xmm7, [esp + mci3030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3030_half] ;# rinv 
	mulpd   xmm5, [esp + mci3030_half] ;# rinv
	movapd [esp + mci3030_rinvOO], xmm1
	movapd [esp + mci3030_rinvOH1], xmm5

	movapd xmm0, [esp + mci3030_rsqOH2]
	movapd xmm4, [esp + mci3030_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3030_half] ;# iter1 
	mulpd   xmm7, [esp + mci3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3030_half] ;# rinv 
	mulpd   xmm5, [esp + mci3030_half] ;# rinv 
	movapd [esp + mci3030_rinvOH2], xmm1
	movapd [esp + mci3030_rinvH1O], xmm5

	movapd xmm0, [esp + mci3030_rsqH1H1]
	movapd xmm4, [esp + mci3030_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3030_half] ;# iter1a 
	mulpd   xmm7, [esp + mci3030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3030_half] ;# rinv 
	mulpd   xmm5, [esp + mci3030_half] ;# rinv 
	movapd [esp + mci3030_rinvH1H1], xmm1
	movapd [esp + mci3030_rinvH1H2], xmm5

	movapd xmm0, [esp + mci3030_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci3030_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + mci3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci3030_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + mci3030_half] ;# rinv 
	movapd [esp + mci3030_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + mci3030_rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3030_rsqOO] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3030_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqOO]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addpd  xmm5, [esp + mci3030_vctot]
    movapd [esp + mci3030_vctot], xmm5

	;# O-H1 interaction 
	movapd xmm0, [esp + mci3030_rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3030_rsqOH1] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3030_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3030_vctot]
    movapd [esp + mci3030_vctot], xmm5

	;# O-H2 interaction  
	movapd xmm0, [esp + mci3030_rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3030_rsqOH2] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3030_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3030_vctot]
    movapd [esp + mci3030_vctot], xmm5

	;# H1-O interaction 
	movapd xmm0, [esp + mci3030_rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3030_rsqH1O] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3030_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3030_vctot]
    movapd [esp + mci3030_vctot], xmm5

	;# H1-H1 interaction 
	movapd xmm0, [esp + mci3030_rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3030_rsqH1H1] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3030_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3030_vctot]
    movapd [esp + mci3030_vctot], xmm5
	
	;# H1-H2 interaction 
	movapd xmm0, [esp + mci3030_rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3030_rsqH1H2] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3030_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3030_vctot]
    movapd [esp + mci3030_vctot], xmm5

	;# H2-O interaction 
	movapd xmm0, [esp + mci3030_rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3030_rsqH2O] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3030_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3030_vctot]
    movapd [esp + mci3030_vctot], xmm5

	;# H2-H1 interaction 
	movapd xmm0, [esp + mci3030_rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3030_rsqH2H1] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3030_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3030_vctot]
    movapd [esp + mci3030_vctot], xmm5	

	;# H2-H2 interaction 
	movapd xmm0, [esp + mci3030_rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3030_rsqH2H2] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3030_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
	
    addpd  xmm5, [esp + mci3030_vctot]
    movapd [esp + mci3030_vctot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3030_innerk],  2
	jl    .mci3030_checksingle
	jmp   .mci3030_unroll_loop
.mci3030_checksingle:
	mov   edx, [esp + mci3030_innerk]
	and   edx, 1
	jnz   .mci3030_dosingle
	jmp   .mci3030_updateouterdata
.mci3030_dosingle:
	mov   edx, [esp + mci3030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]

	mov esi, [ebp + mci3030_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + mci3030_jxO], xmm2
	movapd 	[esp + mci3030_jyO], xmm3
	movapd 	[esp + mci3030_jzO], xmm4
	movapd 	[esp + mci3030_jxH1], xmm5
	movapd 	[esp + mci3030_jyH1], xmm6
	movapd 	[esp + mci3030_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + mci3030_jxH2], xmm2
	movapd 	[esp + mci3030_jyH2], xmm3
	movapd 	[esp + mci3030_jzH2], xmm4
	
	movapd xmm0, [esp + mci3030_ixO]
	movapd xmm1, [esp + mci3030_iyO]
	movapd xmm2, [esp + mci3030_izO]
	movapd xmm3, [esp + mci3030_ixO]
	movapd xmm4, [esp + mci3030_iyO]
	movapd xmm5, [esp + mci3030_izO]
	subsd  xmm0, [esp + mci3030_jxO]
	subsd  xmm1, [esp + mci3030_jyO]
	subsd  xmm2, [esp + mci3030_jzO]
	subsd  xmm3, [esp + mci3030_jxH1]
	subsd  xmm4, [esp + mci3030_jyH1]
	subsd  xmm5, [esp + mci3030_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci3030_rsqOO], xmm0
	movapd [esp + mci3030_rsqOH1], xmm3

	movapd xmm0, [esp + mci3030_ixO]
	movapd xmm1, [esp + mci3030_iyO]
	movapd xmm2, [esp + mci3030_izO]
	movapd xmm3, [esp + mci3030_ixH1]
	movapd xmm4, [esp + mci3030_iyH1]
	movapd xmm5, [esp + mci3030_izH1]
	subsd  xmm0, [esp + mci3030_jxH2]
	subsd  xmm1, [esp + mci3030_jyH2]
	subsd  xmm2, [esp + mci3030_jzH2]
	subsd  xmm3, [esp + mci3030_jxO]
	subsd  xmm4, [esp + mci3030_jyO]
	subsd  xmm5, [esp + mci3030_jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci3030_rsqOH2], xmm0
	movapd [esp + mci3030_rsqH1O], xmm3

	movapd xmm0, [esp + mci3030_ixH1]
	movapd xmm1, [esp + mci3030_iyH1]
	movapd xmm2, [esp + mci3030_izH1]
	movapd xmm3, [esp + mci3030_ixH1]
	movapd xmm4, [esp + mci3030_iyH1]
	movapd xmm5, [esp + mci3030_izH1]
	subsd  xmm0, [esp + mci3030_jxH1]
	subsd  xmm1, [esp + mci3030_jyH1]
	subsd  xmm2, [esp + mci3030_jzH1]
	subsd  xmm3, [esp + mci3030_jxH2]
	subsd  xmm4, [esp + mci3030_jyH2]
	subsd  xmm5, [esp + mci3030_jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci3030_rsqH1H1], xmm0
	movapd [esp + mci3030_rsqH1H2], xmm3

	movapd xmm0, [esp + mci3030_ixH2]
	movapd xmm1, [esp + mci3030_iyH2]
	movapd xmm2, [esp + mci3030_izH2]
	movapd xmm3, [esp + mci3030_ixH2]
	movapd xmm4, [esp + mci3030_iyH2]
	movapd xmm5, [esp + mci3030_izH2]
	subsd  xmm0, [esp + mci3030_jxO]
	subsd  xmm1, [esp + mci3030_jyO]
	subsd  xmm2, [esp + mci3030_jzO]
	subsd  xmm3, [esp + mci3030_jxH1]
	subsd  xmm4, [esp + mci3030_jyH1]
	subsd  xmm5, [esp + mci3030_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + mci3030_rsqH2O], xmm0
	movapd [esp + mci3030_rsqH2H1], xmm4

	movapd xmm0, [esp + mci3030_ixH2]
	movapd xmm1, [esp + mci3030_iyH2]
	movapd xmm2, [esp + mci3030_izH2]
	subsd  xmm0, [esp + mci3030_jxH2]
	subsd  xmm1, [esp + mci3030_jyH2]
	subsd  xmm2, [esp + mci3030_jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + mci3030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3030_half] ;# iter1 
	mulsd   xmm7, [esp + mci3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3030_half] ;# rinv 
	mulsd   xmm5, [esp + mci3030_half] ;# rinv 
	movapd [esp + mci3030_rinvH2H2], xmm1
	movapd [esp + mci3030_rinvH2H1], xmm5

	movapd xmm0, [esp + mci3030_rsqOO]
	movapd xmm4, [esp + mci3030_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3030_half] ;# iter1 of  
	mulsd   xmm7, [esp + mci3030_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3030_half] ;# rinv 
	mulsd   xmm5, [esp + mci3030_half] ;# rinv
	movapd [esp + mci3030_rinvOO], xmm1
	movapd [esp + mci3030_rinvOH1], xmm5

	movapd xmm0, [esp + mci3030_rsqOH2]
	movapd xmm4, [esp + mci3030_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3030_half] ;# iter1 
	mulsd   xmm7, [esp + mci3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3030_half] ;# rinv 
	mulsd   xmm5, [esp + mci3030_half] ;# rinv 
	movapd [esp + mci3030_rinvOH2], xmm1
	movapd [esp + mci3030_rinvH1O], xmm5

	movapd xmm0, [esp + mci3030_rsqH1H1]
	movapd xmm4, [esp + mci3030_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3030_half] ;# iter1a 
	mulsd   xmm7, [esp + mci3030_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3030_half] ;# rinv 
	mulsd   xmm5, [esp + mci3030_half] ;# rinv 
	movapd [esp + mci3030_rinvH1H1], xmm1
	movapd [esp + mci3030_rinvH1H2], xmm5

	movapd xmm0, [esp + mci3030_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci3030_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + mci3030_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci3030_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + mci3030_half] ;# rinv 
	movapd [esp + mci3030_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + mci3030_rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3030_rsqOO] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3030_tsc]

	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqOO]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addsd  xmm5, [esp + mci3030_vctot]
    movlpd [esp + mci3030_vctot], xmm5

	;# O-H1 interaction 
	movapd xmm0, [esp + mci3030_rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3030_rsqOH1] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3030_tsc]

	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addsd  xmm5, [esp + mci3030_vctot]
    movlpd [esp + mci3030_vctot], xmm5

	;# O-H2 interaction  
	movapd xmm0, [esp + mci3030_rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3030_rsqOH2] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3030_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3030_vctot]
    movlpd [esp + mci3030_vctot], xmm5

	;# H1-O interaction 
	movapd xmm0, [esp + mci3030_rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3030_rsqH1O] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3030_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3030_vctot]
    movlpd [esp + mci3030_vctot], xmm5

	;# H1-H1 interaction 
	movapd xmm0, [esp + mci3030_rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3030_rsqH1H1] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3030_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3030_vctot]
    movlpd [esp + mci3030_vctot], xmm5

	;# H1-H2 interaction 
	movapd xmm0, [esp + mci3030_rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3030_rsqH1H2] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3030_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3030_vctot]
    movlpd [esp + mci3030_vctot], xmm5

	;# H2-O interaction 
	movapd xmm0, [esp + mci3030_rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3030_rsqH2O] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3030_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3030_vctot]
    movlpd [esp + mci3030_vctot], xmm5

	;# H2-H1 interaction 
	movapd xmm0, [esp + mci3030_rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3030_rsqH2H1] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3030_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3030_vctot]
    movlpd [esp + mci3030_vctot], xmm5

	;# H2-H2 interaction 
	movapd xmm0, [esp + mci3030_rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3030_rsqH2H2] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3030_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3030_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3030_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3030_vctot]
    movlpd [esp + mci3030_vctot], xmm5
	
.mci3030_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci3030_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci3030_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci3030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci3030_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3030_nri]
	dec ecx
	jecxz .mci3030_end
	;# not last, iterate once more!  
	mov [ebp + mci3030_nri], ecx
	jmp .mci3030_outer
.mci3030_end:
	emms
	mov eax, [esp + mci3030_salign]
	add esp, eax
	add esp, 708
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	



.globl mcinl3100_sse2
.globl _mcinl3100_sse2
mcinl3100_sse2:	
_mcinl3100_sse2:	
.equiv		mci3100_nri,		8
.equiv		mci3100_iinr,		12
.equiv		mci3100_jindex,		16
.equiv		mci3100_jjnr,		20
.equiv		mci3100_shift,		24
.equiv		mci3100_shiftvec,	28
.equiv		mci3100_gid,		32
.equiv		mci3100_pos,		36
.equiv		mci3100_charge,		40
.equiv		mci3100_facel,		44 ;# double 
.equiv		mci3100_Vc,			52			
.equiv		mci3100_type,		56
.equiv		mci3100_ntype,		60
.equiv		mci3100_nbfp,		64	
.equiv		mci3100_Vnb,		68
.equiv		mci3100_tabscale,	72 ;# double 
.equiv		mci3100_VFtab,		80
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3100_ix,			0
.equiv		mci3100_iy,			16
.equiv		mci3100_iz,			32
.equiv		mci3100_iq,			48
.equiv		mci3100_tsc,		64
.equiv		mci3100_qq,			80	
.equiv		mci3100_c6,			96
.equiv		mci3100_c12,		112
.equiv		mci3100_vctot,		128
.equiv		mci3100_vnbtot,		144
.equiv		mci3100_half,		160
.equiv		mci3100_three,		176
.equiv		mci3100_is3,		192
.equiv		mci3100_ii3,		196
.equiv		mci3100_ntia,		200	
.equiv		mci3100_innerjjnr,	204
.equiv		mci3100_innerk,		208
.equiv		mci3100_salign,		212
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 216		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3100_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm5, [ebp + mci3100_tabscale]
	movapd [esp + mci3100_half],  xmm0
	movapd [esp + mci3100_three],  xmm2
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3100_tsc], xmm5

	;# assume we have at least one i particle - start directly 	
.mci3100_outer:
	mov   eax, [ebp + mci3100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci3100_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci3100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3100_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + mci3100_facel]
	shufpd xmm3, xmm3, 0

    mov   edx, [ebp + mci3100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci3100_ntype]
    shl   edx, 1
    mov   [esp + mci3100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3100_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + mci3100_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + mci3100_ix], xmm0
	movapd [esp + mci3100_iy], xmm1
	movapd [esp + mci3100_iz], xmm2

	mov   [esp + mci3100_ii3], ebx
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci3100_vctot], xmm4
	movapd [esp + mci3100_vnbtot], xmm4
	
	mov   eax, [ebp + mci3100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3100_pos]
	mov   eax, [ebp + mci3100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci3100_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3100_unroll_loop
	jmp   .mci3100_checksingle
.mci3100_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci3100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add dword ptr [esp + mci3100_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci3100_charge]    ;# base of charge[] 
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + mci3100_iq]
	mulpd  xmm3, xmm2
	movapd [esp + mci3100_qq], xmm3	
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + mci3100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + mci3100_nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + mci3100_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + mci3100_c6], xmm4
	movapd [esp + mci3100_c12], xmm6
	
	mov esi, [ebp + mci3100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci3100_ix]
	movapd xmm5, [esp + mci3100_iy]
	movapd xmm6, [esp + mci3100_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci3100_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3100_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci3100_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3100_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=rinv 
	
	mulpd xmm4, xmm0	;# xmm4=r 
	mulpd xmm4, [esp + mci3100_tsc]

	cvttpd2pi mm6, xmm4	;# mm6 = lu idx 
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	
	mov  esi, [ebp + mci3100_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3100_qq]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	
	;# L-J 
	movapd xmm4, xmm0
	mulpd  xmm4, xmm0	;# xmm4=rinvsq 

	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addpd  xmm5, [esp + mci3100_vctot]

	movapd xmm6, xmm4
	mulpd  xmm6, xmm4

	movapd [esp + mci3100_vctot], xmm5 

	mulpd  xmm6, xmm4	;# xmm6=rinvsix 
	movapd xmm4, xmm6
	mulpd  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulpd  xmm6, [esp + mci3100_c6]
	mulpd  xmm4, [esp + mci3100_c12]
	movapd xmm7, [esp + mci3100_vnbtot]
	addpd  xmm7, xmm4
	subpd  xmm7, xmm6
	movapd [esp + mci3100_vnbtot], xmm7
		
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3100_innerk],  2
	jl    .mci3100_checksingle
	jmp   .mci3100_unroll_loop
.mci3100_checksingle:
	mov   edx, [esp + mci3100_innerk]
	and   edx, 1
	jnz    .mci3100_dosingle
	jmp    .mci3100_updateouterdata
.mci3100_dosingle:
	mov esi, [ebp + mci3100_charge]
	mov edi, [ebp + mci3100_pos]
	mov   ecx, [esp + mci3100_innerjjnr]
	mov   eax, [ecx]
	
	xorpd  xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm2, [esp + mci3100_iq]
	mulpd  xmm3, xmm2
	movapd [esp + mci3100_qq], xmm3	
	
	movd  mm0, eax		;# use mmx registers as temp storage 
	mov esi, [ebp + mci3100_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + mci3100_nbfp]
	shl eax, 1
	mov edi, [esp + mci3100_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + mci3100_c6], xmm4
	movapd [esp + mci3100_c12], xmm6
	
	mov esi, [ebp + mci3100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	;# move ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci3100_ix]
	movapd xmm5, [esp + mci3100_iy]
	movapd xmm6, [esp + mci3100_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci3100_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3100_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci3100_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3100_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=rinv 
	
	mulsd xmm4, xmm0	;# xmm4=r 
	mulsd xmm4, [esp + mci3100_tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm4	;# mm6 = lu idx 
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	
	mov  esi, [ebp + mci3100_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3100_qq]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	
	;# L-J 
	movapd xmm4, xmm0
	mulsd  xmm4, xmm0	;# xmm4=rinvsq 

	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addsd  xmm5, [esp + mci3100_vctot]

	movapd xmm6, xmm4
	mulsd  xmm6, xmm4

	movlpd [esp + mci3100_vctot], xmm5 

	mulsd  xmm6, xmm4	;# xmm6=rinvsix 
	movapd xmm4, xmm6
	mulsd  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulsd  xmm6, [esp + mci3100_c6]
	mulsd  xmm4, [esp + mci3100_c12]
	movapd xmm7, [esp + mci3100_vnbtot]
	addsd  xmm7, xmm4
	subsd  xmm7, xmm6
	movlpd [esp + mci3100_vnbtot], xmm7
		
.mci3100_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci3100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci3100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci3100_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci3100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + mci3100_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3100_nri]
	dec ecx
	jecxz .mci3100_end
	;# not last, iterate once more!  
	mov [ebp + mci3100_nri], ecx
	jmp .mci3100_outer
.mci3100_end:
	emms
	mov eax, [esp + mci3100_salign]
	add esp, eax
	add esp, 216
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl mcinl3120_sse2
.globl _mcinl3120_sse2
mcinl3120_sse2:
_mcinl3120_sse2:
.equiv		mci3120_nri,		8
.equiv		mci3120_iinr,		12
.equiv		mci3120_jindex,		16
.equiv		mci3120_jjnr,		20
.equiv		mci3120_shift,		24
.equiv		mci3120_shiftvec,	28
.equiv		mci3120_gid,		32
.equiv		mci3120_pos,		36		
.equiv		mci3120_charge,		40
.equiv		mci3120_facel,		44 ;# double 
.equiv		mci3120_Vc,			52			
.equiv		mci3120_type,		56
.equiv		mci3120_ntype,		60
.equiv		mci3120_nbfp,		64	
.equiv		mci3120_Vnb,		68	
.equiv		mci3120_tabscale,	72 ;# double 	
.equiv		mci3120_VFtab,		80
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3120_ixO,		0
.equiv		mci3120_iyO,		16
.equiv		mci3120_izO,		32
.equiv		mci3120_ixH1,		48
.equiv		mci3120_iyH1,		64
.equiv		mci3120_izH1,		80
.equiv		mci3120_ixH2,		96
.equiv		mci3120_iyH2,		112
.equiv		mci3120_izH2,		128
.equiv		mci3120_iqO,		144 
.equiv		mci3120_iqH,		160 
.equiv		mci3120_qqO,		176
.equiv		mci3120_qqH,		192
.equiv		mci3120_rinvO,		208
.equiv		mci3120_rinvH1,		224
.equiv		mci3120_rinvH2,		240		
.equiv		mci3120_rO,			256
.equiv		mci3120_rH1,		272
.equiv		mci3120_rH2,		288
.equiv		mci3120_tsc,		304
.equiv		mci3120_c6,			320
.equiv		mci3120_c12,		336
.equiv		mci3120_vctot,		352
.equiv		mci3120_vnbtot,		368
.equiv		mci3120_half,		384
.equiv		mci3120_three,		400
.equiv		mci3120_is3,		416
.equiv		mci3120_ii3,		420
.equiv		mci3120_ntia,		424	
.equiv		mci3120_innerjjnr,	428
.equiv		mci3120_innerk,		432
.equiv		mci3120_salign,		436		
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 440		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3120_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm5, [ebp + mci3120_tabscale]
	
	movapd [esp + mci3120_half],  xmm0
	movapd [esp + mci3120_three],  xmm2
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3120_tsc], xmm5
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3120_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + mci3120_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + mci3120_iqO], xmm3
	movapd [esp + mci3120_iqH], xmm4
	
	mov   edx, [ebp + mci3120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + mci3120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + mci3120_ntia], ecx		
.mci3120_outer:
	mov   eax, [ebp + mci3120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci3120_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci3120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3120_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3120_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3120_ixO], xmm3
	movapd [esp + mci3120_iyO], xmm4
	movapd [esp + mci3120_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3120_ixH1], xmm0
	movapd [esp + mci3120_iyH1], xmm1
	movapd [esp + mci3120_izH1], xmm2
	movapd [esp + mci3120_ixH2], xmm3
	movapd [esp + mci3120_iyH2], xmm4
	movapd [esp + mci3120_izH2], xmm5
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci3120_vctot], xmm4
	movapd [esp + mci3120_vnbtot], xmm4
	
	mov   eax, [ebp + mci3120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3120_pos]
	mov   eax, [ebp + mci3120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci3120_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3120_unroll_loop
	jmp   .mci3120_checksingle
.mci3120_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci3120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add dword ptr [esp + mci3120_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci3120_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + mci3120_iqO]
	mulpd  xmm4, [esp + mci3120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx

	movapd  [esp + mci3120_qqO], xmm3
	movapd  [esp + mci3120_qqH], xmm4	

	mov esi, [ebp + mci3120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + mci3120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + mci3120_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + mci3120_c6], xmm4
	movapd [esp + mci3120_c12], xmm6

	mov esi, [ebp + mci3120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci3120_ixO]
	movapd xmm5, [esp + mci3120_iyO]
	movapd xmm6, [esp + mci3120_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci3120_ixH1]
	movapd xmm5, [esp + mci3120_iyH1]
	movapd xmm6, [esp + mci3120_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci3120_ixH2]
	movapd xmm4, [esp + mci3120_iyH2]
	movapd xmm5, [esp + mci3120_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci3120_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3120_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci3120_half] ;# rinv 
	movapd  [esp + mci3120_rinvO], xmm4	;# rinvO in xmm4 
	mulpd   xmm7, xmm4
	movapd  [esp + mci3120_rO], xmm7	;# r in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci3120_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3120_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci3120_half] ;# rinv 
	movapd [esp + mci3120_rinvH1], xmm4	;# rinvH1 
	mulpd  xmm6, xmm4
	movapd [esp + mci3120_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci3120_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3120_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci3120_half] ;# rinv 
	movapd [esp + mci3120_rinvH2], xmm4 ;# rinv 
	mulpd xmm5, xmm4
	movapd [esp + mci3120_rH2], xmm5 ;# r 

	;# do O interactions 
	;# rO is still in xmm7 
	movapd xmm0, [esp + mci3120_rinvO]
	mulpd   xmm7, [esp + mci3120_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + mci3120_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  
    mulpd  xmm6, xmm1       ;# xmm6=Geps 
    mulpd  xmm7, xmm2       ;# xmm7=Heps2 
    addpd  xmm5, xmm6
    addpd  xmm5, xmm7       ;# xmm5=Fp        
    movapd xmm0, [esp + mci3120_qqO]
    mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
    addpd  xmm5, xmm4 ;# xmm5=VV 
    mulpd  xmm5, xmm0 ;# vcoul=qq*VV  

	;# do nontable L-J 
	movapd xmm2, [esp + mci3120_rinvO]
	mulpd  xmm2, xmm2

    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addpd  xmm5, [esp + mci3120_vctot]
    movapd [esp + mci3120_vctot], xmm5 

	movapd xmm1, xmm2
	mulpd  xmm1, xmm1
	mulpd  xmm1, xmm2	;# xmm1=rinvsix 
	movapd xmm4, xmm1
	mulpd  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulpd  xmm1, [esp + mci3120_c6]
	mulpd  xmm4, [esp + mci3120_c12]
	movapd xmm3, xmm4
	subpd  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addpd  xmm3, [esp + mci3120_vnbtot]
	movapd [esp + mci3120_vnbtot], xmm3
	

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + mci3120_rH1]
	mulpd xmm7, [esp + mci3120_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3120_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3120_qqH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addpd  xmm5, [esp + mci3120_vctot]
    movapd [esp + mci3120_vctot], xmm5 

	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + mci3120_rH2]
	mulpd   xmm7, [esp + mci3120_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3120_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3120_qqH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addpd  xmm5, [esp + mci3120_vctot]
    movapd [esp + mci3120_vctot], xmm5 
			
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3120_innerk],  2
	jl    .mci3120_checksingle
	jmp   .mci3120_unroll_loop
.mci3120_checksingle:	
	mov   edx, [esp + mci3120_innerk]
	and   edx, 1
	jnz   .mci3120_dosingle
	jmp   .mci3120_updateouterdata
.mci3120_dosingle:
	mov   edx, [esp + mci3120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]

	mov esi, [ebp + mci3120_charge]    ;# base of charge[] 
	xorpd xmm3, xmm3	
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + mci3120_iqO]
	mulpd  xmm4, [esp + mci3120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movapd  [esp + mci3120_qqO], xmm3
	movapd  [esp + mci3120_qqH], xmm4	

	mov esi, [ebp + mci3120_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + mci3120_nbfp]
	shl eax, 1	
	mov edi, [esp + mci3120_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + mci3120_c6], xmm4
	movapd [esp + mci3120_c12], xmm6
	
	mov esi, [ebp + mci3120_pos]       ;# base of pos[] 
	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	
	;# move coords to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci3120_ixO]
	movapd xmm5, [esp + mci3120_iyO]
	movapd xmm6, [esp + mci3120_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci3120_ixH1]
	movapd xmm5, [esp + mci3120_iyH1]
	movapd xmm6, [esp + mci3120_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci3120_ixH2]
	movapd xmm4, [esp + mci3120_iyH2]
	movapd xmm5, [esp + mci3120_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci3120_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3120_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci3120_half] ;# rinv 
	movapd  [esp + mci3120_rinvO], xmm4	;# rinvO in xmm4 
	mulsd   xmm7, xmm4
	movapd  [esp + mci3120_rO], xmm7	;# r in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci3120_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3120_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci3120_half] ;# rinv 
	movapd [esp + mci3120_rinvH1], xmm4	;# rinvH1 
	mulsd  xmm6, xmm4
	movapd [esp + mci3120_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci3120_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci3120_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3120_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci3120_half] ;# rinv 
	movapd [esp + mci3120_rinvH2], xmm4 ;# rinv 
	mulsd xmm5, xmm4
	movapd [esp + mci3120_rH2], xmm5 ;# r 

	;# do O interactions 
	movd mm0, eax	
	;# rO is still in xmm7 
	movapd xmm0, [esp + mci3120_rinvO]
	mulsd   xmm7, [esp + mci3120_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3120_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  
    mulsd  xmm6, xmm1       ;# xmm6=Geps 
    mulsd  xmm7, xmm2       ;# xmm7=Heps2 
    addsd  xmm5, xmm6
    addsd  xmm5, xmm7       ;# xmm5=Fp        
    movapd xmm0, [esp + mci3120_qqO]
    mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
    addsd  xmm5, xmm4 ;# xmm5=VV 
    mulsd  xmm5, xmm0 ;# vcoul=qq*VV  

	;# do nontable L-J 
	movapd xmm2, [esp + mci3120_rinvO]
	mulsd  xmm2, xmm2

    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    addsd  xmm5, [esp + mci3120_vctot]
    movlpd [esp + mci3120_vctot], xmm5 

	movapd xmm1, xmm2
	mulsd  xmm1, xmm1
	mulsd  xmm1, xmm2	;# xmm1=rinvsix 
	movapd xmm4, xmm1
	mulsd  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulsd  xmm1, [esp + mci3120_c6]
	mulsd  xmm4, [esp + mci3120_c12]
	movapd xmm3, xmm4
	subsd  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addsd  xmm3, [esp + mci3120_vnbtot]
	movlpd [esp + mci3120_vnbtot], xmm3

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + mci3120_rH1]
	mulpd xmm7, [esp + mci3120_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3120_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3120_qqH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addsd  xmm5, [esp + mci3120_vctot]
    movlpd [esp + mci3120_vctot], xmm5 

	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + mci3120_rH2]
	mulsd   xmm7, [esp + mci3120_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3120_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3120_qqH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addsd  xmm5, [esp + mci3120_vctot]
    movlpd [esp + mci3120_vctot], xmm5
	
.mci3120_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci3120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci3120_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci3120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci3120_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci3120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci3120_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3120_nri]
	dec ecx
	jecxz .mci3120_end
	;# not last, iterate once more!  
	mov [ebp + mci3120_nri], ecx
	jmp .mci3120_outer
.mci3120_end:
	emms
	mov eax, [esp + mci3120_salign]
	add esp, eax
	add esp, 440
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

	
.globl mcinl3130_sse2
.globl _mcinl3130_sse2
mcinl3130_sse2:	
_mcinl3130_sse2:	
.equiv		mci3130_nri,		8
.equiv		mci3130_iinr,		12
.equiv		mci3130_jindex,		16
.equiv		mci3130_jjnr,		20
.equiv		mci3130_shift,		24
.equiv		mci3130_shiftvec,	28
.equiv		mci3130_gid,		32
.equiv		mci3130_pos,		36		
.equiv		mci3130_charge,		40
.equiv		mci3130_facel,		44 ;# double 	
.equiv		mci3130_Vc,			52			
.equiv		mci3130_type,		56
.equiv		mci3130_ntype,		60
.equiv		mci3130_nbfp,		64	
.equiv		mci3130_Vnb,		68
.equiv		mci3130_tabscale,	72 ;# double 	
.equiv		mci3130_VFtab,		80
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3130_ixO,		0
.equiv		mci3130_iyO,		16
.equiv		mci3130_izO,		32
.equiv		mci3130_ixH1,		48
.equiv		mci3130_iyH1,		64
.equiv		mci3130_izH1,		80
.equiv		mci3130_ixH2,		96
.equiv		mci3130_iyH2,		112
.equiv		mci3130_izH2,		128
.equiv		mci3130_jxO,		144
.equiv		mci3130_jyO,		160
.equiv		mci3130_jzO,		176
.equiv		mci3130_jxH1,		192
.equiv		mci3130_jyH1,		208
.equiv		mci3130_jzH1,		224 
.equiv		mci3130_jxH2,		240
.equiv		mci3130_jyH2,		256
.equiv		mci3130_jzH2,		272
.equiv		mci3130_qqOO,		288
.equiv		mci3130_qqOH,		304
.equiv		mci3130_qqHH,		320
.equiv		mci3130_tsc,		336
.equiv		mci3130_c6,			352
.equiv		mci3130_c12,		368		 
.equiv		mci3130_vctot,		384
.equiv		mci3130_vnbtot,		400
.equiv		mci3130_half,		416
.equiv		mci3130_three,		432
.equiv		mci3130_rsqOO,		448
.equiv		mci3130_rsqOH1,		464
.equiv		mci3130_rsqOH2,		480
.equiv		mci3130_rsqH1O,		496
.equiv		mci3130_rsqH1H1,	512
.equiv		mci3130_rsqH1H2,	528
.equiv		mci3130_rsqH2O,		544
.equiv		mci3130_rsqH2H1,	560
.equiv		mci3130_rsqH2H2,	576
.equiv		mci3130_rinvOO,		592
.equiv		mci3130_rinvOH1,	608
.equiv		mci3130_rinvOH2,	624
.equiv		mci3130_rinvH1O,	640
.equiv		mci3130_rinvH1H1,	656
.equiv		mci3130_rinvH1H2,	672
.equiv		mci3130_rinvH2O,	688
.equiv		mci3130_rinvH2H1,	704
.equiv		mci3130_rinvH2H2,	720	
.equiv		mci3130_is3,		736
.equiv		mci3130_ii3,		740
.equiv		mci3130_innerjjnr,	744
.equiv		mci3130_innerk,		748
.equiv		mci3130_salign,		752
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 756		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3130_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm5, [ebp + mci3130_tabscale]
	movapd [esp + mci3130_half],  xmm0
	movapd [esp + mci3130_three], xmm2
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3130_tsc],  xmm5

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3130_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + mci3130_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3130_qqOO], xmm3
	movapd [esp + mci3130_qqOH], xmm4
	movapd [esp + mci3130_qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + mci3130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + mci3130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + mci3130_nbfp]
	movupd xmm0, [eax + edx*8] 
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + mci3130_c6], xmm0
	movapd [esp + mci3130_c12], xmm1

.mci3130_outer:
	mov   eax, [ebp + mci3130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci3130_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci3130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3130_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3130_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3130_ixO], xmm3
	movapd [esp + mci3130_iyO], xmm4
	movapd [esp + mci3130_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3130_ixH1], xmm0
	movapd [esp + mci3130_iyH1], xmm1
	movapd [esp + mci3130_izH1], xmm2
	movapd [esp + mci3130_ixH2], xmm3
	movapd [esp + mci3130_iyH2], xmm4
	movapd [esp + mci3130_izH2], xmm5

	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci3130_vctot], xmm4
	movapd [esp + mci3130_vnbtot], xmm4
	
	mov   eax, [ebp + mci3130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3130_pos]
	mov   eax, [ebp + mci3130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci3130_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3130_unroll_loop
	jmp   .mci3130_checksingle
.mci3130_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci3130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + mci3130_innerjjnr], 8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci3130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + mci3130_jxO], xmm2
	movapd 	[esp + mci3130_jyO], xmm3
	movapd 	[esp + mci3130_jzO], xmm4
	movapd 	[esp + mci3130_jxH1], xmm5
	movapd 	[esp + mci3130_jyH1], xmm6
	movapd 	[esp + mci3130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + mci3130_jxH2], xmm2
	movapd 	[esp + mci3130_jyH2], xmm3
	movapd 	[esp + mci3130_jzH2], xmm4
	
	movapd xmm0, [esp + mci3130_ixO]
	movapd xmm1, [esp + mci3130_iyO]
	movapd xmm2, [esp + mci3130_izO]
	movapd xmm3, [esp + mci3130_ixO]
	movapd xmm4, [esp + mci3130_iyO]
	movapd xmm5, [esp + mci3130_izO]
	subpd  xmm0, [esp + mci3130_jxO]
	subpd  xmm1, [esp + mci3130_jyO]
	subpd  xmm2, [esp + mci3130_jzO]
	subpd  xmm3, [esp + mci3130_jxH1]
	subpd  xmm4, [esp + mci3130_jyH1]
	subpd  xmm5, [esp + mci3130_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci3130_rsqOO], xmm0
	movapd [esp + mci3130_rsqOH1], xmm3

	movapd xmm0, [esp + mci3130_ixO]
	movapd xmm1, [esp + mci3130_iyO]
	movapd xmm2, [esp + mci3130_izO]
	movapd xmm3, [esp + mci3130_ixH1]
	movapd xmm4, [esp + mci3130_iyH1]
	movapd xmm5, [esp + mci3130_izH1]
	subpd  xmm0, [esp + mci3130_jxH2]
	subpd  xmm1, [esp + mci3130_jyH2]
	subpd  xmm2, [esp + mci3130_jzH2]
	subpd  xmm3, [esp + mci3130_jxO]
	subpd  xmm4, [esp + mci3130_jyO]
	subpd  xmm5, [esp + mci3130_jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci3130_rsqOH2], xmm0
	movapd [esp + mci3130_rsqH1O], xmm3

	movapd xmm0, [esp + mci3130_ixH1]
	movapd xmm1, [esp + mci3130_iyH1]
	movapd xmm2, [esp + mci3130_izH1]
	movapd xmm3, [esp + mci3130_ixH1]
	movapd xmm4, [esp + mci3130_iyH1]
	movapd xmm5, [esp + mci3130_izH1]
	subpd  xmm0, [esp + mci3130_jxH1]
	subpd  xmm1, [esp + mci3130_jyH1]
	subpd  xmm2, [esp + mci3130_jzH1]
	subpd  xmm3, [esp + mci3130_jxH2]
	subpd  xmm4, [esp + mci3130_jyH2]
	subpd  xmm5, [esp + mci3130_jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci3130_rsqH1H1], xmm0
	movapd [esp + mci3130_rsqH1H2], xmm3

	movapd xmm0, [esp + mci3130_ixH2]
	movapd xmm1, [esp + mci3130_iyH2]
	movapd xmm2, [esp + mci3130_izH2]
	movapd xmm3, [esp + mci3130_ixH2]
	movapd xmm4, [esp + mci3130_iyH2]
	movapd xmm5, [esp + mci3130_izH2]
	subpd  xmm0, [esp + mci3130_jxO]
	subpd  xmm1, [esp + mci3130_jyO]
	subpd  xmm2, [esp + mci3130_jzO]
	subpd  xmm3, [esp + mci3130_jxH1]
	subpd  xmm4, [esp + mci3130_jyH1]
	subpd  xmm5, [esp + mci3130_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + mci3130_rsqH2O], xmm0
	movapd [esp + mci3130_rsqH2H1], xmm4

	movapd xmm0, [esp + mci3130_ixH2]
	movapd xmm1, [esp + mci3130_iyH2]
	movapd xmm2, [esp + mci3130_izH2]
	subpd  xmm0, [esp + mci3130_jxH2]
	subpd  xmm1, [esp + mci3130_jyH2]
	subpd  xmm2, [esp + mci3130_jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + mci3130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3130_half] ;# iter1 
	mulpd   xmm7, [esp + mci3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3130_half] ;# rinv 
	mulpd   xmm5, [esp + mci3130_half] ;# rinv 
	movapd [esp + mci3130_rinvH2H2], xmm1
	movapd [esp + mci3130_rinvH2H1], xmm5

	movapd xmm0, [esp + mci3130_rsqOO]
	movapd xmm4, [esp + mci3130_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3130_half] ;# iter1 of  
	mulpd   xmm7, [esp + mci3130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3130_half] ;# rinv 
	mulpd   xmm5, [esp + mci3130_half] ;# rinv
	movapd [esp + mci3130_rinvOO], xmm1
	movapd [esp + mci3130_rinvOH1], xmm5

	movapd xmm0, [esp + mci3130_rsqOH2]
	movapd xmm4, [esp + mci3130_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3130_half] ;# iter1 
	mulpd   xmm7, [esp + mci3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3130_half] ;# rinv 
	mulpd   xmm5, [esp + mci3130_half] ;# rinv 
	movapd [esp + mci3130_rinvOH2], xmm1
	movapd [esp + mci3130_rinvH1O], xmm5

	movapd xmm0, [esp + mci3130_rsqH1H1]
	movapd xmm4, [esp + mci3130_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3130_half] ;# iter1a 
	mulpd   xmm7, [esp + mci3130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3130_half] ;# rinv 
	mulpd   xmm5, [esp + mci3130_half] ;# rinv 
	movapd [esp + mci3130_rinvH1H1], xmm1
	movapd [esp + mci3130_rinvH1H2], xmm5

	movapd xmm0, [esp + mci3130_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci3130_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + mci3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci3130_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + mci3130_half] ;# rinv 
	movapd [esp + mci3130_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + mci3130_rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3130_rsqOO] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3130_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqOO]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addpd  xmm5, [esp + mci3130_vctot]
    movapd [esp + mci3130_vctot], xmm5

	;# start doing lj 
	movapd xmm2, xmm0
	mulpd  xmm2, xmm2
	movapd xmm1, xmm2
	mulpd  xmm1, xmm2
	mulpd  xmm1, xmm2	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulpd  xmm1, [esp + mci3130_c6]
	mulpd  xmm2, [esp + mci3130_c12]
	movapd xmm4, xmm2
	subpd  xmm4, xmm1
	addpd  xmm4, [esp + mci3130_vnbtot]
	movapd [esp + mci3130_vnbtot], xmm4

	;# O-H1 interaction 
	movapd xmm0, [esp + mci3130_rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3130_rsqOH1] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3130_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3130_vctot]
    movapd [esp + mci3130_vctot], xmm5

	;# O-H2 interaction  
	movapd xmm0, [esp + mci3130_rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3130_rsqOH2] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3130_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3130_vctot]
    movapd [esp + mci3130_vctot], xmm5

	;# H1-O interaction 
	movapd xmm0, [esp + mci3130_rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3130_rsqH1O] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3130_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3130_vctot]
    movapd [esp + mci3130_vctot], xmm5

	;# H1-H1 interaction 
	movapd xmm0, [esp + mci3130_rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3130_rsqH1H1] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3130_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3130_vctot]
    movapd [esp + mci3130_vctot], xmm5

	;# H1-H2 interaction 
	movapd xmm0, [esp + mci3130_rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3130_rsqH1H2] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3130_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3130_vctot]
    movapd [esp + mci3130_vctot], xmm5

	;# H2-O interaction 
	movapd xmm0, [esp + mci3130_rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3130_rsqH2O] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3130_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3130_vctot]
    movapd [esp + mci3130_vctot], xmm5

	;# H2-H1 interaction 
	movapd xmm0, [esp + mci3130_rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3130_rsqH2H1] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3130_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3130_vctot]
    movapd [esp + mci3130_vctot], xmm5

	;# H2-H2 interaction 
	movapd xmm0, [esp + mci3130_rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3130_rsqH2H2] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3130_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
	
    addpd  xmm5, [esp + mci3130_vctot]
    movapd [esp + mci3130_vctot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci3130_innerk],  2
	jl    .mci3130_checksingle
	jmp   .mci3130_unroll_loop
.mci3130_checksingle:
	mov   edx, [esp + mci3130_innerk]
	and   edx, 1
	jnz   .mci3130_dosingle
	jmp   .mci3130_updateouterdata
.mci3130_dosingle:
	mov   edx, [esp + mci3130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]

	mov esi, [ebp + mci3130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + mci3130_jxO], xmm2
	movapd 	[esp + mci3130_jyO], xmm3
	movapd 	[esp + mci3130_jzO], xmm4
	movapd 	[esp + mci3130_jxH1], xmm5
	movapd 	[esp + mci3130_jyH1], xmm6
	movapd 	[esp + mci3130_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + mci3130_jxH2], xmm2
	movapd 	[esp + mci3130_jyH2], xmm3
	movapd 	[esp + mci3130_jzH2], xmm4
	
	movapd xmm0, [esp + mci3130_ixO]
	movapd xmm1, [esp + mci3130_iyO]
	movapd xmm2, [esp + mci3130_izO]
	movapd xmm3, [esp + mci3130_ixO]
	movapd xmm4, [esp + mci3130_iyO]
	movapd xmm5, [esp + mci3130_izO]
	subsd  xmm0, [esp + mci3130_jxO]
	subsd  xmm1, [esp + mci3130_jyO]
	subsd  xmm2, [esp + mci3130_jzO]
	subsd  xmm3, [esp + mci3130_jxH1]
	subsd  xmm4, [esp + mci3130_jyH1]
	subsd  xmm5, [esp + mci3130_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci3130_rsqOO], xmm0
	movapd [esp + mci3130_rsqOH1], xmm3

	movapd xmm0, [esp + mci3130_ixO]
	movapd xmm1, [esp + mci3130_iyO]
	movapd xmm2, [esp + mci3130_izO]
	movapd xmm3, [esp + mci3130_ixH1]
	movapd xmm4, [esp + mci3130_iyH1]
	movapd xmm5, [esp + mci3130_izH1]
	subsd  xmm0, [esp + mci3130_jxH2]
	subsd  xmm1, [esp + mci3130_jyH2]
	subsd  xmm2, [esp + mci3130_jzH2]
	subsd  xmm3, [esp + mci3130_jxO]
	subsd  xmm4, [esp + mci3130_jyO]
	subsd  xmm5, [esp + mci3130_jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci3130_rsqOH2], xmm0
	movapd [esp + mci3130_rsqH1O], xmm3

	movapd xmm0, [esp + mci3130_ixH1]
	movapd xmm1, [esp + mci3130_iyH1]
	movapd xmm2, [esp + mci3130_izH1]
	movapd xmm3, [esp + mci3130_ixH1]
	movapd xmm4, [esp + mci3130_iyH1]
	movapd xmm5, [esp + mci3130_izH1]
	subsd  xmm0, [esp + mci3130_jxH1]
	subsd  xmm1, [esp + mci3130_jyH1]
	subsd  xmm2, [esp + mci3130_jzH1]
	subsd  xmm3, [esp + mci3130_jxH2]
	subsd  xmm4, [esp + mci3130_jyH2]
	subsd  xmm5, [esp + mci3130_jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci3130_rsqH1H1], xmm0
	movapd [esp + mci3130_rsqH1H2], xmm3

	movapd xmm0, [esp + mci3130_ixH2]
	movapd xmm1, [esp + mci3130_iyH2]
	movapd xmm2, [esp + mci3130_izH2]
	movapd xmm3, [esp + mci3130_ixH2]
	movapd xmm4, [esp + mci3130_iyH2]
	movapd xmm5, [esp + mci3130_izH2]
	subsd  xmm0, [esp + mci3130_jxO]
	subsd  xmm1, [esp + mci3130_jyO]
	subsd  xmm2, [esp + mci3130_jzO]
	subsd  xmm3, [esp + mci3130_jxH1]
	subsd  xmm4, [esp + mci3130_jyH1]
	subsd  xmm5, [esp + mci3130_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + mci3130_rsqH2O], xmm0
	movapd [esp + mci3130_rsqH2H1], xmm4

	movapd xmm0, [esp + mci3130_ixH2]
	movapd xmm1, [esp + mci3130_iyH2]
	movapd xmm2, [esp + mci3130_izH2]
	subsd  xmm0, [esp + mci3130_jxH2]
	subsd  xmm1, [esp + mci3130_jyH2]
	subsd  xmm2, [esp + mci3130_jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + mci3130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3130_half] ;# iter1 
	mulsd   xmm7, [esp + mci3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3130_half] ;# rinv 
	mulsd   xmm5, [esp + mci3130_half] ;# rinv 
	movapd [esp + mci3130_rinvH2H2], xmm1
	movapd [esp + mci3130_rinvH2H1], xmm5

	movapd xmm0, [esp + mci3130_rsqOO]
	movapd xmm4, [esp + mci3130_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3130_half] ;# iter1 of  
	mulsd   xmm7, [esp + mci3130_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3130_half] ;# rinv 
	mulsd   xmm5, [esp + mci3130_half] ;# rinv
	movapd [esp + mci3130_rinvOO], xmm1
	movapd [esp + mci3130_rinvOH1], xmm5

	movapd xmm0, [esp + mci3130_rsqOH2]
	movapd xmm4, [esp + mci3130_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3130_half] ;# iter1 
	mulsd   xmm7, [esp + mci3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3130_half] ;# rinv 
	mulsd   xmm5, [esp + mci3130_half] ;# rinv 
	movapd [esp + mci3130_rinvOH2], xmm1
	movapd [esp + mci3130_rinvH1O], xmm5

	movapd xmm0, [esp + mci3130_rsqH1H1]
	movapd xmm4, [esp + mci3130_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3130_half] ;# iter1a 
	mulsd   xmm7, [esp + mci3130_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3130_half] ;# rinv 
	mulsd   xmm5, [esp + mci3130_half] ;# rinv 
	movapd [esp + mci3130_rinvH1H1], xmm1
	movapd [esp + mci3130_rinvH1H2], xmm5

	movapd xmm0, [esp + mci3130_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci3130_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + mci3130_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci3130_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + mci3130_half] ;# rinv 
	movapd [esp + mci3130_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + mci3130_rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3130_rsqOO] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3130_tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqOO]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addsd  xmm5, [esp + mci3130_vctot]
    movlpd [esp + mci3130_vctot], xmm5

	;# start doing lj 
	movapd xmm2, xmm0
	mulsd  xmm2, xmm2
	movapd xmm1, xmm2
	mulsd  xmm1, xmm2
	mulsd  xmm1, xmm2	;# xmm1=rinvsix 
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulsd  xmm1, [esp + mci3130_c6]
	mulsd  xmm2, [esp + mci3130_c12]
	movapd xmm4, xmm2
	subsd  xmm4, xmm1
	addsd  xmm4, [esp + mci3130_vnbtot]
	movlpd [esp + mci3130_vnbtot], xmm4

	;# O-H1 interaction 
	movapd xmm0, [esp + mci3130_rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3130_rsqOH1] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3130_tsc]

	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3130_vctot]
    movlpd [esp + mci3130_vctot], xmm5

	;# O-H2 interaction  
	movapd xmm0, [esp + mci3130_rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3130_rsqOH2] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3130_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3130_vctot]
    movlpd [esp + mci3130_vctot], xmm5

	;# H1-O interaction 
	movapd xmm0, [esp + mci3130_rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3130_rsqH1O] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3130_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3130_vctot]
    movlpd [esp + mci3130_vctot], xmm5

	;# H1-H1 interaction 
	movapd xmm0, [esp + mci3130_rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3130_rsqH1H1] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3130_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3130_vctot]
    movlpd [esp + mci3130_vctot], xmm5

	;# H1-H2 interaction 
	movapd xmm0, [esp + mci3130_rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3130_rsqH1H2] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3130_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3130_vctot]
    movlpd [esp + mci3130_vctot], xmm5

	;# H2-O interaction 
	movapd xmm0, [esp + mci3130_rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3130_rsqH2O] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3130_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3130_vctot]
    movlpd [esp + mci3130_vctot], xmm5

	;# H2-H1 interaction 
	movapd xmm0, [esp + mci3130_rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3130_rsqH2H1] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3130_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3130_vctot]
    movlpd [esp + mci3130_vctot], xmm5
	
	;# H2-H2 interaction 
	movapd xmm0, [esp + mci3130_rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3130_rsqH2H2] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3130_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3130_VFtab]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3130_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3130_vctot]
    movlpd [esp + mci3130_vctot], xmm5
	
.mci3130_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci3130_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci3130_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci3130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci3130_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci3130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci3130_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3130_nri]
	dec ecx
	jecxz .mci3130_end
	;# not last, iterate once more!  
	mov [ebp + mci3130_nri], ecx
	jmp .mci3130_outer
.mci3130_end:
	emms
	mov eax, [esp + mci3130_salign]
	add esp, eax
	add esp, 756
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	


.globl mcinl3300_sse2
.globl _mcinl3300_sse2
mcinl3300_sse2:	
_mcinl3300_sse2:	
.equiv		mci3300_nri,		8
.equiv		mci3300_iinr,		12
.equiv		mci3300_jindex,		16
.equiv		mci3300_jjnr,		20
.equiv		mci3300_shift,		24
.equiv		mci3300_shiftvec,	28
.equiv		mci3300_gid,		32
.equiv		mci3300_pos,		36		
.equiv		mci3300_charge,		40
.equiv		mci3300_facel,		44 ;# double 
.equiv		mci3300_Vc,			52			
.equiv		mci3300_type,		56
.equiv		mci3300_ntype,		60
.equiv		mci3300_nbfp,		64	
.equiv		mci3300_Vnb,		68
.equiv		mci3300_tabscale,	72 ;# double 
.equiv		mci3300_VFtab,		80
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3300_ix,			0
.equiv		mci3300_iy,			16
.equiv		mci3300_iz,			32
.equiv		mci3300_iq,			48
.equiv		mci3300_tsc,		64
.equiv		mci3300_qq,			80	
.equiv		mci3300_c6,			96
.equiv		mci3300_c12,		112
.equiv		mci3300_vctot,		128
.equiv		mci3300_vnbtot,		144
.equiv		mci3300_half,		160
.equiv		mci3300_three,		176
.equiv		mci3300_is3,		192
.equiv		mci3300_ii3,		196
.equiv		mci3300_ntia,		200	
.equiv		mci3300_innerjjnr,	204
.equiv		mci3300_innerk,		208
.equiv		mci3300_salign,		212
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 216		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3300_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + mci3300_tabscale]
	movapd [esp + mci3300_half],  xmm0
	movapd [esp + mci3300_three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + mci3300_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.mci3300_outer:
	mov   eax, [ebp + mci3300_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3300_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci3300_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci3300_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3300_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3300_charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + mci3300_facel]
	shufpd xmm3, xmm3, 0

    mov   edx, [ebp + mci3300_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci3300_ntype]
    shl   edx, 1
    mov   [esp + mci3300_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3300_pos]    ;# eax = base of pos[]  

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + mci3300_iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + mci3300_ix], xmm0
	movapd [esp + mci3300_iy], xmm1
	movapd [esp + mci3300_iz], xmm2

	mov   [esp + mci3300_ii3], ebx
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci3300_vctot], xmm4
	movapd [esp + mci3300_vnbtot], xmm4
	
	mov   eax, [ebp + mci3300_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3300_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3300_pos]
	mov   eax, [ebp + mci3300_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3300_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci3300_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3300_unroll_loop
	jmp   .mci3300_checksingle
.mci3300_unroll_loop:	
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci3300_innerjjnr]   ;# pointer to jjnr[k] 
	mov   eax, [edx]
	mov   ebx, [edx + 4]
	add dword ptr [esp + mci3300_innerjjnr], 8	;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci3300_charge]    ;# base of charge[] 

	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + mci3300_iq]
	mulpd  xmm3, xmm2
	movapd [esp + mci3300_qq], xmm3	

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	
	mov esi, [ebp + mci3300_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + mci3300_nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + mci3300_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + mci3300_c6], xmm4
	movapd [esp + mci3300_c12], xmm6
	
	mov esi, [ebp + mci3300_pos]		;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move mci3300_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci3300_ix]
	movapd xmm5, [esp + mci3300_iy]
	movapd xmm6, [esp + mci3300_iz]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	;# rsq in xmm4 

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulpd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci3300_three]
	mulpd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3300_half]
	subpd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulpd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci3300_three]
	mulpd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3300_half]
	subpd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	mulpd xmm4, xmm0	;# xmm4=r 
	mulpd xmm4, [esp + mci3300_tsc]

	cvttpd2pi mm6, xmm4	;# mm6 = lu idx 
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 

	mov  esi, [ebp + mci3300_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	;# Coulomb 
	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3300_qq]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV 
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addpd  xmm5, [esp + mci3300_vctot]
	movapd [esp + mci3300_vctot], xmm5 

	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 32]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 48]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	mulpd  xmm5, [esp + mci3300_c6] ;# vnb6 

	addpd  xmm5, [esp + mci3300_vnbtot]
	movapd [esp + mci3300_vnbtot], xmm5

	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 64]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 80]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	mulpd  xmm5, [esp + mci3300_c12] ;# vnb12 
	
	addpd  xmm5, [esp + mci3300_vnbtot]
	movapd [esp + mci3300_vnbtot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci3300_innerk],  2
	jl    .mci3300_checksingle
	jmp   .mci3300_unroll_loop
.mci3300_checksingle:
	mov   edx, [esp + mci3300_innerk]
	and   edx, 1
	jnz    .mci3300_dosingle
	jmp    .mci3300_updateouterdata
.mci3300_dosingle:
	mov esi, [ebp + mci3300_charge]
	mov edi, [ebp + mci3300_pos]
	mov   ecx, [esp + mci3300_innerjjnr]
	mov   eax, [ecx]	
	xorpd  xmm3, xmm3
	movlpd xmm3, [esi + eax*8]	;# xmm6(0) has the charge 	
	mulpd  xmm3, [esp + mci3300_iq]
	movapd [esp + mci3300_qq], xmm3

	movd  mm0, eax		;# use mmx registers as temp storage 
	
	mov esi, [ebp + mci3300_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + mci3300_nbfp]
	shl eax, 1
	mov edi, [esp + mci3300_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + mci3300_c6], xmm4
	movapd [esp + mci3300_c12], xmm6
	
	mov esi, [ebp + mci3300_pos]		;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 

	;# move two coordinates to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move mci3300_ix-iz to xmm4-xmm6 
	movapd xmm4, [esp + mci3300_ix]
	movapd xmm5, [esp + mci3300_iy]
	movapd xmm6, [esp + mci3300_iz]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	;# rsq in xmm4 

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	;# lu in low xmm2 

	;# lookup seed in xmm2 
	movapd xmm5, xmm2	;# copy of lu 
	mulsd xmm2, xmm2	;# lu*lu 
	movapd xmm1, [esp + mci3300_three]
	mulsd xmm2, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3300_half]
	subsd xmm1, xmm2	;# 30-rsq*lu*lu 
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	;# xmm0=iter1 of rinv (new lu) 

	movapd xmm5, xmm1	;# copy of lu 
	mulsd xmm1, xmm1	;# lu*lu 
	movapd xmm2, [esp + mci3300_three]
	mulsd xmm1, xmm4	;# rsq*lu*lu 			
	movapd xmm0, [esp + mci3300_half]
	subsd xmm2, xmm1	;# 30-rsq*lu*lu 
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	;# xmm0=iter2 of rinv (new lu) 
	mulsd xmm4, xmm0	;# xmm4=r 
	mulsd xmm4, [esp + mci3300_tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm4	;# mm6 = lu idx 
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3300_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	;# Coulomb 
	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3300_qq]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addsd  xmm5, [esp + mci3300_vctot]
	movlpd [esp + mci3300_vctot], xmm5 

	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3300_qq]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	mulsd  xmm5, [esp + mci3300_c6]	 ;# vnb6 

	;# Update vnbtot directly 
	addsd  xmm5, [esp + mci3300_vnbtot]
	movlpd [esp + mci3300_vnbtot], xmm5

	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3300_qq]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	mulsd  xmm5, [esp + mci3300_c12] ;# vnb12 
	
	addsd  xmm5, [esp + mci3300_vnbtot]
	movlpd [esp + mci3300_vnbtot], xmm5
	
.mci3300_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci3300_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3300_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci3300_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci3300_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci3300_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
	
	;# add earlier value from mem 
	mov   eax, [ebp + mci3300_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3300_nri]
	dec ecx
	jecxz .mci3300_end
	;# not last, iterate once more!  
	mov [ebp + mci3300_nri], ecx
	jmp .mci3300_outer
.mci3300_end:
	emms
	mov eax, [esp + mci3300_salign]
	add esp, eax
	add esp, 216
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl3320_sse2
.globl _mcinl3320_sse2
mcinl3320_sse2:	
_mcinl3320_sse2:	
.equiv		mci3320_nri,		8
.equiv		mci3320_iinr,		12
.equiv		mci3320_jindex,		16
.equiv		mci3320_jjnr,		20
.equiv		mci3320_shift,		24
.equiv		mci3320_shiftvec,	28
.equiv		mci3320_gid,		32
.equiv		mci3320_pos,		36		
.equiv		mci3320_charge,		40
.equiv		mci3320_facel,		44 ;# double 	
.equiv		mci3320_Vc,			52			
.equiv		mci3320_type,		56
.equiv		mci3320_ntype,		60
.equiv		mci3320_nbfp,		64	
.equiv		mci3320_Vnb,		68	
.equiv		mci3320_tabscale,	72 ;# double 	
.equiv		mci3320_VFtab,		80	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3320_ixO,		0
.equiv		mci3320_iyO,		16
.equiv		mci3320_izO,		32
.equiv		mci3320_ixH1,		48
.equiv		mci3320_iyH1,		64
.equiv		mci3320_izH1,		80
.equiv		mci3320_ixH2,		96
.equiv		mci3320_iyH2,		112
.equiv		mci3320_izH2,		128
.equiv		mci3320_iqO,		144 
.equiv		mci3320_iqH,		160 
.equiv		mci3320_qqO,		176
.equiv		mci3320_qqH,		192
.equiv		mci3320_rinvO,		208
.equiv		mci3320_rinvH1,		224
.equiv		mci3320_rinvH2,		240		
.equiv		mci3320_rO,			256
.equiv		mci3320_rH1,		272
.equiv		mci3320_rH2,		288
.equiv		mci3320_tsc,		304	
.equiv		mci3320_c6,			320
.equiv		mci3320_c12,		336
.equiv		mci3320_vctot,		352
.equiv		mci3320_vnbtot,		368
.equiv		mci3320_half,		384
.equiv		mci3320_three,		400
.equiv		mci3320_is3,		416
.equiv		mci3320_ii3,		420
.equiv		mci3320_ntia,		424	
.equiv		mci3320_innerjjnr,	428
.equiv		mci3320_innerk,		432
.equiv		mci3320_salign,		436
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 440		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3320_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm5, [ebp + mci3320_tabscale]
	
	movapd [esp + mci3320_half],  xmm0
	movapd [esp + mci3320_three],  xmm2
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3320_tsc], xmm5
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3320_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3320_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + mci3320_facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + mci3320_iqO], xmm3
	movapd [esp + mci3320_iqH], xmm4
	
	mov   edx, [ebp + mci3320_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + mci3320_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + mci3320_ntia], ecx		
.mci3320_outer:
	mov   eax, [ebp + mci3320_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3320_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci3320_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci3320_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3320_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3320_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3320_ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3320_ixO], xmm3
	movapd [esp + mci3320_iyO], xmm4
	movapd [esp + mci3320_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3320_ixH1], xmm0
	movapd [esp + mci3320_iyH1], xmm1
	movapd [esp + mci3320_izH1], xmm2
	movapd [esp + mci3320_ixH2], xmm3
	movapd [esp + mci3320_iyH2], xmm4
	movapd [esp + mci3320_izH2], xmm5
	
	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci3320_vctot], xmm4
	movapd [esp + mci3320_vnbtot], xmm4
	
	mov   eax, [ebp + mci3320_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3320_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3320_pos]
	mov   eax, [ebp + mci3320_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3320_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci3320_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3320_unroll_loop
	jmp   .mci3320_checksingle
.mci3320_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci3320_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	
	add dword ptr [esp + mci3320_innerjjnr],  8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci3320_charge]    ;# base of charge[] 
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + mci3320_iqO]
	mulpd  xmm4, [esp + mci3320_iqH]
	movapd  [esp + mci3320_qqO], xmm3
	movapd  [esp + mci3320_qqH], xmm4	

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mov esi, [ebp + mci3320_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + mci3320_nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + mci3320_ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	movupd xmm7, [esi + ebx*8]	;# c6b c12b 
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + mci3320_c6], xmm4
	movapd [esp + mci3320_c12], xmm6

	mov esi, [ebp + mci3320_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	;# move two coordinates to xmm0-xmm2 	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci3320_ixO]
	movapd xmm5, [esp + mci3320_iyO]
	movapd xmm6, [esp + mci3320_izO]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci3320_ixH1]
	movapd xmm5, [esp + mci3320_iyH1]
	movapd xmm6, [esp + mci3320_izH1]

	;# calc dr 
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	;# square it 
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci3320_ixH2]
	movapd xmm4, [esp + mci3320_iyH2]
	movapd xmm5, [esp + mci3320_izH2]

	;# calc dr 
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	;# square it 
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci3320_three]
	mulpd   xmm2, xmm7	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3320_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci3320_half] ;# rinv 
	movapd  [esp + mci3320_rinvO], xmm4	;# rinvO in xmm4 
	mulpd   xmm7, xmm4
	movapd  [esp + mci3320_rO], xmm7	;# r in xmm7 
	
	;# rsqH1 - seed in xmm2 
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci3320_three]
	mulpd   xmm2, xmm6	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3320_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci3320_half] ;# rinv 
	movapd [esp + mci3320_rinvH1], xmm4	;# rinvH1 
	mulpd  xmm6, xmm4
	movapd [esp + mci3320_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + mci3320_three]
	mulpd   xmm2, xmm5	;# rsq*lu*lu 
	subpd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulpd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulpd   xmm4, [esp + mci3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	;# lu*lu 
	mulpd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3320_three]
	subpd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulpd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulpd xmm4, [esp + mci3320_half] ;# rinv 
	movapd [esp + mci3320_rinvH2], xmm4 ;# rinv 
	mulpd xmm5, xmm4
	movapd [esp + mci3320_rH2], xmm5 ;# r 

	;# do O interactions 
	;# rO is still in xmm7 
	movapd xmm0, [esp + mci3320_rinvO]
	mulpd   xmm7, [esp + mci3320_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + mci3320_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now) 
	lea   ebx, [ebx + ebx*2]
	
	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  
    mulpd  xmm6, xmm1       ;# xmm6=Geps 
    mulpd  xmm7, xmm2       ;# xmm7=Heps2 
    addpd  xmm5, xmm6
    addpd  xmm5, xmm7       ;# xmm5=Fp        
    movapd xmm0, [esp + mci3320_qqO]
    mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
    addpd  xmm5, xmm4 ;# xmm5=VV 
    mulpd  xmm5, xmm0 ;# vcoul=qq*VV  
	;# at this point xmm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addpd  xmm5, [esp + mci3320_vctot]
	movapd [esp + mci3320_vctot], xmm5 
	
	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 32]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 48]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	mulpd  xmm5, [esp + mci3320_c6]	 ;# vnb6 
		
	addpd  xmm5, [esp + mci3320_vnbtot]
	movapd [esp + mci3320_vnbtot], xmm5
	
	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 64]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 80]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	mulpd  xmm5, [esp + mci3320_c12] ;# vnb12 
	addpd  xmm5, [esp + mci3320_vnbtot]
	movapd [esp + mci3320_vnbtot], xmm5

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + mci3320_rH1]
	mulpd xmm7, [esp + mci3320_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3320_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now) 	
	lea   ebx, [ebx + ebx*2]
	
	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3320_qqH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul
    ;# increment vcoul 
    addpd  xmm5, [esp + mci3320_vctot]
    movapd [esp + mci3320_vctot], xmm5 

	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + mci3320_rH2]
	mulpd   xmm7, [esp + mci3320_tsc]
	cvttpd2pi mm6, xmm7	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3320_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now)
	lea   ebx, [ebx + ebx*2]

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3320_qqH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addpd  xmm5, [esp + mci3320_vctot]
    movapd [esp + mci3320_vctot], xmm5 
			
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3320_innerk],  2
	jl    .mci3320_checksingle
	jmp   .mci3320_unroll_loop
.mci3320_checksingle:	
	mov   edx, [esp + mci3320_innerk]
	and   edx, 1
	jnz   .mci3320_dosingle
	jmp   .mci3320_updateouterdata
.mci3320_dosingle:
	mov   edx, [esp + mci3320_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]

	mov esi, [ebp + mci3320_charge]    ;# base of charge[] 
	xorpd xmm3, xmm3	
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + mci3320_iqO]
	mulpd  xmm4, [esp + mci3320_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movapd  [esp + mci3320_qqO], xmm3
	movapd  [esp + mci3320_qqH], xmm4	
	
	mov esi, [ebp + mci3320_type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + mci3320_nbfp]
	shl eax, 1	
	mov edi, [esp + mci3320_ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	;# c6a c12a 
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + mci3320_c6], xmm4
	movapd [esp + mci3320_c12], xmm6
	
	mov esi, [ebp + mci3320_pos]       ;# base of pos[] 
	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	
	;# move coords to xmm0-xmm2 
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	;# move ixO-izO to xmm4-xmm6 
	movapd xmm4, [esp + mci3320_ixO]
	movapd xmm5, [esp + mci3320_iyO]
	movapd xmm6, [esp + mci3320_izO]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movapd xmm4, [esp + mci3320_ixH1]
	movapd xmm5, [esp + mci3320_iyH1]
	movapd xmm6, [esp + mci3320_izH1]

	;# calc dr 
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	;# square it 
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movapd xmm3, [esp + mci3320_ixH2]
	movapd xmm4, [esp + mci3320_iyH2]
	movapd xmm5, [esp + mci3320_izH2]

	;# calc dr 
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	;# square it 
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - put seed in xmm2 
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci3320_three]
	mulsd   xmm2, xmm7	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3320_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci3320_half] ;# rinv 
	movapd  [esp + mci3320_rinvO], xmm4	;# rinvO in xmm4 
	mulsd   xmm7, xmm4
	movapd  [esp + mci3320_rO], xmm7	;# r in xmm7 

	;# rsqH1 - seed in xmm2 
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci3320_three]
	mulsd   xmm2, xmm6	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3320_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci3320_half] ;# rinv 
	movapd [esp + mci3320_rinvH1], xmm4	;# rinvH1 
	mulsd  xmm6, xmm4
	movapd [esp + mci3320_rH1], xmm6	;# rH1 
	
	;# rsqH2 - seed in xmm2 
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + mci3320_three]
	mulsd   xmm2, xmm5	;# rsq*lu*lu 
	subsd   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulsd   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulsd   xmm4, [esp + mci3320_half] ;# iter1 ( new lu) 

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	;# lu*lu 
	mulsd xmm2, xmm4	;# rsq*lu*lu 
	movapd xmm4, [esp + mci3320_three]
	subsd xmm4, xmm2	;# 3-rsq*lu*lu 
	mulsd xmm4, xmm3	;# lu*(	3-rsq*lu*lu) 
	mulsd xmm4, [esp + mci3320_half] ;# rinv 
	movapd [esp + mci3320_rinvH2], xmm4 ;# rinv 
	mulsd xmm5, xmm4
	movapd [esp + mci3320_rH2], xmm5 ;# r 

	;# do O interactions 
	movd mm0, eax	
	;# rO is still in xmm7 
	mulsd   xmm7, [esp + mci3320_tsc]
	cvttsd2si eax, xmm7	;# lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm7
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	 	
	shl eax, 2		
	mov  esi, [ebp + mci3320_VFtab]
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now) 	
	
	movupd xmm4, [esi + eax*8]	;# Y1 F1 
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  
    mulsd  xmm6, xmm1       ;# xmm6=Geps 
    mulsd  xmm7, xmm2       ;# xmm7=Heps2 
    addsd  xmm5, xmm6	;# F+Geps 
    addsd  xmm5, xmm7       ;# xmm5=Fp=F+Geps+Heps2        
    mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
    addsd  xmm5, xmm4 ;# xmm5=VV 
	
    movapd  xmm0, [esp + mci3320_qqO]
    mulsd  xmm5, xmm0 ;# vcoul=qq*VV  
	;# at this point xmm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addsd  xmm5, [esp + mci3320_vctot]
	movlpd [esp + mci3320_vctot], xmm5 
	
	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	mulsd  xmm5, [esp + mci3320_c6]	 ;# vnb6 
		
	addsd  xmm5, [esp + mci3320_vnbtot]
	movsd [esp + mci3320_vnbtot], xmm5
	
	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	mulsd  xmm5, [esp + mci3320_c12] ;# vnb12 

	addsd  xmm5, [esp + mci3320_vnbtot]
	movsd [esp + mci3320_vnbtot], xmm5

	;# Done with O interactions - now H1! 
	movapd xmm7, [esp + mci3320_rH1]
	mulpd xmm7, [esp + mci3320_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subpd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3320_VFtab]
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now)	

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3320_qqH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addsd  xmm5, [esp + mci3320_vctot]
    movlpd [esp + mci3320_vctot], xmm5 

	;# Done with H1, finally we do H2 interactions 
	movapd xmm7, [esp + mci3320_rH2]
	mulsd   xmm7, [esp + mci3320_tsc]
	cvttsd2si eax, xmm7	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3320_VFtab]
	lea   eax, [eax + eax*2] ;# idx *= 3 (total *=12 now)	

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3320_qqH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addsd  xmm5, [esp + mci3320_vctot]
    movlpd [esp + mci3320_vctot], xmm5 

.mci3320_updateouterdata:
	;# get gid 
	mov   edx, [ebp + mci3320_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci3320_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci3320_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci3320_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci3320_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci3320_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3320_nri]
	dec ecx
	jecxz .mci3320_end
	;# not last, iterate once more!  
	mov [ebp + mci3320_nri], ecx
	jmp .mci3320_outer
.mci3320_end:
	emms
	mov eax, [esp + mci3320_salign]
	add esp, eax
	add esp, 440
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
	
.globl mcinl3330_sse2
.globl _mcinl3330_sse2
mcinl3330_sse2:	
_mcinl3330_sse2:	
.equiv		mci3330_nri,		8
.equiv		mci3330_iinr,		12
.equiv		mci3330_jindex,		16
.equiv		mci3330_jjnr,		20
.equiv		mci3330_shift,		24
.equiv		mci3330_shiftvec,	28
.equiv		mci3330_gid,		32
.equiv		mci3330_pos,		36		
.equiv		mci3330_charge,		40
.equiv		mci3330_facel,		44 ;# double 
.equiv		mci3330_Vc,			52
.equiv		mci3330_type,		56
.equiv		mci3330_ntype,		60
.equiv		mci3330_nbfp,		64	
.equiv		mci3330_Vnb,		68
.equiv		mci3330_tabscale,	72 ;# double 
.equiv		mci3330_VFtab,		80
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3330_ixO,		0
.equiv		mci3330_iyO,		16
.equiv		mci3330_izO,		32
.equiv		mci3330_ixH1,		48
.equiv		mci3330_iyH1,		64
.equiv		mci3330_izH1,		80
.equiv		mci3330_ixH2,		96
.equiv		mci3330_iyH2,		112
.equiv		mci3330_izH2,		128
.equiv		mci3330_jxO,		144
.equiv		mci3330_jyO,		160
.equiv		mci3330_jzO,		176
.equiv		mci3330_jxH1,		192
.equiv		mci3330_jyH1,		208
.equiv		mci3330_jzH1,		224
.equiv		mci3330_jxH2,		240
.equiv		mci3330_jyH2,		256
.equiv		mci3330_jzH2,		272
.equiv		mci3330_qqOO,		288
.equiv		mci3330_qqOH,		304
.equiv		mci3330_qqHH,		320
.equiv		mci3330_tsc,		336
.equiv		mci3330_c6,			352
.equiv		mci3330_c12,		368		 
.equiv		mci3330_vctot,		384
.equiv		mci3330_vnbtot,		400
.equiv		mci3330_half,		416
.equiv		mci3330_three,		432
.equiv		mci3330_rsqOO,		448
.equiv		mci3330_rsqOH1,		464
.equiv		mci3330_rsqOH2,		480
.equiv		mci3330_rsqH1O,		496
.equiv		mci3330_rsqH1H1,	512
.equiv		mci3330_rsqH1H2,	528
.equiv		mci3330_rsqH2O,		544
.equiv		mci3330_rsqH2H1,	560
.equiv		mci3330_rsqH2H2,	576
.equiv		mci3330_rinvOO,		592
.equiv		mci3330_rinvOH1,	608
.equiv		mci3330_rinvOH2,	624
.equiv		mci3330_rinvH1O,	640
.equiv		mci3330_rinvH1H1,	656
.equiv		mci3330_rinvH1H2,	672
.equiv		mci3330_rinvH2O,	688
.equiv		mci3330_rinvH2H1,	704
.equiv		mci3330_rinvH2H2,	720	
.equiv		mci3330_is3,		736
.equiv		mci3330_ii3,		740
.equiv		mci3330_innerjjnr,	744
.equiv		mci3330_innerk,		748
.equiv		mci3330_salign,		752
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 756		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3330_salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + mci3330_tabscale]
	movapd [esp + mci3330_half],  xmm0
	movapd [esp + mci3330_three], xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + mci3330_tsc],  xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3330_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3330_charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + mci3330_facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3330_qqOO], xmm3
	movapd [esp + mci3330_qqOH], xmm4
	movapd [esp + mci3330_qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + mci3330_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + mci3330_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + mci3330_nbfp]
	movupd xmm0, [eax + edx*8]
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + mci3330_c6], xmm0
	movapd [esp + mci3330_c12], xmm1

.mci3330_outer:
	mov   eax, [ebp + mci3330_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3330_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 

	mov   eax, [ebp + mci3330_shiftvec]   ;# eax = base of shiftvec[] 

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + mci3330_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3330_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3330_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3330_ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3330_ixO], xmm3
	movapd [esp + mci3330_iyO], xmm4
	movapd [esp + mci3330_izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + mci3330_ixH1], xmm0
	movapd [esp + mci3330_iyH1], xmm1
	movapd [esp + mci3330_izH1], xmm2
	movapd [esp + mci3330_ixH2], xmm3
	movapd [esp + mci3330_iyH2], xmm4
	movapd [esp + mci3330_izH2], xmm5

	;# clear vctot 
	xorpd xmm4, xmm4
	movapd [esp + mci3330_vctot], xmm4
	movapd [esp + mci3330_vnbtot], xmm4
	
	mov   eax, [ebp + mci3330_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3330_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3330_pos] 
	mov   eax, [ebp + mci3330_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3330_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  2
	mov   [esp + mci3330_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3330_unroll_loop
	jmp   .mci3330_checksingle
.mci3330_unroll_loop:
	;# twice unrolled innerloop here 
	mov   edx, [esp + mci3330_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add dword ptr [esp + mci3330_innerjjnr], 8 ;# advance pointer (unrolled 2) 

	mov esi, [ebp + mci3330_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	
	;# move j coordinates to local temp variables 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + mci3330_jxO], xmm2
	movapd 	[esp + mci3330_jyO], xmm3
	movapd 	[esp + mci3330_jzO], xmm4
	movapd 	[esp + mci3330_jxH1], xmm5
	movapd 	[esp + mci3330_jyH1], xmm6
	movapd 	[esp + mci3330_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + mci3330_jxH2], xmm2
	movapd 	[esp + mci3330_jyH2], xmm3
	movapd 	[esp + mci3330_jzH2], xmm4
	
	movapd xmm0, [esp + mci3330_ixO]
	movapd xmm1, [esp + mci3330_iyO]
	movapd xmm2, [esp + mci3330_izO]
	movapd xmm3, [esp + mci3330_ixO]
	movapd xmm4, [esp + mci3330_iyO]
	movapd xmm5, [esp + mci3330_izO]
	subpd  xmm0, [esp + mci3330_jxO]
	subpd  xmm1, [esp + mci3330_jyO]
	subpd  xmm2, [esp + mci3330_jzO]
	subpd  xmm3, [esp + mci3330_jxH1]
	subpd  xmm4, [esp + mci3330_jyH1]
	subpd  xmm5, [esp + mci3330_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci3330_rsqOO], xmm0
	movapd [esp + mci3330_rsqOH1], xmm3

	movapd xmm0, [esp + mci3330_ixO]
	movapd xmm1, [esp + mci3330_iyO]
	movapd xmm2, [esp + mci3330_izO]
	movapd xmm3, [esp + mci3330_ixH1]
	movapd xmm4, [esp + mci3330_iyH1]
	movapd xmm5, [esp + mci3330_izH1]
	subpd  xmm0, [esp + mci3330_jxH2]
	subpd  xmm1, [esp + mci3330_jyH2]
	subpd  xmm2, [esp + mci3330_jzH2]
	subpd  xmm3, [esp + mci3330_jxO]
	subpd  xmm4, [esp + mci3330_jyO]
	subpd  xmm5, [esp + mci3330_jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci3330_rsqOH2], xmm0
	movapd [esp + mci3330_rsqH1O], xmm3

	movapd xmm0, [esp + mci3330_ixH1]
	movapd xmm1, [esp + mci3330_iyH1]
	movapd xmm2, [esp + mci3330_izH1]
	movapd xmm3, [esp + mci3330_ixH1]
	movapd xmm4, [esp + mci3330_iyH1]
	movapd xmm5, [esp + mci3330_izH1]
	subpd  xmm0, [esp + mci3330_jxH1]
	subpd  xmm1, [esp + mci3330_jyH1]
	subpd  xmm2, [esp + mci3330_jzH1]
	subpd  xmm3, [esp + mci3330_jxH2]
	subpd  xmm4, [esp + mci3330_jyH2]
	subpd  xmm5, [esp + mci3330_jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + mci3330_rsqH1H1], xmm0
	movapd [esp + mci3330_rsqH1H2], xmm3

	movapd xmm0, [esp + mci3330_ixH2]
	movapd xmm1, [esp + mci3330_iyH2]
	movapd xmm2, [esp + mci3330_izH2]
	movapd xmm3, [esp + mci3330_ixH2]
	movapd xmm4, [esp + mci3330_iyH2]
	movapd xmm5, [esp + mci3330_izH2]
	subpd  xmm0, [esp + mci3330_jxO]
	subpd  xmm1, [esp + mci3330_jyO]
	subpd  xmm2, [esp + mci3330_jzO]
	subpd  xmm3, [esp + mci3330_jxH1]
	subpd  xmm4, [esp + mci3330_jyH1]
	subpd  xmm5, [esp + mci3330_jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + mci3330_rsqH2O], xmm0
	movapd [esp + mci3330_rsqH2H1], xmm4

	movapd xmm0, [esp + mci3330_ixH2]
	movapd xmm1, [esp + mci3330_iyH2]
	movapd xmm2, [esp + mci3330_izH2]
	subpd  xmm0, [esp + mci3330_jxH2]
	subpd  xmm1, [esp + mci3330_jyH2]
	subpd  xmm2, [esp + mci3330_jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + mci3330_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3330_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3330_half] ;# iter1 
	mulpd   xmm7, [esp + mci3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3330_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3330_half] ;# rinv 
	mulpd   xmm5, [esp + mci3330_half] ;# rinv 
	movapd [esp + mci3330_rinvH2H2], xmm1
	movapd [esp + mci3330_rinvH2H1], xmm5

	movapd xmm0, [esp + mci3330_rsqOO]
	movapd xmm4, [esp + mci3330_rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3330_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3330_half] ;# iter1 of  
	mulpd   xmm7, [esp + mci3330_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3330_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3330_half] ;# rinv 
	mulpd   xmm5, [esp + mci3330_half] ;# rinv
	movapd [esp + mci3330_rinvOO], xmm1
	movapd [esp + mci3330_rinvOH1], xmm5

	movapd xmm0, [esp + mci3330_rsqOH2]
	movapd xmm4, [esp + mci3330_rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3330_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3330_half] ;# iter1 
	mulpd   xmm7, [esp + mci3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3330_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3330_half] ;# rinv 
	mulpd   xmm5, [esp + mci3330_half] ;# rinv 
	movapd [esp + mci3330_rinvOH2], xmm1
	movapd [esp + mci3330_rinvH1O], xmm5

	movapd xmm0, [esp + mci3330_rsqH1H1]
	movapd xmm4, [esp + mci3330_rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulpd   xmm1, xmm1	;# luA*luA 
	mulpd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3330_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	mulpd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subpd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm3, [esp + mci3330_half] ;# iter1a 
	mulpd   xmm7, [esp + mci3330_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulpd   xmm3, xmm3	;# luA*luA 
	mulpd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3330_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	mulpd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subpd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulpd   xmm1, [esp + mci3330_half] ;# rinv 
	mulpd   xmm5, [esp + mci3330_half] ;# rinv 
	movapd [esp + mci3330_rinvH1H1], xmm1
	movapd [esp + mci3330_rinvH1H2], xmm5

	movapd xmm0, [esp + mci3330_rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulpd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci3330_three]
	mulpd   xmm1, xmm0	;# rsqA*luA*luA 
	subpd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulpd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm3, [esp + mci3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulpd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci3330_three]
	mulpd   xmm3, xmm0	;# rsqA*luA*luA 
	subpd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulpd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulpd   xmm1, [esp + mci3330_half] ;# rinv 
	movapd [esp + mci3330_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + mci3330_rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3330_rsqOO] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3330_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqOO]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addpd  xmm5, [esp + mci3330_vctot]
    movapd [esp + mci3330_vctot], xmm5

	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 32]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 48]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	mulpd  xmm5, [esp + mci3330_c6] ;# vnb6 

	addpd  xmm5, [esp + mci3330_vnbtot]
	movapd [esp + mci3330_vnbtot], xmm5

	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8 + 64]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 80]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 

	mulpd  xmm5, [esp + mci3330_c12] ;# vnb12 

	addpd  xmm5, [esp + mci3330_vnbtot]
	movapd [esp + mci3330_vnbtot], xmm5

	;# O-H1 interaction 
	movapd xmm0, [esp + mci3330_rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3330_rsqOH1] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3330_tsc]

	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3330_vctot]
    movapd [esp + mci3330_vctot], xmm5

	;# O-H2 interaction  
	movapd xmm0, [esp + mci3330_rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3330_rsqOH2] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3330_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3330_vctot]
    movapd [esp + mci3330_vctot], xmm5

	;# H1-O interaction 
	movapd xmm0, [esp + mci3330_rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3330_rsqH1O] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3330_tsc]
	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3330_vctot]
    movapd [esp + mci3330_vctot], xmm5

	;# H1-H1 interaction 
	movapd xmm0, [esp + mci3330_rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3330_rsqH1H1] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3330_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3330_vctot]
    movapd [esp + mci3330_vctot], xmm5

	;# H1-H2 interaction 
	movapd xmm0, [esp + mci3330_rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3330_rsqH1H2] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3330_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3330_vctot]
    movapd [esp + mci3330_vctot], xmm5

	;# H2-O interaction 
	movapd xmm0, [esp + mci3330_rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3330_rsqH2O] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3330_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqOH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3330_vctot]
    movapd [esp + mci3330_vctot], xmm5
	
	;# H2-H1 interaction 
	movapd xmm0, [esp + mci3330_rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3330_rsqH2H1] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3330_tsc]
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addpd  xmm5, [esp + mci3330_vctot]
    movapd [esp + mci3330_vctot], xmm5

	;# H2-H2 interaction 
	movapd xmm0, [esp + mci3330_rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + mci3330_rsqH2H2] ;# xmm1=r 
	mulpd  xmm1, [esp + mci3330_tsc]	
	cvttpd2pi mm6, xmm1	;# mm6 = lu idx 
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	pslld mm6, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		;# indices in eax/ebx 
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 
	lea   ebx, [ebx + ebx*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	movupd xmm3, [esi + ebx*8]	;# Y2 F2 
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 Y2 
	unpckhpd xmm5, xmm3	;# F1 F2 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	movupd xmm3, [esi + ebx*8 + 16]	;# G2 H2 
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 G2 
	unpckhpd xmm7, xmm3	;# H1 H2 
	;# coulomb table ready, in xmm4-xmm7  		
	mulpd  xmm6, xmm1	;# xmm6=Geps 
	mulpd  xmm7, xmm2	;# xmm7=Heps2 
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqHH]
	mulpd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addpd  xmm5, xmm4 ;# xmm5=VV 
	mulpd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
	
    addpd  xmm5, [esp + mci3330_vctot]
    movapd [esp + mci3330_vctot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci3330_innerk],  2
	jl    .mci3330_checksingle
	jmp   .mci3330_unroll_loop
.mci3330_checksingle:
	mov   edx, [esp + mci3330_innerk]
	and   edx, 1
	jnz   .mci3330_dosingle
	jmp   .mci3330_updateouterdata
.mci3330_dosingle:
	mov   edx, [esp + mci3330_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]

	mov esi, [ebp + mci3330_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + mci3330_jxO], xmm2
	movapd 	[esp + mci3330_jyO], xmm3
	movapd 	[esp + mci3330_jzO], xmm4
	movapd 	[esp + mci3330_jxH1], xmm5
	movapd 	[esp + mci3330_jyH1], xmm6
	movapd 	[esp + mci3330_jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + mci3330_jxH2], xmm2
	movapd 	[esp + mci3330_jyH2], xmm3
	movapd 	[esp + mci3330_jzH2], xmm4
	
	movapd xmm0, [esp + mci3330_ixO]
	movapd xmm1, [esp + mci3330_iyO]
	movapd xmm2, [esp + mci3330_izO]
	movapd xmm3, [esp + mci3330_ixO]
	movapd xmm4, [esp + mci3330_iyO]
	movapd xmm5, [esp + mci3330_izO]
	subsd  xmm0, [esp + mci3330_jxO]
	subsd  xmm1, [esp + mci3330_jyO]
	subsd  xmm2, [esp + mci3330_jzO]
	subsd  xmm3, [esp + mci3330_jxH1]
	subsd  xmm4, [esp + mci3330_jyH1]
	subsd  xmm5, [esp + mci3330_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci3330_rsqOO], xmm0
	movapd [esp + mci3330_rsqOH1], xmm3

	movapd xmm0, [esp + mci3330_ixO]
	movapd xmm1, [esp + mci3330_iyO]
	movapd xmm2, [esp + mci3330_izO]
	movapd xmm3, [esp + mci3330_ixH1]
	movapd xmm4, [esp + mci3330_iyH1]
	movapd xmm5, [esp + mci3330_izH1]
	subsd  xmm0, [esp + mci3330_jxH2]
	subsd  xmm1, [esp + mci3330_jyH2]
	subsd  xmm2, [esp + mci3330_jzH2]
	subsd  xmm3, [esp + mci3330_jxO]
	subsd  xmm4, [esp + mci3330_jyO]
	subsd  xmm5, [esp + mci3330_jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci3330_rsqOH2], xmm0
	movapd [esp + mci3330_rsqH1O], xmm3

	movapd xmm0, [esp + mci3330_ixH1]
	movapd xmm1, [esp + mci3330_iyH1]
	movapd xmm2, [esp + mci3330_izH1]
	movapd xmm3, [esp + mci3330_ixH1]
	movapd xmm4, [esp + mci3330_iyH1]
	movapd xmm5, [esp + mci3330_izH1]
	subsd  xmm0, [esp + mci3330_jxH1]
	subsd  xmm1, [esp + mci3330_jyH1]
	subsd  xmm2, [esp + mci3330_jzH1]
	subsd  xmm3, [esp + mci3330_jxH2]
	subsd  xmm4, [esp + mci3330_jyH2]
	subsd  xmm5, [esp + mci3330_jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + mci3330_rsqH1H1], xmm0
	movapd [esp + mci3330_rsqH1H2], xmm3

	movapd xmm0, [esp + mci3330_ixH2]
	movapd xmm1, [esp + mci3330_iyH2]
	movapd xmm2, [esp + mci3330_izH2]
	movapd xmm3, [esp + mci3330_ixH2]
	movapd xmm4, [esp + mci3330_iyH2]
	movapd xmm5, [esp + mci3330_izH2]
	subsd  xmm0, [esp + mci3330_jxO]
	subsd  xmm1, [esp + mci3330_jyO]
	subsd  xmm2, [esp + mci3330_jzO]
	subsd  xmm3, [esp + mci3330_jxH1]
	subsd  xmm4, [esp + mci3330_jyH1]
	subsd  xmm5, [esp + mci3330_jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + mci3330_rsqH2O], xmm0
	movapd [esp + mci3330_rsqH2H1], xmm4

	movapd xmm0, [esp + mci3330_ixH2]
	movapd xmm1, [esp + mci3330_iyH2]
	movapd xmm2, [esp + mci3330_izH2]
	subsd  xmm0, [esp + mci3330_jxH2]
	subsd  xmm1, [esp + mci3330_jyH2]
	subsd  xmm2, [esp + mci3330_jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + mci3330_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3330_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3330_half] ;# iter1 
	mulsd   xmm7, [esp + mci3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3330_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3330_half] ;# rinv 
	mulsd   xmm5, [esp + mci3330_half] ;# rinv 
	movapd [esp + mci3330_rinvH2H2], xmm1
	movapd [esp + mci3330_rinvH2H1], xmm5

	movapd xmm0, [esp + mci3330_rsqOO]
	movapd xmm4, [esp + mci3330_rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3330_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3330_half] ;# iter1 of  
	mulsd   xmm7, [esp + mci3330_half] ;# iter1 of  

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3330_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3330_half] ;# rinv 
	mulsd   xmm5, [esp + mci3330_half] ;# rinv
	movapd [esp + mci3330_rinvOO], xmm1
	movapd [esp + mci3330_rinvOH1], xmm5

	movapd xmm0, [esp + mci3330_rsqOH2]
	movapd xmm4, [esp + mci3330_rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3330_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3330_half] ;# iter1 
	mulsd   xmm7, [esp + mci3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3330_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3330_half] ;# rinv 
	mulsd   xmm5, [esp + mci3330_half] ;# rinv 
	movapd [esp + mci3330_rinvOH2], xmm1
	movapd [esp + mci3330_rinvH1O], xmm5

	movapd xmm0, [esp + mci3330_rsqH1H1]
	movapd xmm4, [esp + mci3330_rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	;# copy of luA 
	movapd  xmm6, xmm5	;# copy of luB 
	mulsd   xmm1, xmm1	;# luA*luA 
	mulsd   xmm5, xmm5	;# luB*luB 
	movapd  xmm3, [esp + mci3330_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	mulsd   xmm5, xmm4	;# rsqB*luB*luB 	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	subsd   xmm7, xmm5	;# 3-rsqB*luB*luB 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm7, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm3, [esp + mci3330_half] ;# iter1a 
	mulsd   xmm7, [esp + mci3330_half] ;# iter1b 

	movapd  xmm2, xmm3	;# copy of luA 
	movapd  xmm6, xmm7	;# copy of luB 
	mulsd   xmm3, xmm3	;# luA*luA 
	mulsd   xmm7, xmm7	;# luB*luB 
	movapd  xmm1, [esp + mci3330_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	mulsd   xmm7, xmm4	;# rsqB*luB*luB 	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	subsd   xmm5, xmm7	;# 3-rsqB*luB*luB 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm5, xmm6	;# luB*(3-rsqB*luB*luB) 
	mulsd   xmm1, [esp + mci3330_half] ;# rinv 
	mulsd   xmm5, [esp + mci3330_half] ;# rinv 
	movapd [esp + mci3330_rinvH1H1], xmm1
	movapd [esp + mci3330_rinvH1H2], xmm5

	movapd xmm0, [esp + mci3330_rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	;# copy of luA 
	mulsd   xmm1, xmm1	;# luA*luA 
	movapd  xmm3, [esp + mci3330_three]
	mulsd   xmm1, xmm0	;# rsqA*luA*luA 
	subsd   xmm3, xmm1	;# 3-rsqA*luA*luA 
	mulsd   xmm3, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm3, [esp + mci3330_half] ;# iter1 

	movapd  xmm2, xmm3	;# copy of luA 
	mulsd   xmm3, xmm3	;# luA*luA 
	movapd  xmm1, [esp + mci3330_three]
	mulsd   xmm3, xmm0	;# rsqA*luA*luA 
	subsd   xmm1, xmm3	;# 3-rsqA*luA*luA 
	mulsd   xmm1, xmm2	;# luA*(3-rsqA*luA*luA) 
	mulsd   xmm1, [esp + mci3330_half] ;# rinv 
	movapd [esp + mci3330_rinvH2O], xmm1
	
	;# start with OO interaction 
	movapd xmm0, [esp + mci3330_rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3330_rsqOO] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3330_tsc]

	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1  
	unpckhpd xmm7, xmm3	;# H1  
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqOO]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addsd  xmm5, [esp + mci3330_vctot]
    movlpd [esp + mci3330_vctot], xmm5

	;# Dispersion 
	movupd xmm4, [esi + eax*8 + 32]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 48]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Dispersion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	mulsd  xmm5, [esp + mci3330_c6]	 ;# vnb6 

	addsd  xmm5, [esp + mci3330_vnbtot]
	movlpd [esp + mci3330_vnbtot], xmm5

	;# Repulsion 
	movupd xmm4, [esi + eax*8 + 64]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 80]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# Repulsion table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 

	mulsd  xmm5, [esp + mci3330_c12] ;# vnb12 

	addsd  xmm5, [esp + mci3330_vnbtot]
	movlpd [esp + mci3330_vnbtot], xmm5

	;# O-H1 interaction 
	movapd xmm0, [esp + mci3330_rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3330_rsqOH1] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3330_tsc]

	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1  
	unpckhpd xmm5, xmm3	;# F1  

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3330_vctot]
    movlpd [esp + mci3330_vctot], xmm5

	;# O-H2 interaction  
	movapd xmm0, [esp + mci3330_rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3330_rsqOH2] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3330_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3330_vctot]
    movlpd [esp + mci3330_vctot], xmm5

	;# H1-O interaction 
	movapd xmm0, [esp + mci3330_rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3330_rsqH1O] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3330_tsc]
	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3330_vctot]
    movlpd [esp + mci3330_vctot], xmm5

	;# H1-H1 interaction 
	movapd xmm0, [esp + mci3330_rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3330_rsqH1H1] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3330_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3330_vctot]
    movlpd [esp + mci3330_vctot], xmm5

	;# H1-H2 interaction 
	movapd xmm0, [esp + mci3330_rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3330_rsqH1H2] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3330_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3330_vctot]
    movlpd [esp + mci3330_vctot], xmm5
	
	;# H2-O interaction 
	movapd xmm0, [esp + mci3330_rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3330_rsqH2O] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3330_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqOH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3330_vctot]
    movlpd [esp + mci3330_vctot], xmm5

	;# H2-H1 interaction 
	movapd xmm0, [esp + mci3330_rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3330_rsqH2H1] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3330_tsc]
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3330_vctot]
    movlpd [esp + mci3330_vctot], xmm5

	;# H2-H2 interaction 
	movapd xmm0, [esp + mci3330_rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + mci3330_rsqH2H2] ;# xmm1=r 
	mulsd  xmm1, [esp + mci3330_tsc]	
	cvttsd2si eax, xmm1	;# mm6 = lu idx 
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	;# xmm1=eps 
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	;# xmm2=eps2 
	
	shl eax, 2		;# idx *= 4 
	mov  esi, [ebp + mci3330_VFtab]
	lea   eax, [eax + eax*2]	;# idx*=3 (12 total now) 

	movupd xmm4, [esi + eax*8]	;# Y1 F1 	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	;# Y1 
	unpckhpd xmm5, xmm3	;# F1 

	movupd xmm6, [esi + eax*8 + 16]	;# G1 H1 	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	;# G1 
	unpckhpd xmm7, xmm3	;# H1 
	;# coulomb table ready, in xmm4-xmm7  		
	mulsd  xmm6, xmm1	;# xmm6=Geps 
	mulsd  xmm7, xmm2	;# xmm7=Heps2 
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	;# xmm5=Fp 	
	movapd xmm3, [esp + mci3330_qqHH]
	mulsd  xmm5, xmm1 ;# xmm5=eps*Fp 
	addsd  xmm5, xmm4 ;# xmm5=VV 
	mulsd  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addsd  xmm5, [esp + mci3330_vctot]
    movlpd [esp + mci3330_vctot], xmm5
		
.mci3330_updateouterdata:
	;# get next gid 
	mov   edx, [ebp + mci3330_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci3330_gid],  4	

	;# accumulate total potential energy and update it 
	movapd xmm7, [esp + mci3330_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci3330_Vc]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# accumulate total lj energy and update it 
	movapd xmm7, [esp + mci3330_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	;# low xmm7 has the sum now 

	;# add earlier value from mem 
	mov   eax, [ebp + mci3330_Vnb]
	addsd xmm7, [eax + edx*8] 
	;# move back to mem 
	movsd [eax + edx*8], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3330_nri]
	dec ecx
	jecxz .mci3330_end
	;# not last, iterate once more!  
	mov [ebp + mci3330_nri], ecx
	jmp .mci3330_outer
.mci3330_end:
	emms
	mov eax, [esp + mci3330_salign]
	add esp, eax
	add esp, 756
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




