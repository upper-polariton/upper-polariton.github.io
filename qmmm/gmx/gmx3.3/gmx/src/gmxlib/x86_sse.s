;#
;# $Id: x86_sse.s,v 1.14 2002/09/26 06:54:13 lindahl Exp $
;#
;#                This source code is part of
;# 
;#                 G   R   O   M   A   C   S
;# 
;#          GROningen MAchine for Chemical Simulations
;# 
;#                        VERSION 3.1
;# Copyright (c) 1991-2001, University of Groningen, The Netherlands
;# This program is free software; you can redistribute it and/or
;# modify it under the terms of the GNU General Public License
;# as published by the Free Software Foundation; either version 2
;# of the License, or (at your option) any later version.
;# 
;# If you want to redistribute modifications, please consider that
;# scientific software is very special. Version control is crucial -
;# bugs must be traceable. We will be happy to consider code for
;# inclusion in the official distribution, but derived work must not
;# be called official GROMACS. Details are found in the README & COPYING
;# files - if they are missing, get the official version at www.gromacs.org.
;# 
;# To help us fund GROMACS development, we humbly ask that you cite
;# the papers on the package - you can find them in the top README file.
;# 
;# For more info, check our website at http://www.gromacs.org
;# 
;# And Hey:
;# Gnomes, ROck Monsters And Chili Sauce
 
;# These files require GNU binutils 2.10 or later, since we
;# use intel syntax for portability, or a recent version 
;# of NASM that understands Extended 3DNow and SSE2 instructions.
;# (NASM is normally only used with MS Visual C++).

;# Since NASM and gnu as disagree on some definitions and use 
;# completely different preprocessing options I have to introduce a
;# trick: NASM uses ';' for comments, while gnu as uses '#' on x86.
;# Gnu as treats ';' as a line break, i.e. ignores it. This is the
;# reason why all comments need both symbols...
;# The source is written for GNU as, with intel syntax. When you use
;# NASM we redefine a couple of things. The false if-statement around 
;# the following code is seen by GNU as (NASM doesn't understant this
;# if syntax), but NASM doesn't see it, so the code inside is only 
;# read by NASM (NASM doesn't understand .if):

; .if 0    # block below only read by NASM
%define .section	section
%define .long		dd
%define .align		align
%define .globl		global
;# NASM only wants 'dword', not 'dword ptr'.
%define ptr
%macro .equiv 2
   %1 equ %2
%endmacro
; .endif  # End of NASM-specific block

; .intel_syntax noprefix   # Line only read by gnu as


;# NB: We prefix all local variables with underscore, to avoid stupid
;# bugs. Otherwise, dx will e.g. be interpreted as a register,
;# without any further warning!
 
	
.section .text
.align 16
	
sse_minushalf:	
	.long 0xbf000000
	.long 0xbf000000
	.long 0xbf000000
	.long 0xbf000000
sse_half:	
	.long 0x3f000000
	.long 0x3f000000
	.long 0x3f000000
	.long 0x3f000000
sse_two:	
	.long 0x40000000
	.long 0x40000000
	.long 0x40000000
	.long 0x40000000
sse_three:	
	.long 0x40400000
	.long 0x40400000
	.long 0x40400000
	.long 0x40400000
sse_six:
	.long 0x40c00000
	.long 0x40c00000
	.long 0x40c00000
	.long 0x40c00000
sse_twelve:	
	.long 0x41400000
	.long 0x41400000
	.long 0x41400000
	.long 0x41400000



.globl checksse	 ;# try to issue a SSE instruction 
.globl _checksse
checksse:
_checksse:
	emms
	xorps xmm0,xmm0
	emms
	ret

.align 16
	
.globl vecinvsqrt_sse
.globl _vecinvsqrt_sse
vecinvsqrt_sse:	
_vecinvsqrt_sse:	
	push ebp
	mov ebp,esp	
	push eax
	push ebx
	push ecx
	push edx

	mov eax, [ebp + 8]
	mov ebx, [ebp + 12]	
	mov ecx, [ebp + 16]
    mov edx, ecx
	movups xmm6,[sse_three]
	movups xmm7,[sse_minushalf]
    shr ecx, 3
    jecxz .vecinvsqrt_iter4
    emms	
.vecinvsqrt_loop8:	
	movaps xmm0,[eax]
	add eax,  16
	rsqrtps xmm1,xmm0
	movaps xmm2,[eax]
	add eax,  16
	rsqrtps xmm3,xmm2
	mulps xmm0,xmm1
    mulps xmm2,xmm3
	mulps xmm0,xmm1
    mulps xmm2,xmm3
	subps xmm0,xmm6
	subps xmm2,xmm6
	mulps xmm0,xmm1
	mulps xmm2,xmm3
	mulps xmm0,xmm7
	mulps xmm2,xmm7
	movaps [ebx],xmm0
	add ebx,  16
	movaps [ebx],xmm2
	add ebx,  16
    dec ecx
    jecxz .vecinvsqrt_iter4
    jmp .vecinvsqrt_loop8
.vecinvsqrt_iter4:
    mov ecx,edx
    and ecx,4
    jecxz .vecinvsqrt_iter2
	movaps xmm0,[eax]
	add eax,  16
	rsqrtps xmm1,xmm0
	mulps xmm0,xmm1
	mulps xmm0,xmm1
	subps xmm0,xmm6
	mulps xmm0,xmm1
	mulps xmm0,xmm7
	movaps [ebx],xmm0
	add ebx,  16        
.vecinvsqrt_iter2:
    mov ecx,edx
    and ecx,2
    jecxz .vecinvsqrt_iter1
	movlps xmm0,[eax]
	add eax,  8
	rsqrtps xmm1,xmm0
	mulps xmm0,xmm1
	mulps xmm0,xmm1
	subps xmm0,xmm6
	mulps xmm0,xmm1
	mulps xmm0,xmm7
	movlps [ebx],xmm0
	add ebx,  8     
.vecinvsqrt_iter1:
    mov ecx,edx
    and ecx,1
    jecxz .vecinvsqrt_end
	movss xmm0,[eax]
	rsqrtss xmm1,xmm0
	mulss xmm0,xmm1
	mulss xmm0,xmm1
	subss xmm0,xmm6
	mulss xmm0,xmm1
	mulss xmm0,xmm7
	movss [ebx],xmm0        
.vecinvsqrt_end:	
	emms
	pop edx
	pop ecx
	pop ebx
	pop eax
	leave
	ret
	
.globl vecrecip_sse
.globl _vecrecip_sse
vecrecip_sse:	
_vecrecip_sse:	
	push ebp
	mov ebp,esp	
	push eax
	push ebx
	push ecx
	push edx

	mov eax, [ebp + 8]
	mov ebx, [ebp + 12]	
	mov ecx, [ebp + 16]
    mov edx, ecx
	movups xmm6,[sse_two]
    shr ecx, 3
    jecxz .vecrecip_iter4
    emms	
.vecrecip_loop8:	
	movaps xmm0,[eax]
	add eax,  16
	rcpps xmm1,xmm0
	movaps xmm3,[eax]
	add eax,  16
	rcpps xmm4,xmm3
	movaps xmm2,xmm6
	mulps xmm0,xmm1
	movaps xmm5,xmm6	
	subps xmm2,xmm0
	mulps xmm3,xmm4
	mulps xmm2,xmm1	
	subps xmm5,xmm3	
	movaps [ebx],xmm2
	mulps xmm5,xmm4
	add ebx,  16
	movaps [ebx],xmm5
	add ebx,  16
    dec ecx
    jecxz .vecrecip_iter4
    jmp .vecrecip_loop8
.vecrecip_iter4:
    mov ecx,edx
    and ecx,4
    jecxz .vecrecip_iter2
	movaps xmm0,[eax]
	add eax,  16
	rcpps xmm1,xmm0
	movaps xmm2,xmm6
	mulps xmm0,xmm1		
	subps xmm2,xmm0
	mulps xmm2,xmm1
	movaps [ebx],xmm2
	add ebx,  16        
.vecrecip_iter2:
    mov ecx,edx
    and ecx,2
    jecxz .vecrecip_iter1
	movlps xmm0,[eax]
	add eax,  8
	rcpps xmm1,xmm0
	movaps xmm2,xmm6
	mulps xmm0,xmm1		
	subps xmm2,xmm0
	mulps xmm2,xmm1
	movlps [ebx],xmm2
	add ebx,  8     
.vecrecip_iter1:
    mov ecx,edx
    and ecx,1
    jecxz .vecrecip_end
	movss xmm0,[eax]
	rcpss xmm1,xmm0
	movss xmm2,xmm6
	mulss xmm0,xmm1		
	subss xmm2,xmm0
	mulss xmm2,xmm1
	movss [ebx],xmm2        
.vecrecip_end:	
	emms
	pop edx
	pop ecx
	pop ebx
	pop eax
	leave
	ret
	
	
.globl inl0100_sse
.globl _inl0100_sse
inl0100_sse:	
_inl0100_sse:	
.equiv		i0100_nri,			8
.equiv		i0100_iinr,			12
.equiv		i0100_jindex,		16
.equiv		i0100_jjnr,			20
.equiv		i0100_shift,		24
.equiv		i0100_shiftvec,		28
.equiv		i0100_fshift,		32
.equiv		i0100_gid,			36
.equiv		i0100_pos,			40		
.equiv		i0100_faction,		44
.equiv		i0100_type,			48
.equiv		i0100_ntype,		52
.equiv		i0100_nbfp,			56	
.equiv		i0100_Vnb,			60	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i0100_ix,			0
.equiv		i0100_iy,	        16
.equiv		i0100_iz,           32
.equiv		i0100_dx,           48
.equiv		i0100_dy,           64
.equiv		i0100_dz,           80
.equiv		i0100_two,		    96		
.equiv		i0100_c6,			112
.equiv		i0100_c12,			128
.equiv		i0100_six,			144
.equiv		i0100_twelve,		160		 
.equiv		i0100_vnbtot,		176
.equiv		i0100_fix,			192
.equiv		i0100_fiy,			208
.equiv		i0100_fiz,			224
.equiv		i0100_half,			240
.equiv		i0100_three,		256
.equiv		i0100_is3,			272
.equiv		i0100_ii3,			276
.equiv		i0100_ntia,			280	
.equiv		i0100_innerjjnr,    284
.equiv		i0100_innerk,       288
.equiv		i0100_salign,       292								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 296		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i0100_salign], eax

	emms

	movups xmm1, [sse_two]
	movups xmm2, [sse_six]
	movups xmm3, [sse_twelve]
	movaps [esp + i0100_two], xmm1
	movaps [esp + i0100_six],  xmm2
	movaps [esp + i0100_twelve], xmm3

	;# assume we have at least one i particle - start directly 	
.i0100_outer:
	mov   eax, [ebp + i0100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add   dword ptr [ebp + i0100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i0100_is3],ebx    	;# store is3 

	mov   eax, [ebp + i0100_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i0100_iinr]       ;# ecx = pointer into iinr[] 	
	add   dword ptr [ebp + i0100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

    mov   edx, [ebp + i0100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i0100_ntype]
    shl   edx, 1
    mov   [esp + i0100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i0100_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i0100_ix], xmm0
	movaps [esp + i0100_iy], xmm1
	movaps [esp + i0100_iz], xmm2

	mov   [esp + i0100_ii3], ebx
	
	;# clear vnbtot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i0100_vnbtot], xmm4
	movaps [esp + i0100_fix], xmm4
	movaps [esp + i0100_fiy], xmm4
	movaps [esp + i0100_fiz], xmm4
	
	mov   eax, [ebp + i0100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add   dword ptr [ebp + i0100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i0100_pos]
	mov   edi, [ebp + i0100_faction]	
	mov   eax, [ebp + i0100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i0100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i0100_innerk], edx    ;# number of innerloop atoms 
	
	jge   .i0100_unroll_loop
	jmp   .i0100_finish_inner
.i0100_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + i0100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add   dword ptr [esp + i0100_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i0100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i0100_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0100_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i0100_c6], xmm4
	movaps [esp + i0100_c12], xmm6
	
	mov esi, [ebp + i0100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i0100_ix]
	movaps xmm5, [esp + i0100_iy]
	movaps xmm6, [esp + i0100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0100_dx], xmm4 
	movaps [esp + i0100_dy], xmm5
	movaps [esp + i0100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6

	;# rsq in xmm4 
	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i0100_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0

	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i0100_c6]
	mulps  xmm2, [esp + i0100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i0100_vnbtot]
	mulps  xmm1, [esp + i0100_six]
	mulps  xmm2, [esp + i0100_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 

	movaps xmm0, [esp + i0100_dx]
	movaps xmm1, [esp + i0100_dy]
	movaps xmm2, [esp + i0100_dz]

	movaps [esp + i0100_vnbtot], xmm5

	mov    edi, [ebp + i0100_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0100_fix]
	movaps xmm4, [esp + i0100_fiy]
	movaps xmm5, [esp + i0100_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0100_fix], xmm3
	movaps [esp + i0100_fiy], xmm4
	movaps [esp + i0100_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub   dword ptr [esp + i0100_innerk],  4
	jl    .i0100_finish_inner
	jmp   .i0100_unroll_loop
.i0100_finish_inner:
	;# check if at least two particles remain 
	add   dword ptr [esp + i0100_innerk],  4
	mov   edx, [esp + i0100_innerk]
	and   edx, 2
	jnz   .i0100_dopair
	jmp   .i0100_checksingle
.i0100_dopair:	
    mov   ecx, [esp + i0100_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add   dword ptr [esp + i0100_innerjjnr],  8

	mov esi, [ebp + i0100_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i0100_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0100_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i0100_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i0100_c6], xmm4
	movaps [esp + i0100_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	


	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i0100_faction]
	;# move i0100_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i0100_ix]
	movaps xmm5, [esp + i0100_iy]
	movaps xmm6, [esp + i0100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0100_dx], xmm4
	movaps [esp + i0100_dy], xmm5
	movaps [esp + i0100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 


	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i0100_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i0100_c6]
	mulps  xmm2, [esp + i0100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i0100_vnbtot]
	mulps  xmm1, [esp + i0100_six]
	mulps  xmm2, [esp + i0100_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 

	movaps xmm0, [esp + i0100_dx]
	movaps xmm1, [esp + i0100_dy]
	movaps xmm2, [esp + i0100_dz]

	movaps [esp + i0100_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0100_fix]
	movaps xmm4, [esp + i0100_fiy]
	movaps xmm5, [esp + i0100_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0100_fix], xmm3
	movaps [esp + i0100_fiy], xmm4
	movaps [esp + i0100_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i0100_checksingle:				
	mov   edx, [esp + i0100_innerk]
	and   edx, 1
	jnz    .i0100_dosingle
	jmp    .i0100_updateouterdata
.i0100_dosingle:
	mov edi, [ebp + i0100_pos]
	mov   ecx, [esp + i0100_innerjjnr]
	mov   eax, [ecx]		

	mov esi, [ebp + i0100_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i0100_nbfp]
	shl ecx, 1
	add ecx, [esp + i0100_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i0100_c6], xmm4
	movaps [esp + i0100_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i0100_ix]
	movaps xmm5, [esp + i0100_iy]
	movaps xmm6, [esp + i0100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0100_dx], xmm4
	movaps [esp + i0100_dy], xmm5
	movaps [esp + i0100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i0100_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i0100_c6]
	mulps  xmm2, [esp + i0100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + i0100_vnbtot]
	mulps  xmm1, [esp + i0100_six]
	mulps  xmm2, [esp + i0100_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	
	mov    edi, [ebp + i0100_faction]

	movaps xmm0, [esp + i0100_dx]
	movaps xmm1, [esp + i0100_dy]
	movaps xmm2, [esp + i0100_dz]

	movss [esp + i0100_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0100_fix]
	movaps xmm4, [esp + i0100_fiy]
	movaps xmm5, [esp + i0100_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i0100_fix], xmm3
	movaps [esp + i0100_fiy], xmm4
	movaps [esp + i0100_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5
	
.i0100_updateouterdata:
	mov   ecx, [esp + i0100_ii3]
	mov   edi, [ebp + i0100_faction]
	mov   esi, [ebp + i0100_fshift]
	mov   edx, [esp + i0100_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i0100_fix]
	movaps xmm1, [esp + i0100_fiy]
	movaps xmm2, [esp + i0100_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i0100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add   dword ptr [ebp + i0100_gid],  4  ;# advance pointer 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i0100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6	

	;# add earlier value from mem 
	mov   eax, [ebp + i0100_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 

	;# finish if last 
	mov   ecx, [ebp + i0100_nri]
	dec ecx
	jecxz .i0100_end

	;# not last, iterate once more!  
	mov [ebp + i0100_nri], ecx
	jmp .i0100_outer
.i0100_end:
	emms
	mov eax, [esp + i0100_salign]
	add esp, eax
	add esp, 296
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	
.globl inl0110_sse
.globl _inl0110_sse
inl0110_sse:
_inl0110_sse:	
.equiv		i0110_nri,			8
.equiv		i0110_iinr,			12
.equiv		i0110_jindex,		16
.equiv		i0110_jjnr,			20
.equiv		i0110_shift,		24
.equiv		i0110_shiftvec,		28
.equiv		i0110_fshift,		32
.equiv		i0110_gid,			36
.equiv		i0110_pos,			40		
.equiv		i0110_faction,		44
.equiv		i0110_type,			48
.equiv		i0110_ntype,		52
.equiv		i0110_nbfp,			56	
.equiv		i0110_Vnb,			60	
.equiv		i0110_nsatoms,      64			
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i0110_ix,	        0
.equiv		i0110_iy,	        16
.equiv		i0110_iz,           32
.equiv		i0110_dx,           48
.equiv		i0110_dy,           64
.equiv		i0110_dz,           80
.equiv		i0110_two,          96		
.equiv		i0110_c6,           112
.equiv		i0110_c12,          128
.equiv		i0110_six,          144
.equiv		i0110_twelve,       160		 
.equiv		i0110_vnbtot,       176
.equiv		i0110_fix,          192
.equiv		i0110_fiy,          208
.equiv		i0110_fiz,          224
.equiv		i0110_half,         240
.equiv		i0110_three,        256
.equiv		i0110_is3,          272
.equiv		i0110_ii3,          276
.equiv		i0110_shX,	        280
.equiv		i0110_shY,          284
.equiv		i0110_shZ,          288
.equiv		i0110_ntia,         292	
.equiv		i0110_innerjjnr0,   296
.equiv		i0110_innerjjnr,    300
.equiv		i0110_innerk0,      304
.equiv		i0110_innerk,       308
.equiv		i0110_salign,       312			
.equiv		i0110_nsvdwc,       316
.equiv		i0110_nscoul,       320
.equiv		i0110_nsvdw,        324
.equiv		i0110_solnr,	    328		
	push ebp
	mov ebp,esp		
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 332		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i0110_salign], eax

	emms

	movups xmm1, [sse_two]
	movups xmm2, [sse_six]
	movups xmm3, [sse_twelve]
	movaps [esp + i0110_two], xmm1
	movaps [esp + i0110_six],  xmm2
	movaps [esp + i0110_twelve], xmm3

	;# assume we have at least one i particle - start directly 	
.i0110_outer:
	mov   eax, [ebp + i0110_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i0110_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i0110_is3],ebx    	;# store is3 

	mov   eax, [ebp + i0110_shiftvec]   ;# eax = base of shiftvec[] 

	movlps xmm0, [eax + ebx*4]	;# getting the shiftvector 
	movss xmm1, [eax + ebx*4 + 8] 
	movlps [esp + i0110_shX], xmm0
	movss [esp + i0110_shZ], xmm1

	mov   ecx, [ebp + i0110_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i0110_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + i0110_nsatoms]
	add dword ptr [ebp + i0110_nsatoms],  12
	mov   ecx, [eax]	
	mov   edx, [eax + 4]
	mov   eax, [eax + 8]	
	sub   ecx, eax
	sub   eax, edx
	
	mov   [esp + i0110_nsvdwc], edx
	mov   [esp + i0110_nscoul], eax
	mov   [esp + i0110_nsvdw], ecx

	;# clear vnbtot 
	xorps xmm4, xmm4
	movaps [esp + i0110_vnbtot], xmm4
	mov   [esp + i0110_solnr],  ebx
		
	mov   eax, [ebp + i0110_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i0110_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 
	mov   eax, [ebp + i0110_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i0110_innerjjnr0], eax     ;# pointer to jjnr[nj0] 

	mov   [esp + i0110_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + i0110_nsvdwc]
	cmp   ecx,  0
	jnz   .i0110_mno_vdwc
	jmp   .i0110_testvdw
.i0110_mno_vdwc:
	mov   ebx,  [esp + i0110_solnr]
	inc   dword ptr [esp + i0110_solnr]

    mov   edx, [ebp + i0110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i0110_ntype]
    shl   edx, 1
    mov   [esp + i0110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i0110_pos]    ;# eax = base of pos[]  
	mov   [esp + i0110_ii3], ebx

	movss xmm0, [esp + i0110_shX]
	movss xmm1, [esp + i0110_shY]
	movss xmm2, [esp + i0110_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	;# clear i forces 
	xorps xmm4, xmm4
	movaps [esp + i0110_fix], xmm4
	movaps [esp + i0110_fiy], xmm4
	movaps [esp + i0110_fiz], xmm4

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i0110_ix], xmm0
	movaps [esp + i0110_iy], xmm1
	movaps [esp + i0110_iz], xmm2

	mov   ecx, [esp + i0110_innerjjnr0]
	mov   [esp + i0110_innerjjnr], ecx
	mov   edx, [esp + i0110_innerk0]
    sub   edx,  4
    mov   [esp + i0110_innerk], edx    ;# number of innerloop atoms 
	jge   .i0110_unroll_vdwc_loop
	jmp   .i0110_finish_vdwc_inner
.i0110_unroll_vdwc_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i0110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i0110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i0110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i0110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i0110_c6], xmm4
	movaps [esp + i0110_c12], xmm6
	
	mov esi, [ebp + i0110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move i0110_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i0110_ix]
	movaps xmm5, [esp + i0110_iy]
	movaps xmm6, [esp + i0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0110_dx], xmm4
	movaps [esp + i0110_dy], xmm5
	movaps [esp + i0110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i0110_c6]
	mulps  xmm2, [esp + i0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i0110_vnbtot]
	mulps  xmm1, [esp + i0110_six]
	mulps  xmm2, [esp + i0110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 

	movaps xmm0, [esp + i0110_dx]
	movaps xmm1, [esp + i0110_dy]
	movaps xmm2, [esp + i0110_dz]

	movaps [esp + i0110_vnbtot], xmm5

	mov    edi, [ebp + i0110_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0110_fix]
	movaps xmm4, [esp + i0110_fiy]
	movaps xmm5, [esp + i0110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0110_fix], xmm3
	movaps [esp + i0110_fiy], xmm4
	movaps [esp + i0110_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i0110_innerk],  4
	jl    .i0110_finish_vdwc_inner
	jmp   .i0110_unroll_vdwc_loop
.i0110_finish_vdwc_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i0110_innerk],  4
	mov   edx, [esp + i0110_innerk]
	and   edx, 2
	jnz   .i0110_dopair_vdwc
	jmp   .i0110_checksingle_vdwc
.i0110_dopair_vdwc:	

    mov   ecx, [esp + i0110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i0110_innerjjnr],  8

	mov esi, [ebp + i0110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i0110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i0110_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i0110_c6], xmm4
	movaps [esp + i0110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	


	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i0110_faction]
	;# move i0110_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i0110_ix]
	movaps xmm5, [esp + i0110_iy]
	movaps xmm6, [esp + i0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0110_dx], xmm4
	movaps [esp + i0110_dy], xmm5
	movaps [esp + i0110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 


	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i0110_c6]
	mulps  xmm2, [esp + i0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i0110_vnbtot]
	mulps  xmm1, [esp + i0110_six]
	mulps  xmm2, [esp + i0110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 

	movaps xmm0, [esp + i0110_dx]
	movaps xmm1, [esp + i0110_dy]
	movaps xmm2, [esp + i0110_dz]

	movaps [esp + i0110_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0110_fix]
	movaps xmm4, [esp + i0110_fiy]
	movaps xmm5, [esp + i0110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0110_fix], xmm3
	movaps [esp + i0110_fiy], xmm4
	movaps [esp + i0110_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i0110_checksingle_vdwc:				
	mov   edx, [esp + i0110_innerk]
	and   edx, 1
	jnz    .i0110_dosingle_vdwc
	jmp    .i0110_updateouterdata_vdwc
.i0110_dosingle_vdwc:			
	mov edi, [ebp + i0110_pos]
	mov   ecx, [esp + i0110_innerjjnr]
	mov   eax, [ecx]		

	mov esi, [ebp + i0110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i0110_nbfp]
	shl ecx, 1
	add ecx, [esp + i0110_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i0110_c6], xmm4
	movaps [esp + i0110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i0110_ix]
	movaps xmm5, [esp + i0110_iy]
	movaps xmm6, [esp + i0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0110_dx], xmm4
	movaps [esp + i0110_dy], xmm5
	movaps [esp + i0110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i0110_c6]
	mulps  xmm2, [esp + i0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + i0110_vnbtot]
	mulps  xmm1, [esp + i0110_six]
	mulps  xmm2, [esp + i0110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	
	mov    edi, [ebp + i0110_faction]

	movaps xmm0, [esp + i0110_dx]
	movaps xmm1, [esp + i0110_dy]
	movaps xmm2, [esp + i0110_dz]

	movss [esp + i0110_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0110_fix]
	movaps xmm4, [esp + i0110_fiy]
	movaps xmm5, [esp + i0110_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i0110_fix], xmm3
	movaps [esp + i0110_fiy], xmm4
	movaps [esp + i0110_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i0110_updateouterdata_vdwc:
	mov   ecx, [esp + i0110_ii3]
	mov   edi, [ebp + i0110_faction]
	mov   esi, [ebp + i0110_fshift]
	mov   edx, [esp + i0110_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i0110_fix]
	movaps xmm1, [esp + i0110_fiy]
	movaps xmm2, [esp + i0110_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# loop back to mno 
	dec dword ptr [esp + i0110_nsvdwc]
	jz  .i0110_testvdw
	jmp .i0110_mno_vdwc
.i0110_testvdw:	
	mov  ebx,  [esp + i0110_nscoul]
	add  [esp + i0110_solnr],  ebx

	mov  ecx, [esp + i0110_nsvdw]
	cmp  ecx,  0
	jnz  .i0110_mno_vdw
	jmp  .i0110_last_mno
.i0110_mno_vdw:
	mov   ebx,  [esp + i0110_solnr]
	inc   dword ptr [esp + i0110_solnr]

    mov   edx, [ebp + i0110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i0110_ntype]
    shl   edx, 1
    mov   [esp + i0110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i0110_pos]    ;# eax = base of pos[]  
	mov   [esp + i0110_ii3], ebx

	movss xmm0, [esp + i0110_shX]
	movss xmm1, [esp + i0110_shY]
	movss xmm2, [esp + i0110_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	xorps xmm4, xmm4
	movaps [esp + i0110_fix], xmm4
	movaps [esp + i0110_fiy], xmm4
	movaps [esp + i0110_fiz], xmm4

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i0110_ix], xmm0
	movaps [esp + i0110_iy], xmm1
	movaps [esp + i0110_iz], xmm2

	mov   ecx, [esp + i0110_innerjjnr0]
	mov   [esp + i0110_innerjjnr], ecx
	mov   edx, [esp + i0110_innerk0]
    sub   edx,  4
    mov   [esp + i0110_innerk], edx    ;# number of innerloop atoms 
	jge   .i0110_unroll_vdw_loop
	jmp   .i0110_finish_vdw_inner
.i0110_unroll_vdw_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i0110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i0110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i0110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i0110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i0110_c6], xmm4
	movaps [esp + i0110_c12], xmm6
	
	mov esi, [ebp + i0110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move i0110_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i0110_ix]
	movaps xmm5, [esp + i0110_iy]
	movaps xmm6, [esp + i0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0110_dx], xmm4
	movaps [esp + i0110_dy], xmm5
	movaps [esp + i0110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i0110_c6]
	mulps  xmm2, [esp + i0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i0110_vnbtot]
	mulps  xmm1, [esp + i0110_six]
	mulps  xmm2, [esp + i0110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 

	movaps xmm0, [esp + i0110_dx]
	movaps xmm1, [esp + i0110_dy]
	movaps xmm2, [esp + i0110_dz]

	movaps [esp + i0110_vnbtot], xmm5

	mov    edi, [ebp + i0110_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0110_fix]
	movaps xmm4, [esp + i0110_fiy]
	movaps xmm5, [esp + i0110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0110_fix], xmm3
	movaps [esp + i0110_fiy], xmm4
	movaps [esp + i0110_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i0110_innerk],  4
	jl    .i0110_finish_vdw_inner
	jmp   .i0110_unroll_vdw_loop
.i0110_finish_vdw_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i0110_innerk],  4
	mov   edx, [esp + i0110_innerk]
	and   edx, 2
	jnz   .i0110_dopair_vdw
	jmp   .i0110_checksingle_vdw
.i0110_dopair_vdw:	

    mov   ecx, [esp + i0110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i0110_innerjjnr],  8

	mov esi, [ebp + i0110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i0110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i0110_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i0110_c6], xmm4
	movaps [esp + i0110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	


	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i0110_faction]
	;# move i0110_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i0110_ix]
	movaps xmm5, [esp + i0110_iy]
	movaps xmm6, [esp + i0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0110_dx], xmm4
	movaps [esp + i0110_dy], xmm5
	movaps [esp + i0110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 


	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i0110_c6]
	mulps  xmm2, [esp + i0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i0110_vnbtot]
	mulps  xmm1, [esp + i0110_six]
	mulps  xmm2, [esp + i0110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 

	movaps xmm0, [esp + i0110_dx]
	movaps xmm1, [esp + i0110_dy]
	movaps xmm2, [esp + i0110_dz]

	movaps [esp + i0110_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0110_fix]
	movaps xmm4, [esp + i0110_fiy]
	movaps xmm5, [esp + i0110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0110_fix], xmm3
	movaps [esp + i0110_fiy], xmm4
	movaps [esp + i0110_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i0110_checksingle_vdw:				
	mov   edx, [esp + i0110_innerk]
	and   edx, 1
	jnz   .i0110_dosingle_vdw
	jmp   .i0110_updateouterdata_vdw
.i0110_dosingle_vdw:			
	mov edi, [ebp + i0110_pos]
	mov   ecx, [esp + i0110_innerjjnr]
	mov   eax, [ecx]		

	mov esi, [ebp + i0110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i0110_nbfp]
	shl ecx, 1
	add ecx, [esp + i0110_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i0110_c6], xmm4
	movaps [esp + i0110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i0110_ix]
	movaps xmm5, [esp + i0110_iy]
	movaps xmm6, [esp + i0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0110_dx], xmm4
	movaps [esp + i0110_dy], xmm5
	movaps [esp + i0110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i0110_c6]
	mulps  xmm2, [esp + i0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + i0110_vnbtot]
	mulps  xmm1, [esp + i0110_six]
	mulps  xmm2, [esp + i0110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	
	mov    edi, [ebp + i0110_faction]

	movaps xmm0, [esp + i0110_dx]
	movaps xmm1, [esp + i0110_dy]
	movaps xmm2, [esp + i0110_dz]

	movss [esp + i0110_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0110_fix]
	movaps xmm4, [esp + i0110_fiy]
	movaps xmm5, [esp + i0110_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i0110_fix], xmm3
	movaps [esp + i0110_fiy], xmm4
	movaps [esp + i0110_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i0110_updateouterdata_vdw:
	mov   ecx, [esp + i0110_ii3]
	mov   edi, [ebp + i0110_faction]
	mov   esi, [ebp + i0110_fshift]
	mov   edx, [esp + i0110_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i0110_fix]
	movaps xmm1, [esp + i0110_fiy]
	movaps xmm2, [esp + i0110_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5
	
	;# loop back to mno 
	dec dword ptr [esp + i0110_nsvdw]
	jz  .i0110_last_mno
	jmp .i0110_mno_vdw
	
.i0110_last_mno:	

	;# get group index for i particle 
	mov   edx, [ebp + i0110_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i0110_gid],  4  ;# advance pointer 

	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i0110_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i0110_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i0110_nri]
	dec ecx
	jecxz .i0110_end
	;# not last, iterate once more!  
	mov [ebp + i0110_nri], ecx
	jmp .i0110_outer
.i0110_end:
	emms
	mov eax, [esp + i0110_salign]
	add esp, eax
	add esp, 332
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


.globl inl0300_sse
.globl _inl0300_sse
inl0300_sse:	
_inl0300_sse:	
.equiv		i0300_nri,			8
.equiv		i0300_iinr,			12
.equiv		i0300_jindex,		16
.equiv		i0300_jjnr,			20
.equiv		i0300_shift,		24
.equiv		i0300_shiftvec,		28
.equiv		i0300_fshift,		32
.equiv		i0300_gid,			36
.equiv		i0300_pos,			40		
.equiv		i0300_faction,		44
.equiv		i0300_type,			48
.equiv		i0300_ntype,		52
.equiv		i0300_nbfp,			56	
.equiv		i0300_Vnb,			60
.equiv		i0300_tabscale,		64
.equiv		i0300_VFtab,		68
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i0300_ix,	        0
.equiv		i0300_iy,			16
.equiv		i0300_iz,           32
.equiv		i0300_dx,           48
.equiv		i0300_dy,           64
.equiv		i0300_dz,           80
.equiv		i0300_two,	        96
.equiv		i0300_tsc,			112
.equiv		i0300_c6,           128
.equiv		i0300_c12,          144
.equiv		i0300_fscal,        160
.equiv		i0300_vnbtot,       176
.equiv		i0300_fix,          192
.equiv		i0300_fiy,          208
.equiv		i0300_fiz,          224
.equiv		i0300_half,         240
.equiv		i0300_three,        256
.equiv		i0300_is3,          272
.equiv		i0300_ii3,          276
.equiv		i0300_ntia,	        280	
.equiv		i0300_innerjjnr,    284
.equiv		i0300_innerk,       288
.equiv		i0300_salign,       292								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 296		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i0300_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + i0300_tabscale]
	movaps [esp + i0300_half],  xmm0
	movaps [esp + i0300_two], xmm1
	movaps [esp + i0300_three],  xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + i0300_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.i0300_outer:
	mov   eax, [ebp + i0300_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i0300_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i0300_is3],ebx    	;# store is3 

	mov   eax, [ebp + i0300_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i0300_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i0300_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

    mov   edx, [ebp + i0300_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i0300_ntype]
    shl   edx, 1
    mov   [esp + i0300_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i0300_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i0300_ix], xmm0
	movaps [esp + i0300_iy], xmm1
	movaps [esp + i0300_iz], xmm2

	mov   [esp + i0300_ii3], ebx
	
	;# clear tot potential and i forces 
	xorps xmm4, xmm4
	movaps [esp + i0300_vnbtot], xmm4
	movaps [esp + i0300_fix], xmm4
	movaps [esp + i0300_fiy], xmm4
	movaps [esp + i0300_fiz], xmm4
	
	mov   eax, [ebp + i0300_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i0300_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i0300_pos]
	mov   edi, [ebp + i0300_faction]	
	mov   eax, [ebp + i0300_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i0300_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i0300_innerk], edx    ;# number of innerloop atoms 
	jge   .i0300_unroll_loop
	jmp   .i0300_finish_inner
.i0300_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i0300_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i0300_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i0300_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i0300_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0300_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i0300_c6], xmm4
	movaps [esp + i0300_c12], xmm6
	
	mov esi, [ebp + i0300_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move i0300_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i0300_ix]
	movaps xmm5, [esp + i0300_iy]
	movaps xmm6, [esp + i0300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0300_dx], xmm4
	movaps [esp + i0300_dy], xmm5
	movaps [esp + i0300_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i0300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i0300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i0300_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 3
	pslld mm7, 3

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i0300_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 0]
	movlps xmm7, [esi + ecx*4 + 0]
	movhps xmm5, [esi + ebx*4 + 0]
	movhps xmm7, [esi + edx*4 + 0] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i0300_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i0300_vnbtot]
	movaps [esp + i0300_fscal], xmm7
	movaps [esp + i0300_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	
	movaps xmm4, [esp + i0300_c12]
	mulps  xmm7, xmm4 
	mulps  xmm5, xmm4  
	addps  xmm7, [esp + i0300_fscal] 
	
	addps  xmm5, [esp + i0300_vnbtot]
	movaps [esp + i0300_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i0300_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i0300_dx]
	movaps xmm1, [esp + i0300_dy]
	movaps xmm2, [esp + i0300_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i0300_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0300_fix]
	movaps xmm4, [esp + i0300_fiy]
	movaps xmm5, [esp + i0300_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0300_fix], xmm3
	movaps [esp + i0300_fiy], xmm4
	movaps [esp + i0300_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i0300_innerk],  4
	jl    .i0300_finish_inner
	jmp   .i0300_unroll_loop
.i0300_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i0300_innerk],  4
	mov   edx, [esp + i0300_innerk]
	and   edx, 2
	jnz   .i0300_dopair
	jmp   .i0300_checksingle
.i0300_dopair:	
    mov   ecx, [esp + i0300_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i0300_innerjjnr],  8	
	xorps xmm7, xmm7

	mov esi, [ebp + i0300_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i0300_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0300_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i0300_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i0300_c6], xmm4
	movaps [esp + i0300_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i0300_faction]
	;# move i0300_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i0300_ix]
	movaps xmm5, [esp + i0300_iy]
	movaps xmm6, [esp + i0300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0300_dx], xmm4
	movaps [esp + i0300_dy], xmm5
	movaps [esp + i0300_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i0300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i0300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i0300_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + i0300_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 0]
	movhps xmm5, [esi + edx*4 + 0];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i0300_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i0300_vnbtot]
	movaps [esp + i0300_fscal], xmm7
	movaps [esp + i0300_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i0300_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i0300_fscal] 
	
	addps  xmm5, [esp + i0300_vnbtot]
	movaps [esp + i0300_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i0300_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i0300_dx]
	movaps xmm1, [esp + i0300_dy]
	movaps xmm2, [esp + i0300_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0300_fix]
	movaps xmm4, [esp + i0300_fiy]
	movaps xmm5, [esp + i0300_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0300_fix], xmm3
	movaps [esp + i0300_fiy], xmm4
	movaps [esp + i0300_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i0300_checksingle:				
	mov   edx, [esp + i0300_innerk]
	and   edx, 1
	jnz    .i0300_dosingle
	jmp    .i0300_updateouterdata
.i0300_dosingle:
	mov edi, [ebp + i0300_pos]
	mov   ecx, [esp + i0300_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6

	mov esi, [ebp + i0300_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i0300_nbfp]
	shl ecx, 1
	add ecx, [esp + i0300_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i0300_c6], xmm4
	movaps [esp + i0300_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i0300_ix]
	movaps xmm5, [esp + i0300_iy]
	movaps xmm6, [esp + i0300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0300_dx], xmm4
	movaps [esp + i0300_dy], xmm5
	movaps [esp + i0300_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i0300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i0300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i0300_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + i0300_VFtab]
	movd ebx, mm6
	
	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 0]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i0300_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addss  xmm5, [esp + i0300_vnbtot]
	movaps [esp + i0300_fscal], xmm7
	movss [esp + i0300_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i0300_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i0300_fscal] 
	
	addss  xmm5, [esp + i0300_vnbtot]
	movss [esp + i0300_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i0300_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7
	mov    edi, [ebp + i0300_faction]

	movaps xmm0, [esp + i0300_dx]
	movaps xmm1, [esp + i0300_dy]
	movaps xmm2, [esp + i0300_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0300_fix]
	movaps xmm4, [esp + i0300_fiy]
	movaps xmm5, [esp + i0300_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i0300_fix], xmm3
	movaps [esp + i0300_fiy], xmm4
	movaps [esp + i0300_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i0300_updateouterdata:
	mov   ecx, [esp + i0300_ii3]
	mov   edi, [ebp + i0300_faction]
	mov   esi, [ebp + i0300_fshift]
	mov   edx, [esp + i0300_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i0300_fix]
	movaps xmm1, [esp + i0300_fiy]
	movaps xmm2, [esp + i0300_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i0300_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i0300_gid],  4  ;# advance pointer 

	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i0300_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i0300_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i0300_nri]
	dec ecx
	jecxz .i0300_end
	;# not last, iterate once more!  
	mov [ebp + i0300_nri], ecx
	jmp .i0300_outer
.i0300_end:
	emms
	mov eax, [esp + i0300_salign]
	add esp, eax
	add esp, 296
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	
.globl inl0310_sse
.globl _inl0310_sse
inl0310_sse:	
_inl0310_sse:	
.equiv		i0310_nri,			8
.equiv		i0310_iinr,			12
.equiv		i0310_jindex,		16
.equiv		i0310_jjnr,			20
.equiv		i0310_shift,		24
.equiv		i0310_shiftvec,		28
.equiv		i0310_fshift,		32
.equiv		i0310_gid,			36
.equiv		i0310_pos,			40		
.equiv		i0310_faction,		44
.equiv		i0310_type,			48
.equiv		i0310_ntype,		52
.equiv		i0310_nbfp,			56	
.equiv		i0310_Vnb,			60	
.equiv		i0310_tabscale,		64
.equiv		i0310_VFtab,		68
.equiv		i0310_nsatoms,		72
	;# stack offsets for local variables  
    ;# bottom of stack is cache-aligned for sse use 
.equiv		i0310_ix,	        0
.equiv		i0310_iy,	        16
.equiv		i0310_iz,           32
.equiv		i0310_dx,           48
.equiv		i0310_dy,           64
.equiv		i0310_dz,           80
.equiv		i0310_two,          96   
.equiv		i0310_tsc,          112
.equiv		i0310_c6,           128
.equiv		i0310_c12,          144
.equiv		i0310_fscal,        160
.equiv		i0310_vnbtot,       176
.equiv		i0310_fix,          192
.equiv		i0310_fiy,          208
.equiv		i0310_fiz,          224
.equiv		i0310_half,         240
.equiv		i0310_three,        256
.equiv		i0310_is3,          272
.equiv		i0310_ii3,          276
.equiv		i0310_shX,          280
.equiv		i0310_shY,          284
.equiv		i0310_shZ,          288
.equiv		i0310_ntia,	        292	
.equiv		i0310_innerjjnr0,   296
.equiv		i0310_innerjjnr,    300
.equiv		i0310_innerk0,      304
.equiv		i0310_innerk,       308
.equiv		i0310_salign,       312
.equiv		i0310_nsvdwc,       316
.equiv		i0310_nscoul,       320
.equiv		i0310_nsvdw,        324
.equiv		i0310_solnr,        328
	push ebp
	mov ebp,esp	
    push eax      
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 332		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i0310_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + i0310_tabscale]
	movaps [esp + i0310_half],  xmm0
	movaps [esp + i0310_two], xmm1
	movaps [esp + i0310_three], xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + i0310_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.i0310_outer:
	mov   eax, [ebp + i0310_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i0310_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i0310_is3],ebx    	;# store is3 

	mov   eax, [ebp + i0310_shiftvec]   ;# eax = base of shiftvec[] 

	movlps xmm0, [eax + ebx*4]	;# getting the shiftvector 
	movss xmm1, [eax + ebx*4 + 8] 
	movlps [esp + i0310_shX], xmm0
	movss [esp + i0310_shZ], xmm1

	mov   ecx, [ebp + i0310_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i0310_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + i0310_nsatoms]
	add dword ptr [ebp + i0310_nsatoms],  12
	mov   ecx, [eax]	
	mov   edx, [eax + 4]
	mov   eax, [eax + 8]	
	sub   ecx, eax
	sub   eax, edx
	
	mov   [esp + i0310_nsvdwc], edx
	mov   [esp + i0310_nscoul], eax
	mov   [esp + i0310_nsvdw], ecx

	;# clear vnbtot 
	xorps xmm4, xmm4
	movaps [esp + i0310_vnbtot], xmm4
	mov   [esp + i0310_solnr],  ebx
		
	mov   eax, [ebp + i0310_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i0310_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 
	mov   eax, [ebp + i0310_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i0310_innerjjnr0], eax     ;# pointer to jjnr[nj0] 

	mov   [esp + i0310_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + i0310_nsvdwc]
	cmp   ecx,  0
	jnz   .i0310_mno_vdwc
	jmp   .i0310_testvdw
.i0310_mno_vdwc:
	mov   ebx,  [esp + i0310_solnr]
	inc   dword ptr [esp + i0310_solnr]

    mov   edx, [ebp + i0310_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i0310_ntype]
    shl   edx, 1
    mov   [esp + i0310_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i0310_pos]    ;# eax = base of pos[]  
	mov   [esp + i0310_ii3], ebx

	movss xmm0, [esp + i0310_shX]
	movss xmm1, [esp + i0310_shY]
	movss xmm2, [esp + i0310_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	;# clear i forces 
	xorps xmm4, xmm4
	movaps [esp + i0310_fix], xmm4
	movaps [esp + i0310_fiy], xmm4
	movaps [esp + i0310_fiz], xmm4

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i0310_ix], xmm0
	movaps [esp + i0310_iy], xmm1
	movaps [esp + i0310_iz], xmm2

	mov   ecx, [esp + i0310_innerjjnr0]
	mov   [esp + i0310_innerjjnr], ecx
	mov   edx, [esp + i0310_innerk0]
    sub   edx,  4
    mov   [esp + i0310_innerk], edx    ;# number of innerloop atoms 
	jge   .i0310_unroll_vdwc_loop
	jmp   .i0310_finish_vdwc_inner
.i0310_unroll_vdwc_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i0310_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i0310_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i0310_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i0310_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0310_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i0310_c6], xmm4
	movaps [esp + i0310_c12], xmm6
	
	mov esi, [ebp + i0310_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move i0310_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i0310_ix]
	movaps xmm5, [esp + i0310_iy]
	movaps xmm6, [esp + i0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0310_dx], xmm4
	movaps [esp + i0310_dy], xmm5
	movaps [esp + i0310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i0310_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 3
	pslld mm7, 3

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i0310_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 0]
	movlps xmm7, [esi + ecx*4 + 0]
	movhps xmm5, [esi + ebx*4 + 0]
	movhps xmm7, [esi + edx*4 + 0] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i0310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i0310_vnbtot]
	movaps [esp + i0310_fscal], xmm7
	movaps [esp + i0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i0310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i0310_fscal] 
	
	addps  xmm5, [esp + i0310_vnbtot]
	movaps [esp + i0310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i0310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i0310_dx]
	movaps xmm1, [esp + i0310_dy]
	movaps xmm2, [esp + i0310_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i0310_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0310_fix]
	movaps xmm4, [esp + i0310_fiy]
	movaps xmm5, [esp + i0310_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0310_fix], xmm3
	movaps [esp + i0310_fiy], xmm4
	movaps [esp + i0310_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i0310_innerk],  4
	jl    .i0310_finish_vdwc_inner
	jmp   .i0310_unroll_vdwc_loop
.i0310_finish_vdwc_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i0310_innerk],  4
	mov   edx, [esp + i0310_innerk]
	and   edx, 2
	jnz   .i0310_dopair_vdwc
	jmp   .i0310_checksingle_vdwc
.i0310_dopair_vdwc:	
    mov   ecx, [esp + i0310_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i0310_innerjjnr],  8	
	xorps xmm7, xmm7

	mov esi, [ebp + i0310_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i0310_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0310_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i0310_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i0310_c6], xmm4
	movaps [esp + i0310_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i0310_faction]
	;# move i0310_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i0310_ix]
	movaps xmm5, [esp + i0310_iy]
	movaps xmm6, [esp + i0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0310_dx], xmm4
	movaps [esp + i0310_dy], xmm5
	movaps [esp + i0310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i0310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + i0310_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 0]
	movhps xmm5, [esi + edx*4 + 0];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i0310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i0310_vnbtot]
	movaps [esp + i0310_fscal], xmm7
	movaps [esp + i0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i0310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i0310_fscal] 
	
	addps  xmm5, [esp + i0310_vnbtot]
	movaps [esp + i0310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i0310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i0310_dx]
	movaps xmm1, [esp + i0310_dy]
	movaps xmm2, [esp + i0310_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0310_fix]
	movaps xmm4, [esp + i0310_fiy]
	movaps xmm5, [esp + i0310_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0310_fix], xmm3
	movaps [esp + i0310_fiy], xmm4
	movaps [esp + i0310_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i0310_checksingle_vdwc:				
	mov   edx, [esp + i0310_innerk]
	and   edx, 1
	jnz    .i0310_dosingle_vdwc
	jmp    .i0310_updateouterdata_vdwc
.i0310_dosingle_vdwc:
	mov edi, [ebp + i0310_pos]
	mov   ecx, [esp + i0310_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6

	mov esi, [ebp + i0310_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i0310_nbfp]
	shl ecx, 1
	add ecx, [esp + i0310_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i0310_c6], xmm4
	movaps [esp + i0310_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i0310_ix]
	movaps xmm5, [esp + i0310_iy]
	movaps xmm6, [esp + i0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0310_dx], xmm4
	movaps [esp + i0310_dy], xmm5
	movaps [esp + i0310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i0310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + i0310_VFtab]
	movd ebx, mm6
	
	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 0]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i0310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addss  xmm5, [esp + i0310_vnbtot]
	movaps [esp + i0310_fscal], xmm7
	movss [esp + i0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i0310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i0310_fscal] 
	
	addss  xmm5, [esp + i0310_vnbtot]
	movss [esp + i0310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i0310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7
	mov    edi, [ebp + i0310_faction]

	movaps xmm0, [esp + i0310_dx]
	movaps xmm1, [esp + i0310_dy]
	movaps xmm2, [esp + i0310_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0310_fix]
	movaps xmm4, [esp + i0310_fiy]
	movaps xmm5, [esp + i0310_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i0310_fix], xmm3
	movaps [esp + i0310_fiy], xmm4
	movaps [esp + i0310_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i0310_updateouterdata_vdwc:
	mov   ecx, [esp + i0310_ii3]
	mov   edi, [ebp + i0310_faction]
	mov   esi, [ebp + i0310_fshift]
	mov   edx, [esp + i0310_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i0310_fix]
	movaps xmm1, [esp + i0310_fiy]
	movaps xmm2, [esp + i0310_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# loop back to mno 
	dec  dword ptr [esp + i0310_nsvdwc]
	jz  .i0310_testvdw
	jmp .i0310_mno_vdwc
.i0310_testvdw:	
	mov  ebx,  [esp + i0310_nscoul]
	add  [esp + i0310_solnr],  ebx

	mov  ecx, [esp + i0310_nsvdw]
	cmp  ecx,  0
	jnz  .i0310_mno_vdw
	jmp  .i0310_last_mno
.i0310_mno_vdw:
	mov   ebx,  [esp + i0310_solnr]
	inc   dword ptr [esp + i0310_solnr]

    mov   edx, [ebp + i0310_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i0310_ntype]
    shl   edx, 1
    mov   [esp + i0310_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i0310_pos]    ;# eax = base of pos[]  
	mov   [esp + i0310_ii3], ebx

	movss xmm0, [esp + i0310_shX]
	movss xmm1, [esp + i0310_shY]
	movss xmm2, [esp + i0310_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	xorps xmm4, xmm4
	movaps [esp + i0310_fix], xmm4
	movaps [esp + i0310_fiy], xmm4
	movaps [esp + i0310_fiz], xmm4

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i0310_ix], xmm0
	movaps [esp + i0310_iy], xmm1
	movaps [esp + i0310_iz], xmm2

	mov   ecx, [esp + i0310_innerjjnr0]
	mov   [esp + i0310_innerjjnr], ecx
	mov   edx, [esp + i0310_innerk0]
    sub   edx,  4
    mov   [esp + i0310_innerk], edx    ;# number of innerloop atoms 
	jge   .i0310_unroll_vdw_loop
	jmp   .i0310_finish_vdw_inner
.i0310_unroll_vdw_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + i0310_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i0310_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i0310_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i0310_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0310_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i0310_c6], xmm4
	movaps [esp + i0310_c12], xmm6
	
	mov esi, [ebp + i0310_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move i0310_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i0310_ix]
	movaps xmm5, [esp + i0310_iy]
	movaps xmm6, [esp + i0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0310_dx], xmm4
	movaps [esp + i0310_dy], xmm5
	movaps [esp + i0310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i0310_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 3
	pslld mm7, 3

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i0310_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 0]
	movlps xmm7, [esi + ecx*4 + 0]
	movhps xmm5, [esi + ebx*4 + 0]
	movhps xmm7, [esi + edx*4 + 0] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i0310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i0310_vnbtot]
	movaps [esp + i0310_fscal], xmm7
	movaps [esp + i0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i0310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i0310_fscal] 
	
	addps  xmm5, [esp + i0310_vnbtot]
	movaps [esp + i0310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i0310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i0310_dx]
	movaps xmm1, [esp + i0310_dy]
	movaps xmm2, [esp + i0310_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i0310_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0310_fix]
	movaps xmm4, [esp + i0310_fiy]
	movaps xmm5, [esp + i0310_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0310_fix], xmm3
	movaps [esp + i0310_fiy], xmm4
	movaps [esp + i0310_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i0310_innerk],  4
	jl    .i0310_finish_vdw_inner
	jmp   .i0310_unroll_vdw_loop
.i0310_finish_vdw_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i0310_innerk],  4
	mov   edx, [esp + i0310_innerk]
	and   edx, 2
	jnz   .i0310_dopair_vdw
	jmp   .i0310_checksingle_vdw
.i0310_dopair_vdw:	
    mov   ecx, [esp + i0310_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i0310_innerjjnr],  8	
	xorps xmm7, xmm7

	mov esi, [ebp + i0310_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i0310_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i0310_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i0310_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i0310_c6], xmm4
	movaps [esp + i0310_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i0310_faction]
	;# move i0310_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i0310_ix]
	movaps xmm5, [esp + i0310_iy]
	movaps xmm6, [esp + i0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0310_dx], xmm4
	movaps [esp + i0310_dy], xmm5
	movaps [esp + i0310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i0310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + i0310_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 0]
	movhps xmm5, [esi + edx*4 + 0];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i0310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i0310_vnbtot]
	movaps [esp + i0310_fscal], xmm7
	movaps [esp + i0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i0310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i0310_fscal] 
	
	addps  xmm5, [esp + i0310_vnbtot]
	movaps [esp + i0310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i0310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i0310_dx]
	movaps xmm1, [esp + i0310_dy]
	movaps xmm2, [esp + i0310_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0310_fix]
	movaps xmm4, [esp + i0310_fiy]
	movaps xmm5, [esp + i0310_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i0310_fix], xmm3
	movaps [esp + i0310_fiy], xmm4
	movaps [esp + i0310_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i0310_checksingle_vdw:				
	mov   edx, [esp + i0310_innerk]
	and   edx, 1
	jnz    .i0310_dosingle_vdw
	jmp    .i0310_updateouterdata_vdw
.i0310_dosingle_vdw:
	mov edi, [ebp + i0310_pos]
	mov   ecx, [esp + i0310_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6

	mov esi, [ebp + i0310_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i0310_nbfp]
	shl ecx, 1
	add ecx, [esp + i0310_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i0310_c6], xmm4
	movaps [esp + i0310_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i0310_ix]
	movaps xmm5, [esp + i0310_iy]
	movaps xmm6, [esp + i0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i0310_dx], xmm4
	movaps [esp + i0310_dy], xmm5
	movaps [esp + i0310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i0310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + i0310_VFtab]
	movd ebx, mm6
	
	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 0]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i0310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addss  xmm5, [esp + i0310_vnbtot]
	movaps [esp + i0310_fscal], xmm7
	movss [esp + i0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i0310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i0310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i0310_fscal] 
	
	addss  xmm5, [esp + i0310_vnbtot]
	movss [esp + i0310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i0310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7
	mov    edi, [ebp + i0310_faction]

	movaps xmm0, [esp + i0310_dx]
	movaps xmm1, [esp + i0310_dy]
	movaps xmm2, [esp + i0310_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i0310_fix]
	movaps xmm4, [esp + i0310_fiy]
	movaps xmm5, [esp + i0310_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i0310_fix], xmm3
	movaps [esp + i0310_fiy], xmm4
	movaps [esp + i0310_fiz], xmm5
	;# update fj 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5		
.i0310_updateouterdata_vdw:
	mov   ecx, [esp + i0310_ii3]
	mov   edi, [ebp + i0310_faction]
	mov   esi, [ebp + i0310_fshift]
	mov   edx, [esp + i0310_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i0310_fix]
	movaps xmm1, [esp + i0310_fiy]
	movaps xmm2, [esp + i0310_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5
	
	;# loop back to mno 
	dec  dword ptr [esp + i0310_nsvdw]
	jz  .i0310_last_mno
	jmp .i0310_mno_vdw	
.i0310_last_mno:	

	;# get group index for i particle 
	mov   edx, [ebp + i0310_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i0310_gid],  4  ;# advance pointer 

	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i0310_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i0310_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i0310_nri]
	dec ecx
	jecxz .i0310_end
	;# not last, iterate once more!  
	mov [ebp + i0310_nri], ecx
	jmp .i0310_outer
.i0310_end:
	emms
	mov eax, [esp + i0310_salign]
	add esp, eax
	add esp, 332
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl inl1000_sse
.globl _inl1000_sse
inl1000_sse:	
_inl1000_sse:	
.equiv		i1000_nri,			8
.equiv		i1000_iinr,			12
.equiv		i1000_jindex,		16
.equiv		i1000_jjnr,			20
.equiv		i1000_shift,		24
.equiv		i1000_shiftvec,		28
.equiv		i1000_fshift,		32
.equiv		i1000_gid,			36
.equiv		i1000_pos,			40		
.equiv		i1000_faction,		44
.equiv		i1000_charge,		48
.equiv		i1000_facel,		52
.equiv		i1000_Vc,			56
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i1000_ix,           0
.equiv		i1000_iy,	        16
.equiv		i1000_iz,           32
.equiv		i1000_iq,           48
.equiv		i1000_dx,           64
.equiv		i1000_dy,           80
.equiv		i1000_dz,           96
.equiv		i1000_vctot,        112
.equiv		i1000_fix,          128
.equiv		i1000_fiy,          144
.equiv		i1000_fiz,          160
.equiv		i1000_half,         176
.equiv		i1000_three,        192
.equiv		i1000_is3,          208
.equiv		i1000_ii3,          212
.equiv		i1000_innerjjnr,    216
.equiv		i1000_innerk,       220		
.equiv		i1000_salign,       224							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 228		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1000_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + i1000_half],  xmm0
	movaps [esp + i1000_three], xmm1

	;# assume we have at least one i particle - start directly 	
i1000_outer:
	mov   eax, [ebp + i1000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1000_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1000_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i1000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1000_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i1000_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1000_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i1000_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i1000_ix], xmm0
	movaps [esp + i1000_iy], xmm1
	movaps [esp + i1000_iz], xmm2

	mov   [esp + i1000_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i1000_vctot], xmm4
	movaps [esp + i1000_fix], xmm4
	movaps [esp + i1000_fiy], xmm4
	movaps [esp + i1000_fiz], xmm4
	
	mov   eax, [ebp + i1000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1000_pos]
	mov   edi, [ebp + i1000_faction]	
	mov   eax, [ebp + i1000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i1000_innerk], edx    ;# number of innerloop atoms 
	jge   i1000_unroll_loop
	jmp   i1000_finish_inner
i1000_unroll_loop:	
	;# quad-unrolled innerloop here 
	mov   edx, [esp + i1000_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i1000_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i1000_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm5, [esp + i1000_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0
	shufps xmm3, xmm4, 136  ;# 10001000	      
	mov esi, [ebp + i1000_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm5
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]	;# x1 y1 - - 
	movlps xmm5, [esi + ecx*4]	;# x3 y3 - - 
	movss xmm2, [esi + eax*4 + 8]	;# z1 -  - - 
	movss xmm6, [esi + ecx*4 + 8]   ;# z3 -  - - 

	movhps xmm4, [esi + ebx*4]	;# x1 y1 x2 y2 
	movhps xmm5, [esi + edx*4]	;# x3 y3 x4 y4 

	movss xmm0, [esi + ebx*4 + 8]	;# z2 - - - 
	movss xmm1, [esi + edx*4 + 8]	;# z4 - - - 

	shufps xmm2, xmm0, 0		;# z1 z1 z2 z2 
	shufps xmm6, xmm1, 0		;# z3 z3 z4 z4 
	
	movaps xmm0, xmm4		;# x1 y1 x2 y2 	
	movaps xmm1, xmm4		;# x1 y1 x2 y2 

	shufps xmm2, xmm6, 136  ;# 10001000	;# z1 z2 z3 z4 
	
	shufps xmm0, xmm5, 136  ;# 10001000	;# x1 x2 x3 x4 
	shufps xmm1, xmm5, 221  ;# 11011101	;# y1 y2 y3 y4 		

	mov    edi, [ebp + i1000_faction]

	;# move i1000_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i1000_ix]
	movaps xmm5, [esp + i1000_iy]
	movaps xmm6, [esp + i1000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1000_dx], xmm4
	movaps [esp + i1000_dy], xmm5
	movaps [esp + i1000_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 

	movaps xmm5, [esp + i1000_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm4, xmm3	;# xmm4=fscal 
	addps  xmm5, xmm3

	movaps xmm0, [esp + i1000_dx]
	movaps xmm1, [esp + i1000_dy]
	movaps xmm2, [esp + i1000_dz]

	movaps [esp + i1000_vctot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1000_fix]
	movaps xmm4, [esp + i1000_fiy]
	movaps xmm5, [esp + i1000_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1000_fix], xmm3
	movaps [esp + i1000_fiy], xmm4
	movaps [esp + i1000_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1000_innerk],  4
	jl    i1000_finish_inner
	jmp   i1000_unroll_loop
i1000_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i1000_innerk],  4
	mov   edx, [esp + i1000_innerk]
	and   edx, 2
	jnz   i1000_dopair
	jmp   i1000_checksingle
i1000_dopair:	
	mov esi, [ebp + i1000_charge]
	mov edi, [ebp + i1000_pos]
    mov   ecx, [esp + i1000_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i1000_innerjjnr],  8

	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + i1000_iq]
	xorps  xmm7,xmm7
	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i1000_faction]
	;# move i1000_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1000_ix]
	movaps xmm5, [esp + i1000_iy]
	movaps xmm6, [esp + i1000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1000_dx], xmm4
	movaps [esp + i1000_dy], xmm5
	movaps [esp + i1000_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 

	movaps xmm5, [esp + i1000_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm4, xmm3	;# xmm4=fscal 
	addps  xmm5, xmm3

	movaps xmm0, [esp + i1000_dx]
	movaps xmm1, [esp + i1000_dy]
	movaps xmm2, [esp + i1000_dz]

	movaps [esp + i1000_vctot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1000_fix]
	movaps xmm4, [esp + i1000_fiy]
	movaps xmm5, [esp + i1000_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1000_fix], xmm3
	movaps [esp + i1000_fiy], xmm4
	movaps [esp + i1000_fiz], xmm5
	;# update the fj's  
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001
	
	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	
i1000_checksingle:				
	mov   edx, [esp + i1000_innerk]
	and   edx, 1
	jnz    i1000_dosingle
	jmp    i1000_updateouterdata
i1000_dosingle:			
	mov esi, [ebp + i1000_charge]
	mov edi, [ebp + i1000_pos]
	mov   ecx, [esp + i1000_innerjjnr]
	mov   eax, [ecx]	
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	
	
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + i1000_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1000_ix]
	movaps xmm5, [esp + i1000_iy]
	movaps xmm6, [esp + i1000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1000_dx], xmm4
	movaps [esp + i1000_dy], xmm5
	movaps [esp + i1000_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	mov    edi, [ebp + i1000_faction]
	movaps xmm5, [esp + i1000_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm4, xmm3	;# xmm4=fscal 
	addss  xmm5, xmm3

	movaps xmm0, [esp + i1000_dx]
	movaps xmm1, [esp + i1000_dy]
	movaps xmm2, [esp + i1000_dz]

	movaps [esp + i1000_vctot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1000_fix]
	movaps xmm4, [esp + i1000_fiy]
	movaps xmm5, [esp + i1000_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i1000_fix], xmm3
	movaps [esp + i1000_fiy], xmm4
	movaps [esp + i1000_fiz], xmm5
	;# update fj 	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
i1000_updateouterdata:
	mov   ecx, [esp + i1000_ii3]
	mov   edi, [ebp + i1000_faction]
	mov   esi, [ebp + i1000_fshift]
	mov   edx, [esp + i1000_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1000_fix]
	movaps xmm1, [esp + i1000_fiy]
	movaps xmm2, [esp + i1000_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i1000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i1000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i1000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i1000_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i1000_nri]
	dec  ecx
	jecxz i1000_end
	;# not last, iterate once more!  
	mov [ebp + i1000_nri], ecx
	jmp i1000_outer
i1000_end:
	emms
	mov eax, [esp + i1000_salign]
	add esp, eax
	add esp, 228
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl inl1010_sse
.globl _inl1010_sse
inl1010_sse:	
_inl1010_sse:	
.equiv		i1010_nri,			8
.equiv		i1010_iinr,			12
.equiv		i1010_jindex,		16
.equiv		i1010_jjnr,			20
.equiv		i1010_shift,		24
.equiv		i1010_shiftvec,		28
.equiv		i1010_fshift,		32
.equiv		i1010_gid,			36
.equiv		i1010_pos,			40		
.equiv		i1010_faction,		44
.equiv		i1010_charge,		48
.equiv		i1010_facel,		52
.equiv		i1010_Vc,			56
.equiv		i1010_nsatoms,      60		
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i1010_ix,	        0
.equiv		i1010_iy,	        16
.equiv		i1010_iz,           32
.equiv		i1010_iq,           48
.equiv		i1010_dx,           64
.equiv		i1010_dy,           80
.equiv		i1010_dz,           96
.equiv		i1010_vctot,        112
.equiv		i1010_fix,          128
.equiv		i1010_fiy,          144
.equiv		i1010_fiz,          160
.equiv		i1010_half,         176
.equiv		i1010_three,        192
.equiv		i1010_is3,          208
.equiv		i1010_ii3,          212
.equiv		i1010_shX,	        216
.equiv		i1010_shY,          220
.equiv		i1010_shZ,          224
.equiv		i1010_ntia,	        228	
.equiv		i1010_innerjjnr0,   232
.equiv		i1010_innerk0,      236
.equiv		i1010_innerjjnr,    240
.equiv		i1010_innerk,       244		
.equiv		i1010_salign,       248
.equiv		i1010_nscoul,       252
.equiv		i1010_solnr,	    256		
	push ebp
	mov ebp,esp		
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 260		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1010_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + i1010_half],  xmm0
	movaps [esp + i1010_three], xmm1
	add dword ptr [ebp + i1010_nsatoms],  8

	;# assume we have at least one i particle - start directly 	
i1010_outer:
	mov   eax, [ebp + i1010_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1010_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1010_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1010_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 
	movss [esp + i1010_shX], xmm0
	movss [esp + i1010_shY], xmm1
	movss [esp + i1010_shZ], xmm2

	mov   ecx, [ebp + i1010_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1010_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + i1010_nsatoms]
	mov   ecx, [eax]
	add dword ptr [ebp + i1010_nsatoms],  12
	mov   [esp + i1010_nscoul], ecx	

	;# clear vctot 
	xorps xmm4, xmm4
	movaps [esp + i1010_vctot], xmm4
	mov   [esp + i1010_solnr], ebx

	mov   eax, [ebp + i1010_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1010_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   eax, [ebp + i1010_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1010_innerjjnr0], eax     ;# pointer to jjnr[nj0] 
	mov   [esp + i1010_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + i1010_nscoul]
	cmp   ecx,  0
	jnz   i1010_mno_coul
	jmp   i1010_last_mno
i1010_mno_coul:
	mov   ebx,  [esp + i1010_solnr]
	inc   dword ptr [esp + i1010_solnr]

	movss xmm0, [esp + i1010_shX]
	movss xmm1, [esp + i1010_shY]
	movss xmm2, [esp + i1010_shZ]

	mov   edx, [ebp + i1010_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i1010_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1010_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i1010_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i1010_ix], xmm0
	movaps [esp + i1010_iy], xmm1
	movaps [esp + i1010_iz], xmm2

	mov   [esp + i1010_ii3], ebx
	
	;# clear i forces 
	xorps xmm4, xmm4
	movaps [esp + i1010_fix], xmm4
	movaps [esp + i1010_fiy], xmm4
	movaps [esp + i1010_fiz], xmm4

	mov   ecx, [esp + i1010_innerjjnr0]
	mov   [esp + i1010_innerjjnr], ecx
	mov   edx, [esp + i1010_innerk0]
    sub   edx,  4
    mov   [esp + i1010_innerk], edx    ;# number of innerloop atoms 
	jge   i1010_unroll_coul_loop
	jmp   i1010_finish_coul_inner

i1010_unroll_coul_loop:	
	;# quad-unrolled innerloop here 
	mov   edx, [esp + i1010_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i1010_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i1010_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm5, [esp + i1010_iq]
	shufps xmm3, xmm6, 0
	shufps xmm4, xmm7, 0
	shufps xmm3, xmm4, 136  ;# 10001000	      
	mov esi, [ebp + i1010_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm5
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	mov    edi, [ebp + i1010_faction]

	;# move i1010_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i1010_ix]
	movaps xmm5, [esp + i1010_iy]
	movaps xmm6, [esp + i1010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1010_dx], xmm4
	movaps [esp + i1010_dy], xmm5
	movaps [esp + i1010_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 

	movaps xmm5, [esp + i1010_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm4, xmm3	;# xmm4=fscal 
	addps  xmm5, xmm3

	movaps xmm0, [esp + i1010_dx]
	movaps xmm1, [esp + i1010_dy]
	movaps xmm2, [esp + i1010_dz]

	movaps [esp + i1010_vctot], xmm5


	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1010_fix]
	movaps xmm4, [esp + i1010_fiy]
	movaps xmm5, [esp + i1010_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1010_fix], xmm3
	movaps [esp + i1010_fiy], xmm4
	movaps [esp + i1010_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1010_innerk],  4
	jl    i1010_finish_coul_inner
	jmp   i1010_unroll_coul_loop
i1010_finish_coul_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i1010_innerk],  4
	mov   edx, [esp + i1010_innerk]
	and   edx, 2
	jnz   i1010_dopair_coul
	jmp   i1010_checksingle_coul
i1010_dopair_coul:	
	mov esi, [ebp + i1010_charge]
	mov edi, [ebp + i1010_pos]
    mov   ecx, [esp + i1010_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i1010_innerjjnr],  8

	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + i1010_iq]
	xorps  xmm7,xmm7
	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i1010_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1010_ix]
	movaps xmm5, [esp + i1010_iy]
	movaps xmm6, [esp + i1010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1010_dx], xmm4
	movaps [esp + i1010_dy], xmm5
	movaps [esp + i1010_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 

	movaps xmm5, [esp + i1010_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm4, xmm3	;# xmm4=fscal 
	addps  xmm5, xmm3

	movaps xmm0, [esp + i1010_dx]
	movaps xmm1, [esp + i1010_dy]
	movaps xmm2, [esp + i1010_dz]

	movaps [esp + i1010_vctot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1010_fix]
	movaps xmm4, [esp + i1010_fiy]
	movaps xmm5, [esp + i1010_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1010_fix], xmm3
	movaps [esp + i1010_fiy], xmm4
	movaps [esp + i1010_fiz], xmm5
	;# update the fj's  
	movss xmm3, [edi + eax*4]
	movss xmm4, [edi + eax*4 + 4]
	movss xmm5, [edi + eax*4 + 8]
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	subps  xmm5, xmm2
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001
	
	movss xmm3, [edi + ebx*4]
	movss xmm4, [edi + ebx*4 + 4]
	movss xmm5, [edi + ebx*4 + 8]
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	subps  xmm5, xmm2
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5

i1010_checksingle_coul:				
	mov   edx, [esp + i1010_innerk]
	and   edx, 1
	jnz    i1010_dosingle_coul
	jmp    i1010_updateouterdata_coul
i1010_dosingle_coul:			
	mov esi, [ebp + i1010_charge]
	mov edi, [ebp + i1010_pos]
	mov   ecx, [esp + i1010_innerjjnr]
	mov   eax, [ecx]	
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	
	
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + i1010_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1010_ix]
	movaps xmm5, [esp + i1010_iy]
	movaps xmm6, [esp + i1010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1010_dx], xmm4
	movaps [esp + i1010_dy], xmm5
	movaps [esp + i1010_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	mov    edi, [ebp + i1010_faction]
	movaps xmm5, [esp + i1010_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm4, xmm3	;# xmm4=fscal 
	addss  xmm5, xmm3

	movaps xmm0, [esp + i1010_dx]
	movaps xmm1, [esp + i1010_dy]
	movaps xmm2, [esp + i1010_dz]

	movaps [esp + i1010_vctot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1010_fix]
	movaps xmm4, [esp + i1010_fiy]
	movaps xmm5, [esp + i1010_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i1010_fix], xmm3
	movaps [esp + i1010_fiy], xmm4
	movaps [esp + i1010_fiz], xmm5
	;# update fj 	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
    subss   xmm5, xmm2
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
i1010_updateouterdata_coul:
	mov   ecx, [esp + i1010_ii3]
	mov   edi, [ebp + i1010_faction]
	mov   esi, [ebp + i1010_fshift]
	mov   edx, [esp + i1010_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1010_fix]
	movaps xmm1, [esp + i1010_fiy]
	movaps xmm2, [esp + i1010_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# loop back to mno 
	dec dword ptr [esp + i1010_nscoul]
	jz  i1010_last_mno
	jmp i1010_mno_coul
	
i1010_last_mno:	
	;# get group index for i particle 
	mov   edx, [ebp + i1010_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i1010_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i1010_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i1010_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i1010_nri]
	dec ecx
	jecxz i1010_end
	;# not last, iterate once more!  
	mov [ebp + i1010_nri], ecx
	jmp i1010_outer
i1010_end:
	emms
	mov eax, [esp + i1010_salign]
	add esp, eax
	add esp, 260
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl inl1020_sse
.globl _inl1020_sse
inl1020_sse:	
_inl1020_sse:	
.equiv		i1020_nri,			8
.equiv		i1020_iinr,			12
.equiv		i1020_jindex,		16
.equiv		i1020_jjnr,			20
.equiv		i1020_shift,		24
.equiv		i1020_shiftvec,		28
.equiv		i1020_fshift,		32
.equiv		i1020_gid,			36
.equiv		i1020_pos,			40		
.equiv		i1020_faction,		44
.equiv		i1020_charge,		48
.equiv		i1020_facel,		52
.equiv		i1020_Vc,			56			
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i1020_ixO,	        0
.equiv		i1020_iyO,	        16
.equiv		i1020_izO,          32
.equiv		i1020_ixH1,	        48
.equiv		i1020_iyH1,	        64
.equiv		i1020_izH1,         80
.equiv		i1020_ixH2,	        96
.equiv		i1020_iyH2,	        112
.equiv		i1020_izH2,         128
.equiv		i1020_iqO,          144 
.equiv		i1020_iqH,          160 
.equiv		i1020_dxO,          176
.equiv		i1020_dyO,          192
.equiv		i1020_dzO,          208	
.equiv		i1020_dxH1,         224
.equiv		i1020_dyH1,         240
.equiv		i1020_dzH1,         256	
.equiv		i1020_dxH2,         272
.equiv		i1020_dyH2,         288
.equiv		i1020_dzH2,         304	
.equiv		i1020_qqO,          320
.equiv		i1020_qqH,          336
.equiv		i1020_vctot,        352
.equiv		i1020_fixO,         368
.equiv		i1020_fiyO,         384
.equiv		i1020_fizO,         400
.equiv		i1020_fixH1,        416
.equiv		i1020_fiyH1,        432
.equiv		i1020_fizH1,        448
.equiv		i1020_fixH2,        464
.equiv		i1020_fiyH2,        480
.equiv		i1020_fizH2,        496
.equiv		i1020_fjx,	        512
.equiv		i1020_fjy,          528
.equiv		i1020_fjz,          544
.equiv		i1020_half,         560
.equiv		i1020_three,        576
.equiv		i1020_is3,          592
.equiv		i1020_ii3,          596
.equiv		i1020_innerjjnr,    600
.equiv		i1020_innerk,       604
.equiv		i1020_salign,       608				
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 612		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1020_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + i1020_half],  xmm0
	movaps [esp + i1020_three], xmm1

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i1020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1020_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + i1020_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + i1020_iqO], xmm3
	movaps [esp + i1020_iqH], xmm4
	
i1020_outer:
	mov   eax, [ebp + i1020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1020_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1020_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i1020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1020_pos]    ;# eax = base of pos[]  
	mov   [esp + i1020_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i1020_ixO], xmm3
	movaps [esp + i1020_iyO], xmm4
	movaps [esp + i1020_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i1020_ixH1], xmm0
	movaps [esp + i1020_iyH1], xmm1
	movaps [esp + i1020_izH1], xmm2
	movaps [esp + i1020_ixH2], xmm3
	movaps [esp + i1020_iyH2], xmm4
	movaps [esp + i1020_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i1020_vctot], xmm4
	movaps [esp + i1020_fixO], xmm4
	movaps [esp + i1020_fiyO], xmm4
	movaps [esp + i1020_fizO], xmm4
	movaps [esp + i1020_fixH1], xmm4
	movaps [esp + i1020_fiyH1], xmm4
	movaps [esp + i1020_fizH1], xmm4
	movaps [esp + i1020_fixH2], xmm4
	movaps [esp + i1020_fiyH2], xmm4
	movaps [esp + i1020_fizH2], xmm4
	
	mov   eax, [ebp + i1020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1020_pos]
	mov   edi, [ebp + i1020_faction]	
	mov   eax, [ebp + i1020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i1020_innerk], edx    ;# number of innerloop atoms 
	jge   i1020_unroll_loop
	jmp   i1020_odd_inner
i1020_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + i1020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + i1020_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i1020_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0
	shufps xmm4, xmm7, 0
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + i1020_iqO]
	mulps  xmm4, [esp + i1020_iqH]

	movaps  [esp + i1020_qqO], xmm3
	movaps  [esp + i1020_qqH], xmm4	

	mov esi, [ebp + i1020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + i1020_ixO]
	movaps xmm5, [esp + i1020_iyO]
	movaps xmm6, [esp + i1020_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1020_dxO], xmm4
	movaps [esp + i1020_dyO], xmm5
	movaps [esp + i1020_dzO], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + i1020_ixH1]
	movaps xmm5, [esp + i1020_iyH1]
	movaps xmm6, [esp + i1020_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1020_dxH1], xmm4
	movaps [esp + i1020_dyH1], xmm5
	movaps [esp + i1020_dzH1], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + i1020_ixH2]
	movaps xmm4, [esp + i1020_iyH2]
	movaps xmm5, [esp + i1020_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# store dr 
	movaps [esp + i1020_dxH2], xmm3
	movaps [esp + i1020_dyH2], xmm4
	movaps [esp + i1020_dzH2], xmm5
	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - seed in xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i1020_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i1020_half]
	movaps  xmm7, xmm4	;# rinvO in xmm7 
	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i1020_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i1020_half]
	movaps  xmm6, xmm4	;# rinvH1 in xmm6 
	;# rsqH2 - seed in xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i1020_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i1020_half]
	movaps  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movaps  xmm4, xmm7	
	mulps   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	mulps  xmm7, [esp + i1020_qqO]	;# xmm7=vcoul 
	
	mulps  xmm4, xmm7	;# total fsO in xmm4 

	addps  xmm7, [esp + i1020_vctot]
	
	movaps [esp + i1020_vctot], xmm7

	movaps xmm0, [esp + i1020_dxO]
	movaps xmm1, [esp + i1020_dyO]
	movaps xmm2, [esp + i1020_dzO]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update O forces 
	movaps xmm3, [esp + i1020_fixO]
	movaps xmm4, [esp + i1020_fiyO]
	movaps xmm7, [esp + i1020_fizO]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i1020_fixO], xmm3
	movaps [esp + i1020_fiyO], xmm4
	movaps [esp + i1020_fizO], xmm7
	;# update j forces with water O 
	movaps [esp + i1020_fjx], xmm0
	movaps [esp + i1020_fjy], xmm1
	movaps [esp + i1020_fjz], xmm2

	;# H1 interactions 
	movaps  xmm4, xmm6	
	mulps   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	mulps  xmm6, [esp + i1020_qqH]	;# xmm6=vcoul 
	mulps  xmm4, xmm6		;# total fsH1 in xmm4 
	
	addps  xmm6, [esp + i1020_vctot]

	movaps xmm0, [esp + i1020_dxH1]
	movaps xmm1, [esp + i1020_dyH1]
	movaps xmm2, [esp + i1020_dzH1]
	movaps [esp + i1020_vctot], xmm6
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H1 forces 
	movaps xmm3, [esp + i1020_fixH1]
	movaps xmm4, [esp + i1020_fiyH1]
	movaps xmm7, [esp + i1020_fizH1]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i1020_fixH1], xmm3
	movaps [esp + i1020_fiyH1], xmm4
	movaps [esp + i1020_fizH1], xmm7
	;# update j forces with water H1 
	addps  xmm0, [esp + i1020_fjx]
	addps  xmm1, [esp + i1020_fjy]
	addps  xmm2, [esp + i1020_fjz]
	movaps [esp + i1020_fjx], xmm0
	movaps [esp + i1020_fjy], xmm1
	movaps [esp + i1020_fjz], xmm2

	;# H2 interactions 
	movaps  xmm4, xmm5	
	mulps   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	mulps  xmm5, [esp + i1020_qqH]	;# xmm5=vcoul 
	mulps  xmm4, xmm5		;# total fsH1 in xmm4 
	
	addps  xmm5, [esp + i1020_vctot]

	movaps xmm0, [esp + i1020_dxH2]
	movaps xmm1, [esp + i1020_dyH2]
	movaps xmm2, [esp + i1020_dzH2]
	movaps [esp + i1020_vctot], xmm5
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H2 forces 
	movaps xmm3, [esp + i1020_fixH2]
	movaps xmm4, [esp + i1020_fiyH2]
	movaps xmm7, [esp + i1020_fizH2]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i1020_fixH2], xmm3
	movaps [esp + i1020_fiyH2], xmm4
	movaps [esp + i1020_fizH2], xmm7

	mov edi, [ebp + i1020_faction]
	;# update j forces 
	addps xmm0, [esp + i1020_fjx]
	addps xmm1, [esp + i1020_fjy]
	addps xmm2, [esp + i1020_fjz]

	movlps xmm4, [edi + eax*4]
	movlps xmm7, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm7, [edi + edx*4]
	
	movaps xmm3, xmm4
	shufps xmm3, xmm7, 136  ;# 10001000
	shufps xmm4, xmm7, 221  ;# 11011101			      
	;# xmm3 has fjx, xmm4 has fjy 
	subps xmm3, xmm0
	subps xmm4, xmm1
	;# unpack them back for storing 
	movaps xmm7, xmm3
	unpcklps xmm7, xmm4
	unpckhps xmm3, xmm4	
	movlps [edi + eax*4], xmm7
	movlps [edi + ecx*4], xmm3
	movhps [edi + ebx*4], xmm7
	movhps [edi + edx*4], xmm3
	;# finally z forces 
	movss  xmm0, [edi + eax*4 + 8]
	movss  xmm1, [edi + ebx*4 + 8]
	movss  xmm3, [edi + ecx*4 + 8]
	movss  xmm4, [edi + edx*4 + 8]
	subss  xmm0, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm1, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm3, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm4, xmm2
	movss  [edi + eax*4 + 8], xmm0
	movss  [edi + ebx*4 + 8], xmm1
	movss  [edi + ecx*4 + 8], xmm3
	movss  [edi + edx*4 + 8], xmm4
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1020_innerk],  4
	jl    i1020_odd_inner
	jmp   i1020_unroll_loop
i1020_odd_inner:	
	add dword ptr [esp + i1020_innerk],  4
	jnz   i1020_odd_loop
	jmp   i1020_updateouterdata
i1020_odd_loop:
	mov   edx, [esp + i1020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i1020_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + i1020_iqO]
	mov esi, [ebp + i1020_charge] 
	movhps xmm4, [esp + i1020_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + i1020_qqO], xmm3	;# use oxygen qq for storage 

	mov esi, [ebp + i1020_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + i1020_ixO]
	movss xmm4, [esp + i1020_iyO]
	movss xmm5, [esp + i1020_izO]
		
	movlps xmm6, [esp + i1020_ixH1]
	movlps xmm7, [esp + i1020_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + i1020_iyH1]
	movlps xmm7, [esp + i1020_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + i1020_izH1]
	movlps xmm7, [esp + i1020_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	
	movaps [esp + i1020_dxO], xmm3
	movaps [esp + i1020_dyO], xmm4
	movaps [esp + i1020_dzO], xmm5

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1020_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1020_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000	
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm3, [esp + i1020_qqO]

	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm4, xmm3	;# xmm4=total fscal 
	addps  xmm3, [esp + i1020_vctot]

	movaps xmm0, [esp + i1020_dxO]
	movaps xmm1, [esp + i1020_dyO]
	movaps xmm2, [esp + i1020_dzO]

	movaps [esp + i1020_vctot], xmm3

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	movss  xmm3, [esp + i1020_fixO]	
	movss  xmm4, [esp + i1020_fiyO]	
	movss  xmm5, [esp + i1020_fizO]	
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esp + i1020_fixO], xmm3	
	movss  [esp + i1020_fiyO], xmm4	
	movss  [esp + i1020_fizO], xmm5	;# updated the O force now do the H's 
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	shufps xmm3, xmm3, 230 ;# 11100110	;# shift right 
	shufps xmm4, xmm4, 230 ;# 11100110
	shufps xmm5, xmm5, 230 ;# 11100110
	addss  xmm3, [esp + i1020_fixH1]
	addss  xmm4, [esp + i1020_fiyH1]
	addss  xmm5, [esp + i1020_fizH1]
	movss  [esp + i1020_fixH1], xmm3	
	movss  [esp + i1020_fiyH1], xmm4	
	movss  [esp + i1020_fizH1], xmm5	;# updated the H1 force 

	mov edi, [ebp + i1020_faction]
	shufps xmm3, xmm3, 231 ;# 11100111	;# shift right 
	shufps xmm4, xmm4, 231 ;# 11100111
	shufps xmm5, xmm5, 231 ;# 11100111
	addss  xmm3, [esp + i1020_fixH2]
	addss  xmm4, [esp + i1020_fiyH2]
	addss  xmm5, [esp + i1020_fizH2]
	movss  [esp + i1020_fixH2], xmm3	
	movss  [esp + i1020_fiyH2], xmm4	
	movss  [esp + i1020_fizH2], xmm5	;# updated the H2 force 

	;# the fj's - start by accumulating the tx/ty/tz force in xmm0, xmm1 
	xorps  xmm5, xmm5
	movaps xmm3, xmm0
	movlps xmm6, [edi + eax*4]
	movss  xmm7, [edi + eax*4 + 8]
	unpcklps xmm3, xmm1
	movlhps  xmm3, xmm5	
	unpckhps xmm0, xmm1		
	addps    xmm0, xmm3
	movhlps  xmm3, xmm0	
	addps    xmm0, xmm3	;# x,y sum in xmm0 

	movhlps  xmm1, xmm2
	addss    xmm2, xmm1
	shufps   xmm1, xmm1, 1 
	addss    xmm2, xmm1    ;# z sum in xmm2 
	subps    xmm6, xmm0
	subss    xmm7, xmm2
	
	movlps [edi + eax*4],     xmm6
	movss  [edi + eax*4 + 8], xmm7

	dec   dword ptr [esp + i1020_innerk]
	jz    i1020_updateouterdata
	jmp   i1020_odd_loop
i1020_updateouterdata:
	mov   ecx, [esp + i1020_ii3]
	mov   edi, [ebp + i1020_faction]
	mov   esi, [ebp + i1020_fshift]
	mov   edx, [esp + i1020_is3]

	;# accumulate Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1020_fixO]
	movaps xmm1, [esp + i1020_fiyO]
	movaps xmm2, [esp + i1020_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1020_fixH1]
	movaps xmm1, [esp + i1020_fiyH1]
	movaps xmm2, [esp + i1020_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1020_fixH2]
	movaps xmm1, [esp + i1020_fiyH2]
	movaps xmm2, [esp + i1020_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	mov   edx, [ebp + i1020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i1020_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i1020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + i1020_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 	
	
	;# finish if last 
	mov   ecx, [ebp + i1020_nri]
	dec ecx
	jecxz i1020_end
	;# not last, iterate once more!  
	mov [ebp + i1020_nri], ecx
	jmp i1020_outer
i1020_end:
	emms
	mov eax, [esp + i1020_salign]
	add esp, eax
	add esp, 612
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl inl1030_sse
.globl _inl1030_sse
inl1030_sse:	
_inl1030_sse:	
.equiv		i1030_nri,			8
.equiv		i1030_iinr,			12
.equiv		i1030_jindex,		16
.equiv		i1030_jjnr,			20
.equiv		i1030_shift,		24
.equiv		i1030_shiftvec,		28
.equiv		i1030_fshift,		32
.equiv		i1030_gid,			36
.equiv		i1030_pos,			40		
.equiv		i1030_faction,		44
.equiv		i1030_charge,		48
.equiv		i1030_facel,		52
.equiv		i1030_Vc,			56			
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 	
.equiv		i1030_ixO,	        0
.equiv		i1030_iyO,	        16
.equiv		i1030_izO,          32
.equiv		i1030_ixH1,	        48
.equiv		i1030_iyH1,	        64
.equiv		i1030_izH1,         80
.equiv		i1030_ixH2,	        96
.equiv		i1030_iyH2,	        112
.equiv		i1030_izH2,         128
.equiv		i1030_jxO,	        144
.equiv		i1030_jyO,	        160
.equiv		i1030_jzO,          176
.equiv		i1030_jxH1,	        192
.equiv		i1030_jyH1,	        208
.equiv		i1030_jzH1,         224
.equiv		i1030_jxH2,	        240
.equiv		i1030_jyH2,	        256
.equiv		i1030_jzH2,         272
.equiv		i1030_dxOO,         288
.equiv		i1030_dyOO,         304
.equiv		i1030_dzOO,         320	
.equiv		i1030_dxOH1,        336
.equiv		i1030_dyOH1,        352
.equiv		i1030_dzOH1,        368	
.equiv		i1030_dxOH2,        384
.equiv		i1030_dyOH2,        400
.equiv		i1030_dzOH2,        416	
.equiv		i1030_dxH1O,        432
.equiv		i1030_dyH1O,        448
.equiv		i1030_dzH1O,        464	
.equiv		i1030_dxH1H1,       480
.equiv		i1030_dyH1H1,       496
.equiv		i1030_dzH1H1,       512	
.equiv		i1030_dxH1H2,       528
.equiv		i1030_dyH1H2,       544
.equiv		i1030_dzH1H2,       560	
.equiv		i1030_dxH2O,        576
.equiv		i1030_dyH2O,        592
.equiv		i1030_dzH2O,        608	
.equiv		i1030_dxH2H1,       624
.equiv		i1030_dyH2H1,       640
.equiv		i1030_dzH2H1,       656	
.equiv		i1030_dxH2H2,       672
.equiv		i1030_dyH2H2,       688
.equiv		i1030_dzH2H2,       704
.equiv		i1030_qqOO,         720
.equiv		i1030_qqOH,         736
.equiv		i1030_qqHH,         752
.equiv		i1030_vctot,        768		
.equiv		i1030_fixO,         784
.equiv		i1030_fiyO,         800
.equiv		i1030_fizO,         816
.equiv		i1030_fixH1,        832
.equiv		i1030_fiyH1,        848
.equiv		i1030_fizH1,        864
.equiv		i1030_fixH2,        880
.equiv		i1030_fiyH2,        896
.equiv		i1030_fizH2,        912
.equiv		i1030_fjxO,	        928
.equiv		i1030_fjyO,         944
.equiv		i1030_fjzO,         960
.equiv		i1030_fjxH1,	    976
.equiv		i1030_fjyH1,        992
.equiv		i1030_fjzH1,        1008
.equiv		i1030_fjxH2,	    1024
.equiv		i1030_fjyH2,        1040
.equiv		i1030_fjzH2,        1056
.equiv		i1030_half,         1072
.equiv		i1030_three,        1088
.equiv		i1030_rsqOO,        1104
.equiv		i1030_rsqOH1,       1120
.equiv		i1030_rsqOH2,       1136
.equiv		i1030_rsqH1O,       1152
.equiv		i1030_rsqH1H1,      1168
.equiv		i1030_rsqH1H2,      1184
.equiv		i1030_rsqH2O,       1200
.equiv		i1030_rsqH2H1,      1216
.equiv		i1030_rsqH2H2,      1232
.equiv		i1030_rinvOO,       1248
.equiv		i1030_rinvOH1,      1264
.equiv		i1030_rinvOH2,      1280
.equiv		i1030_rinvH1O,      1296
.equiv		i1030_rinvH1H1,     1312
.equiv		i1030_rinvH1H2,     1328
.equiv		i1030_rinvH2O,      1344
.equiv		i1030_rinvH2H1,     1360
.equiv		i1030_rinvH2H2,     1376
.equiv		i1030_is3,          1392
.equiv		i1030_ii3,          1396
.equiv		i1030_innerjjnr,    1400
.equiv		i1030_innerk,       1404
.equiv		i1030_salign,       1408							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1412		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1030_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + i1030_half],  xmm0
	movaps [esp + i1030_three], xmm1
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i1030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1030_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + i1030_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i1030_qqOO], xmm3
	movaps [esp + i1030_qqOH], xmm4
	movaps [esp + i1030_qqHH], xmm5

i1030_outer:
	mov   eax, [ebp + i1030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1030_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1030_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i1030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1030_pos]    ;# eax = base of pos[]  
	mov   [esp + i1030_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i1030_ixO], xmm3
	movaps [esp + i1030_iyO], xmm4
	movaps [esp + i1030_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i1030_ixH1], xmm0
	movaps [esp + i1030_iyH1], xmm1
	movaps [esp + i1030_izH1], xmm2
	movaps [esp + i1030_ixH2], xmm3
	movaps [esp + i1030_iyH2], xmm4
	movaps [esp + i1030_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i1030_vctot], xmm4
	movaps [esp + i1030_fixO], xmm4
	movaps [esp + i1030_fiyO], xmm4
	movaps [esp + i1030_fizO], xmm4
	movaps [esp + i1030_fixH1], xmm4
	movaps [esp + i1030_fiyH1], xmm4
	movaps [esp + i1030_fizH1], xmm4
	movaps [esp + i1030_fixH2], xmm4
	movaps [esp + i1030_fiyH2], xmm4
	movaps [esp + i1030_fizH2], xmm4
	
	mov   eax, [ebp + i1030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1030_pos]
	mov   edi, [ebp + i1030_faction]	
	mov   eax, [ebp + i1030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i1030_innerk], edx    ;# number of innerloop atoms 
	jge   i1030_unroll_loop
	jmp   i1030_single_check
i1030_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i1030_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + i1030_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i1030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d  
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd  
	movaps [esp + i1030_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + i1030_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + i1030_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + i1030_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + i1030_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + i1030_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + i1030_jzO],  xmm0
	movaps [esp + i1030_jzH1],  xmm1
	movaps [esp + i1030_jzH2],  xmm2

	movaps xmm0, [esp + i1030_ixO]
	movaps xmm1, [esp + i1030_iyO]
	movaps xmm2, [esp + i1030_izO]
	movaps xmm3, [esp + i1030_ixO]
	movaps xmm4, [esp + i1030_iyO]
	movaps xmm5, [esp + i1030_izO]
	subps  xmm0, [esp + i1030_jxO]
	subps  xmm1, [esp + i1030_jyO]
	subps  xmm2, [esp + i1030_jzO]
	subps  xmm3, [esp + i1030_jxH1]
	subps  xmm4, [esp + i1030_jyH1]
	subps  xmm5, [esp + i1030_jzH1]
	movaps [esp + i1030_dxOO], xmm0
	movaps [esp + i1030_dyOO], xmm1
	movaps [esp + i1030_dzOO], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i1030_dxOH1], xmm3
	movaps [esp + i1030_dyOH1], xmm4
	movaps [esp + i1030_dzOH1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i1030_rsqOO], xmm0
	movaps [esp + i1030_rsqOH1], xmm3

	movaps xmm0, [esp + i1030_ixO]
	movaps xmm1, [esp + i1030_iyO]
	movaps xmm2, [esp + i1030_izO]
	movaps xmm3, [esp + i1030_ixH1]
	movaps xmm4, [esp + i1030_iyH1]
	movaps xmm5, [esp + i1030_izH1]
	subps  xmm0, [esp + i1030_jxH2]
	subps  xmm1, [esp + i1030_jyH2]
	subps  xmm2, [esp + i1030_jzH2]
	subps  xmm3, [esp + i1030_jxO]
	subps  xmm4, [esp + i1030_jyO]
	subps  xmm5, [esp + i1030_jzO]
	movaps [esp + i1030_dxOH2], xmm0
	movaps [esp + i1030_dyOH2], xmm1
	movaps [esp + i1030_dzOH2], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i1030_dxH1O], xmm3
	movaps [esp + i1030_dyH1O], xmm4
	movaps [esp + i1030_dzH1O], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i1030_rsqOH2], xmm0
	movaps [esp + i1030_rsqH1O], xmm3

	movaps xmm0, [esp + i1030_ixH1]
	movaps xmm1, [esp + i1030_iyH1]
	movaps xmm2, [esp + i1030_izH1]
	movaps xmm3, [esp + i1030_ixH1]
	movaps xmm4, [esp + i1030_iyH1]
	movaps xmm5, [esp + i1030_izH1]
	subps  xmm0, [esp + i1030_jxH1]
	subps  xmm1, [esp + i1030_jyH1]
	subps  xmm2, [esp + i1030_jzH1]
	subps  xmm3, [esp + i1030_jxH2]
	subps  xmm4, [esp + i1030_jyH2]
	subps  xmm5, [esp + i1030_jzH2]
	movaps [esp + i1030_dxH1H1], xmm0
	movaps [esp + i1030_dyH1H1], xmm1
	movaps [esp + i1030_dzH1H1], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i1030_dxH1H2], xmm3
	movaps [esp + i1030_dyH1H2], xmm4
	movaps [esp + i1030_dzH1H2], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i1030_rsqH1H1], xmm0
	movaps [esp + i1030_rsqH1H2], xmm3

	movaps xmm0, [esp + i1030_ixH2]
	movaps xmm1, [esp + i1030_iyH2]
	movaps xmm2, [esp + i1030_izH2]
	movaps xmm3, [esp + i1030_ixH2]
	movaps xmm4, [esp + i1030_iyH2]
	movaps xmm5, [esp + i1030_izH2]
	subps  xmm0, [esp + i1030_jxO]
	subps  xmm1, [esp + i1030_jyO]
	subps  xmm2, [esp + i1030_jzO]
	subps  xmm3, [esp + i1030_jxH1]
	subps  xmm4, [esp + i1030_jyH1]
	subps  xmm5, [esp + i1030_jzH1]
	movaps [esp + i1030_dxH2O], xmm0
	movaps [esp + i1030_dyH2O], xmm1
	movaps [esp + i1030_dzH2O], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i1030_dxH2H1], xmm3
	movaps [esp + i1030_dyH2H1], xmm4
	movaps [esp + i1030_dzH2H1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + i1030_rsqH2O], xmm0
	movaps [esp + i1030_rsqH2H1], xmm4

	movaps xmm0, [esp + i1030_ixH2]
	movaps xmm1, [esp + i1030_iyH2]
	movaps xmm2, [esp + i1030_izH2]
	subps  xmm0, [esp + i1030_jxH2]
	subps  xmm1, [esp + i1030_jyH2]
	subps  xmm2, [esp + i1030_jzH2]
	movaps [esp + i1030_dxH2H2], xmm0
	movaps [esp + i1030_dyH2H2], xmm1
	movaps [esp + i1030_dzH2H2], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + i1030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i1030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i1030_half] ;# rinvH2H2 
	mulps   xmm7, [esp + i1030_half] ;# rinvH2H1 
	movaps  [esp + i1030_rinvH2H2], xmm3
	movaps  [esp + i1030_rinvH2H1], xmm7
	
	rsqrtps xmm1, [esp + i1030_rsqOO]
	rsqrtps xmm5, [esp + i1030_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i1030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i1030_rsqOO]
	mulps   xmm5, [esp + i1030_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i1030_half] 
	mulps   xmm7, [esp + i1030_half]
	movaps  [esp + i1030_rinvOO], xmm3
	movaps  [esp + i1030_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + i1030_rsqOH2]
	rsqrtps xmm5, [esp + i1030_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i1030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i1030_rsqOH2]
	mulps   xmm5, [esp + i1030_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i1030_half] 
	mulps   xmm7, [esp + i1030_half]
	movaps  [esp + i1030_rinvOH2], xmm3
	movaps  [esp + i1030_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + i1030_rsqH1H1]
	rsqrtps xmm5, [esp + i1030_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i1030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i1030_rsqH1H1]
	mulps   xmm5, [esp + i1030_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i1030_half] 
	mulps   xmm7, [esp + i1030_half]
	movaps  [esp + i1030_rinvH1H1], xmm3
	movaps  [esp + i1030_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + i1030_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i1030_three]
	mulps   xmm1, [esp + i1030_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + i1030_half] 
	movaps  [esp + i1030_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + i1030_rinvOO]
	movaps xmm7, xmm0
	mulps  xmm0, xmm0
	mulps  xmm7, [esp + i1030_qqOO]
	mulps  xmm0, xmm7	
	addps  xmm7, [esp + i1030_vctot] 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i1030_dxOO]
	mulps xmm1, [esp + i1030_dyOO]
	mulps xmm2, [esp + i1030_dzOO]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1030_fixO]
	addps xmm1, [esp + i1030_fiyO]
	addps xmm2, [esp + i1030_fizO]
	movaps [esp + i1030_fjxO], xmm3
	movaps [esp + i1030_fjyO], xmm4
	movaps [esp + i1030_fjzO], xmm5
	movaps [esp + i1030_fixO], xmm0
	movaps [esp + i1030_fiyO], xmm1
	movaps [esp + i1030_fizO], xmm2

	;# O-H1 interaction 
	movaps xmm0, [esp + i1030_rinvOH1]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1030_qqOH]
	mulps xmm0, xmm1	;# fsOH1  
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i1030_dxOH1]
	mulps xmm1, [esp + i1030_dyOH1]
	mulps xmm2, [esp + i1030_dzOH1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1030_fixO]
	addps xmm1, [esp + i1030_fiyO]
	addps xmm2, [esp + i1030_fizO]
	movaps [esp + i1030_fjxH1], xmm3
	movaps [esp + i1030_fjyH1], xmm4
	movaps [esp + i1030_fjzH1], xmm5
	movaps [esp + i1030_fixO], xmm0
	movaps [esp + i1030_fiyO], xmm1
	movaps [esp + i1030_fizO], xmm2

	;# O-H2 interaction  
	movaps xmm0, [esp + i1030_rinvOH2]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1030_qqOH]
	mulps xmm0, xmm1	;# fsOH2  
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i1030_dxOH2]
	mulps xmm1, [esp + i1030_dyOH2]
	mulps xmm2, [esp + i1030_dzOH2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1030_fixO]
	addps xmm1, [esp + i1030_fiyO]
	addps xmm2, [esp + i1030_fizO]
	movaps [esp + i1030_fjxH2], xmm3
	movaps [esp + i1030_fjyH2], xmm4
	movaps [esp + i1030_fjzH2], xmm5
	movaps [esp + i1030_fixO], xmm0
	movaps [esp + i1030_fiyO], xmm1
	movaps [esp + i1030_fizO], xmm2

	;# H1-O interaction 
	movaps xmm0, [esp + i1030_rinvH1O]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1030_qqOH]
	mulps xmm0, xmm1	;# fsH1O 
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1030_fjxO]
	movaps xmm4, [esp + i1030_fjyO]
	movaps xmm5, [esp + i1030_fjzO]
	mulps xmm0, [esp + i1030_dxH1O]
	mulps xmm1, [esp + i1030_dyH1O]
	mulps xmm2, [esp + i1030_dzH1O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1030_fixH1]
	addps xmm1, [esp + i1030_fiyH1]
	addps xmm2, [esp + i1030_fizH1]
	movaps [esp + i1030_fjxO], xmm3
	movaps [esp + i1030_fjyO], xmm4
	movaps [esp + i1030_fjzO], xmm5
	movaps [esp + i1030_fixH1], xmm0
	movaps [esp + i1030_fiyH1], xmm1
	movaps [esp + i1030_fizH1], xmm2

	;# H1-H1 interaction 
	movaps xmm0, [esp + i1030_rinvH1H1]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1030_qqHH]
	mulps xmm0, xmm1	;# fsH1H1 
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1030_fjxH1]
	movaps xmm4, [esp + i1030_fjyH1]
	movaps xmm5, [esp + i1030_fjzH1]
	mulps xmm0, [esp + i1030_dxH1H1]
	mulps xmm1, [esp + i1030_dyH1H1]
	mulps xmm2, [esp + i1030_dzH1H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1030_fixH1]
	addps xmm1, [esp + i1030_fiyH1]
	addps xmm2, [esp + i1030_fizH1]
	movaps [esp + i1030_fjxH1], xmm3
	movaps [esp + i1030_fjyH1], xmm4
	movaps [esp + i1030_fjzH1], xmm5
	movaps [esp + i1030_fixH1], xmm0
	movaps [esp + i1030_fiyH1], xmm1
	movaps [esp + i1030_fizH1], xmm2

	;# H1-H2 interaction 
	movaps xmm0, [esp + i1030_rinvH1H2]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1030_qqHH]
	mulps xmm0, xmm1	;# fsOH2  
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1030_fjxH2]
	movaps xmm4, [esp + i1030_fjyH2]
	movaps xmm5, [esp + i1030_fjzH2]
	mulps xmm0, [esp + i1030_dxH1H2]
	mulps xmm1, [esp + i1030_dyH1H2]
	mulps xmm2, [esp + i1030_dzH1H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1030_fixH1]
	addps xmm1, [esp + i1030_fiyH1]
	addps xmm2, [esp + i1030_fizH1]
	movaps [esp + i1030_fjxH2], xmm3
	movaps [esp + i1030_fjyH2], xmm4
	movaps [esp + i1030_fjzH2], xmm5
	movaps [esp + i1030_fixH1], xmm0
	movaps [esp + i1030_fiyH1], xmm1
	movaps [esp + i1030_fizH1], xmm2

	;# H2-O interaction 
	movaps xmm0, [esp + i1030_rinvH2O]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1030_qqOH]
	mulps xmm0, xmm1	;# fsH2O 
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1030_fjxO]
	movaps xmm4, [esp + i1030_fjyO]
	movaps xmm5, [esp + i1030_fjzO]
	mulps xmm0, [esp + i1030_dxH2O]
	mulps xmm1, [esp + i1030_dyH2O]
	mulps xmm2, [esp + i1030_dzH2O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1030_fixH2]
	addps xmm1, [esp + i1030_fiyH2]
	addps xmm2, [esp + i1030_fizH2]
	movaps [esp + i1030_fjxO], xmm3
	movaps [esp + i1030_fjyO], xmm4
	movaps [esp + i1030_fjzO], xmm5
	movaps [esp + i1030_fixH2], xmm0
	movaps [esp + i1030_fiyH2], xmm1
	movaps [esp + i1030_fizH2], xmm2

	;# H2-H1 interaction 
	movaps xmm0, [esp + i1030_rinvH2H1]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1030_qqHH]
	mulps xmm0, xmm1	;# fsH2H1 
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1030_fjxH1]
	movaps xmm4, [esp + i1030_fjyH1]
	movaps xmm5, [esp + i1030_fjzH1]
	mulps xmm0, [esp + i1030_dxH2H1]
	mulps xmm1, [esp + i1030_dyH2H1]
	mulps xmm2, [esp + i1030_dzH2H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1030_fixH2]
	addps xmm1, [esp + i1030_fiyH2]
	addps xmm2, [esp + i1030_fizH2]
	movaps [esp + i1030_fjxH1], xmm3
	movaps [esp + i1030_fjyH1], xmm4
	movaps [esp + i1030_fjzH1], xmm5
	movaps [esp + i1030_fixH2], xmm0
	movaps [esp + i1030_fiyH2], xmm1
	movaps [esp + i1030_fizH2], xmm2

	;# H2-H2 interaction 
	movaps xmm0, [esp + i1030_rinvH2H2]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1030_qqHH]
	mulps xmm0, xmm1	;# fsH2H2 
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps [esp + i1030_vctot], xmm7
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1030_fjxH2]
	movaps xmm4, [esp + i1030_fjyH2]
	movaps xmm5, [esp + i1030_fjzH2]
	mulps xmm0, [esp + i1030_dxH2H2]
	mulps xmm1, [esp + i1030_dyH2H2]
	mulps xmm2, [esp + i1030_dzH2H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1030_fixH2]
	addps xmm1, [esp + i1030_fiyH2]
	addps xmm2, [esp + i1030_fizH2]
	movaps [esp + i1030_fjxH2], xmm3
	movaps [esp + i1030_fjyH2], xmm4
	movaps [esp + i1030_fjzH2], xmm5
	movaps [esp + i1030_fixH2], xmm0
	movaps [esp + i1030_fiyH2], xmm1
	movaps [esp + i1030_fizH2], xmm2

	mov edi, [ebp + i1030_faction]
		
	;# Did all interactions - now update j forces 
	;# 4 j waters with three atoms each - first do a & b j particles 
	movaps xmm0, [esp + i1030_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i1030_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpcklps xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjxOb  fjyOb 
	movaps xmm1, [esp + i1030_fjzO]
	movaps xmm2, [esp + i1030_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOb  fjyOb  
	unpcklps xmm1, xmm2	   ;# xmm1= fjzOa  fjxH1a fjzOb  fjxH1b 
	movaps xmm4, [esp + i1030_fjyH1]
	movaps xmm5, [esp + i1030_fjzH1]
	unpcklps xmm4, xmm5	   ;# xmm4= fjyH1a fjzH1a fjyH1b fjzH1b 
	movaps xmm5, [esp + i1030_fjxH2]
	movaps xmm6, [esp + i1030_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1b fjzH1b 
	unpcklps xmm5, xmm6	   ;# xmm5= fjxH2a fjyH2a fjxH2b fjyH2b 
	movlhps  xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjzOa  fjxH1a 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOb  fjyOb  fjzOb  fjxH1b 
	movlhps  xmm4, xmm5   	   ;# xmm4= fjyH1a fjzH1a fjxH2a fjyH2a 
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1b fjzH1b fjxH2b fjyH2b 
	movups   xmm1, [edi + eax*4]
	movups   xmm2, [edi + eax*4 + 16]
	movups   xmm5, [edi + ebx*4]
	movups   xmm6, [edi + ebx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + eax*4 + 32]
	movss    xmm3, [edi + ebx*4 + 32]
	
	movaps   xmm4, [esp + i1030_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm7, xmm7, 1
	
	movups   [edi + eax*4],     xmm1
	movups   [edi + eax*4 + 16],xmm2
	movups   [edi + ebx*4],     xmm5
	movups   [edi + ebx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + eax*4 + 32], xmm0
	movss    [edi + ebx*4 + 32], xmm3	

	;# then do the second pair (c & d) 
	movaps xmm0, [esp + i1030_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i1030_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpckhps xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjxOd  fjyOd 
	movaps xmm1, [esp + i1030_fjzO]
	movaps xmm2, [esp + i1030_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOd  fjyOd  
	unpckhps xmm1, xmm2	   ;# xmm1= fjzOc  fjxH1c fjzOd  fjxH1d 
	movaps xmm4, [esp + i1030_fjyH1]
	movaps xmm5, [esp + i1030_fjzH1]
	unpckhps xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjyH1d fjzH1d	
	movaps xmm5, [esp + i1030_fjxH2]
	movaps xmm6, [esp + i1030_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1d fjzH1d 	 
	unpckhps xmm5, xmm6	   ;# xmm5= fjxH2c fjyH2c fjxH2d fjyH2d 
	movlhps  xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjzOc  fjxH1c 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOd  fjyOd  fjzOd  fjxH1d 
	movlhps  xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjxH2c fjyH2c  
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1d fjzH1d fjxH2d fjyH2d 
	movups   xmm1, [edi + ecx*4]
	movups   xmm2, [edi + ecx*4 + 16]
	movups   xmm5, [edi + edx*4]
	movups   xmm6, [edi + edx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + ecx*4 + 32]
	movss    xmm3, [edi + edx*4 + 32]
	
	movaps   xmm4, [esp + i1030_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm4, xmm4, 2 ;# 00000010
	shufps   xmm7, xmm7, 3 ;# 00000011
	movups   [edi + ecx*4],     xmm1
	movups   [edi + ecx*4 + 16],xmm2
	movups   [edi + edx*4],     xmm5
	movups   [edi + edx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + ecx*4 + 32], xmm0
	movss    [edi + edx*4 + 32], xmm3	
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1030_innerk],  4
	jl    i1030_single_check
	jmp   i1030_unroll_loop
i1030_single_check:
	add dword ptr [esp + i1030_innerk],  4
	jnz   i1030_single_loop
	jmp   i1030_updateouterdata
i1030_single_loop:
	mov   edx, [esp + i1030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i1030_innerjjnr],  4	

	mov esi, [ebp + i1030_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + i1030_ixO]     
	movaps  xmm1, [esp + i1030_iyO]
	movaps  xmm2, [esp + i1030_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + i1030_jxO], xmm3
	movaps [esp + i1030_jyO], xmm4
	movaps [esp + i1030_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	movaps [esp + i1030_dxOO], xmm0
	movaps [esp + i1030_dyOO], xmm1
	movaps [esp + i1030_dzOO], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	movaps  xmm2, xmm1	
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i1030_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + i1030_half] ;# rinv iO - j water 

	xorps   xmm1, xmm1
	movaps  xmm0, xmm3
	xorps   xmm4, xmm4
	mulps   xmm0, xmm0	;# xmm0=rinvsq 
	;# fetch charges to xmm4 (temporary) 
	movss   xmm4, [esp + i1030_qqOO]

	movhps  xmm4, [esp + i1030_qqOH]

	mulps   xmm3, xmm4	;# xmm3=vcoul 
	mulps   xmm0, xmm3	;# total fscal 
	addps   xmm3, [esp + i1030_vctot]
	movaps  [esp + i1030_vctot], xmm3	

	movaps  xmm1, xmm0
	movaps  xmm2, xmm0
	mulps   xmm0, [esp + i1030_dxOO]
	mulps   xmm1, [esp + i1030_dyOO]
	mulps   xmm2, [esp + i1030_dzOO]
	;# initial update for j forces 
	xorps   xmm3, xmm3
	xorps   xmm4, xmm4
	xorps   xmm5, xmm5
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i1030_fjxO], xmm3
	movaps  [esp + i1030_fjyO], xmm4
	movaps  [esp + i1030_fjzO], xmm5
	addps   xmm0, [esp + i1030_fixO]
	addps   xmm1, [esp + i1030_fiyO]
	addps   xmm2, [esp + i1030_fizO]
	movaps  [esp + i1030_fixO], xmm0
	movaps  [esp + i1030_fiyO], xmm1
	movaps  [esp + i1030_fizO], xmm2

	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + i1030_ixH1]
	movaps  xmm1, [esp + i1030_iyH1]
	movaps  xmm2, [esp + i1030_izH1]	
	movaps  xmm3, [esp + i1030_ixH2] 
	movaps  xmm4, [esp + i1030_iyH2] 
	movaps  xmm5, [esp + i1030_izH2] 
	subps   xmm0, [esp + i1030_jxO]
	subps   xmm1, [esp + i1030_jyO]
	subps   xmm2, [esp + i1030_jzO]
	subps   xmm3, [esp + i1030_jxO]
	subps   xmm4, [esp + i1030_jyO]
	subps   xmm5, [esp + i1030_jzO]
	movaps [esp + i1030_dxH1O], xmm0
	movaps [esp + i1030_dyH1O], xmm1
	movaps [esp + i1030_dzH1O], xmm2
	movaps [esp + i1030_dxH2O], xmm3
	movaps [esp + i1030_dyH2O], xmm4
	movaps [esp + i1030_dzH2O], xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 

	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i1030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i1030_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + i1030_half] ;# rinv H2 - j water  

	;# assemble charges in xmm6 
	xorps   xmm6, xmm6
	;# do coulomb interaction 
	movaps  xmm0, xmm3
	movss   xmm6, [esp + i1030_qqOH]
	movaps  xmm4, xmm7
	movhps  xmm6, [esp + i1030_qqHH]
	mulps   xmm0, xmm0	;# rinvsq 
	mulps   xmm4, xmm4	;# rinvsq 
	mulps   xmm3, xmm6	;# vcoul 
	mulps   xmm7, xmm6	;# vcoul 
	movaps  xmm2, xmm3
	addps   xmm2, xmm7	;# total vcoul 
	mulps   xmm0, xmm3	;# fscal 
	
	addps   xmm2, [esp + i1030_vctot]
	mulps   xmm7, xmm4	;# fscal 
	movaps  [esp + i1030_vctot], xmm2
	movaps  xmm1, xmm0
	movaps  xmm2, xmm0
	mulps   xmm0, [esp + i1030_dxH1O]
	mulps   xmm1, [esp + i1030_dyH1O]
	mulps   xmm2, [esp + i1030_dzH1O]
	;# update forces H1 - j water 
	movaps  xmm3, [esp + i1030_fjxO]
	movaps  xmm4, [esp + i1030_fjyO]
	movaps  xmm5, [esp + i1030_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i1030_fjxO], xmm3
	movaps  [esp + i1030_fjyO], xmm4
	movaps  [esp + i1030_fjzO], xmm5
	addps   xmm0, [esp + i1030_fixH1]
	addps   xmm1, [esp + i1030_fiyH1]
	addps   xmm2, [esp + i1030_fizH1]
	movaps  [esp + i1030_fixH1], xmm0
	movaps  [esp + i1030_fiyH1], xmm1
	movaps  [esp + i1030_fizH1], xmm2
	;# do forces H2 - j water 
	movaps xmm0, xmm7
	movaps xmm1, xmm7
	movaps xmm2, xmm7
	mulps   xmm0, [esp + i1030_dxH2O]
	mulps   xmm1, [esp + i1030_dyH2O]
	mulps   xmm2, [esp + i1030_dzH2O]
	movaps  xmm3, [esp + i1030_fjxO]
	movaps  xmm4, [esp + i1030_fjyO]
	movaps  xmm5, [esp + i1030_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	mov     esi, [ebp + i1030_faction]
	movaps  [esp + i1030_fjxO], xmm3
	movaps  [esp + i1030_fjyO], xmm4
	movaps  [esp + i1030_fjzO], xmm5
	addps   xmm0, [esp + i1030_fixH2]
	addps   xmm1, [esp + i1030_fiyH2]
	addps   xmm2, [esp + i1030_fizH2]
	movaps  [esp + i1030_fixH2], xmm0
	movaps  [esp + i1030_fiyH2], xmm1
	movaps  [esp + i1030_fizH2], xmm2

	;# update j water forces from local variables 
	movlps  xmm0, [esi + eax*4]
	movlps  xmm1, [esi + eax*4 + 12]
	movhps  xmm1, [esi + eax*4 + 24]
	movaps  xmm3, [esp + i1030_fjxO]
	movaps  xmm4, [esp + i1030_fjyO]
	movaps  xmm5, [esp + i1030_fjzO]
	movaps  xmm6, xmm5
	movaps  xmm7, xmm5
	shufps  xmm6, xmm6, 2 ;# 00000010
	shufps  xmm7, xmm7, 3 ;# 00000011
	addss   xmm5, [esi + eax*4 + 8]
	addss   xmm6, [esi + eax*4 + 20]
	addss   xmm7, [esi + eax*4 + 32]
	movss   [esi + eax*4 + 8], xmm5
	movss   [esi + eax*4 + 20], xmm6
	movss   [esi + eax*4 + 32], xmm7
	movaps   xmm5, xmm3
	unpcklps xmm3, xmm4
	unpckhps xmm5, xmm4
	addps    xmm0, xmm3
	addps    xmm1, xmm5
	movlps  [esi + eax*4], xmm0 
	movlps  [esi + eax*4 + 12], xmm1 
	movhps  [esi + eax*4 + 24], xmm1 
	
	dec   dword ptr [esp + i1030_innerk]
	jz    i1030_updateouterdata
	jmp   i1030_single_loop
i1030_updateouterdata:
	mov   ecx, [esp + i1030_ii3]
	mov   edi, [ebp + i1030_faction]
	mov   esi, [ebp + i1030_fshift]
	mov   edx, [esp + i1030_is3]

	;# accumulate Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1030_fixO]
	movaps xmm1, [esp + i1030_fiyO] 
	movaps xmm2, [esp + i1030_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1030_fixH1]
	movaps xmm1, [esp + i1030_fiyH1]
	movaps xmm2, [esp + i1030_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1030_fixH2]
	movaps xmm1, [esp + i1030_fiyH2]
	movaps xmm2, [esp + i1030_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	;# get group index for i particle 
	mov   edx, [ebp + i1030_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i1030_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i1030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i1030_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 	

	;# finish if last 
	mov   ecx, [ebp + i1030_nri]
	dec ecx
	jecxz i1030_end
	;# not last, iterate once more!  
	mov [ebp + i1030_nri], ecx
	jmp i1030_outer
i1030_end:
	emms
	mov eax, [esp + i1030_salign]
	add esp, eax
	add esp, 1412
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret







.globl inl1100_sse
.globl _inl1100_sse
inl1100_sse:	
_inl1100_sse:	
.equiv		i1100_nri,			8
.equiv		i1100_iinr,			12
.equiv		i1100_jindex,		16
.equiv		i1100_jjnr,			20
.equiv		i1100_shift,		24
.equiv		i1100_shiftvec,		28
.equiv		i1100_fshift,		32
.equiv		i1100_gid,			36
.equiv		i1100_pos,			40		
.equiv		i1100_faction,		44
.equiv		i1100_charge,		48
.equiv		i1100_facel,		52
.equiv		i1100_Vc,			56			
.equiv		i1100_type,			60
.equiv		i1100_ntype,		64
.equiv		i1100_nbfp,			68	
.equiv		i1100_Vnb,			72	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i1100_ix,	        0
.equiv		i1100_iy,	        16
.equiv		i1100_iz,           32
.equiv		i1100_iq,           48
.equiv		i1100_dx,           64
.equiv		i1100_dy,           80
.equiv		i1100_dz,           96	
.equiv		i1100_c6,           112
.equiv		i1100_c12,          128
.equiv		i1100_six,          144
.equiv		i1100_twelve,       160		 
.equiv		i1100_vctot,        176
.equiv		i1100_vnbtot,       192
.equiv		i1100_fix,          208
.equiv		i1100_fiy,          224
.equiv		i1100_fiz,          240
.equiv		i1100_half,         256
.equiv		i1100_three,        272
.equiv		i1100_is3,          288
.equiv		i1100_ii3,          292
.equiv		i1100_ntia,	        296	
.equiv		i1100_innerjjnr,    300
.equiv		i1100_innerk,       304
.equiv		i1100_salign,       308		
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  312		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1100_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movups xmm2, [sse_six]
	movups xmm3, [sse_twelve]
	movaps [esp + i1100_half],  xmm0
	movaps [esp + i1100_three], xmm1
	movaps [esp + i1100_six],  xmm2
	movaps [esp + i1100_twelve], xmm3

	;# assume we have at least one i particle - start directly 	
i1100_outer:
	mov   eax, [ebp + i1100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1100_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1100_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i1100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1100_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i1100_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + i1100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i1100_ntype]
    shl   edx, 1
    mov   [esp + i1100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1100_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i1100_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i1100_ix], xmm0
	movaps [esp + i1100_iy], xmm1
	movaps [esp + i1100_iz], xmm2

	mov   [esp + i1100_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i1100_vctot], xmm4
	movaps [esp + i1100_vnbtot], xmm4
	movaps [esp + i1100_fix], xmm4
	movaps [esp + i1100_fiy], xmm4
	movaps [esp + i1100_fiz], xmm4
	
	mov   eax, [ebp + i1100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1100_pos]
	mov   edi, [ebp + i1100_faction]	
	mov   eax, [ebp + i1100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i1100_innerk], edx    ;# number of innerloop atoms 
	jge   i1100_unroll_loop
	jmp   i1100_finish_inner
i1100_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i1100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i1100_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i1100_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i1100_iq]
	shufps xmm3, xmm6, 0
	shufps xmm4, xmm7, 0
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i1100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i1100_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i1100_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i1100_c6], xmm4
	movaps [esp + i1100_c12], xmm6
	
	mov esi, [ebp + i1100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i1100_ix]
	movaps xmm5, [esp + i1100_iy]
	movaps xmm6, [esp + i1100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1100_dx], xmm4
	movaps [esp + i1100_dy], xmm5
	movaps [esp + i1100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + i1100_c6]
	mulps  xmm2, [esp + i1100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i1100_vnbtot]
	mulps  xmm1, [esp + i1100_six]
	mulps  xmm2, [esp + i1100_twelve]
	subps  xmm2, xmm1
	addps  xmm2, xmm3
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addps  xmm3, [esp + i1100_vctot]

	movaps xmm0, [esp + i1100_dx]
	movaps xmm1, [esp + i1100_dy]
	movaps xmm2, [esp + i1100_dz]

	movaps [esp + i1100_vctot], xmm3
	movaps [esp + i1100_vnbtot], xmm5

	mov    edi, [ebp + i1100_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1100_fix]
	movaps xmm4, [esp + i1100_fiy]
	movaps xmm5, [esp + i1100_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1100_fix], xmm3
	movaps [esp + i1100_fiy], xmm4
	movaps [esp + i1100_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1100_innerk],  4
	jl    i1100_finish_inner
	jmp   i1100_unroll_loop
i1100_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i1100_innerk],  4
	mov   edx, [esp + i1100_innerk]
	and   edx, 2
	jnz   i1100_dopair
	jmp   i1100_checksingle
i1100_dopair:	
	mov esi, [ebp + i1100_charge]

    mov   ecx, [esp + i1100_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i1100_innerjjnr],  8

	xorps xmm3, xmm3
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 12 ;# 00001100 
	shufps xmm3, xmm3, 88 ;# 01011000 ;# xmm3(0,1) has the charges 

	mov esi, [ebp + i1100_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i1100_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i1100_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i1100_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i1100_c6], xmm4
	movaps [esp + i1100_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + i1100_iq]

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i1100_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1100_ix]
	movaps xmm5, [esp + i1100_iy]
	movaps xmm6, [esp + i1100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1100_dx], xmm4
	movaps [esp + i1100_dy], xmm5
	movaps [esp + i1100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + i1100_c6]
	mulps  xmm2, [esp + i1100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i1100_vnbtot]
	mulps  xmm1, [esp + i1100_six]
	mulps  xmm2, [esp + i1100_twelve]
	subps  xmm2, xmm1
	addps  xmm2, xmm3
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addps  xmm3, [esp + i1100_vctot]

	movaps xmm0, [esp + i1100_dx]
	movaps xmm1, [esp + i1100_dy]
	movaps xmm2, [esp + i1100_dz]

	movaps [esp + i1100_vctot], xmm3
	movaps [esp + i1100_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1100_fix]
	movaps xmm4, [esp + i1100_fiy]
	movaps xmm5, [esp + i1100_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1100_fix], xmm3
	movaps [esp + i1100_fiy], xmm4
	movaps [esp + i1100_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

i1100_checksingle:				
	mov   edx, [esp + i1100_innerk]
	and   edx, 1
	jnz    i1100_dosingle
	jmp    i1100_updateouterdata
i1100_dosingle:			
	mov esi, [ebp + i1100_charge]
	mov edi, [ebp + i1100_pos]
	mov   ecx, [esp + i1100_innerjjnr]
	xorps xmm3, xmm3
	mov   eax, [ecx]
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	

	mov esi, [ebp + i1100_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i1100_nbfp]
	shl ecx, 1
	add ecx, [esp + i1100_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i1100_c6], xmm4
	movaps [esp + i1100_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + i1100_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1100_ix]
	movaps xmm5, [esp + i1100_iy]
	movaps xmm6, [esp + i1100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1100_dx], xmm4
	movaps [esp + i1100_dy], xmm5
	movaps [esp + i1100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + i1100_c6]
	mulps  xmm2, [esp + i1100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + i1100_vnbtot]
	mulps  xmm1, [esp + i1100_six]
	mulps  xmm2, [esp + i1100_twelve]
	subps  xmm2, xmm1
	addps  xmm2, xmm3
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addss  xmm3, [esp + i1100_vctot]
	
	mov    edi, [ebp + i1100_faction]

	movaps xmm0, [esp + i1100_dx]
	movaps xmm1, [esp + i1100_dy]
	movaps xmm2, [esp + i1100_dz]

	movss [esp + i1100_vctot], xmm3
	movss [esp + i1100_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1100_fix]
	movaps xmm4, [esp + i1100_fiy]
	movaps xmm5, [esp + i1100_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i1100_fix], xmm3
	movaps [esp + i1100_fiy], xmm4
	movaps [esp + i1100_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
i1100_updateouterdata:
	mov   ecx, [esp + i1100_ii3]
	mov   edi, [ebp + i1100_faction]
	mov   esi, [ebp + i1100_fshift]
	mov   edx, [esp + i1100_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1100_fix]
	movaps xmm1, [esp + i1100_fiy]
	movaps xmm2, [esp + i1100_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i1100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i1100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i1100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i1100_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i1100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i1100_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i1100_nri]
	dec ecx
	jecxz i1100_end
	;# not last, iterate once more!  
	mov [ebp + i1100_nri], ecx
	jmp i1100_outer
i1100_end:
	emms
	mov eax, [esp + i1100_salign]
	add esp, eax
	add esp,  312
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl inl2100_sse
.globl _inl2100_sse
inl2100_sse:	
_inl2100_sse:	
.equiv		i2100_nri,			8
.equiv		i2100_iinr,			12
.equiv		i2100_jindex,		16
.equiv		i2100_jjnr,			20
.equiv		i2100_shift,		24
.equiv		i2100_shiftvec,		28
.equiv		i2100_fshift,		32
.equiv		i2100_gid,			36
.equiv		i2100_pos,			40		
.equiv		i2100_faction,		44
.equiv		i2100_charge,		48
.equiv		i2100_facel,		52
.equiv		i2100_Vc,			56			
.equiv		i2100_argkrf,		60	
.equiv		i2100_argcrf,		64	
.equiv		i2100_type,			68
.equiv		i2100_ntype,		72
.equiv		i2100_nbfp,			76	
.equiv		i2100_Vnb,			80	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i2100_ix,	        0
.equiv		i2100_iy,	        16
.equiv		i2100_iz,           32
.equiv		i2100_iq,           48
.equiv		i2100_dx,           64
.equiv		i2100_dy,           80
.equiv		i2100_dz,           96	
.equiv		i2100_c6,           112
.equiv		i2100_c12,          128
.equiv		i2100_six,          144
.equiv		i2100_twelve,       160		 
.equiv		i2100_vctot,        176
.equiv		i2100_vnbtot,       192
.equiv		i2100_fix,          208
.equiv		i2100_fiy,          224
.equiv		i2100_fiz,          240
.equiv		i2100_half,         256
.equiv		i2100_three,        272
.equiv		i2100_two,          288
.equiv		i2100_krf,			304	 
.equiv		i2100_crf,			320	 
.equiv		i2100_is3,          336
.equiv		i2100_ii3,          340
.equiv		i2100_ntia,	        344
.equiv		i2100_innerjjnr,    348
.equiv		i2100_innerk,       352
.equiv		i2100_salign,       356								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  360		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2100_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movups xmm2, [sse_six]
	movups xmm3, [sse_twelve]
	movups xmm4, [sse_two]
	movss xmm5, [ebp + i2100_argkrf]
	movss xmm6, [ebp + i2100_argcrf]
	
	movaps [esp + i2100_half],  xmm0
	movaps [esp + i2100_three], xmm1
	movaps [esp + i2100_six],  xmm2
	movaps [esp + i2100_twelve], xmm3
	movaps [esp + i2100_two], xmm4
	shufps xmm5, xmm5, 0
	shufps xmm6, xmm6, 0
	movaps [esp + i2100_krf], xmm5
	movaps [esp + i2100_crf], xmm6

	;# assume we have at least one i particle - start directly 	
.i2100_outer:
	mov   eax, [ebp + i2100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2100_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2100_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i2100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2100_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i2100_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + i2100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i2100_ntype]
    shl   edx, 1
    mov   [esp + i2100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2100_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i2100_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i2100_ix], xmm0
	movaps [esp + i2100_iy], xmm1
	movaps [esp + i2100_iz], xmm2

	mov   [esp + i2100_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i2100_vctot], xmm4
	movaps [esp + i2100_vnbtot], xmm4
	movaps [esp + i2100_fix], xmm4
	movaps [esp + i2100_fiy], xmm4
	movaps [esp + i2100_fiz], xmm4
	
	mov   eax, [ebp + i2100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2100_pos]
	mov   edi, [ebp + i2100_faction]	
	mov   eax, [ebp + i2100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i2100_innerk], edx    ;# number of innerloop atoms 
	jge   .i2100_unroll_loop
	jmp   .i2100_finish_inner
.i2100_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i2100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i2100_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i2100_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i2100_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i2100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i2100_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i2100_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i2100_c6], xmm4
	movaps [esp + i2100_c12], xmm6
	
	mov esi, [ebp + i2100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i2100_ix]
	movaps xmm5, [esp + i2100_iy]
	movaps xmm6, [esp + i2100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i2100_dx], xmm4
	movaps [esp + i2100_dy], xmm5
	movaps [esp + i2100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 
	
	movaps xmm7, [esp + i2100_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i2100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i2100_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movaps xmm1, xmm4
	subps  xmm6, [esp + i2100_crf]
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	mulps  xmm7, [esp + i2100_two]
	mulps  xmm1, [esp + i2100_c6]
	mulps  xmm2, [esp + i2100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i2100_vnbtot]
	mulps  xmm1, [esp + i2100_six]
	mulps  xmm2, [esp + i2100_twelve]
	subps  xmm2, xmm1
	subps  xmm0, xmm7
	mulps  xmm3, xmm0
	addps  xmm2, xmm3
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addps  xmm6, [esp + i2100_vctot]

	movaps xmm0, [esp + i2100_dx]
	movaps xmm1, [esp + i2100_dy]
	movaps xmm2, [esp + i2100_dz]

	movaps [esp + i2100_vctot], xmm6
	movaps [esp + i2100_vnbtot], xmm5

	mov    edi, [ebp + i2100_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i2100_fix]
	movaps xmm4, [esp + i2100_fiy]
	movaps xmm5, [esp + i2100_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i2100_fix], xmm3
	movaps [esp + i2100_fiy], xmm4
	movaps [esp + i2100_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i2100_innerk],  4
	jl    .i2100_finish_inner
	jmp   .i2100_unroll_loop
.i2100_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i2100_innerk],  4
	mov   edx, [esp + i2100_innerk]
	and   edx, 2
	jnz   .i2100_dopair
	jmp   .i2100_checksingle
.i2100_dopair:	
	mov esi, [ebp + i2100_charge]

    mov   ecx, [esp + i2100_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i2100_innerjjnr],  8

	xorps xmm3, xmm3
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 12 ;# 00001100 
	shufps xmm3, xmm3, 88 ;# 01011000 ;# xmm3(0,1) has the charges 

	mov esi, [ebp + i2100_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i2100_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i2100_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i2100_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i2100_c6], xmm4
	movaps [esp + i2100_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + i2100_iq]

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i2100_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i2100_ix]
	movaps xmm5, [esp + i2100_iy]
	movaps xmm6, [esp + i2100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i2100_dx], xmm4
	movaps [esp + i2100_dy], xmm5
	movaps [esp + i2100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	movaps xmm7, [esp + i2100_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i2100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i2100_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movaps xmm1, xmm4
	subps  xmm6, [esp + i2100_crf]
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq-crf) 
	mulps  xmm7, [esp + i2100_two]	
	mulps  xmm1, [esp + i2100_c6]
	mulps  xmm2, [esp + i2100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i2100_vnbtot]
	mulps  xmm1, [esp + i2100_six]
	mulps  xmm2, [esp + i2100_twelve]
	subps  xmm2, xmm1
	subps  xmm0, xmm7
	mulps  xmm3, xmm0	
	addps  xmm2, xmm3
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addps  xmm6, [esp + i2100_vctot]

	movaps xmm0, [esp + i2100_dx]
	movaps xmm1, [esp + i2100_dy]
	movaps xmm2, [esp + i2100_dz]

	movaps [esp + i2100_vctot], xmm6
	movaps [esp + i2100_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i2100_fix]
	movaps xmm4, [esp + i2100_fiy]
	movaps xmm5, [esp + i2100_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i2100_fix], xmm3
	movaps [esp + i2100_fiy], xmm4
	movaps [esp + i2100_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i2100_checksingle:				
	mov   edx, [esp + i2100_innerk]
	and   edx, 1
	jnz    .i2100_dosingle
	jmp    .i2100_updateouterdata
.i2100_dosingle:			
	mov esi, [ebp + i2100_charge]
	mov edi, [ebp + i2100_pos]
	mov   ecx, [esp + i2100_innerjjnr]
	xorps xmm3, xmm3
	mov   eax, [ecx]
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	

	mov esi, [ebp + i2100_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i2100_nbfp]
	shl ecx, 1
	add ecx, [esp + i2100_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i2100_c6], xmm4
	movaps [esp + i2100_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + i2100_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i2100_ix]
	movaps xmm5, [esp + i2100_iy]
	movaps xmm6, [esp + i2100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i2100_dx], xmm4
	movaps [esp + i2100_dy], xmm5
	movaps [esp + i2100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	movaps xmm7, [esp + i2100_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i2100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i2100_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movaps xmm1, xmm4
	subps  xmm6, [esp + i2100_crf]	
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm6, xmm3	;# xmm6=vcoul 
	mulps  xmm7, [esp + i2100_two]
	mulps  xmm1, [esp + i2100_c6]
	mulps  xmm2, [esp + i2100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + i2100_vnbtot]
	mulps  xmm1, [esp + i2100_six]
	mulps  xmm2, [esp + i2100_twelve]
	subps  xmm2, xmm1
	subps  xmm0, xmm7
	mulps  xmm3, xmm0
	addps  xmm2, xmm3
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addss  xmm6, [esp + i2100_vctot]
	
	mov    edi, [ebp + i2100_faction]

	movaps xmm0, [esp + i2100_dx]
	movaps xmm1, [esp + i2100_dy]
	movaps xmm2, [esp + i2100_dz]

	movss [esp + i2100_vctot], xmm6
	movss [esp + i2100_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i2100_fix]
	movaps xmm4, [esp + i2100_fiy]
	movaps xmm5, [esp + i2100_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i2100_fix], xmm3
	movaps [esp + i2100_fiy], xmm4
	movaps [esp + i2100_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i2100_updateouterdata:
	mov   ecx, [esp + i2100_ii3]
	mov   edi, [ebp + i2100_faction]
	mov   esi, [ebp + i2100_fshift]
	mov   edx, [esp + i2100_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2100_fix]
	movaps xmm1, [esp + i2100_fiy]
	movaps xmm2, [esp + i2100_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i2100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i2100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i2100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i2100_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i2100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i2100_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2100_nri]
	dec ecx
	jecxz .i2100_end
	;# not last, iterate once more!  
	mov [ebp + i2100_nri], ecx
	jmp .i2100_outer
.i2100_end:
	emms
	mov eax, [esp + i2100_salign]
	add esp, eax
	add esp,  360
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl inl2000_sse
.globl _inl2000_sse
inl2000_sse:	
_inl2000_sse:	
.equiv		i2000_nri,			8
.equiv		i2000_iinr,			12
.equiv		i2000_jindex,		16
.equiv		i2000_jjnr,			20
.equiv		i2000_shift,		24
.equiv		i2000_shiftvec,		28
.equiv		i2000_fshift,		32
.equiv		i2000_gid,			36
.equiv		i2000_pos,			40		
.equiv		i2000_faction,		44
.equiv		i2000_charge,		48
.equiv		i2000_facel,		52
.equiv		i2000_Vc,			56			
.equiv		i2000_argkrf,		60	
.equiv		i2000_argcrf,		64
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i2000_ix,	        0
.equiv		i2000_iy,	        16
.equiv		i2000_iz,           32
.equiv		i2000_iq,           48
.equiv		i2000_dx,           64
.equiv		i2000_dy,           80
.equiv		i2000_dz,           96	
.equiv		i2000_vctot,        112
.equiv		i2000_fix,          128
.equiv		i2000_fiy,          144
.equiv		i2000_fiz,          160
.equiv		i2000_half,         176
.equiv		i2000_three,        192
.equiv		i2000_two,          208
.equiv		i2000_krf,	        224	 
.equiv		i2000_crf,	        240	 
.equiv		i2000_is3,          256
.equiv		i2000_ii3,          260
.equiv		i2000_innerjjnr,    264
.equiv		i2000_innerk,       268
.equiv		i2000_salign,		272								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  276		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2000_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movups xmm4, [sse_two]
	movss xmm5, [ebp + i2000_argkrf]
	movss xmm6, [ebp + i2000_argcrf]
	
	movaps [esp + i2000_half],  xmm0
	movaps [esp + i2000_three], xmm1
	movaps [esp + i2000_two], xmm4
	shufps xmm5, xmm5, 0
	movaps [esp + i2000_krf], xmm5
	shufps xmm6, xmm6, 0
	movaps [esp + i2000_crf], xmm6

	;# assume we have at least one i particle - start directly 	
.i2000_outer:
	mov   eax, [ebp + i2000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2000_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2000_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i2000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2000_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i2000_facel]
	shufps xmm3, xmm3, 0
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2000_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i2000_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i2000_ix], xmm0
	movaps [esp + i2000_iy], xmm1
	movaps [esp + i2000_iz], xmm2

	mov   [esp + i2000_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i2000_vctot], xmm4
	movaps [esp + i2000_fix], xmm4
	movaps [esp + i2000_fiy], xmm4
	movaps [esp + i2000_fiz], xmm4
	
	mov   eax, [ebp + i2000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2000_pos]
	mov   edi, [ebp + i2000_faction]	
	mov   eax, [ebp + i2000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i2000_innerk], edx    ;# number of innerloop atoms 
	jge   .i2000_unroll_loop
	jmp   .i2000_finish_inner
.i2000_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i2000_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i2000_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i2000_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i2000_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  

	mov esi, [ebp + i2000_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i2000_ix]
	movaps xmm5, [esp + i2000_iy]
	movaps xmm6, [esp + i2000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i2000_dx], xmm4
	movaps [esp + i2000_dy], xmm5
	movaps [esp + i2000_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 
	
	movaps xmm7, [esp + i2000_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i2000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i2000_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 

	subps  xmm6, [esp + i2000_crf] ;# xmm6=rinv+ krsq-crf 

	mulps  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	mulps  xmm7, [esp + i2000_two]

	subps  xmm0, xmm7
	mulps  xmm3, xmm0	
	mulps  xmm4, xmm3	;# xmm4=total fscal 
	addps  xmm6, [esp + i2000_vctot]

	movaps xmm0, [esp + i2000_dx]
	movaps xmm1, [esp + i2000_dy]
	movaps xmm2, [esp + i2000_dz]

	movaps [esp + i2000_vctot], xmm6

	mov    edi, [ebp + i2000_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i2000_fix]
	movaps xmm4, [esp + i2000_fiy]
	movaps xmm5, [esp + i2000_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i2000_fix], xmm3
	movaps [esp + i2000_fiy], xmm4
	movaps [esp + i2000_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i2000_innerk],  4
	jl    .i2000_finish_inner
	jmp   .i2000_unroll_loop
.i2000_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i2000_innerk],  4
	mov   edx, [esp + i2000_innerk]
	and   edx, 2
	jnz   .i2000_dopair
	jmp   .i2000_checksingle
.i2000_dopair:	
	mov esi, [ebp + i2000_charge]

    mov   ecx, [esp + i2000_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i2000_innerjjnr],  8

	xorps xmm3, xmm3
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 12 ;# 00001100 
	shufps xmm3, xmm3, 88 ;# 01011000 ;# xmm3(0,1) has the charges 	

	mov edi, [ebp + i2000_pos]	
				
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + i2000_iq]

	xorps  xmm7,xmm7
	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i2000_faction]
	;# move ix-iz to xmm4-xmm6 
	
	movaps xmm4, [esp + i2000_ix]
	movaps xmm5, [esp + i2000_iy]
	movaps xmm6, [esp + i2000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i2000_dx], xmm4
	movaps [esp + i2000_dy], xmm5
	movaps [esp + i2000_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	movaps xmm7, [esp + i2000_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i2000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i2000_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 

	subps  xmm6, [esp + i2000_crf] ;# xmm6=rinv+ krsq-crf 

	mulps  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq-crf) 
	mulps  xmm7, [esp + i2000_two]	

	subps  xmm0, xmm7
	mulps  xmm3, xmm0	

	mulps  xmm4, xmm3	;# xmm4=total fscal 
	addps  xmm6, [esp + i2000_vctot]

	movaps xmm0, [esp + i2000_dx]
	movaps xmm1, [esp + i2000_dy]
	movaps xmm2, [esp + i2000_dz]

	movaps [esp + i2000_vctot], xmm6

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i2000_fix]
	movaps xmm4, [esp + i2000_fiy]
	movaps xmm5, [esp + i2000_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i2000_fix], xmm3
	movaps [esp + i2000_fiy], xmm4
	movaps [esp + i2000_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i2000_checksingle:				
	mov   edx, [esp + i2000_innerk]
	and   edx, 1
	jnz    .i2000_dosingle
	jmp    .i2000_updateouterdata
.i2000_dosingle:			
	mov esi, [ebp + i2000_charge]
	mov edi, [ebp + i2000_pos]
	mov   ecx, [esp + i2000_innerjjnr]
	xorps xmm3, xmm3
	mov   eax, [ecx]
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 		
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + i2000_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i2000_ix]
	movaps xmm5, [esp + i2000_iy]
	movaps xmm6, [esp + i2000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i2000_dx], xmm4
	movaps [esp + i2000_dy], xmm5
	movaps [esp + i2000_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	movaps xmm7, [esp + i2000_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i2000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i2000_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 

	subps  xmm6, [esp + i2000_crf] ;# xmm6=rinv+ krsq-crf 

	mulps  xmm6, xmm3	;# xmm6=vcoul 
	mulps  xmm7, [esp + i2000_two]

	subps  xmm0, xmm7
	mulps  xmm3, xmm0
	mulps  xmm4, xmm3	;# xmm4=total fscal 
	addss  xmm6, [esp + i2000_vctot]
	
	mov    edi, [ebp + i2000_faction]

	movaps xmm0, [esp + i2000_dx]
	movaps xmm1, [esp + i2000_dy]
	movaps xmm2, [esp + i2000_dz]

	movss [esp + i2000_vctot], xmm6

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i2000_fix]
	movaps xmm4, [esp + i2000_fiy]
	movaps xmm5, [esp + i2000_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i2000_fix], xmm3
	movaps [esp + i2000_fiy], xmm4
	movaps [esp + i2000_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i2000_updateouterdata:
	mov   ecx, [esp + i2000_ii3]
	mov   edi, [ebp + i2000_faction]
	mov   esi, [ebp + i2000_fshift]
	mov   edx, [esp + i2000_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2000_fix]
	movaps xmm1, [esp + i2000_fiy]
	movaps xmm2, [esp + i2000_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i2000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i2000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i2000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i2000_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2000_nri]
	dec ecx
	jecxz .i2000_end
	;# not last, iterate once more!  
	mov [ebp + i2000_nri], ecx
	jmp .i2000_outer
.i2000_end:
	emms
	mov eax, [esp + i2000_salign]
	add esp, eax
	add esp,  276
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret





.globl inl1110_sse
.globl _inl1110_sse
inl1110_sse:	
_inl1110_sse:	
.equiv		i1110_nri,			8
.equiv		i1110_iinr,			12
.equiv		i1110_jindex,		16
.equiv		i1110_jjnr,			20
.equiv		i1110_shift,		24
.equiv		i1110_shiftvec,		28
.equiv		i1110_fshift,		32
.equiv		i1110_gid,			36
.equiv		i1110_pos,			40		
.equiv		i1110_faction,		44
.equiv		i1110_charge,		48
.equiv		i1110_facel,		52
.equiv		i1110_Vc,			56			
.equiv		i1110_type,			60
.equiv		i1110_ntype,		64
.equiv		i1110_nbfp,			68	
.equiv		i1110_Vnb,			72	
.equiv		i1110_nsatoms,      76		
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i1110_ix,	        0
.equiv		i1110_iy,	        16
.equiv		i1110_iz,           32
.equiv		i1110_iq,           48
.equiv		i1110_dx,           64
.equiv		i1110_dy,           80
.equiv		i1110_dz,           96	
.equiv		i1110_c6,           112
.equiv		i1110_c12,          128
.equiv		i1110_two,          144
.equiv		i1110_six,          160
.equiv		i1110_twelve,       176		 
.equiv		i1110_vctot,        192
.equiv		i1110_vnbtot,       208
.equiv		i1110_fix,          224
.equiv		i1110_fiy,          240
.equiv		i1110_fiz,          256
.equiv		i1110_half,         272
.equiv		i1110_three,        288
.equiv		i1110_is3,          304
.equiv		i1110_ii3,          308
.equiv		i1110_shX,	        312
.equiv		i1110_shY,          316
.equiv		i1110_shZ,          320
.equiv		i1110_ntia,	        324	
.equiv		i1110_innerjjnr0,   328
.equiv		i1110_innerk0,      332
.equiv		i1110_innerjjnr,    336
.equiv		i1110_innerk,       340
.equiv		i1110_salign,		344
.equiv		i1110_nsvdwc,       348
.equiv		i1110_nscoul,       352
.equiv		i1110_nsvdw,        356
.equiv		i1110_solnr,	    360		
	push ebp
	mov ebp,esp	
	push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 364		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1110_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movups xmm3, [sse_six]
	movups xmm4, [sse_twelve]
	movaps [esp + i1110_half],  xmm0
	movaps [esp + i1110_two], xmm1
	movaps [esp + i1110_three], xmm2
	movaps [esp + i1110_six],  xmm3
	movaps [esp + i1110_twelve], xmm4

	;# assume we have at least one i particle - start directly 	
i1110_outer:
	mov   eax, [ebp + i1110_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1110_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1110_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1110_shiftvec]   ;# eax = base of shiftvec[] 

	movlps xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 8] 
	movlps [esp + i1110_shX], xmm0
	movss [esp + i1110_shZ], xmm1

	mov   ecx, [ebp + i1110_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1110_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + i1110_nsatoms]
	add dword ptr [ebp + i1110_nsatoms],  12
	mov   ecx, [eax]	
	mov   edx, [eax + 4]
	mov   eax, [eax + 8]	
	sub   ecx, eax
	sub   eax, edx
	
	mov   [esp + i1110_nsvdwc], edx
	mov   [esp + i1110_nscoul], eax
	mov   [esp + i1110_nsvdw], ecx
		
	;# clear potential 
	xorps xmm4, xmm4
	movaps [esp + i1110_vctot], xmm4
	movaps [esp + i1110_vnbtot], xmm4
	mov   [esp + i1110_solnr],  ebx

	mov   eax, [ebp + i1110_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1110_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   eax, [ebp + i1110_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1110_innerjjnr0], eax     ;# pointer to jjnr[nj0] 
	mov   [esp + i1110_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + i1110_nsvdwc]
	cmp   ecx,  0
	jnz   i1110_mno_vdwc
	jmp   i1110_testcoul
i1110_mno_vdwc:
	mov   ebx,  [esp + i1110_solnr]
	inc   dword ptr [esp + i1110_solnr]

	mov   edx, [ebp + i1110_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i1110_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + i1110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i1110_ntype]
    shl   edx, 1
    mov   [esp + i1110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1110_pos]    ;# eax = base of pos[]  

	movss xmm0, [esp + i1110_shX]
	movss xmm1, [esp + i1110_shY]
	movss xmm2, [esp + i1110_shZ]
	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i1110_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i1110_ix], xmm0
	movaps [esp + i1110_iy], xmm1
	movaps [esp + i1110_iz], xmm2

	mov   [esp + i1110_ii3], ebx
	
	;# clear i forces 
	xorps xmm4, xmm4
	movaps [esp + i1110_fix], xmm4
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm4
	
	mov   ecx, [esp + i1110_innerjjnr0]
	mov   [esp + i1110_innerjjnr], ecx
	mov   edx, [esp + i1110_innerk0]
    sub   edx,  4
    mov   [esp + i1110_innerk], edx    ;# number of innerloop atoms 
	jge   i1110_unroll_vdwc_loop
	jmp   i1110_finish_vdwc_inner
i1110_unroll_vdwc_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i1110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i1110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i1110_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i1110_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i1110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i1110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i1110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i1110_c6], xmm4
	movaps [esp + i1110_c12], xmm6
	
	mov esi, [ebp + i1110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i1110_ix]
	movaps xmm5, [esp + i1110_iy]
	movaps xmm6, [esp + i1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1110_dx], xmm4
	movaps [esp + i1110_dy], xmm5
	movaps [esp + i1110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + i1110_c6]
	mulps  xmm2, [esp + i1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i1110_vnbtot]
	mulps  xmm1, [esp + i1110_six]
	mulps  xmm2, [esp + i1110_twelve]
	subps  xmm2, xmm1
	addps  xmm2, xmm3
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addps  xmm3, [esp + i1110_vctot]

	movaps xmm0, [esp + i1110_dx]
	movaps xmm1, [esp + i1110_dy]
	movaps xmm2, [esp + i1110_dz]

	movaps [esp + i1110_vctot], xmm3
	movaps [esp + i1110_vnbtot], xmm5

	mov    edi, [ebp + i1110_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1110_fix]
	movaps xmm4, [esp + i1110_fiy]
	movaps xmm5, [esp + i1110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1110_fix], xmm3
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1110_innerk],  4
	jl    i1110_finish_vdwc_inner
	jmp   i1110_unroll_vdwc_loop
i1110_finish_vdwc_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i1110_innerk],  4
	mov   edx, [esp + i1110_innerk]
	and   edx, 2
	jnz   i1110_dopair_vdwc
	jmp   i1110_checksingle_vdwc
i1110_dopair_vdwc:	
	mov esi, [ebp + i1110_charge]

    mov   ecx, [esp + i1110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i1110_innerjjnr],  8

	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mov esi, [ebp + i1110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i1110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i1110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i1110_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i1110_c6], xmm4
	movaps [esp + i1110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + i1110_iq]

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i1110_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1110_ix]
	movaps xmm5, [esp + i1110_iy]
	movaps xmm6, [esp + i1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1110_dx], xmm4
	movaps [esp + i1110_dy], xmm5
	movaps [esp + i1110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + i1110_c6]
	mulps  xmm2, [esp + i1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i1110_vnbtot]
	mulps  xmm1, [esp + i1110_six]
	mulps  xmm2, [esp + i1110_twelve]
	subps  xmm2, xmm1
	addps  xmm2, xmm3
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addps  xmm3, [esp + i1110_vctot]

	movaps xmm0, [esp + i1110_dx]
	movaps xmm1, [esp + i1110_dy]
	movaps xmm2, [esp + i1110_dz]

	movaps [esp + i1110_vctot], xmm3
	movaps [esp + i1110_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1110_fix]
	movaps xmm4, [esp + i1110_fiy]
	movaps xmm5, [esp + i1110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1110_fix], xmm3
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

i1110_checksingle_vdwc:				
	mov   edx, [esp + i1110_innerk]
	and   edx, 1
	jnz    i1110_dosingle_vdwc
	jmp    i1110_updateouterdata_vdwc
i1110_dosingle_vdwc:			
	mov esi, [ebp + i1110_charge]
	mov edi, [ebp + i1110_pos]
	mov   ecx, [esp + i1110_innerjjnr]
	mov   eax, [ecx]	
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	

	mov esi, [ebp + i1110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i1110_nbfp]
	shl ecx, 1
	add ecx, [esp + i1110_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i1110_c6], xmm4
	movaps [esp + i1110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + i1110_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1110_ix]
	movaps xmm5, [esp + i1110_iy]
	movaps xmm6, [esp + i1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1110_dx], xmm4
	movaps [esp + i1110_dy], xmm5
	movaps [esp + i1110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + i1110_c6]
	mulps  xmm2, [esp + i1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + i1110_vnbtot]
	mulps  xmm1, [esp + i1110_six]
	mulps  xmm2, [esp + i1110_twelve]
	subps  xmm2, xmm1
	addps  xmm2, xmm3
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addss  xmm3, [esp + i1110_vctot]
	
	mov    edi, [ebp + i1110_faction]

	movaps xmm0, [esp + i1110_dx]
	movaps xmm1, [esp + i1110_dy]
	movaps xmm2, [esp + i1110_dz]

	movss [esp + i1110_vctot], xmm3
	movss [esp + i1110_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1110_fix]
	movaps xmm4, [esp + i1110_fiy]
	movaps xmm5, [esp + i1110_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i1110_fix], xmm3
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
i1110_updateouterdata_vdwc:
	mov   ecx, [esp + i1110_ii3]
	mov   edi, [ebp + i1110_faction]
	mov   esi, [ebp + i1110_fshift]
	mov   edx, [esp + i1110_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1110_fix]
	movaps xmm1, [esp + i1110_fiy]
	movaps xmm2, [esp + i1110_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5


	;# loop back to mno 
	dec dword ptr [esp + i1110_nsvdwc]
	jz  i1110_testcoul
	jmp i1110_mno_vdwc
i1110_testcoul:
	mov  ecx, [esp + i1110_nscoul]
	cmp  ecx,  0
	jnz  i1110_mno_coul
	jmp  i1110_testvdw
i1110_mno_coul:
	mov   ebx,  [esp + i1110_solnr]
	inc   dword ptr [esp + i1110_solnr]

	movss xmm0, [esp + i1110_shX]
	movss xmm1, [esp + i1110_shY]
	movss xmm2, [esp + i1110_shZ]

	mov   edx, [ebp + i1110_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i1110_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1110_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i1110_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i1110_ix], xmm0
	movaps [esp + i1110_iy], xmm1
	movaps [esp + i1110_iz], xmm2

	mov   [esp + i1110_ii3], ebx
	
	;# clear i forces 
	xorps xmm4, xmm4
	movaps [esp + i1110_fix], xmm4
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm4

	mov   ecx, [esp + i1110_innerjjnr0]
	mov   [esp + i1110_innerjjnr], ecx
	mov   edx, [esp + i1110_innerk0]
    sub   edx,  4
    mov   [esp + i1110_innerk], edx    ;# number of innerloop atoms 
	jge   i1110_unroll_coul_loop
	jmp   i1110_finish_coul_inner

i1110_unroll_coul_loop:	
	;# quad-unrolled innerloop here 
	mov   edx, [esp + i1110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i1110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i1110_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm5, [esp + i1110_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000	      
	mov esi, [ebp + i1110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm5
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	mov    edi, [ebp + i1110_faction]

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i1110_ix]
	movaps xmm5, [esp + i1110_iy]
	movaps xmm6, [esp + i1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1110_dx], xmm4
	movaps [esp + i1110_dy], xmm5
	movaps [esp + i1110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 

	movaps xmm5, [esp + i1110_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm4, xmm3	;# xmm4=fscal 
	addps  xmm5, xmm3

	movaps xmm0, [esp + i1110_dx]
	movaps xmm1, [esp + i1110_dy]
	movaps xmm2, [esp + i1110_dz]

	movaps [esp + i1110_vctot], xmm5


	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1110_fix]
	movaps xmm4, [esp + i1110_fiy]
	movaps xmm5, [esp + i1110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1110_fix], xmm3
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1110_innerk],  4
	jl    i1110_finish_coul_inner
	jmp   i1110_unroll_coul_loop
i1110_finish_coul_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i1110_innerk],  4
	mov   edx, [esp + i1110_innerk]
	and   edx, 2
	jnz   i1110_dopair_coul
	jmp   i1110_checksingle_coul
i1110_dopair_coul:	
	mov esi, [ebp + i1110_charge]
	mov edi, [ebp + i1110_pos]
    mov   ecx, [esp + i1110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i1110_innerjjnr],  8

	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + i1110_iq]
	xorps  xmm7,xmm7
	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i1110_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1110_ix]
	movaps xmm5, [esp + i1110_iy]
	movaps xmm6, [esp + i1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1110_dx], xmm4
	movaps [esp + i1110_dy], xmm5
	movaps [esp + i1110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 

	movaps xmm5, [esp + i1110_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm4, xmm3	;# xmm4=fscal 
	addps  xmm5, xmm3

	movaps xmm0, [esp + i1110_dx]
	movaps xmm1, [esp + i1110_dy]
	movaps xmm2, [esp + i1110_dz]

	movaps [esp + i1110_vctot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1110_fix]
	movaps xmm4, [esp + i1110_fiy]
	movaps xmm5, [esp + i1110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1110_fix], xmm3
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm5
	;# update the fj's  
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001
	
	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

i1110_checksingle_coul:				
	mov   edx, [esp + i1110_innerk]
	and   edx, 1
	jnz    i1110_dosingle_coul
	jmp    i1110_updateouterdata_coul
i1110_dosingle_coul:			
	mov esi, [ebp + i1110_charge]
	mov edi, [ebp + i1110_pos]
	mov   ecx, [esp + i1110_innerjjnr]
	mov   eax, [ecx]	
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	
	
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + i1110_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1110_ix]
	movaps xmm5, [esp + i1110_iy]
	movaps xmm6, [esp + i1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1110_dx], xmm4
	movaps [esp + i1110_dy], xmm5
	movaps [esp + i1110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	mov    edi, [ebp + i1110_faction]
	movss xmm5, [esp + i1110_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm4, xmm3	;# xmm4=fscal 
	addps  xmm5, xmm3

	movaps xmm0, [esp + i1110_dx]
	movaps xmm1, [esp + i1110_dy]
	movaps xmm2, [esp + i1110_dz]

	movss [esp + i1110_vctot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1110_fix]
	movaps xmm4, [esp + i1110_fiy]
	movaps xmm5, [esp + i1110_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i1110_fix], xmm3
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm5
	;# update fj 	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

i1110_updateouterdata_coul:
	mov   ecx, [esp + i1110_ii3]
	mov   edi, [ebp + i1110_faction]
	mov   esi, [ebp + i1110_fshift]
	mov   edx, [esp + i1110_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1110_fix]
	movaps xmm1, [esp + i1110_fiy]
	movaps xmm2, [esp + i1110_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# loop back to mno 
	dec dword ptr [esp + i1110_nscoul]
	jz  i1110_testvdw
	jmp i1110_mno_coul
i1110_testvdw:
	mov  ecx, [esp + i1110_nsvdw]
	cmp  ecx,  0
	jnz  i1110_mno_vdw
	jmp  i1110_last_mno
i1110_mno_vdw:
	mov   ebx,  [esp + i1110_solnr]
	inc   dword ptr [esp + i1110_solnr]

    mov   edx, [ebp + i1110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i1110_ntype]
    shl   edx, 1
    mov   [esp + i1110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1110_pos]    ;# eax = base of pos[]  
	mov   [esp + i1110_ii3], ebx

	movss xmm0, [esp + i1110_shX]
	movss xmm1, [esp + i1110_shY]
	movss xmm2, [esp + i1110_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	xorps xmm4, xmm4
	movaps [esp + i1110_fix], xmm4
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm4

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i1110_ix], xmm0
	movaps [esp + i1110_iy], xmm1
	movaps [esp + i1110_iz], xmm2

	mov   ecx, [esp + i1110_innerjjnr0]
	mov   [esp + i1110_innerjjnr], ecx
	mov   edx, [esp + i1110_innerk0]
    sub   edx,  4
    mov   [esp + i1110_innerk], edx    ;# number of innerloop atoms 
	jge   i1110_unroll_vdw_loop
	jmp   i1110_finish_vdw_inner
i1110_unroll_vdw_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i1110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i1110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i1110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i1110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i1110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i1110_c6], xmm4
	movaps [esp + i1110_c12], xmm6
	
	mov esi, [ebp + i1110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i1110_ix]
	movaps xmm5, [esp + i1110_iy]
	movaps xmm6, [esp + i1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1110_dx], xmm4
	movaps [esp + i1110_dy], xmm5
	movaps [esp + i1110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i1110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i1110_c6]
	mulps  xmm2, [esp + i1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i1110_vnbtot]
	mulps  xmm1, [esp + i1110_six]
	mulps  xmm2, [esp + i1110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 

	movaps xmm0, [esp + i1110_dx]
	movaps xmm1, [esp + i1110_dy]
	movaps xmm2, [esp + i1110_dz]

	movaps [esp + i1110_vnbtot], xmm5

	mov    edi, [ebp + i1110_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1110_fix]
	movaps xmm4, [esp + i1110_fiy]
	movaps xmm5, [esp + i1110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1110_fix], xmm3
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1110_innerk],  4
	jl    i1110_finish_vdw_inner
	jmp   i1110_unroll_vdw_loop
i1110_finish_vdw_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i1110_innerk],  4
	mov   edx, [esp + i1110_innerk]
	and   edx, 2
	jnz   i1110_dopair_vdw
	jmp   i1110_checksingle_vdw
i1110_dopair_vdw:	

    mov   ecx, [esp + i1110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i1110_innerjjnr],  8

	mov esi, [ebp + i1110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i1110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i1110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i1110_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i1110_c6], xmm4
	movaps [esp + i1110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	


	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i1110_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1110_ix]
	movaps xmm5, [esp + i1110_iy]
	movaps xmm6, [esp + i1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1110_dx], xmm4
	movaps [esp + i1110_dy], xmm5
	movaps [esp + i1110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 


	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i1110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i1110_c6]
	mulps  xmm2, [esp + i1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i1110_vnbtot]
	mulps  xmm1, [esp + i1110_six]
	mulps  xmm2, [esp + i1110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 

	movaps xmm0, [esp + i1110_dx]
	movaps xmm1, [esp + i1110_dy]
	movaps xmm2, [esp + i1110_dz]

	movaps [esp + i1110_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1110_fix]
	movaps xmm4, [esp + i1110_fiy]
	movaps xmm5, [esp + i1110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i1110_fix], xmm3
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

i1110_checksingle_vdw:				
	mov   edx, [esp + i1110_innerk]
	and   edx, 1
	jnz    i1110_dosingle_vdw
	jmp    i1110_updateouterdata_vdw
i1110_dosingle_vdw:			
	mov edi, [ebp + i1110_pos]
	mov   ecx, [esp + i1110_innerjjnr]
	mov   eax, [ecx]		

	mov esi, [ebp + i1110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i1110_nbfp]
	shl ecx, 1
	add ecx, [esp + i1110_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i1110_c6], xmm4
	movaps [esp + i1110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i1110_ix]
	movaps xmm5, [esp + i1110_iy]
	movaps xmm6, [esp + i1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1110_dx], xmm4
	movaps [esp + i1110_dy], xmm5
	movaps [esp + i1110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i1110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i1110_c6]
	mulps  xmm2, [esp + i1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + i1110_vnbtot]
	mulps  xmm1, [esp + i1110_six]
	mulps  xmm2, [esp + i1110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	
	mov    edi, [ebp + i1110_faction]

	movaps xmm0, [esp + i1110_dx]
	movaps xmm1, [esp + i1110_dy]
	movaps xmm2, [esp + i1110_dz]

	movss [esp + i1110_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i1110_fix]
	movaps xmm4, [esp + i1110_fiy]
	movaps xmm5, [esp + i1110_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i1110_fix], xmm3
	movaps [esp + i1110_fiy], xmm4
	movaps [esp + i1110_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
i1110_updateouterdata_vdw:
	mov   ecx, [esp + i1110_ii3]
	mov   edi, [ebp + i1110_faction]
	mov   esi, [ebp + i1110_fshift]
	mov   edx, [esp + i1110_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1110_fix]
	movaps xmm1, [esp + i1110_fiy]
	movaps xmm2, [esp + i1110_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5
	
	;# loop back to mno 
	dec dword ptr [esp + i1110_nsvdw]
	jz  i1110_last_mno
	jmp i1110_mno_vdw
i1110_last_mno:	
	;# get group index for i particle 
	mov   edx, [ebp + i1110_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i1110_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i1110_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i1110_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i1110_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i1110_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i1110_nri]
	dec ecx
	jecxz i1110_end
	;# not last, iterate once more!  
	mov [ebp + i1110_nri], ecx
	jmp i1110_outer
i1110_end:
	emms
	mov eax, [esp + i1110_salign]
	add esp, eax
	add esp, 364
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl inl1120_sse
.globl _inl1120_sse
inl1120_sse:	
_inl1120_sse:	
.equiv		i1120_nri,			8
.equiv		i1120_iinr,			12
.equiv		i1120_jindex,		16
.equiv		i1120_jjnr,			20
.equiv		i1120_shift,		24
.equiv		i1120_shiftvec,		28
.equiv		i1120_fshift,		32
.equiv		i1120_gid,			36
.equiv		i1120_pos,			40		
.equiv		i1120_faction,		44
.equiv		i1120_charge,		48
.equiv		i1120_facel,		52
.equiv		i1120_Vc,			56			
.equiv		i1120_type,			60
.equiv		i1120_ntype,		64
.equiv		i1120_nbfp,			68	
.equiv		i1120_Vnb,			72	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i1120_ixO,	        0
.equiv		i1120_iyO,	        16
.equiv		i1120_izO,          32
.equiv		i1120_ixH1,	        48
.equiv		i1120_iyH1,	        64
.equiv		i1120_izH1,         80
.equiv		i1120_ixH2,	        96
.equiv		i1120_iyH2,	        112
.equiv		i1120_izH2,         128
.equiv		i1120_iqO,          144 
.equiv		i1120_iqH,          160 
.equiv		i1120_dxO,          176
.equiv		i1120_dyO,          192
.equiv		i1120_dzO,          208	
.equiv		i1120_dxH1,         224
.equiv		i1120_dyH1,         240
.equiv		i1120_dzH1,         256	
.equiv		i1120_dxH2,         272
.equiv		i1120_dyH2,         288
.equiv		i1120_dzH2,         304	
.equiv		i1120_qqO,          320
.equiv		i1120_qqH,          336
.equiv		i1120_c6,           352
.equiv		i1120_c12,          368
.equiv		i1120_six,          384
.equiv		i1120_twelve,       400		 
.equiv		i1120_vctot,        416
.equiv		i1120_vnbtot,       432
.equiv		i1120_fixO,         448
.equiv		i1120_fiyO,         464
.equiv		i1120_fizO,         480
.equiv		i1120_fixH1,        496
.equiv		i1120_fiyH1,        512
.equiv		i1120_fizH1,        528
.equiv		i1120_fixH2,        544
.equiv		i1120_fiyH2,        560
.equiv		i1120_fizH2,        576
.equiv		i1120_fjx,	        592
.equiv		i1120_fjy,          608
.equiv		i1120_fjz,          624
.equiv		i1120_half,         640
.equiv		i1120_three,        656
.equiv		i1120_is3,          672
.equiv		i1120_ii3,          676
.equiv		i1120_ntia,	        680	
.equiv		i1120_innerjjnr,    684
.equiv		i1120_innerk,       688
.equiv		i1120_salign,       692								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 696		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1120_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movups xmm2, [sse_six]
	movups xmm3, [sse_twelve]
	movaps [esp + i1120_half],  xmm0
	movaps [esp + i1120_three], xmm1
	movaps [esp + i1120_six],  xmm2
	movaps [esp + i1120_twelve], xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i1120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1120_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + i1120_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + i1120_iqO], xmm3
	movaps [esp + i1120_iqH], xmm4
	
	mov   edx, [ebp + i1120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + i1120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + i1120_ntia], ecx		
i1120_outer:
	mov   eax, [ebp + i1120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1120_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1120_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i1120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1120_pos]    ;# eax = base of pos[]  
	mov   [esp + i1120_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i1120_ixO], xmm3
	movaps [esp + i1120_iyO], xmm4
	movaps [esp + i1120_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i1120_ixH1], xmm0
	movaps [esp + i1120_iyH1], xmm1
	movaps [esp + i1120_izH1], xmm2
	movaps [esp + i1120_ixH2], xmm3
	movaps [esp + i1120_iyH2], xmm4
	movaps [esp + i1120_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i1120_vctot], xmm4
	movaps [esp + i1120_vnbtot], xmm4
	movaps [esp + i1120_fixO], xmm4
	movaps [esp + i1120_fiyO], xmm4
	movaps [esp + i1120_fizO], xmm4
	movaps [esp + i1120_fixH1], xmm4
	movaps [esp + i1120_fiyH1], xmm4
	movaps [esp + i1120_fizH1], xmm4
	movaps [esp + i1120_fixH2], xmm4
	movaps [esp + i1120_fiyH2], xmm4
	movaps [esp + i1120_fizH2], xmm4
	
	mov   eax, [ebp + i1120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1120_pos]
	mov   edi, [ebp + i1120_faction]	
	mov   eax, [ebp + i1120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i1120_innerk], edx    ;# number of innerloop atoms 
	jge   i1120_unroll_loop
	jmp   i1120_odd_inner
i1120_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + i1120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + i1120_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i1120_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + i1120_iqO]
	mulps  xmm4, [esp + i1120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx

	movaps  [esp + i1120_qqO], xmm3
	movaps  [esp + i1120_qqH], xmm4
	
	mov esi, [ebp + i1120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i1120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i1120_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i1120_c6], xmm4
	movaps [esp + i1120_c12], xmm6

	mov esi, [ebp + i1120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + i1120_ixO]
	movaps xmm5, [esp + i1120_iyO]
	movaps xmm6, [esp + i1120_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1120_dxO], xmm4
	movaps [esp + i1120_dyO], xmm5
	movaps [esp + i1120_dzO], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + i1120_ixH1]
	movaps xmm5, [esp + i1120_iyH1]
	movaps xmm6, [esp + i1120_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i1120_dxH1], xmm4
	movaps [esp + i1120_dyH1], xmm5
	movaps [esp + i1120_dzH1], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + i1120_ixH2]
	movaps xmm4, [esp + i1120_iyH2]
	movaps xmm5, [esp + i1120_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# store dr 
	movaps [esp + i1120_dxH2], xmm3
	movaps [esp + i1120_dyH2], xmm4
	movaps [esp + i1120_dzH2], xmm5
	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - seed in xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i1120_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i1120_half]
	movaps  xmm7, xmm4	;# rinvO in xmm7 
	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i1120_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i1120_half]
	movaps  xmm6, xmm4	;# rinvH1 in xmm6 
	;# rsqH2 - seed in xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i1120_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i1120_half]
	movaps  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movaps  xmm4, xmm7	
	mulps   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm7, [esp + i1120_qqO]	;# xmm7=vcoul 
	
	mulps  xmm1, [esp + i1120_c6]
	mulps  xmm2, [esp + i1120_c12]
	movaps xmm3, xmm2
	subps  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addps  xmm3, [esp + i1120_vnbtot]
	mulps  xmm1, [esp + i1120_six]
	mulps  xmm2, [esp + i1120_twelve]
	subps  xmm2, xmm1
	addps  xmm2, xmm7	
	mulps  xmm4, xmm2	;# total fsO in xmm4 

	addps  xmm7, [esp + i1120_vctot]
	
	movaps [esp + i1120_vnbtot], xmm3
	movaps [esp + i1120_vctot], xmm7

	movaps xmm0, [esp + i1120_dxO]
	movaps xmm1, [esp + i1120_dyO]
	movaps xmm2, [esp + i1120_dzO]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update O forces 
	movaps xmm3, [esp + i1120_fixO]
	movaps xmm4, [esp + i1120_fiyO]
	movaps xmm7, [esp + i1120_fizO]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i1120_fixO], xmm3
	movaps [esp + i1120_fiyO], xmm4
	movaps [esp + i1120_fizO], xmm7
	;# update j forces with water O 
	movaps [esp + i1120_fjx], xmm0
	movaps [esp + i1120_fjy], xmm1
	movaps [esp + i1120_fjz], xmm2

	;# H1 interactions 
	movaps  xmm4, xmm6	
	mulps   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	mulps  xmm6, [esp + i1120_qqH]	;# xmm6=vcoul 
	mulps  xmm4, xmm6		;# total fsH1 in xmm4 
	
	addps  xmm6, [esp + i1120_vctot]

	movaps xmm0, [esp + i1120_dxH1]
	movaps xmm1, [esp + i1120_dyH1]
	movaps xmm2, [esp + i1120_dzH1]
	movaps [esp + i1120_vctot], xmm6
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H1 forces 
	movaps xmm3, [esp + i1120_fixH1]
	movaps xmm4, [esp + i1120_fiyH1]
	movaps xmm7, [esp + i1120_fizH1]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i1120_fixH1], xmm3
	movaps [esp + i1120_fiyH1], xmm4
	movaps [esp + i1120_fizH1], xmm7
	;# update j forces with water H1 
	addps  xmm0, [esp + i1120_fjx]
	addps  xmm1, [esp + i1120_fjy]
	addps  xmm2, [esp + i1120_fjz]
	movaps [esp + i1120_fjx], xmm0
	movaps [esp + i1120_fjy], xmm1
	movaps [esp + i1120_fjz], xmm2

	;# H2 interactions 
	movaps  xmm4, xmm5	
	mulps   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	mulps  xmm5, [esp + i1120_qqH]	;# xmm5=vcoul 
	mulps  xmm4, xmm5		;# total fsH1 in xmm4 
	
	addps  xmm5, [esp + i1120_vctot]

	movaps xmm0, [esp + i1120_dxH2]
	movaps xmm1, [esp + i1120_dyH2]
	movaps xmm2, [esp + i1120_dzH2]
	movaps [esp + i1120_vctot], xmm5
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H2 forces 
	movaps xmm3, [esp + i1120_fixH2]
	movaps xmm4, [esp + i1120_fiyH2]
	movaps xmm7, [esp + i1120_fizH2]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i1120_fixH2], xmm3
	movaps [esp + i1120_fiyH2], xmm4
	movaps [esp + i1120_fizH2], xmm7

	mov edi, [ebp + i1120_faction]
	;# update j forces 
	addps xmm0, [esp + i1120_fjx]
	addps xmm1, [esp + i1120_fjy]
	addps xmm2, [esp + i1120_fjz]

	movlps xmm4, [edi + eax*4]
	movlps xmm7, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm7, [edi + edx*4]
	
	movaps xmm3, xmm4
	shufps xmm3, xmm7, 136  ;# 10001000
	shufps xmm4, xmm7, 221  ;# 11011101			      
	;# xmm3 has fjx, xmm4 has fjy 
	subps xmm3, xmm0
	subps xmm4, xmm1
	;# unpack them back for storing 
	movaps xmm7, xmm3
	unpcklps xmm7, xmm4
	unpckhps xmm3, xmm4	
	movlps [edi + eax*4], xmm7
	movlps [edi + ecx*4], xmm3
	movhps [edi + ebx*4], xmm7
	movhps [edi + edx*4], xmm3
	;# finally z forces 
	movss  xmm0, [edi + eax*4 + 8]
	movss  xmm1, [edi + ebx*4 + 8]
	movss  xmm3, [edi + ecx*4 + 8]
	movss  xmm4, [edi + edx*4 + 8]
	subss  xmm0, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm1, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm3, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm4, xmm2
	movss  [edi + eax*4 + 8], xmm0
	movss  [edi + ebx*4 + 8], xmm1
	movss  [edi + ecx*4 + 8], xmm3
	movss  [edi + edx*4 + 8], xmm4
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1120_innerk],  4
	jl    i1120_odd_inner
	jmp   i1120_unroll_loop
i1120_odd_inner:	
	add dword ptr [esp + i1120_innerk],  4
	jnz   i1120_odd_loop
	jmp   i1120_updateouterdata
i1120_odd_loop:
	mov   edx, [esp + i1120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i1120_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + i1120_iqO]
	mov esi, [ebp + i1120_charge] 
	movhps xmm4, [esp + i1120_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + i1120_qqO], xmm3	;# use oxygen qq for storage 

	xorps xmm6, xmm6
	mov esi, [ebp + i1120_type]
	mov ebx, [esi + eax*4]
	mov esi, [ebp + i1120_nbfp]
	shl ebx, 1	
	add ebx, [esp + i1120_ntia]
	movlps xmm6, [esi + ebx*4]
	movaps xmm7, xmm6
	shufps xmm6, xmm6, 252  ;# 11111100
	shufps xmm7, xmm7, 253  ;# 11111101
	movaps [esp + i1120_c6], xmm6
	movaps [esp + i1120_c12], xmm7

	mov esi, [ebp + i1120_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + i1120_ixO]
	movss xmm4, [esp + i1120_iyO]
	movss xmm5, [esp + i1120_izO]
		
	movlps xmm6, [esp + i1120_ixH1]
	movlps xmm7, [esp + i1120_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + i1120_iyH1]
	movlps xmm7, [esp + i1120_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + i1120_izH1]
	movlps xmm7, [esp + i1120_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	
	movaps [esp + i1120_dxO], xmm3
	movaps [esp + i1120_dyO], xmm4
	movaps [esp + i1120_dzO], xmm5

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i1120_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i1120_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000

	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulss  xmm1, xmm4
	movaps xmm3, [esp + i1120_qqO]
	mulss  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulss  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + i1120_c6]
	mulps  xmm2, [esp + i1120_c12]
	movaps xmm5, xmm2
	subss  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i1120_vnbtot]
	mulss  xmm1, [esp + i1120_six]
	mulss  xmm2, [esp + i1120_twelve]
	subss  xmm2, xmm1
	addps  xmm2, xmm3
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addps  xmm3, [esp + i1120_vctot]

	movaps xmm0, [esp + i1120_dxO]
	movaps xmm1, [esp + i1120_dyO]
	movaps xmm2, [esp + i1120_dzO]

	movaps [esp + i1120_vctot], xmm3
	movaps [esp + i1120_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	movss  xmm3, [esp + i1120_fixO]	
	movss  xmm4, [esp + i1120_fiyO]	
	movss  xmm5, [esp + i1120_fizO]	
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esp + i1120_fixO], xmm3	
	movss  [esp + i1120_fiyO], xmm4	
	movss  [esp + i1120_fizO], xmm5	;# updated the O force now do the H's 
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	shufps xmm3, xmm3, 230 ;# 11100110	;# shift right 
	shufps xmm4, xmm4, 230 ;# 11100110
	shufps xmm5, xmm5, 230 ;# 11100110
	addss  xmm3, [esp + i1120_fixH1]
	addss  xmm4, [esp + i1120_fiyH1]
	addss  xmm5, [esp + i1120_fizH1]
	movss  [esp + i1120_fixH1], xmm3	
	movss  [esp + i1120_fiyH1], xmm4	
	movss  [esp + i1120_fizH1], xmm5	;# updated the H1 force 

	mov edi, [ebp + i1120_faction]
	shufps xmm3, xmm3, 231 ;# 11100111	;# shift right 
	shufps xmm4, xmm4, 231 ;# 11100111
	shufps xmm5, xmm5, 231 ;# 11100111
	addss  xmm3, [esp + i1120_fixH2]
	addss  xmm4, [esp + i1120_fiyH2]
	addss  xmm5, [esp + i1120_fizH2]
	movss  [esp + i1120_fixH2], xmm3	
	movss  [esp + i1120_fiyH2], xmm4	
	movss  [esp + i1120_fizH2], xmm5	;# updated the H2 force 

	;# the fj's - start by accumulating the tx/ty/tz force in xmm0, xmm1 
	xorps  xmm5, xmm5
	movaps xmm3, xmm0
	movlps xmm6, [edi + eax*4]
	movss  xmm7, [edi + eax*4 + 8]
	unpcklps xmm3, xmm1
	movlhps  xmm3, xmm5	
	unpckhps xmm0, xmm1		
	addps    xmm0, xmm3
	movhlps  xmm3, xmm0	
	addps    xmm0, xmm3	;# x,y sum in xmm0 

	movhlps  xmm1, xmm2
	addss    xmm2, xmm1
	shufps   xmm1, xmm1, 1 
	addss    xmm2, xmm1    ;# z sum in xmm2 
	subps    xmm6, xmm0
	subss    xmm7, xmm2
	
	movlps [edi + eax*4],     xmm6
	movss  [edi + eax*4 + 8], xmm7

	dec dword ptr [esp + i1120_innerk]
	jz    i1120_updateouterdata
	jmp   i1120_odd_loop
i1120_updateouterdata:
	mov   ecx, [esp + i1120_ii3]
	mov   edi, [ebp + i1120_faction]
	mov   esi, [ebp + i1120_fshift]
	mov   edx, [esp + i1120_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1120_fixO]
	movaps xmm1, [esp + i1120_fiyO]
	movaps xmm2, [esp + i1120_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1120_fixH1]
	movaps xmm1, [esp + i1120_fiyH1]
	movaps xmm2, [esp + i1120_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1120_fixH2]
	movaps xmm1, [esp + i1120_fiyH2]
	movaps xmm2, [esp + i1120_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	mov   edx, [ebp + i1120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i1120_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i1120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + i1120_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i1120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i1120_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i1120_nri]
	dec ecx
	jecxz i1120_end
	;# not last, iterate once more!  
	mov [ebp + i1120_nri], ecx
	jmp i1120_outer
i1120_end:
	emms
	mov eax, [esp + i1120_salign]
	add esp, eax
	add esp, 696
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl inl1130_sse
.globl _inl1130_sse
inl1130_sse:	
_inl1130_sse:	
.equiv		i1130_nri,			8
.equiv		i1130_iinr,			12
.equiv		i1130_jindex,		16
.equiv		i1130_jjnr,			20
.equiv		i1130_shift,		24
.equiv		i1130_shiftvec,		28
.equiv		i1130_fshift,		32
.equiv		i1130_gid,			36
.equiv		i1130_pos,			40		
.equiv		i1130_faction,		44
.equiv		i1130_charge,		48
.equiv		i1130_facel,		52
.equiv		i1130_Vc,			56			
.equiv		i1130_type,			60
.equiv		i1130_ntype,		64
.equiv		i1130_nbfp,			68
.equiv		i1130_Vnb,			72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i1130_ixO,			0
.equiv		i1130_iyO,			16
.equiv		i1130_izO,			32
.equiv		i1130_ixH1,			48
.equiv		i1130_iyH1,			64
.equiv		i1130_izH1,			80
.equiv		i1130_ixH2,			96
.equiv		i1130_iyH2,			112
.equiv		i1130_izH2,			128
.equiv		i1130_jxO,			144
.equiv		i1130_jyO,			160
.equiv		i1130_jzO,			176
.equiv		i1130_jxH1,			192
.equiv		i1130_jyH1,			208
.equiv		i1130_jzH1,			224
.equiv		i1130_jxH2,			240
.equiv		i1130_jyH2,			256
.equiv		i1130_jzH2,			272
.equiv		i1130_dxOO,			288
.equiv		i1130_dyOO,			304
.equiv		i1130_dzOO,			320	
.equiv		i1130_dxOH1,		336
.equiv		i1130_dyOH1,		352
.equiv		i1130_dzOH1,		368	
.equiv		i1130_dxOH2,		384
.equiv		i1130_dyOH2,		400
.equiv		i1130_dzOH2,		416	
.equiv		i1130_dxH1O,		432
.equiv		i1130_dyH1O,		448
.equiv		i1130_dzH1O,		464	
.equiv		i1130_dxH1H1,		480
.equiv		i1130_dyH1H1,		496
.equiv		i1130_dzH1H1,		512	
.equiv		i1130_dxH1H2,		528
.equiv		i1130_dyH1H2,		544
.equiv		i1130_dzH1H2,		560	
.equiv		i1130_dxH2O,		576
.equiv		i1130_dyH2O,		592
.equiv		i1130_dzH2O,		608	
.equiv		i1130_dxH2H1,		624
.equiv		i1130_dyH2H1,		640
.equiv		i1130_dzH2H1,		656	
.equiv		i1130_dxH2H2,		672
.equiv		i1130_dyH2H2,		688
.equiv		i1130_dzH2H2,		704
.equiv		i1130_qqOO,			720
.equiv		i1130_qqOH,			736
.equiv		i1130_qqHH,			752
.equiv		i1130_c6,			768
.equiv		i1130_c12,			784
.equiv		i1130_six,			800
.equiv		i1130_twelve,		816		 
.equiv		i1130_vctot,		832
.equiv		i1130_vnbtot,		848
.equiv		i1130_fixO,			864
.equiv		i1130_fiyO,			880
.equiv		i1130_fizO,			896
.equiv		i1130_fixH1,		912
.equiv		i1130_fiyH1,		928
.equiv		i1130_fizH1,		944
.equiv		i1130_fixH2,		960
.equiv		i1130_fiyH2,		976
.equiv		i1130_fizH2,		992
.equiv		i1130_fjxO,			1008
.equiv		i1130_fjyO,			1024
.equiv		i1130_fjzO,			1040
.equiv		i1130_fjxH1,		1056
.equiv		i1130_fjyH1,		1072
.equiv		i1130_fjzH1,		1088
.equiv		i1130_fjxH2,		1104
.equiv		i1130_fjyH2,		1120
.equiv		i1130_fjzH2,		1136
.equiv		i1130_half,			1152
.equiv		i1130_three,		1168
.equiv		i1130_rsqOO,		1184
.equiv		i1130_rsqOH1,		1200
.equiv		i1130_rsqOH2,		1216
.equiv		i1130_rsqH1O,		1232
.equiv		i1130_rsqH1H1,		1248
.equiv		i1130_rsqH1H2,		1264
.equiv		i1130_rsqH2O,		1280
.equiv		i1130_rsqH2H1,		1296
.equiv		i1130_rsqH2H2,		1312
.equiv		i1130_rinvOO,		1328
.equiv		i1130_rinvOH1,		1344
.equiv		i1130_rinvOH2,		1360
.equiv		i1130_rinvH1O,		1376
.equiv		i1130_rinvH1H1,		1392
.equiv		i1130_rinvH1H2,		1408
.equiv		i1130_rinvH2O,		1424
.equiv		i1130_rinvH2H1,		1440
.equiv		i1130_rinvH2H2,		1456
.equiv		i1130_is3,			1472
.equiv		i1130_ii3,			1476
.equiv		i1130_innerjjnr,	1480
.equiv		i1130_innerk,		1484
.equiv		i1130_salign,		1488
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1492		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i1130_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movups xmm2, [sse_six]
	movups xmm3, [sse_twelve]
	movaps [esp + i1130_half],  xmm0
	movaps [esp + i1130_three], xmm1
	movaps [esp + i1130_six],  xmm2
	movaps [esp + i1130_twelve], xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i1130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i1130_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + i1130_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i1130_qqOO], xmm3
	movaps [esp + i1130_qqOH], xmm4
	movaps [esp + i1130_qqHH], xmm5
		
	xorps xmm0, xmm0
	mov   edx, [ebp + i1130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + i1130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + i1130_nbfp]
	movlps xmm0, [eax + edx*4] 
	movaps xmm1, xmm0
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 85  ;# 01010101
	movaps [esp + i1130_c6], xmm0
	movaps [esp + i1130_c12], xmm1

i1130_outer:
	mov   eax, [ebp + i1130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i1130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i1130_is3],ebx    	;# store is3 

	mov   eax, [ebp + i1130_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i1130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i1130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i1130_pos]    ;# eax = base of pos[]  
	mov   [esp + i1130_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i1130_ixO], xmm3
	movaps [esp + i1130_iyO], xmm4
	movaps [esp + i1130_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i1130_ixH1], xmm0
	movaps [esp + i1130_iyH1], xmm1
	movaps [esp + i1130_izH1], xmm2
	movaps [esp + i1130_ixH2], xmm3
	movaps [esp + i1130_iyH2], xmm4
	movaps [esp + i1130_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i1130_vctot], xmm4
	movaps [esp + i1130_vnbtot], xmm4
	movaps [esp + i1130_fixO], xmm4
	movaps [esp + i1130_fiyO], xmm4
	movaps [esp + i1130_fizO], xmm4
	movaps [esp + i1130_fixH1], xmm4
	movaps [esp + i1130_fiyH1], xmm4
	movaps [esp + i1130_fizH1], xmm4
	movaps [esp + i1130_fixH2], xmm4
	movaps [esp + i1130_fiyH2], xmm4
	movaps [esp + i1130_fizH2], xmm4
	
	mov   eax, [ebp + i1130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i1130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i1130_pos]
	mov   edi, [ebp + i1130_faction]	
	mov   eax, [ebp + i1130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i1130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i1130_innerk], edx    ;# number of innerloop atoms 
	jge   i1130_unroll_loop
	jmp   i1130_single_check
i1130_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i1130_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + i1130_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i1130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d 
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd 
	movaps [esp + i1130_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + i1130_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + i1130_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + i1130_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + i1130_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + i1130_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + i1130_jzO],  xmm0
	movaps [esp + i1130_jzH1],  xmm1
	movaps [esp + i1130_jzH2],  xmm2

	movaps xmm0, [esp + i1130_ixO]
	movaps xmm1, [esp + i1130_iyO]
	movaps xmm2, [esp + i1130_izO]
	movaps xmm3, [esp + i1130_ixO]
	movaps xmm4, [esp + i1130_iyO]
	movaps xmm5, [esp + i1130_izO]
	subps  xmm0, [esp + i1130_jxO]
	subps  xmm1, [esp + i1130_jyO]
	subps  xmm2, [esp + i1130_jzO]
	subps  xmm3, [esp + i1130_jxH1]
	subps  xmm4, [esp + i1130_jyH1]
	subps  xmm5, [esp + i1130_jzH1]
	movaps [esp + i1130_dxOO], xmm0
	movaps [esp + i1130_dyOO], xmm1
	movaps [esp + i1130_dzOO], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i1130_dxOH1], xmm3
	movaps [esp + i1130_dyOH1], xmm4
	movaps [esp + i1130_dzOH1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i1130_rsqOO], xmm0
	movaps [esp + i1130_rsqOH1], xmm3

	movaps xmm0, [esp + i1130_ixO]
	movaps xmm1, [esp + i1130_iyO]
	movaps xmm2, [esp + i1130_izO]
	movaps xmm3, [esp + i1130_ixH1]
	movaps xmm4, [esp + i1130_iyH1]
	movaps xmm5, [esp + i1130_izH1]
	subps  xmm0, [esp + i1130_jxH2]
	subps  xmm1, [esp + i1130_jyH2]
	subps  xmm2, [esp + i1130_jzH2]
	subps  xmm3, [esp + i1130_jxO]
	subps  xmm4, [esp + i1130_jyO]
	subps  xmm5, [esp + i1130_jzO]
	movaps [esp + i1130_dxOH2], xmm0
	movaps [esp + i1130_dyOH2], xmm1
	movaps [esp + i1130_dzOH2], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i1130_dxH1O], xmm3
	movaps [esp + i1130_dyH1O], xmm4
	movaps [esp + i1130_dzH1O], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i1130_rsqOH2], xmm0
	movaps [esp + i1130_rsqH1O], xmm3

	movaps xmm0, [esp + i1130_ixH1]
	movaps xmm1, [esp + i1130_iyH1]
	movaps xmm2, [esp + i1130_izH1]
	movaps xmm3, [esp + i1130_ixH1]
	movaps xmm4, [esp + i1130_iyH1]
	movaps xmm5, [esp + i1130_izH1]
	subps  xmm0, [esp + i1130_jxH1]
	subps  xmm1, [esp + i1130_jyH1]
	subps  xmm2, [esp + i1130_jzH1]
	subps  xmm3, [esp + i1130_jxH2]
	subps  xmm4, [esp + i1130_jyH2]
	subps  xmm5, [esp + i1130_jzH2]
	movaps [esp + i1130_dxH1H1], xmm0
	movaps [esp + i1130_dyH1H1], xmm1
	movaps [esp + i1130_dzH1H1], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i1130_dxH1H2], xmm3
	movaps [esp + i1130_dyH1H2], xmm4
	movaps [esp + i1130_dzH1H2], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i1130_rsqH1H1], xmm0
	movaps [esp + i1130_rsqH1H2], xmm3

	movaps xmm0, [esp + i1130_ixH2]
	movaps xmm1, [esp + i1130_iyH2]
	movaps xmm2, [esp + i1130_izH2]
	movaps xmm3, [esp + i1130_ixH2]
	movaps xmm4, [esp + i1130_iyH2]
	movaps xmm5, [esp + i1130_izH2]
	subps  xmm0, [esp + i1130_jxO]
	subps  xmm1, [esp + i1130_jyO]
	subps  xmm2, [esp + i1130_jzO]
	subps  xmm3, [esp + i1130_jxH1]
	subps  xmm4, [esp + i1130_jyH1]
	subps  xmm5, [esp + i1130_jzH1]
	movaps [esp + i1130_dxH2O], xmm0
	movaps [esp + i1130_dyH2O], xmm1
	movaps [esp + i1130_dzH2O], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i1130_dxH2H1], xmm3
	movaps [esp + i1130_dyH2H1], xmm4
	movaps [esp + i1130_dzH2H1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + i1130_rsqH2O], xmm0
	movaps [esp + i1130_rsqH2H1], xmm4

	movaps xmm0, [esp + i1130_ixH2]
	movaps xmm1, [esp + i1130_iyH2]
	movaps xmm2, [esp + i1130_izH2]
	subps  xmm0, [esp + i1130_jxH2]
	subps  xmm1, [esp + i1130_jyH2]
	subps  xmm2, [esp + i1130_jzH2]
	movaps [esp + i1130_dxH2H2], xmm0
	movaps [esp + i1130_dyH2H2], xmm1
	movaps [esp + i1130_dzH2H2], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + i1130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i1130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i1130_half] ;# rinvH2H2 
	mulps   xmm7, [esp + i1130_half] ;# rinvH2H1 
	movaps  [esp + i1130_rinvH2H2], xmm3
	movaps  [esp + i1130_rinvH2H1], xmm7
	
	rsqrtps xmm1, [esp + i1130_rsqOO]
	rsqrtps xmm5, [esp + i1130_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i1130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i1130_rsqOO]
	mulps   xmm5, [esp + i1130_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i1130_half] 
	mulps   xmm7, [esp + i1130_half]
	movaps  [esp + i1130_rinvOO], xmm3
	movaps  [esp + i1130_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + i1130_rsqOH2]
	rsqrtps xmm5, [esp + i1130_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i1130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i1130_rsqOH2]
	mulps   xmm5, [esp + i1130_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i1130_half] 
	mulps   xmm7, [esp + i1130_half]
	movaps  [esp + i1130_rinvOH2], xmm3
	movaps  [esp + i1130_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + i1130_rsqH1H1]
	rsqrtps xmm5, [esp + i1130_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i1130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i1130_rsqH1H1]
	mulps   xmm5, [esp + i1130_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i1130_half] 
	mulps   xmm7, [esp + i1130_half]
	movaps  [esp + i1130_rinvH1H1], xmm3
	movaps  [esp + i1130_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + i1130_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i1130_three]
	mulps   xmm1, [esp + i1130_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + i1130_half] 
	movaps  [esp + i1130_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + i1130_rinvOO]
	movaps xmm7, xmm0
	mulps  xmm0, xmm0
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	mulps  xmm7, [esp + i1130_qqOO]
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm1, [esp + i1130_c6]	
	mulps  xmm2, [esp + i1130_c12]	
	movaps xmm3, xmm2
	subps  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addps  xmm3, [esp + i1130_vnbtot]
	mulps  xmm1, [esp + i1130_six]
	mulps  xmm2, [esp + i1130_twelve]
	movaps [esp + i1130_vnbtot], xmm3
	subps  xmm2, xmm1
	addps  xmm2, xmm7
	addps  xmm7, [esp + i1130_vctot]
	mulps  xmm0, xmm2	
 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i1130_dxOO]
	mulps xmm1, [esp + i1130_dyOO]
	mulps xmm2, [esp + i1130_dzOO]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1130_fixO]
	addps xmm1, [esp + i1130_fiyO]
	addps xmm2, [esp + i1130_fizO]
	movaps [esp + i1130_fjxO], xmm3
	movaps [esp + i1130_fjyO], xmm4
	movaps [esp + i1130_fjzO], xmm5
	movaps [esp + i1130_fixO], xmm0
	movaps [esp + i1130_fiyO], xmm1
	movaps [esp + i1130_fizO], xmm2

	;# O-H1 interaction 
	movaps xmm0, [esp + i1130_rinvOH1]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1130_qqOH]
	mulps xmm0, xmm1	;# fsOH1  
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i1130_dxOH1]
	mulps xmm1, [esp + i1130_dyOH1]
	mulps xmm2, [esp + i1130_dzOH1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1130_fixO]
	addps xmm1, [esp + i1130_fiyO]
	addps xmm2, [esp + i1130_fizO]
	movaps [esp + i1130_fjxH1], xmm3
	movaps [esp + i1130_fjyH1], xmm4
	movaps [esp + i1130_fjzH1], xmm5
	movaps [esp + i1130_fixO], xmm0
	movaps [esp + i1130_fiyO], xmm1
	movaps [esp + i1130_fizO], xmm2

	;# O-H2 interaction  
	movaps xmm0, [esp + i1130_rinvOH2]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1130_qqOH]
	mulps xmm0, xmm1	;# fsOH2  
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i1130_dxOH2]
	mulps xmm1, [esp + i1130_dyOH2]
	mulps xmm2, [esp + i1130_dzOH2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1130_fixO]
	addps xmm1, [esp + i1130_fiyO]
	addps xmm2, [esp + i1130_fizO]
	movaps [esp + i1130_fjxH2], xmm3
	movaps [esp + i1130_fjyH2], xmm4
	movaps [esp + i1130_fjzH2], xmm5
	movaps [esp + i1130_fixO], xmm0
	movaps [esp + i1130_fiyO], xmm1
	movaps [esp + i1130_fizO], xmm2

	;# H1-O interaction 
	movaps xmm0, [esp + i1130_rinvH1O]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1130_qqOH]
	mulps xmm0, xmm1	;# fsH1O 
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1130_fjxO]
	movaps xmm4, [esp + i1130_fjyO]
	movaps xmm5, [esp + i1130_fjzO]
	mulps xmm0, [esp + i1130_dxH1O]
	mulps xmm1, [esp + i1130_dyH1O]
	mulps xmm2, [esp + i1130_dzH1O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1130_fixH1]
	addps xmm1, [esp + i1130_fiyH1]
	addps xmm2, [esp + i1130_fizH1]
	movaps [esp + i1130_fjxO], xmm3
	movaps [esp + i1130_fjyO], xmm4
	movaps [esp + i1130_fjzO], xmm5
	movaps [esp + i1130_fixH1], xmm0
	movaps [esp + i1130_fiyH1], xmm1
	movaps [esp + i1130_fizH1], xmm2

	;# H1-H1 interaction 
	movaps xmm0, [esp + i1130_rinvH1H1]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1130_qqHH]
	mulps xmm0, xmm1	;# fsH1H1 
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1130_fjxH1]
	movaps xmm4, [esp + i1130_fjyH1]
	movaps xmm5, [esp + i1130_fjzH1]
	mulps xmm0, [esp + i1130_dxH1H1]
	mulps xmm1, [esp + i1130_dyH1H1]
	mulps xmm2, [esp + i1130_dzH1H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1130_fixH1]
	addps xmm1, [esp + i1130_fiyH1]
	addps xmm2, [esp + i1130_fizH1]
	movaps [esp + i1130_fjxH1], xmm3
	movaps [esp + i1130_fjyH1], xmm4
	movaps [esp + i1130_fjzH1], xmm5
	movaps [esp + i1130_fixH1], xmm0
	movaps [esp + i1130_fiyH1], xmm1
	movaps [esp + i1130_fizH1], xmm2

	;# H1-H2 interaction 
	movaps xmm0, [esp + i1130_rinvH1H2]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1130_qqHH]
	mulps xmm0, xmm1	;# fsOH2  
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1130_fjxH2]
	movaps xmm4, [esp + i1130_fjyH2]
	movaps xmm5, [esp + i1130_fjzH2]
	mulps xmm0, [esp + i1130_dxH1H2]
	mulps xmm1, [esp + i1130_dyH1H2]
	mulps xmm2, [esp + i1130_dzH1H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1130_fixH1]
	addps xmm1, [esp + i1130_fiyH1]
	addps xmm2, [esp + i1130_fizH1]
	movaps [esp + i1130_fjxH2], xmm3
	movaps [esp + i1130_fjyH2], xmm4
	movaps [esp + i1130_fjzH2], xmm5
	movaps [esp + i1130_fixH1], xmm0
	movaps [esp + i1130_fiyH1], xmm1
	movaps [esp + i1130_fizH1], xmm2

	;# H2-O interaction 
	movaps xmm0, [esp + i1130_rinvH2O]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1130_qqOH]
	mulps xmm0, xmm1	;# fsH2O 
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1130_fjxO]
	movaps xmm4, [esp + i1130_fjyO]
	movaps xmm5, [esp + i1130_fjzO]
	mulps xmm0, [esp + i1130_dxH2O]
	mulps xmm1, [esp + i1130_dyH2O]
	mulps xmm2, [esp + i1130_dzH2O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1130_fixH2]
	addps xmm1, [esp + i1130_fiyH2]
	addps xmm2, [esp + i1130_fizH2]
	movaps [esp + i1130_fjxO], xmm3
	movaps [esp + i1130_fjyO], xmm4
	movaps [esp + i1130_fjzO], xmm5
	movaps [esp + i1130_fixH2], xmm0
	movaps [esp + i1130_fiyH2], xmm1
	movaps [esp + i1130_fizH2], xmm2

	;# H2-H1 interaction 
	movaps xmm0, [esp + i1130_rinvH2H1]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1130_qqHH]
	mulps xmm0, xmm1	;# fsH2H1 
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1130_fjxH1]
	movaps xmm4, [esp + i1130_fjyH1]
	movaps xmm5, [esp + i1130_fjzH1]
	mulps xmm0, [esp + i1130_dxH2H1]
	mulps xmm1, [esp + i1130_dyH2H1]
	mulps xmm2, [esp + i1130_dzH2H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1130_fixH2]
	addps xmm1, [esp + i1130_fiyH2]
	addps xmm2, [esp + i1130_fizH2]
	movaps [esp + i1130_fjxH1], xmm3
	movaps [esp + i1130_fjyH1], xmm4
	movaps [esp + i1130_fjzH1], xmm5
	movaps [esp + i1130_fixH2], xmm0
	movaps [esp + i1130_fiyH2], xmm1
	movaps [esp + i1130_fizH2], xmm2

	;# H2-H2 interaction 
	movaps xmm0, [esp + i1130_rinvH2H2]
	movaps xmm1, xmm0
	mulps xmm0, xmm0
	mulps xmm1, [esp + i1130_qqHH]
	mulps xmm0, xmm1	;# fsH2H2 
	addps xmm7, xmm1	;# add to local vctot 
	movaps xmm1, xmm0
	movaps [esp + i1130_vctot], xmm7
	movaps xmm2, xmm0
	movaps xmm3, [esp + i1130_fjxH2]
	movaps xmm4, [esp + i1130_fjyH2]
	movaps xmm5, [esp + i1130_fjzH2]
	mulps xmm0, [esp + i1130_dxH2H2]
	mulps xmm1, [esp + i1130_dyH2H2]
	mulps xmm2, [esp + i1130_dzH2H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i1130_fixH2]
	addps xmm1, [esp + i1130_fiyH2]
	addps xmm2, [esp + i1130_fizH2]
	movaps [esp + i1130_fjxH2], xmm3
	movaps [esp + i1130_fjyH2], xmm4
	movaps [esp + i1130_fjzH2], xmm5
	movaps [esp + i1130_fixH2], xmm0
	movaps [esp + i1130_fiyH2], xmm1
	movaps [esp + i1130_fizH2], xmm2

	mov edi, [ebp + i1130_faction]
		
	;# Did all interactions - now update j forces 
	;# 4 j waters with three atoms each - first do a & b j particles 
	movaps xmm0, [esp + i1130_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i1130_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpcklps xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjxOb  fjyOb 
	movaps xmm1, [esp + i1130_fjzO]
	movaps xmm2, [esp + i1130_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOb  fjyOb  
	unpcklps xmm1, xmm2	   ;# xmm1= fjzOa  fjxH1a fjzOb  fjxH1b 
	movaps xmm4, [esp + i1130_fjyH1]
	movaps xmm5, [esp + i1130_fjzH1]
	unpcklps xmm4, xmm5	   ;# xmm4= fjyH1a fjzH1a fjyH1b fjzH1b 
	movaps xmm5, [esp + i1130_fjxH2]
	movaps xmm6, [esp + i1130_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1b fjzH1b 
	unpcklps xmm5, xmm6	   ;# xmm5= fjxH2a fjyH2a fjxH2b fjyH2b 
	movlhps  xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjzOa  fjxH1a 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOb  fjyOb  fjzOb  fjxH1b 
	movlhps  xmm4, xmm5   	   ;# xmm4= fjyH1a fjzH1a fjxH2a fjyH2a 
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1b fjzH1b fjxH2b fjyH2b 
	movups   xmm1, [edi + eax*4]
	movups   xmm2, [edi + eax*4 + 16]
	movups   xmm5, [edi + ebx*4]
	movups   xmm6, [edi + ebx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + eax*4 + 32]
	movss    xmm3, [edi + ebx*4 + 32]
	
	movaps   xmm4, [esp + i1130_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm7, xmm7, 1
	
	movups   [edi + eax*4],     xmm1
	movups   [edi + eax*4 + 16],xmm2
	movups   [edi + ebx*4],     xmm5
	movups   [edi + ebx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + eax*4 + 32], xmm0
	movss    [edi + ebx*4 + 32], xmm3	

	;# then do the second pair (c & d) 
	movaps xmm0, [esp + i1130_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i1130_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpckhps xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjxOd  fjyOd 
	movaps xmm1, [esp + i1130_fjzO]
	movaps xmm2, [esp + i1130_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOd  fjyOd  
	unpckhps xmm1, xmm2	   ;# xmm1= fjzOc  fjxH1c fjzOd  fjxH1d 
	movaps xmm4, [esp + i1130_fjyH1]
	movaps xmm5, [esp + i1130_fjzH1]
	unpckhps xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjyH1d fjzH1d	
	movaps xmm5, [esp + i1130_fjxH2]
	movaps xmm6, [esp + i1130_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1d fjzH1d 	 
	unpckhps xmm5, xmm6	   ;# xmm5= fjxH2c fjyH2c fjxH2d fjyH2d 
	movlhps  xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjzOc  fjxH1c 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOd  fjyOd  fjzOd  fjxH1d 
	movlhps  xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjxH2c fjyH2c  
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1d fjzH1d fjxH2d fjyH2d 
	movups   xmm1, [edi + ecx*4]
	movups   xmm2, [edi + ecx*4 + 16]
	movups   xmm5, [edi + edx*4]
	movups   xmm6, [edi + edx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + ecx*4 + 32]
	movss    xmm3, [edi + edx*4 + 32]
	
	movaps   xmm4, [esp + i1130_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm4, xmm4, 2 ;# 00000010
	shufps   xmm7, xmm7, 3 ;# 00000011
	movups   [edi + ecx*4],     xmm1
	movups   [edi + ecx*4 + 16],xmm2
	movups   [edi + edx*4],     xmm5
	movups   [edi + edx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + ecx*4 + 32], xmm0
	movss    [edi + edx*4 + 32], xmm3	
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i1130_innerk],  4
	jl    i1130_single_check
	jmp   i1130_unroll_loop
i1130_single_check:
	add dword ptr [esp + i1130_innerk],  4
	jnz   i1130_single_loop
	jmp   i1130_updateouterdata
i1130_single_loop:
	mov   edx, [esp + i1130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i1130_innerjjnr],  4	

	mov esi, [ebp + i1130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + i1130_ixO]     
	movaps  xmm1, [esp + i1130_iyO]
	movaps  xmm2, [esp + i1130_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + i1130_jxO], xmm3
	movaps [esp + i1130_jyO], xmm4
	movaps [esp + i1130_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	movaps [esp + i1130_dxOO], xmm0
	movaps [esp + i1130_dyOO], xmm1
	movaps [esp + i1130_dzOO], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	movaps  xmm2, xmm1	
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i1130_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + i1130_half] ;# rinv iO - j water 

	xorps   xmm1, xmm1
	movaps  xmm0, xmm3
	xorps   xmm4, xmm4
	mulps   xmm0, xmm0	;# xmm0=rinvsq 
	;# fetch charges to xmm4 (temporary) 
	movss   xmm4, [esp + i1130_qqOO]
	movss   xmm1, xmm0
	movhps  xmm4, [esp + i1130_qqOH]
	mulss   xmm1, xmm0
	mulps   xmm3, xmm4	;# xmm3=vcoul 
	mulss   xmm1, xmm0	;# xmm1(0)=rinvsix 
	movaps  xmm2, xmm1	;# zero everything else in xmm2 
	mulss   xmm2, xmm2	;# xmm2=rinvtwelve 

	mulss   xmm1, [esp + i1130_c6]
	mulss   xmm2, [esp + i1130_c12]
	movaps  xmm4, xmm2
	subss   xmm4, xmm1	;# vnbtot=vnb12-vnb6 
	addps   xmm4, [esp + i1130_vnbtot]
	mulss   xmm1, [esp + i1130_six]
	mulss   xmm2, [esp + i1130_twelve]	
	movaps  [esp + i1130_vnbtot], xmm4
	subss   xmm2, xmm1	;# fsD+ fsR 
	addps   xmm2, xmm3	;# fsC+ fsD+ fsR 

	addps   xmm3, [esp + i1130_vctot]
	mulps   xmm0, xmm2	;# total fscal 
	movaps  [esp + i1130_vctot], xmm3	

	movaps  xmm1, xmm0
	movaps  xmm2, xmm0
	mulps   xmm0, [esp + i1130_dxOO]
	mulps   xmm1, [esp + i1130_dyOO]
	mulps   xmm2, [esp + i1130_dzOO]
	;# initial update for j forces 
	xorps   xmm3, xmm3
	xorps   xmm4, xmm4
	xorps   xmm5, xmm5
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i1130_fjxO], xmm3
	movaps  [esp + i1130_fjyO], xmm4
	movaps  [esp + i1130_fjzO], xmm5
	addps   xmm0, [esp + i1130_fixO]
	addps   xmm1, [esp + i1130_fiyO]
	addps   xmm2, [esp + i1130_fizO]
	movaps  [esp + i1130_fixO], xmm0
	movaps  [esp + i1130_fiyO], xmm1
	movaps  [esp + i1130_fizO], xmm2

	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + i1130_ixH1]
	movaps  xmm1, [esp + i1130_iyH1]
	movaps  xmm2, [esp + i1130_izH1]	
	movaps  xmm3, [esp + i1130_ixH2] 
	movaps  xmm4, [esp + i1130_iyH2] 
	movaps  xmm5, [esp + i1130_izH2] 
	subps   xmm0, [esp + i1130_jxO]
	subps   xmm1, [esp + i1130_jyO]
	subps   xmm2, [esp + i1130_jzO]
	subps   xmm3, [esp + i1130_jxO]
	subps   xmm4, [esp + i1130_jyO]
	subps   xmm5, [esp + i1130_jzO]
	movaps [esp + i1130_dxH1O], xmm0
	movaps [esp + i1130_dyH1O], xmm1
	movaps [esp + i1130_dzH1O], xmm2
	movaps [esp + i1130_dxH2O], xmm3
	movaps [esp + i1130_dyH2O], xmm4
	movaps [esp + i1130_dzH2O], xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 

	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1   ;# do coulomb interaction 
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i1130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i1130_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + i1130_half] ;# rinv H2 - j water  

	;# assemble charges in xmm6 
	xorps   xmm6, xmm6
	;# do coulomb interaction 
	movaps  xmm0, xmm3
	movss   xmm6, [esp + i1130_qqOH]
	movaps  xmm4, xmm7
	movhps  xmm6, [esp + i1130_qqHH]
	mulps   xmm0, xmm0	;# rinvsq 
	mulps   xmm4, xmm4	;# rinvsq 
	mulps   xmm3, xmm6	;# vcoul 
	mulps   xmm7, xmm6	;# vcoul 
	movaps  xmm2, xmm3
	addps   xmm2, xmm7	;# total vcoul 
	mulps   xmm0, xmm3	;# fscal 
	
	addps   xmm2, [esp + i1130_vctot]
	mulps   xmm7, xmm4	;# fscal 
	movaps  [esp + i1130_vctot], xmm2
	movaps  xmm1, xmm0
	movaps  xmm2, xmm0
	mulps   xmm0, [esp + i1130_dxH1O]
	mulps   xmm1, [esp + i1130_dyH1O]
	mulps   xmm2, [esp + i1130_dzH1O]
	;# update forces H1 - j water 
	movaps  xmm3, [esp + i1130_fjxO]
	movaps  xmm4, [esp + i1130_fjyO]
	movaps  xmm5, [esp + i1130_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i1130_fjxO], xmm3
	movaps  [esp + i1130_fjyO], xmm4
	movaps  [esp + i1130_fjzO], xmm5
	addps   xmm0, [esp + i1130_fixH1]
	addps   xmm1, [esp + i1130_fiyH1]
	addps   xmm2, [esp + i1130_fizH1]
	movaps  [esp + i1130_fixH1], xmm0
	movaps  [esp + i1130_fiyH1], xmm1
	movaps  [esp + i1130_fizH1], xmm2
	;# do forces H2 - j water 
	movaps xmm0, xmm7
	movaps xmm1, xmm7
	movaps xmm2, xmm7
	mulps   xmm0, [esp + i1130_dxH2O]
	mulps   xmm1, [esp + i1130_dyH2O]
	mulps   xmm2, [esp + i1130_dzH2O]
	movaps  xmm3, [esp + i1130_fjxO]
	movaps  xmm4, [esp + i1130_fjyO]
	movaps  xmm5, [esp + i1130_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	mov     esi, [ebp + i1130_faction]
	movaps  [esp + i1130_fjxO], xmm3
	movaps  [esp + i1130_fjyO], xmm4
	movaps  [esp + i1130_fjzO], xmm5
	addps   xmm0, [esp + i1130_fixH2]
	addps   xmm1, [esp + i1130_fiyH2]
	addps   xmm2, [esp + i1130_fizH2]
	movaps  [esp + i1130_fixH2], xmm0
	movaps  [esp + i1130_fiyH2], xmm1
	movaps  [esp + i1130_fizH2], xmm2

	;# update j water forces from local variables 
	movlps  xmm0, [esi + eax*4]
	movlps  xmm1, [esi + eax*4 + 12]
	movhps  xmm1, [esi + eax*4 + 24]
	movaps  xmm3, [esp + i1130_fjxO]
	movaps  xmm4, [esp + i1130_fjyO]
	movaps  xmm5, [esp + i1130_fjzO]
	movaps  xmm6, xmm5
	movaps  xmm7, xmm5
	shufps  xmm6, xmm6, 2 ;# 00000010
	shufps  xmm7, xmm7, 3 ;# 00000011
	addss   xmm5, [esi + eax*4 + 8]
	addss   xmm6, [esi + eax*4 + 20]
	addss   xmm7, [esi + eax*4 + 32]
	movss   [esi + eax*4 + 8], xmm5
	movss   [esi + eax*4 + 20], xmm6
	movss   [esi + eax*4 + 32], xmm7
	movaps   xmm5, xmm3
	unpcklps xmm3, xmm4
	unpckhps xmm5, xmm4
	addps    xmm0, xmm3
	addps    xmm1, xmm5
	movlps  [esi + eax*4], xmm0 
	movlps  [esi + eax*4 + 12], xmm1 
	movhps  [esi + eax*4 + 24], xmm1 
	
	dec dword ptr [esp + i1130_innerk]
	jz    i1130_updateouterdata
	jmp   i1130_single_loop
i1130_updateouterdata:
	mov   ecx, [esp + i1130_ii3]
	mov   edi, [ebp + i1130_faction]
	mov   esi, [ebp + i1130_fshift]
	mov   edx, [esp + i1130_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1130_fixO]
	movaps xmm1, [esp + i1130_fiyO] 
	movaps xmm2, [esp + i1130_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1130_fixH1]
	movaps xmm1, [esp + i1130_fiyH1]
	movaps xmm2, [esp + i1130_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i1130_fixH2]
	movaps xmm1, [esp + i1130_fiyH2]
	movaps xmm2, [esp + i1130_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	;# get group index for i particle 
	mov   edx, [ebp + i1130_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i1130_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i1130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i1130_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i1130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i1130_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i1130_nri]
	dec ecx
	jecxz i1130_end
	;# not last, iterate once more!  
	mov [ebp + i1130_nri], ecx
	jmp i1130_outer
i1130_end:
	emms
	mov eax, [esp + i1130_salign]
	add esp, eax
	add esp, 1492
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl inl2120_sse
.globl _inl2120_sse
inl2120_sse:	
_inl2120_sse:	
.equiv		i2120_nri,			8
.equiv		i2120_iinr,			12
.equiv		i2120_jindex,		16
.equiv		i2120_jjnr,			20
.equiv		i2120_shift,		24
.equiv		i2120_shiftvec,		28
.equiv		i2120_fshift,		32
.equiv		i2120_gid,			36
.equiv		i2120_pos,			40		
.equiv		i2120_faction,		44
.equiv		i2120_charge,		48
.equiv		i2120_facel,		52
.equiv		i2120_Vc,			56			
.equiv		i2120_argkrf,		60	
.equiv		i2120_argcrf,		64	
.equiv		i2120_type,			68
.equiv		i2120_ntype,		72
.equiv		i2120_nbfp,			76	
.equiv		i2120_Vnb,			80	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i2120_ixO,			0
.equiv		i2120_iyO,			16
.equiv		i2120_izO,			32
.equiv		i2120_ixH1,			48
.equiv		i2120_iyH1,			64
.equiv		i2120_izH1,			80
.equiv		i2120_ixH2,			96
.equiv		i2120_iyH2,			112
.equiv		i2120_izH2,			128
.equiv		i2120_iqO,			144 
.equiv		i2120_iqH,			160 
.equiv		i2120_dxO,			176
.equiv		i2120_dyO,			192
.equiv		i2120_dzO,			208	
.equiv		i2120_dxH1,			224
.equiv		i2120_dyH1,			240
.equiv		i2120_dzH1,			256	
.equiv		i2120_dxH2,			272
.equiv		i2120_dyH2,			288
.equiv		i2120_dzH2,			304	
.equiv		i2120_qqO,			320
.equiv		i2120_qqH,			336
.equiv		i2120_c6,			352
.equiv		i2120_c12,			368
.equiv		i2120_six,			384
.equiv		i2120_twelve,		400		 
.equiv		i2120_vctot,		416
.equiv		i2120_vnbtot,		432
.equiv		i2120_fixO,			448
.equiv		i2120_fiyO,			464
.equiv		i2120_fizO,			480
.equiv		i2120_fixH1,		496
.equiv		i2120_fiyH1,		512
.equiv		i2120_fizH1,		528
.equiv		i2120_fixH2,		544
.equiv		i2120_fiyH2,		560
.equiv		i2120_fizH2,		576
.equiv		i2120_fjx,			592
.equiv		i2120_fjy,			608
.equiv		i2120_fjz,			624
.equiv		i2120_half,			640
.equiv		i2120_three,		656
.equiv		i2120_two,			672
.equiv		i2120_krf,			688
.equiv		i2120_crf,			704
.equiv		i2120_krsqO,		720
.equiv		i2120_krsqH1,		736
.equiv		i2120_krsqH2,		752	 		
.equiv		i2120_is3,			768
.equiv		i2120_ii3,			772
.equiv		i2120_ntia,			776	
.equiv		i2120_innerjjnr,	780
.equiv		i2120_innerk,		784
.equiv		i2120_salign,		788								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 792		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2120_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movups xmm2, [sse_six]
	movups xmm3, [sse_twelve]
	movups xmm4, [sse_two]
	movss xmm5, [ebp + i2120_argkrf]
	movss xmm6, [ebp + i2120_argcrf]

	movaps [esp + i2120_half],  xmm0
	movaps [esp + i2120_three], xmm1
	movaps [esp + i2120_six],  xmm2
	movaps [esp + i2120_twelve], xmm3
	movaps [esp + i2120_two], xmm4
	shufps xmm5, xmm5, 0
	shufps xmm6, xmm6, 0
	movaps [esp + i2120_krf], xmm5
	movaps [esp + i2120_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i2120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2120_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + i2120_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + i2120_iqO], xmm3
	movaps [esp + i2120_iqH], xmm4
	
	mov   edx, [ebp + i2120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + i2120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + i2120_ntia], ecx		
.i2120_outer:
	mov   eax, [ebp + i2120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2120_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2120_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i2120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2120_pos]    ;# eax = base of pos[]  
	mov   [esp + i2120_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i2120_ixO], xmm3
	movaps [esp + i2120_iyO], xmm4
	movaps [esp + i2120_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i2120_ixH1], xmm0
	movaps [esp + i2120_iyH1], xmm1
	movaps [esp + i2120_izH1], xmm2
	movaps [esp + i2120_ixH2], xmm3
	movaps [esp + i2120_iyH2], xmm4
	movaps [esp + i2120_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i2120_vctot], xmm4
	movaps [esp + i2120_vnbtot], xmm4
	movaps [esp + i2120_fixO], xmm4
	movaps [esp + i2120_fiyO], xmm4
	movaps [esp + i2120_fizO], xmm4
	movaps [esp + i2120_fixH1], xmm4
	movaps [esp + i2120_fiyH1], xmm4
	movaps [esp + i2120_fizH1], xmm4
	movaps [esp + i2120_fixH2], xmm4
	movaps [esp + i2120_fiyH2], xmm4
	movaps [esp + i2120_fizH2], xmm4
	
	mov   eax, [ebp + i2120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2120_pos]
	mov   edi, [ebp + i2120_faction]	
	mov   eax, [ebp + i2120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i2120_innerk], edx    ;# number of innerloop atoms 
	jge   .i2120_unroll_loop
	jmp   .i2120_odd_inner
.i2120_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + i2120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + i2120_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i2120_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + i2120_iqO]
	mulps  xmm4, [esp + i2120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx

	movaps  [esp + i2120_qqO], xmm3
	movaps  [esp + i2120_qqH], xmm4
	
	mov esi, [ebp + i2120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i2120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i2120_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i2120_c6], xmm4
	movaps [esp + i2120_c12], xmm6

	mov esi, [ebp + i2120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + i2120_ixO]
	movaps xmm5, [esp + i2120_iyO]
	movaps xmm6, [esp + i2120_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i2120_dxO], xmm4
	movaps [esp + i2120_dyO], xmm5
	movaps [esp + i2120_dzO], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + i2120_ixH1]
	movaps xmm5, [esp + i2120_iyH1]
	movaps xmm6, [esp + i2120_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i2120_dxH1], xmm4
	movaps [esp + i2120_dyH1], xmm5
	movaps [esp + i2120_dzH1], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + i2120_ixH2]
	movaps xmm4, [esp + i2120_iyH2]
	movaps xmm5, [esp + i2120_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# store dr 
	movaps [esp + i2120_dxH2], xmm3
	movaps [esp + i2120_dyH2], xmm4
	movaps [esp + i2120_dzH2], xmm5
	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	movaps xmm0, xmm5
	movaps xmm1, xmm6
	movaps xmm2, xmm7

	mulps  xmm0, [esp + i2120_krf]	
	mulps  xmm1, [esp + i2120_krf]	
	mulps  xmm2, [esp + i2120_krf]	

	movaps [esp + i2120_krsqH2], xmm0
	movaps [esp + i2120_krsqH1], xmm1
	movaps [esp + i2120_krsqO], xmm2
	
	;# start with rsqO - seed in xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i2120_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i2120_half]
	movaps  xmm7, xmm4	;# rinvO in xmm7 
	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i2120_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i2120_half]
	movaps  xmm6, xmm4	;# rinvH1 in xmm6 
	;# rsqH2 - seed in xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i2120_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i2120_half]
	movaps  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movaps  xmm4, xmm7	
	mulps   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm1, [esp + i2120_c6]
	mulps  xmm2, [esp + i2120_c12]
	movaps xmm3, xmm2
	subps  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addps  xmm3, [esp + i2120_vnbtot]
	mulps  xmm1, [esp + i2120_six]
	mulps  xmm2, [esp + i2120_twelve]
	subps  xmm2, xmm1	;# nb part of fs  

	movaps xmm0, xmm7
	movaps xmm1, [esp + i2120_krsqO]
	addps  xmm0, xmm1
	mulps  xmm1, [esp + i2120_two]
	subps  xmm0, [esp + i2120_crf] ;# xmm0=rinv+ krsq-crf 
	subps  xmm7, xmm1
	mulps  xmm0, [esp + i2120_qqO]
	mulps  xmm7, [esp + i2120_qqO]
	addps  xmm2, xmm7

	mulps  xmm4, xmm2	;# total fsO in xmm4 

	addps  xmm0, [esp + i2120_vctot]
	movaps [esp + i2120_vnbtot], xmm3
	movaps [esp + i2120_vctot], xmm0

	movaps xmm0, [esp + i2120_dxO]
	movaps xmm1, [esp + i2120_dyO]
	movaps xmm2, [esp + i2120_dzO]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update O forces 
	movaps xmm3, [esp + i2120_fixO]
	movaps xmm4, [esp + i2120_fiyO]
	movaps xmm7, [esp + i2120_fizO]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i2120_fixO], xmm3
	movaps [esp + i2120_fiyO], xmm4
	movaps [esp + i2120_fizO], xmm7
	;# update j forces with water O 
	movaps [esp + i2120_fjx], xmm0
	movaps [esp + i2120_fjy], xmm1
	movaps [esp + i2120_fjz], xmm2

	;# H1 interactions 
	movaps  xmm4, xmm6	
	mulps   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	movaps  xmm7, xmm6
	movaps  xmm0, [esp + i2120_krsqH1]
	addps   xmm6, xmm0	;# xmm6=rinv+ krsq 
	mulps   xmm0, [esp + i2120_two]
	subps   xmm6, [esp + i2120_crf]
	subps   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulps   xmm6, [esp + i2120_qqH] ;# vcoul 
	mulps   xmm7, [esp + i2120_qqH]
	mulps  xmm4, xmm7		;# total fsH1 in xmm4 
	
	addps  xmm6, [esp + i2120_vctot]

	movaps xmm0, [esp + i2120_dxH1]
	movaps xmm1, [esp + i2120_dyH1]
	movaps xmm2, [esp + i2120_dzH1]
	movaps [esp + i2120_vctot], xmm6
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H1 forces 
	movaps xmm3, [esp + i2120_fixH1]
	movaps xmm4, [esp + i2120_fiyH1]
	movaps xmm7, [esp + i2120_fizH1]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i2120_fixH1], xmm3
	movaps [esp + i2120_fiyH1], xmm4
	movaps [esp + i2120_fizH1], xmm7
	;# update j forces with water H1 
	addps  xmm0, [esp + i2120_fjx]
	addps  xmm1, [esp + i2120_fjy]
	addps  xmm2, [esp + i2120_fjz]
	movaps [esp + i2120_fjx], xmm0
	movaps [esp + i2120_fjy], xmm1
	movaps [esp + i2120_fjz], xmm2

	;# H2 interactions 
	movaps  xmm4, xmm5	
	mulps   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	movaps  xmm7, xmm5
	movaps  xmm0, [esp + i2120_krsqH2]
	addps   xmm5, xmm0	;# xmm5=rinv+ krsq 
	mulps   xmm0, [esp + i2120_two]
	subps   xmm5, [esp + i2120_crf]
	subps   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulps   xmm5, [esp + i2120_qqH] ;# vcoul 
	mulps   xmm7, [esp + i2120_qqH]
	mulps  xmm4, xmm7		;# total fsH2 in xmm4 
	
	addps  xmm5, [esp + i2120_vctot]

	movaps xmm0, [esp + i2120_dxH2]
	movaps xmm1, [esp + i2120_dyH2]
	movaps xmm2, [esp + i2120_dzH2]
	movaps [esp + i2120_vctot], xmm5
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H2 forces 
	movaps xmm3, [esp + i2120_fixH2]
	movaps xmm4, [esp + i2120_fiyH2]
	movaps xmm7, [esp + i2120_fizH2]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i2120_fixH2], xmm3
	movaps [esp + i2120_fiyH2], xmm4
	movaps [esp + i2120_fizH2], xmm7

	mov edi, [ebp + i2120_faction]
	;# update j forces 
	addps xmm0, [esp + i2120_fjx]
	addps xmm1, [esp + i2120_fjy]
	addps xmm2, [esp + i2120_fjz]

	movlps xmm4, [edi + eax*4]
	movlps xmm7, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm7, [edi + edx*4]
	
	movaps xmm3, xmm4
	shufps xmm3, xmm7, 136  ;# 10001000
	shufps xmm4, xmm7, 221  ;# 11011101			      
	;# xmm3 has fjx, xmm4 has fjy 
	subps xmm3, xmm0
	subps xmm4, xmm1
	;# unpack them back for storing 
	movaps xmm7, xmm3
	unpcklps xmm7, xmm4
	unpckhps xmm3, xmm4	
	movlps [edi + eax*4], xmm7
	movlps [edi + ecx*4], xmm3
	movhps [edi + ebx*4], xmm7
	movhps [edi + edx*4], xmm3
	;# finally z forces 
	movss  xmm0, [edi + eax*4 + 8]
	movss  xmm1, [edi + ebx*4 + 8]
	movss  xmm3, [edi + ecx*4 + 8]
	movss  xmm4, [edi + edx*4 + 8]
	subss  xmm0, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm1, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm3, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm4, xmm2
	movss  [edi + eax*4 + 8], xmm0
	movss  [edi + ebx*4 + 8], xmm1
	movss  [edi + ecx*4 + 8], xmm3
	movss  [edi + edx*4 + 8], xmm4
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i2120_innerk],  4
	jl    .i2120_odd_inner
	jmp   .i2120_unroll_loop
.i2120_odd_inner:	
	add dword ptr [esp + i2120_innerk],  4
	jnz   .i2120_odd_loop
	jmp   .i2120_updateouterdata
.i2120_odd_loop:
	mov   edx, [esp + i2120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i2120_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + i2120_iqO]
	mov esi, [ebp + i2120_charge] 
	movhps xmm4, [esp + i2120_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + i2120_qqO], xmm3	;# use oxygen qq for storage 

	xorps xmm6, xmm6
	mov esi, [ebp + i2120_type]
	mov ebx, [esi + eax*4]
	mov esi, [ebp + i2120_nbfp]
	shl ebx, 1	
	add ebx, [esp + i2120_ntia]
	movlps xmm6, [esi + ebx*4]
	movaps xmm7, xmm6
	shufps xmm6, xmm6, 252  ;# 11111100
	shufps xmm7, xmm7, 253  ;# 11111101
	movaps [esp + i2120_c6], xmm6
	movaps [esp + i2120_c12], xmm7

	mov esi, [ebp + i2120_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + i2120_ixO]
	movss xmm4, [esp + i2120_iyO]
	movss xmm5, [esp + i2120_izO]
		
	movlps xmm6, [esp + i2120_ixH1]
	movlps xmm7, [esp + i2120_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + i2120_iyH1]
	movlps xmm7, [esp + i2120_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + i2120_izH1]
	movlps xmm7, [esp + i2120_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	
	movaps [esp + i2120_dxO], xmm3
	movaps [esp + i2120_dyO], xmm4
	movaps [esp + i2120_dzO], xmm5

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	movaps xmm0, xmm4
	mulps xmm0, [esp + i2120_krf]
	movaps [esp + i2120_krsqO], xmm0
	
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i2120_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i2120_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000
		
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulss  xmm1, xmm4
	mulss  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulss  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm1, [esp + i2120_c6]
	mulps  xmm2, [esp + i2120_c12]
	movaps xmm5, xmm2
	subss  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i2120_vnbtot]
	mulss  xmm1, [esp + i2120_six]
	mulss  xmm2, [esp + i2120_twelve]
	subss  xmm2, xmm1

	movaps xmm1, xmm0	;# xmm1=rinv 
	movaps xmm3, [esp + i2120_krsqO]
	addps  xmm0, xmm3	;# xmm0=rinv+ krsq 
	mulps  xmm3, [esp + i2120_two]
	subps  xmm0, [esp + i2120_crf] ;# xmm0=rinv+ krsq-crf 
	subps  xmm1, xmm3	;# xmm1=rinv-2*krsq 
	mulps  xmm0, [esp + i2120_qqO]	;# xmm0=vcoul 
	mulps  xmm1, [esp + i2120_qqO] 	;# xmm1=coul part of fs 

	addps xmm2, xmm1	;# total fs 
	
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	addps  xmm0, [esp + i2120_vctot]
	movaps [esp + i2120_vctot], xmm0
	
	movaps xmm0, [esp + i2120_dxO]
	movaps xmm1, [esp + i2120_dyO]
	movaps xmm2, [esp + i2120_dzO]

	movaps [esp + i2120_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	movss  xmm3, [esp + i2120_fixO]	
	movss  xmm4, [esp + i2120_fiyO]	
	movss  xmm5, [esp + i2120_fizO]	
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esp + i2120_fixO], xmm3	
	movss  [esp + i2120_fiyO], xmm4	
	movss  [esp + i2120_fizO], xmm5	;# updated the O force now do the H's 
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	shufps xmm3, xmm3, 230 ;# 11100110	;# shift right 
	shufps xmm4, xmm4, 230 ;# 11100110
	shufps xmm5, xmm5, 230 ;# 11100110
	addss  xmm3, [esp + i2120_fixH1]
	addss  xmm4, [esp + i2120_fiyH1]
	addss  xmm5, [esp + i2120_fizH1]
	movss  [esp + i2120_fixH1], xmm3	
	movss  [esp + i2120_fiyH1], xmm4	
	movss  [esp + i2120_fizH1], xmm5	;# updated the H1 force 

	mov edi, [ebp + i2120_faction]
	shufps xmm3, xmm3, 231 ;# 11100111	;# shift right 
	shufps xmm4, xmm4, 231 ;# 11100111
	shufps xmm5, xmm5, 231 ;# 11100111
	addss  xmm3, [esp + i2120_fixH2]
	addss  xmm4, [esp + i2120_fiyH2]
	addss  xmm5, [esp + i2120_fizH2]
	movss  [esp + i2120_fixH2], xmm3	
	movss  [esp + i2120_fiyH2], xmm4	
	movss  [esp + i2120_fizH2], xmm5	;# updated the H2 force 

	;# the fj's - start by accumulating the tx/ty/tz force in xmm0, xmm1 
	xorps  xmm5, xmm5
	movaps xmm3, xmm0
	movlps xmm6, [edi + eax*4]
	movss  xmm7, [edi + eax*4 + 8]
	unpcklps xmm3, xmm1
	movlhps  xmm3, xmm5	
	unpckhps xmm0, xmm1		
	addps    xmm0, xmm3
	movhlps  xmm3, xmm0	
	addps    xmm0, xmm3	;# x,y sum in xmm0 

	movhlps  xmm1, xmm2
	addss    xmm2, xmm1
	shufps   xmm1, xmm1, 1 
	addss    xmm2, xmm1    ;# z sum in xmm2 
	subps    xmm6, xmm0
	subss    xmm7, xmm2
	
	movlps [edi + eax*4],     xmm6
	movss  [edi + eax*4 + 8], xmm7

	dec dword ptr [esp + i2120_innerk]
	jz    .i2120_updateouterdata
	jmp   .i2120_odd_loop
.i2120_updateouterdata:
	mov   ecx, [esp + i2120_ii3]
	mov   edi, [ebp + i2120_faction]
	mov   esi, [ebp + i2120_fshift]
	mov   edx, [esp + i2120_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2120_fixO]
	movaps xmm1, [esp + i2120_fiyO]
	movaps xmm2, [esp + i2120_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2120_fixH1]
	movaps xmm1, [esp + i2120_fiyH1]
	movaps xmm2, [esp + i2120_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2120_fixH2]
	movaps xmm1, [esp + i2120_fiyH2]
	movaps xmm2, [esp + i2120_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	mov   edx, [ebp + i2120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i2120_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i2120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + i2120_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i2120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i2120_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2120_nri]
	dec ecx
	jecxz .i2120_end
	;# not last, iterate once more!  
	mov [ebp + i2120_nri], ecx
	jmp .i2120_outer
.i2120_end:
	emms
	mov eax, [esp + i2120_salign]
	add esp, eax
	add esp, 792
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl inl2130_sse
.globl _inl2130_sse
inl2130_sse:	
_inl2130_sse:	
.equiv		i2130_nri,			8
.equiv		i2130_iinr,			12
.equiv		i2130_jindex,		16
.equiv		i2130_jjnr,			20
.equiv		i2130_shift,		24
.equiv		i2130_shiftvec,		28
.equiv		i2130_fshift,		32
.equiv		i2130_gid,			36
.equiv		i2130_pos,			40		
.equiv		i2130_faction,		44
.equiv		i2130_charge,		48
.equiv		i2130_facel,		52
.equiv		i2130_Vc,			56			
.equiv		i2130_argkrf,		60
.equiv		i2130_argcrf,		64
.equiv		i2130_type,			68
.equiv		i2130_ntype,		72
.equiv		i2130_nbfp,			76	
.equiv		i2130_Vnb,			80
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i2130_ixO,			0
.equiv		i2130_iyO,			16
.equiv		i2130_izO,			32
.equiv		i2130_ixH1,			48
.equiv		i2130_iyH1,			64
.equiv		i2130_izH1,			80
.equiv		i2130_ixH2,			96
.equiv		i2130_iyH2,			112
.equiv		i2130_izH2,			128
.equiv		i2130_jxO,			144
.equiv		i2130_jyO,			160
.equiv		i2130_jzO,			176
.equiv		i2130_jxH1,			192
.equiv		i2130_jyH1,			208
.equiv		i2130_jzH1,			224
.equiv		i2130_jxH2,			240
.equiv		i2130_jyH2,			256
.equiv		i2130_jzH2,			272
.equiv		i2130_dxOO,			288
.equiv		i2130_dyOO,			304
.equiv		i2130_dzOO,			320	
.equiv		i2130_dxOH1,		336
.equiv		i2130_dyOH1,		352
.equiv		i2130_dzOH1,		368	
.equiv		i2130_dxOH2,		384
.equiv		i2130_dyOH2,		400
.equiv		i2130_dzOH2,		416	
.equiv		i2130_dxH1O,		432
.equiv		i2130_dyH1O,		448
.equiv		i2130_dzH1O,		464	
.equiv		i2130_dxH1H1,		480
.equiv		i2130_dyH1H1,		496
.equiv		i2130_dzH1H1,		512	
.equiv		i2130_dxH1H2,		528
.equiv		i2130_dyH1H2,		544
.equiv		i2130_dzH1H2,		560	
.equiv		i2130_dxH2O,		576
.equiv		i2130_dyH2O,		592
.equiv		i2130_dzH2O,		608	
.equiv		i2130_dxH2H1,		624
.equiv		i2130_dyH2H1,		640
.equiv		i2130_dzH2H1,		656	
.equiv		i2130_dxH2H2,		672
.equiv		i2130_dyH2H2,		688
.equiv		i2130_dzH2H2,		704
.equiv		i2130_qqOO,			720
.equiv		i2130_qqOH,			736
.equiv		i2130_qqHH,			752
.equiv		i2130_c6,			768
.equiv		i2130_c12,			784
.equiv		i2130_six,			800
.equiv		i2130_twelve,		816		 
.equiv		i2130_vctot,		832
.equiv		i2130_vnbtot,		848
.equiv		i2130_fixO,			864
.equiv		i2130_fiyO,			880
.equiv		i2130_fizO,			896
.equiv		i2130_fixH1,		912
.equiv		i2130_fiyH1,		928
.equiv		i2130_fizH1,		944
.equiv		i2130_fixH2,		960
.equiv		i2130_fiyH2,		976
.equiv		i2130_fizH2,		992
.equiv		i2130_fjxO,			1008
.equiv		i2130_fjyO,			1024
.equiv		i2130_fjzO,			1040
.equiv		i2130_fjxH1,		1056
.equiv		i2130_fjyH1,		1072
.equiv		i2130_fjzH1,		1088
.equiv		i2130_fjxH2,		1104
.equiv		i2130_fjyH2,		1120
.equiv		i2130_fjzH2,		1136
.equiv		i2130_half,			1152
.equiv		i2130_three,		1168
.equiv		i2130_rsqOO,		1184
.equiv		i2130_rsqOH1,		1200
.equiv		i2130_rsqOH2,		1216
.equiv		i2130_rsqH1O,		1232
.equiv		i2130_rsqH1H1,		1248
.equiv		i2130_rsqH1H2,		1264
.equiv		i2130_rsqH2O,		1280
.equiv		i2130_rsqH2H1,		1296
.equiv		i2130_rsqH2H2,		1312
.equiv		i2130_rinvOO,		1328
.equiv		i2130_rinvOH1,		1344
.equiv		i2130_rinvOH2,		1360
.equiv		i2130_rinvH1O,		1376
.equiv		i2130_rinvH1H1,		1392
.equiv		i2130_rinvH1H2,		1408
.equiv		i2130_rinvH2O,		1424
.equiv		i2130_rinvH2H1,		1440
.equiv		i2130_rinvH2H2,		1456
.equiv		i2130_two,			1472
.equiv		i2130_krf,			1488	
.equiv		i2130_crf,			1504
.equiv		i2130_is3,			1520
.equiv		i2130_ii3,			1524
.equiv		i2130_innerjjnr,	1528
.equiv		i2130_innerk,		1532
.equiv		i2130_salign,		1536							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1540		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2130_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movups xmm2, [sse_six]
	movups xmm3, [sse_twelve]
	movups xmm4, [sse_two]
	movss xmm5, [ebp + i2130_argkrf]
	movss xmm6, [ebp + i2130_argcrf]
	
	movaps [esp + i2130_half],  xmm0
	movaps [esp + i2130_three], xmm1
	movaps [esp + i2130_six],  xmm2
	movaps [esp + i2130_twelve], xmm3
	movaps [esp + i2130_two], xmm4
	shufps xmm5, xmm5, 0
	shufps xmm6, xmm6, 0
	movaps [esp + i2130_krf], xmm5
	movaps [esp + i2130_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i2130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2130_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + i2130_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i2130_qqOO], xmm3
	movaps [esp + i2130_qqOH], xmm4
	movaps [esp + i2130_qqHH], xmm5
		
	xorps xmm0, xmm0
	mov   edx, [ebp + i2130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + i2130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + i2130_nbfp]
	movlps xmm0, [eax + edx*4] 
	movaps xmm1, xmm0
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 85  ;# 01010101
	movaps [esp + i2130_c6], xmm0
	movaps [esp + i2130_c12], xmm1

.i2130_outer:
	mov   eax, [ebp + i2130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2130_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2130_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i2130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2130_pos]    ;# eax = base of pos[]  
	mov   [esp + i2130_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i2130_ixO], xmm3
	movaps [esp + i2130_iyO], xmm4
	movaps [esp + i2130_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i2130_ixH1], xmm0
	movaps [esp + i2130_iyH1], xmm1
	movaps [esp + i2130_izH1], xmm2
	movaps [esp + i2130_ixH2], xmm3
	movaps [esp + i2130_iyH2], xmm4
	movaps [esp + i2130_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i2130_vctot], xmm4
	movaps [esp + i2130_vnbtot], xmm4
	movaps [esp + i2130_fixO], xmm4
	movaps [esp + i2130_fiyO], xmm4
	movaps [esp + i2130_fizO], xmm4
	movaps [esp + i2130_fixH1], xmm4
	movaps [esp + i2130_fiyH1], xmm4
	movaps [esp + i2130_fizH1], xmm4
	movaps [esp + i2130_fixH2], xmm4
	movaps [esp + i2130_fiyH2], xmm4
	movaps [esp + i2130_fizH2], xmm4
	
	mov   eax, [ebp + i2130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2130_pos]
	mov   edi, [ebp + i2130_faction]	
	mov   eax, [ebp + i2130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i2130_innerk], edx    ;# number of innerloop atoms 
	jge   .i2130_unroll_loop
	jmp   .i2130_single_check
.i2130_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i2130_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + i2130_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i2130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d 
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd 
	movaps [esp + i2130_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + i2130_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + i2130_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + i2130_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + i2130_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + i2130_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + i2130_jzO],  xmm0
	movaps [esp + i2130_jzH1],  xmm1
	movaps [esp + i2130_jzH2],  xmm2

	movaps xmm0, [esp + i2130_ixO]
	movaps xmm1, [esp + i2130_iyO]
	movaps xmm2, [esp + i2130_izO]
	movaps xmm3, [esp + i2130_ixO]
	movaps xmm4, [esp + i2130_iyO]
	movaps xmm5, [esp + i2130_izO]
	subps  xmm0, [esp + i2130_jxO]
	subps  xmm1, [esp + i2130_jyO]
	subps  xmm2, [esp + i2130_jzO]
	subps  xmm3, [esp + i2130_jxH1]
	subps  xmm4, [esp + i2130_jyH1]
	subps  xmm5, [esp + i2130_jzH1]
	movaps [esp + i2130_dxOO], xmm0
	movaps [esp + i2130_dyOO], xmm1
	movaps [esp + i2130_dzOO], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i2130_dxOH1], xmm3
	movaps [esp + i2130_dyOH1], xmm4
	movaps [esp + i2130_dzOH1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i2130_rsqOO], xmm0
	movaps [esp + i2130_rsqOH1], xmm3

	movaps xmm0, [esp + i2130_ixO]
	movaps xmm1, [esp + i2130_iyO]
	movaps xmm2, [esp + i2130_izO]
	movaps xmm3, [esp + i2130_ixH1]
	movaps xmm4, [esp + i2130_iyH1]
	movaps xmm5, [esp + i2130_izH1]
	subps  xmm0, [esp + i2130_jxH2]
	subps  xmm1, [esp + i2130_jyH2]
	subps  xmm2, [esp + i2130_jzH2]
	subps  xmm3, [esp + i2130_jxO]
	subps  xmm4, [esp + i2130_jyO]
	subps  xmm5, [esp + i2130_jzO]
	movaps [esp + i2130_dxOH2], xmm0
	movaps [esp + i2130_dyOH2], xmm1
	movaps [esp + i2130_dzOH2], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i2130_dxH1O], xmm3
	movaps [esp + i2130_dyH1O], xmm4
	movaps [esp + i2130_dzH1O], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i2130_rsqOH2], xmm0
	movaps [esp + i2130_rsqH1O], xmm3

	movaps xmm0, [esp + i2130_ixH1]
	movaps xmm1, [esp + i2130_iyH1]
	movaps xmm2, [esp + i2130_izH1]
	movaps xmm3, [esp + i2130_ixH1]
	movaps xmm4, [esp + i2130_iyH1]
	movaps xmm5, [esp + i2130_izH1]
	subps  xmm0, [esp + i2130_jxH1]
	subps  xmm1, [esp + i2130_jyH1]
	subps  xmm2, [esp + i2130_jzH1]
	subps  xmm3, [esp + i2130_jxH2]
	subps  xmm4, [esp + i2130_jyH2]
	subps  xmm5, [esp + i2130_jzH2]
	movaps [esp + i2130_dxH1H1], xmm0
	movaps [esp + i2130_dyH1H1], xmm1
	movaps [esp + i2130_dzH1H1], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i2130_dxH1H2], xmm3
	movaps [esp + i2130_dyH1H2], xmm4
	movaps [esp + i2130_dzH1H2], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i2130_rsqH1H1], xmm0
	movaps [esp + i2130_rsqH1H2], xmm3

	movaps xmm0, [esp + i2130_ixH2]
	movaps xmm1, [esp + i2130_iyH2]
	movaps xmm2, [esp + i2130_izH2]
	movaps xmm3, [esp + i2130_ixH2]
	movaps xmm4, [esp + i2130_iyH2]
	movaps xmm5, [esp + i2130_izH2]
	subps  xmm0, [esp + i2130_jxO]
	subps  xmm1, [esp + i2130_jyO]
	subps  xmm2, [esp + i2130_jzO]
	subps  xmm3, [esp + i2130_jxH1]
	subps  xmm4, [esp + i2130_jyH1]
	subps  xmm5, [esp + i2130_jzH1]
	movaps [esp + i2130_dxH2O], xmm0
	movaps [esp + i2130_dyH2O], xmm1
	movaps [esp + i2130_dzH2O], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i2130_dxH2H1], xmm3
	movaps [esp + i2130_dyH2H1], xmm4
	movaps [esp + i2130_dzH2H1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + i2130_rsqH2O], xmm0
	movaps [esp + i2130_rsqH2H1], xmm4

	movaps xmm0, [esp + i2130_ixH2]
	movaps xmm1, [esp + i2130_iyH2]
	movaps xmm2, [esp + i2130_izH2]
	subps  xmm0, [esp + i2130_jxH2]
	subps  xmm1, [esp + i2130_jyH2]
	subps  xmm2, [esp + i2130_jzH2]
	movaps [esp + i2130_dxH2H2], xmm0
	movaps [esp + i2130_dyH2H2], xmm1
	movaps [esp + i2130_dzH2H2], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + i2130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i2130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i2130_half] ;# rinvH2H2 
	mulps   xmm7, [esp + i2130_half] ;# rinvH2H1 
	movaps  [esp + i2130_rinvH2H2], xmm3
	movaps  [esp + i2130_rinvH2H1], xmm7
	
	rsqrtps xmm1, [esp + i2130_rsqOO]
	rsqrtps xmm5, [esp + i2130_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i2130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i2130_rsqOO]
	mulps   xmm5, [esp + i2130_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i2130_half] 
	mulps   xmm7, [esp + i2130_half]
	movaps  [esp + i2130_rinvOO], xmm3
	movaps  [esp + i2130_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + i2130_rsqOH2]
	rsqrtps xmm5, [esp + i2130_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i2130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i2130_rsqOH2]
	mulps   xmm5, [esp + i2130_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i2130_half] 
	mulps   xmm7, [esp + i2130_half]
	movaps  [esp + i2130_rinvOH2], xmm3
	movaps  [esp + i2130_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + i2130_rsqH1H1]
	rsqrtps xmm5, [esp + i2130_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i2130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i2130_rsqH1H1]
	mulps   xmm5, [esp + i2130_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i2130_half] 
	mulps   xmm7, [esp + i2130_half]
	movaps  [esp + i2130_rinvH1H1], xmm3
	movaps  [esp + i2130_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + i2130_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i2130_three]
	mulps   xmm1, [esp + i2130_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + i2130_half] 
	movaps  [esp + i2130_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + i2130_rinvOO]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2130_krf]
	mulps  xmm0, xmm0
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	mulps  xmm5, [esp + i2130_rsqOO] ;# xmm5=krsq 
	movaps xmm6, xmm5
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	subps  xmm6, [esp + i2130_crf]
	
	mulps  xmm6, [esp + i2130_qqOO] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	mulps xmm5, [esp + i2130_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2130_qqOO] ;# xmm7 = coul part of fscal 
	
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm1, [esp + i2130_c6]	
	mulps  xmm2, [esp + i2130_c12]	
	movaps xmm3, xmm2
	subps  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addps  xmm3, [esp + i2130_vnbtot]
	mulps  xmm1, [esp + i2130_six]
	mulps  xmm2, [esp + i2130_twelve]
	movaps [esp + i2130_vnbtot], xmm3
	subps  xmm2, xmm1
	addps  xmm2, xmm7
	addps  xmm6, [esp + i2130_vctot] ;# local vctot summation variable 
	mulps  xmm0, xmm2
	
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i2130_dxOO]
	mulps xmm1, [esp + i2130_dyOO]
	mulps xmm2, [esp + i2130_dzOO]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2130_fixO]
	addps xmm1, [esp + i2130_fiyO]
	addps xmm2, [esp + i2130_fizO]
	movaps [esp + i2130_fjxO], xmm3
	movaps [esp + i2130_fjyO], xmm4
	movaps [esp + i2130_fjzO], xmm5
	movaps [esp + i2130_fixO], xmm0
	movaps [esp + i2130_fiyO], xmm1
	movaps [esp + i2130_fizO], xmm2

	;# O-H1 interaction 
	movaps xmm0, [esp + i2130_rinvOH1]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2130_krf]
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2130_rsqOH1] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulps  xmm0, xmm0
	subps  xmm4, [esp + i2130_crf]
	mulps  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulps  xmm5, [esp + i2130_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH1  
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i2130_dxOH1]
	mulps xmm1, [esp + i2130_dyOH1]
	mulps xmm2, [esp + i2130_dzOH1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2130_fixO]
	addps xmm1, [esp + i2130_fiyO]
	addps xmm2, [esp + i2130_fizO]
	movaps [esp + i2130_fjxH1], xmm3
	movaps [esp + i2130_fjyH1], xmm4
	movaps [esp + i2130_fjzH1], xmm5
	movaps [esp + i2130_fixO], xmm0
	movaps [esp + i2130_fiyO], xmm1
	movaps [esp + i2130_fizO], xmm2

	;# O-H2 interaction  
	movaps xmm0, [esp + i2130_rinvOH2]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2130_rsqOH2] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulps xmm0, xmm0
	subps  xmm4, [esp + i2130_crf]
	mulps  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulps  xmm5, [esp + i2130_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i2130_dxOH2]
	mulps xmm1, [esp + i2130_dyOH2]
	mulps xmm2, [esp + i2130_dzOH2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2130_fixO]
	addps xmm1, [esp + i2130_fiyO]
	addps xmm2, [esp + i2130_fizO]
	movaps [esp + i2130_fjxH2], xmm3
	movaps [esp + i2130_fjyH2], xmm4
	movaps [esp + i2130_fjzH2], xmm5
	movaps [esp + i2130_fixO], xmm0
	movaps [esp + i2130_fiyO], xmm1
	movaps [esp + i2130_fizO], xmm2

	;# H1-O interaction 
	movaps xmm0, [esp + i2130_rinvH1O]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2130_rsqH1O] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulps xmm0, xmm0
	subps  xmm4, [esp + i2130_crf]
	mulps  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulps  xmm5, [esp + i2130_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	movaps xmm3, [esp + i2130_fjxO]
	movaps xmm4, [esp + i2130_fjyO]
	movaps xmm5, [esp + i2130_fjzO]
	mulps xmm0, [esp + i2130_dxH1O]
	mulps xmm1, [esp + i2130_dyH1O]
	mulps xmm2, [esp + i2130_dzH1O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2130_fixH1]
	addps xmm1, [esp + i2130_fiyH1]
	addps xmm2, [esp + i2130_fizH1]
	movaps [esp + i2130_fjxO], xmm3
	movaps [esp + i2130_fjyO], xmm4
	movaps [esp + i2130_fjzO], xmm5
	movaps [esp + i2130_fixH1], xmm0
	movaps [esp + i2130_fiyH1], xmm1
	movaps [esp + i2130_fizH1], xmm2

	;# H1-H1 interaction 
	movaps xmm0, [esp + i2130_rinvH1H1]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2130_rsqH1H1] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2130_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulps  xmm5, [esp + i2130_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	movaps xmm3, [esp + i2130_fjxH1]
	movaps xmm4, [esp + i2130_fjyH1]
	movaps xmm5, [esp + i2130_fjzH1]
	mulps xmm0, [esp + i2130_dxH1H1]
	mulps xmm1, [esp + i2130_dyH1H1]
	mulps xmm2, [esp + i2130_dzH1H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2130_fixH1]
	addps xmm1, [esp + i2130_fiyH1]
	addps xmm2, [esp + i2130_fizH1]
	movaps [esp + i2130_fjxH1], xmm3
	movaps [esp + i2130_fjyH1], xmm4
	movaps [esp + i2130_fjzH1], xmm5
	movaps [esp + i2130_fixH1], xmm0
	movaps [esp + i2130_fiyH1], xmm1
	movaps [esp + i2130_fizH1], xmm2

	;# H1-H2 interaction 
	movaps xmm0, [esp + i2130_rinvH1H2]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2130_rsqH1H2] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulps xmm0, xmm0
	subps  xmm4, [esp + i2130_crf]
	mulps  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulps  xmm5, [esp + i2130_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	
	movaps xmm3, [esp + i2130_fjxH2]
	movaps xmm4, [esp + i2130_fjyH2]
	movaps xmm5, [esp + i2130_fjzH2]
	mulps xmm0, [esp + i2130_dxH1H2]
	mulps xmm1, [esp + i2130_dyH1H2]
	mulps xmm2, [esp + i2130_dzH1H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2130_fixH1]
	addps xmm1, [esp + i2130_fiyH1]
	addps xmm2, [esp + i2130_fizH1]
	movaps [esp + i2130_fjxH2], xmm3
	movaps [esp + i2130_fjyH2], xmm4
	movaps [esp + i2130_fjzH2], xmm5
	movaps [esp + i2130_fixH1], xmm0
	movaps [esp + i2130_fiyH1], xmm1
	movaps [esp + i2130_fizH1], xmm2

	;# H2-O interaction 
	movaps xmm0, [esp + i2130_rinvH2O]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2130_rsqH2O] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2130_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulps  xmm5, [esp + i2130_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2130_qqOH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	movaps xmm3, [esp + i2130_fjxO]
	movaps xmm4, [esp + i2130_fjyO]
	movaps xmm5, [esp + i2130_fjzO]
	mulps xmm0, [esp + i2130_dxH2O]
	mulps xmm1, [esp + i2130_dyH2O]
	mulps xmm2, [esp + i2130_dzH2O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2130_fixH2]
	addps xmm1, [esp + i2130_fiyH2]
	addps xmm2, [esp + i2130_fizH2]
	movaps [esp + i2130_fjxO], xmm3
	movaps [esp + i2130_fjyO], xmm4
	movaps [esp + i2130_fjzO], xmm5
	movaps [esp + i2130_fixH2], xmm0
	movaps [esp + i2130_fiyH2], xmm1
	movaps [esp + i2130_fizH2], xmm2

	;# H2-H1 interaction 
	movaps xmm0, [esp + i2130_rinvH2H1]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2130_rsqH2H1] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2130_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulps  xmm5, [esp + i2130_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	movaps xmm3, [esp + i2130_fjxH1]
	movaps xmm4, [esp + i2130_fjyH1]
	movaps xmm5, [esp + i2130_fjzH1]
	mulps xmm0, [esp + i2130_dxH2H1]
	mulps xmm1, [esp + i2130_dyH2H1]
	mulps xmm2, [esp + i2130_dzH2H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2130_fixH2]
	addps xmm1, [esp + i2130_fiyH2]
	addps xmm2, [esp + i2130_fizH2]
	movaps [esp + i2130_fjxH1], xmm3
	movaps [esp + i2130_fjyH1], xmm4
	movaps [esp + i2130_fjzH1], xmm5
	movaps [esp + i2130_fixH2], xmm0
	movaps [esp + i2130_fiyH2], xmm1
	movaps [esp + i2130_fizH2], xmm2

	;# H2-H2 interaction 
	movaps xmm0, [esp + i2130_rinvH2H2]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2130_rsqH2H2] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2130_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	mulps  xmm5, [esp + i2130_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2130_qqHH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	movaps xmm1, xmm0
	movaps [esp + i2130_vctot], xmm6
	movaps xmm2, xmm0
	
	movaps xmm3, [esp + i2130_fjxH2]
	movaps xmm4, [esp + i2130_fjyH2]
	movaps xmm5, [esp + i2130_fjzH2]
	mulps xmm0, [esp + i2130_dxH2H2]
	mulps xmm1, [esp + i2130_dyH2H2]
	mulps xmm2, [esp + i2130_dzH2H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2130_fixH2]
	addps xmm1, [esp + i2130_fiyH2]
	addps xmm2, [esp + i2130_fizH2]
	movaps [esp + i2130_fjxH2], xmm3
	movaps [esp + i2130_fjyH2], xmm4
	movaps [esp + i2130_fjzH2], xmm5
	movaps [esp + i2130_fixH2], xmm0
	movaps [esp + i2130_fiyH2], xmm1
	movaps [esp + i2130_fizH2], xmm2

	mov edi, [ebp + i2130_faction]
		
	;# Did all interactions - now update j forces 
	;# 4 j waters with three atoms each - first do a & b j particles 
	movaps xmm0, [esp + i2130_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i2130_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpcklps xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjxOb  fjyOb 
	movaps xmm1, [esp + i2130_fjzO]
	movaps xmm2, [esp + i2130_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOb  fjyOb  
	unpcklps xmm1, xmm2	   ;# xmm1= fjzOa  fjxH1a fjzOb  fjxH1b 
	movaps xmm4, [esp + i2130_fjyH1]
	movaps xmm5, [esp + i2130_fjzH1]
	unpcklps xmm4, xmm5	   ;# xmm4= fjyH1a fjzH1a fjyH1b fjzH1b 
	movaps xmm5, [esp + i2130_fjxH2]
	movaps xmm6, [esp + i2130_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1b fjzH1b 
	unpcklps xmm5, xmm6	   ;# xmm5= fjxH2a fjyH2a fjxH2b fjyH2b 
	movlhps  xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjzOa  fjxH1a 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOb  fjyOb  fjzOb  fjxH1b 
	movlhps  xmm4, xmm5   	   ;# xmm4= fjyH1a fjzH1a fjxH2a fjyH2a 
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1b fjzH1b fjxH2b fjyH2b 
	movups   xmm1, [edi + eax*4]
	movups   xmm2, [edi + eax*4 + 16]
	movups   xmm5, [edi + ebx*4]
	movups   xmm6, [edi + ebx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + eax*4 + 32]
	movss    xmm3, [edi + ebx*4 + 32]
	
	movaps   xmm4, [esp + i2130_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm7, xmm7, 1
	
	movups   [edi + eax*4],     xmm1
	movups   [edi + eax*4 + 16],xmm2
	movups   [edi + ebx*4],     xmm5
	movups   [edi + ebx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + eax*4 + 32], xmm0
	movss    [edi + ebx*4 + 32], xmm3	

	;# then do the second pair (c & d) 
	movaps xmm0, [esp + i2130_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i2130_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpckhps xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjxOd  fjyOd 
	movaps xmm1, [esp + i2130_fjzO]
	movaps xmm2, [esp + i2130_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOd  fjyOd  
	unpckhps xmm1, xmm2	   ;# xmm1= fjzOc  fjxH1c fjzOd  fjxH1d 
	movaps xmm4, [esp + i2130_fjyH1]
	movaps xmm5, [esp + i2130_fjzH1]
	unpckhps xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjyH1d fjzH1d	
	movaps xmm5, [esp + i2130_fjxH2]
	movaps xmm6, [esp + i2130_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1d fjzH1d 	 
	unpckhps xmm5, xmm6	   ;# xmm5= fjxH2c fjyH2c fjxH2d fjyH2d 
	movlhps  xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjzOc  fjxH1c 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOd  fjyOd  fjzOd  fjxH1d 
	movlhps  xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjxH2c fjyH2c  
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1d fjzH1d fjxH2d fjyH2d 
	movups   xmm1, [edi + ecx*4]
	movups   xmm2, [edi + ecx*4 + 16]
	movups   xmm5, [edi + edx*4]
	movups   xmm6, [edi + edx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + ecx*4 + 32]
	movss    xmm3, [edi + edx*4 + 32]
	
	movaps   xmm4, [esp + i2130_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm4, xmm4, 2 ;# 00000010
	shufps   xmm7, xmm7, 3 ;# 00000011
	movups   [edi + ecx*4],     xmm1
	movups   [edi + ecx*4 + 16],xmm2
	movups   [edi + edx*4],     xmm5
	movups   [edi + edx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + ecx*4 + 32], xmm0
	movss    [edi + edx*4 + 32], xmm3	
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i2130_innerk],  4
	jl    .i2130_single_check
	jmp   .i2130_unroll_loop
.i2130_single_check:
	add dword ptr [esp + i2130_innerk],  4
	jnz   .i2130_single_loop
	jmp   .i2130_updateouterdata
.i2130_single_loop:
	mov   edx, [esp + i2130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i2130_innerjjnr],  4	

	mov esi, [ebp + i2130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + i2130_ixO]     
	movaps  xmm1, [esp + i2130_iyO]
	movaps  xmm2, [esp + i2130_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + i2130_jxO], xmm3
	movaps [esp + i2130_jyO], xmm4
	movaps [esp + i2130_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	movaps [esp + i2130_dxOO], xmm0
	movaps [esp + i2130_dyOO], xmm1
	movaps [esp + i2130_dzOO], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 

	movaps xmm6, xmm0
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	mulps   xmm6, [esp + i2130_krf] ;# xmm6=krsq 
	movaps  xmm2, xmm1
	movaps  xmm7, xmm6
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i2130_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + i2130_half] ;# rinv iO - j water 

	addps   xmm6, xmm3	;# xmm6=rinv+ krsq 
	mulps   xmm7, [esp + i2130_two]
	subps  xmm6, [esp + i2130_crf]	;# xmm6=rinv+ krsq-crf 
	
	xorps   xmm1, xmm1
	movaps  xmm0, xmm3
	subps   xmm3, xmm7	;# xmm3=rinv-2*krsq 
	xorps   xmm4, xmm4
	mulps   xmm0, xmm0	;# xmm0=rinvsq 
	;# fetch charges to xmm4 (temporary) 
	movss   xmm4, [esp + i2130_qqOO]
	movss   xmm1, xmm0
	movhps  xmm4, [esp + i2130_qqOH]
	mulss   xmm1, xmm0

	mulps xmm6, xmm4	;# vcoul  
	mulps xmm3, xmm4	;# coul part of fs  
	
	mulss   xmm1, xmm0	;# xmm1(0)=rinvsix 
	movaps  xmm2, xmm1	;# zero everything else in xmm2 
	mulss   xmm2, xmm2	;# xmm2=rinvtwelve 

	mulss   xmm1, [esp + i2130_c6]
	mulss   xmm2, [esp + i2130_c12]
	movaps  xmm4, xmm2
	subss   xmm4, xmm1	;# vnbtot=vnb12-vnb6 
	addps   xmm4, [esp + i2130_vnbtot]
	mulss   xmm1, [esp + i2130_six]
	mulss   xmm2, [esp + i2130_twelve]	
	movaps  [esp + i2130_vnbtot], xmm4
	subss   xmm2, xmm1	;# fsD+ fsR 
	addps   xmm2, xmm3	;# fsC+ fsD+ fsR 

	addps   xmm6, [esp + i2130_vctot]
	mulps   xmm0, xmm2	;# total fscal 
	movaps  [esp + i2130_vctot], xmm6	

	movaps  xmm1, xmm0
	movaps  xmm2, xmm0
	mulps   xmm0, [esp + i2130_dxOO]
	mulps   xmm1, [esp + i2130_dyOO]
	mulps   xmm2, [esp + i2130_dzOO]
	
	;# initial update for j forces 
	xorps   xmm3, xmm3
	xorps   xmm4, xmm4
	xorps   xmm5, xmm5
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i2130_fjxO], xmm3
	movaps  [esp + i2130_fjyO], xmm4
	movaps  [esp + i2130_fjzO], xmm5
	addps   xmm0, [esp + i2130_fixO]
	addps   xmm1, [esp + i2130_fiyO]
	addps   xmm2, [esp + i2130_fizO]
	movaps  [esp + i2130_fixO], xmm0
	movaps  [esp + i2130_fiyO], xmm1
	movaps  [esp + i2130_fizO], xmm2

	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + i2130_ixH1]
	movaps  xmm1, [esp + i2130_iyH1]
	movaps  xmm2, [esp + i2130_izH1]	
	movaps  xmm3, [esp + i2130_ixH2] 
	movaps  xmm4, [esp + i2130_iyH2] 
	movaps  xmm5, [esp + i2130_izH2] 
	subps   xmm0, [esp + i2130_jxO]
	subps   xmm1, [esp + i2130_jyO]
	subps   xmm2, [esp + i2130_jzO]
	subps   xmm3, [esp + i2130_jxO]
	subps   xmm4, [esp + i2130_jyO]
	subps   xmm5, [esp + i2130_jzO]
	movaps [esp + i2130_dxH1O], xmm0
	movaps [esp + i2130_dyH1O], xmm1
	movaps [esp + i2130_dzH1O], xmm2
	movaps [esp + i2130_dxH2O], xmm3
	movaps [esp + i2130_dyH2O], xmm4
	movaps [esp + i2130_dzH2O], xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i2130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i2130_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + i2130_half] ;# rinv H2 - j water  

	mulps xmm0, [esp + i2130_krf] ;# krsq 
	mulps xmm4, [esp + i2130_krf] ;# krsq  


	;# assemble charges in xmm6 
	xorps   xmm6, xmm6
	movss   xmm6, [esp + i2130_qqOH]
	movhps  xmm6, [esp + i2130_qqHH]
	movaps  xmm1, xmm0
	movaps  xmm5, xmm4
	addps   xmm0, xmm3	;# krsq+ rinv 
	addps   xmm4, xmm7	;# krsq+ rinv 
	subps xmm0, [esp + i2130_crf]
	subps xmm4, [esp + i2130_crf]
	mulps   xmm1, [esp + i2130_two]
	mulps   xmm5, [esp + i2130_two]
	mulps   xmm0, xmm6	;# vcoul 
	mulps   xmm4, xmm6	;# vcoul 
	addps   xmm4, xmm0		
	addps   xmm4, [esp + i2130_vctot]
	movaps  [esp + i2130_vctot], xmm4
	movaps  xmm0, xmm3
	movaps  xmm4, xmm7
	mulps   xmm3, xmm3
	mulps   xmm7, xmm7
	subps   xmm0, xmm1
	subps   xmm4, xmm5
	mulps   xmm0, xmm6
	mulps   xmm4, xmm6
	mulps   xmm0, xmm3	;# fscal 
	mulps   xmm7, xmm4	;# fscal 
	
	movaps  xmm1, xmm0
	movaps  xmm2, xmm0
	mulps   xmm0, [esp + i2130_dxH1O]
	mulps   xmm1, [esp + i2130_dyH1O]
	mulps   xmm2, [esp + i2130_dzH1O]
	;# update forces H1 - j water 
	movaps  xmm3, [esp + i2130_fjxO]
	movaps  xmm4, [esp + i2130_fjyO]
	movaps  xmm5, [esp + i2130_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i2130_fjxO], xmm3
	movaps  [esp + i2130_fjyO], xmm4
	movaps  [esp + i2130_fjzO], xmm5
	addps   xmm0, [esp + i2130_fixH1]
	addps   xmm1, [esp + i2130_fiyH1]
	addps   xmm2, [esp + i2130_fizH1]
	movaps  [esp + i2130_fixH1], xmm0
	movaps  [esp + i2130_fiyH1], xmm1
	movaps  [esp + i2130_fizH1], xmm2
	;# do forces H2 - j water 
	movaps xmm0, xmm7
	movaps xmm1, xmm7
	movaps xmm2, xmm7
	mulps   xmm0, [esp + i2130_dxH2O]
	mulps   xmm1, [esp + i2130_dyH2O]
	mulps   xmm2, [esp + i2130_dzH2O]
	movaps  xmm3, [esp + i2130_fjxO]
	movaps  xmm4, [esp + i2130_fjyO]
	movaps  xmm5, [esp + i2130_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	mov     esi, [ebp + i2130_faction]
	movaps  [esp + i2130_fjxO], xmm3
	movaps  [esp + i2130_fjyO], xmm4
	movaps  [esp + i2130_fjzO], xmm5
	addps   xmm0, [esp + i2130_fixH2]
	addps   xmm1, [esp + i2130_fiyH2]
	addps   xmm2, [esp + i2130_fizH2]
	movaps  [esp + i2130_fixH2], xmm0
	movaps  [esp + i2130_fiyH2], xmm1
	movaps  [esp + i2130_fizH2], xmm2

	;# update j water forces from local variables 
	movlps  xmm0, [esi + eax*4]
	movlps  xmm1, [esi + eax*4 + 12]
	movhps  xmm1, [esi + eax*4 + 24]
	movaps  xmm3, [esp + i2130_fjxO]
	movaps  xmm4, [esp + i2130_fjyO]
	movaps  xmm5, [esp + i2130_fjzO]
	movaps  xmm6, xmm5
	movaps  xmm7, xmm5
	shufps  xmm6, xmm6, 2 ;# 00000010
	shufps  xmm7, xmm7, 3 ;# 00000011
	addss   xmm5, [esi + eax*4 + 8]
	addss   xmm6, [esi + eax*4 + 20]
	addss   xmm7, [esi + eax*4 + 32]
	movss   [esi + eax*4 + 8], xmm5
	movss   [esi + eax*4 + 20], xmm6
	movss   [esi + eax*4 + 32], xmm7
	movaps   xmm5, xmm3
	unpcklps xmm3, xmm4
	unpckhps xmm5, xmm4
	addps    xmm0, xmm3
	addps    xmm1, xmm5
	movlps  [esi + eax*4], xmm0 
	movlps  [esi + eax*4 + 12], xmm1 
	movhps  [esi + eax*4 + 24], xmm1 
	
	dec dword ptr [esp + i2130_innerk]
	jz    .i2130_updateouterdata
	jmp   .i2130_single_loop
.i2130_updateouterdata:
	mov   ecx, [esp + i2130_ii3]
	mov   edi, [ebp + i2130_faction]
	mov   esi, [ebp + i2130_fshift]
	mov   edx, [esp + i2130_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2130_fixO]
	movaps xmm1, [esp + i2130_fiyO] 
	movaps xmm2, [esp + i2130_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	
 
	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2130_fixH1]
	movaps xmm1, [esp + i2130_fiyH1]
	movaps xmm2, [esp + i2130_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2130_fixH2]
	movaps xmm1, [esp + i2130_fiyH2]
	movaps xmm2, [esp + i2130_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	;# get group index for i particle 
	mov   edx, [ebp + i2130_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i2130_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i2130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i2130_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i2130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i2130_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2130_nri]
	dec ecx
	jecxz .i2130_end
	;# not last, iterate once more!  
	mov [ebp + i2130_nri], ecx
	jmp .i2130_outer
.i2130_end:
	emms
	mov eax, [esp + i2130_salign]
	add esp, eax
	add esp, 1540
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	

.globl inl2020_sse
.globl _inl2020_sse
inl2020_sse:	
_inl2020_sse:	
.equiv		i2020_nri,			8
.equiv		i2020_iinr,			12
.equiv		i2020_jindex,		16
.equiv		i2020_jjnr,			20
.equiv		i2020_shift,		24
.equiv		i2020_shiftvec,		28
.equiv		i2020_fshift,		32
.equiv		i2020_gid,			36
.equiv		i2020_pos,			40		
.equiv		i2020_faction,		44
.equiv		i2020_charge,		48
.equiv		i2020_facel,		52
.equiv		i2020_Vc,			56			
.equiv		i2020_argkrf,		60	
.equiv		i2020_argcrf,		64	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i2020_ixO,			0
.equiv		i2020_iyO,			16
.equiv		i2020_izO,			32
.equiv		i2020_ixH1,			48
.equiv		i2020_iyH1,			64
.equiv		i2020_izH1,			80
.equiv		i2020_ixH2,			96
.equiv		i2020_iyH2,			112
.equiv		i2020_izH2,			128
.equiv		i2020_iqO,			144 
.equiv		i2020_iqH,			160 
.equiv		i2020_dxO,			176
.equiv		i2020_dyO,			192
.equiv		i2020_dzO,			208	
.equiv		i2020_dxH1,			224
.equiv		i2020_dyH1,			240
.equiv		i2020_dzH1,			256	
.equiv		i2020_dxH2,			272
.equiv		i2020_dyH2,			288
.equiv		i2020_dzH2,			304	
.equiv		i2020_qqO,			320
.equiv		i2020_qqH,			336
.equiv		i2020_vctot,		352
.equiv		i2020_fixO,			384
.equiv		i2020_fiyO,			400
.equiv		i2020_fizO,			416
.equiv		i2020_fixH1,		432
.equiv		i2020_fiyH1,		448
.equiv		i2020_fizH1,		464
.equiv		i2020_fixH2,		480
.equiv		i2020_fiyH2,		496
.equiv		i2020_fizH2,		512
.equiv		i2020_fjx,			528
.equiv		i2020_fjy,			544
.equiv		i2020_fjz,			560
.equiv		i2020_half,			576
.equiv		i2020_three,		592
.equiv		i2020_two,			608
.equiv		i2020_krf,			624
.equiv		i2020_crf,			640
.equiv		i2020_krsqO,		656
.equiv		i2020_krsqH1,		672
.equiv		i2020_krsqH2,		688	 		
.equiv		i2020_is3,			704
.equiv		i2020_ii3,			708
.equiv		i2020_innerjjnr,	712
.equiv		i2020_innerk,		716
.equiv		i2020_salign,		720								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 724		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2020_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movups xmm4, [sse_two]
	movss xmm5, [ebp + i2020_argkrf]
	movss xmm6, [ebp + i2020_argcrf]

	movaps [esp + i2020_half],  xmm0
	movaps [esp + i2020_three], xmm1
	movaps [esp + i2020_two], xmm4
	shufps xmm5, xmm5, 0
	shufps xmm6, xmm6, 0
	movaps [esp + i2020_krf], xmm5
	movaps [esp + i2020_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i2020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2020_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + i2020_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + i2020_iqO], xmm3
	movaps [esp + i2020_iqH], xmm4
			
.i2020_outer:
	mov   eax, [ebp + i2020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2020_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2020_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i2020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2020_pos]    ;# eax = base of pos[]  
	mov   [esp + i2020_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i2020_ixO], xmm3
	movaps [esp + i2020_iyO], xmm4
	movaps [esp + i2020_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i2020_ixH1], xmm0
	movaps [esp + i2020_iyH1], xmm1
	movaps [esp + i2020_izH1], xmm2
	movaps [esp + i2020_ixH2], xmm3
	movaps [esp + i2020_iyH2], xmm4
	movaps [esp + i2020_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i2020_vctot], xmm4
	movaps [esp + i2020_fixO], xmm4
	movaps [esp + i2020_fiyO], xmm4
	movaps [esp + i2020_fizO], xmm4
	movaps [esp + i2020_fixH1], xmm4
	movaps [esp + i2020_fiyH1], xmm4
	movaps [esp + i2020_fizH1], xmm4
	movaps [esp + i2020_fixH2], xmm4
	movaps [esp + i2020_fiyH2], xmm4
	movaps [esp + i2020_fizH2], xmm4
	
	mov   eax, [ebp + i2020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2020_pos]
	mov   edi, [ebp + i2020_faction]	
	mov   eax, [ebp + i2020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i2020_innerk], edx    ;# number of innerloop atoms 
	jge   .i2020_unroll_loop
	jmp   .i2020_odd_inner
.i2020_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + i2020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + i2020_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i2020_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + i2020_iqO]
	mulps  xmm4, [esp + i2020_iqH]

	movaps  [esp + i2020_qqO], xmm3
	movaps  [esp + i2020_qqH], xmm4

	mov esi, [ebp + i2020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + i2020_ixO]
	movaps xmm5, [esp + i2020_iyO]
	movaps xmm6, [esp + i2020_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i2020_dxO], xmm4
	movaps [esp + i2020_dyO], xmm5
	movaps [esp + i2020_dzO], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + i2020_ixH1]
	movaps xmm5, [esp + i2020_iyH1]
	movaps xmm6, [esp + i2020_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i2020_dxH1], xmm4
	movaps [esp + i2020_dyH1], xmm5
	movaps [esp + i2020_dzH1], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + i2020_ixH2]
	movaps xmm4, [esp + i2020_iyH2]
	movaps xmm5, [esp + i2020_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# store dr 
	movaps [esp + i2020_dxH2], xmm3
	movaps [esp + i2020_dyH2], xmm4
	movaps [esp + i2020_dzH2], xmm5
	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	movaps xmm0, xmm5
	movaps xmm1, xmm6
	movaps xmm2, xmm7

	mulps  xmm0, [esp + i2020_krf]	
	mulps  xmm1, [esp + i2020_krf]	
	mulps  xmm2, [esp + i2020_krf]	

	movaps [esp + i2020_krsqH2], xmm0
	movaps [esp + i2020_krsqH1], xmm1
	movaps [esp + i2020_krsqO], xmm2
	
	;# start with rsqO - seed in xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i2020_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i2020_half]
	movaps  xmm7, xmm4	;# rinvO in xmm7 
	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i2020_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i2020_half]
	movaps  xmm6, xmm4	;# rinvH1 in xmm6 
	;# rsqH2 - seed in xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i2020_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i2020_half]
	movaps  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movaps  xmm4, xmm7	
	mulps   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 

	movaps xmm0, xmm7
	movaps xmm1, [esp + i2020_krsqO]
	addps  xmm0, xmm1
	subps  xmm0, [esp + i2020_crf] ;# xmm0=rinv+ krsq-crf 
	mulps  xmm1, [esp + i2020_two]
	subps  xmm7, xmm1
	mulps  xmm0, [esp + i2020_qqO]
	mulps  xmm7, [esp + i2020_qqO]

	mulps  xmm4, xmm7	;# total fsO in xmm4 

	addps  xmm0, [esp + i2020_vctot]
	movaps [esp + i2020_vctot], xmm0

	movaps xmm0, [esp + i2020_dxO]
	movaps xmm1, [esp + i2020_dyO]
	movaps xmm2, [esp + i2020_dzO]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update O forces 
	movaps xmm3, [esp + i2020_fixO]
	movaps xmm4, [esp + i2020_fiyO]
	movaps xmm7, [esp + i2020_fizO]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i2020_fixO], xmm3
	movaps [esp + i2020_fiyO], xmm4
	movaps [esp + i2020_fizO], xmm7
	;# update j forces with water O 
	movaps [esp + i2020_fjx], xmm0
	movaps [esp + i2020_fjy], xmm1
	movaps [esp + i2020_fjz], xmm2

	;# H1 interactions 
	movaps  xmm4, xmm6	
	mulps   xmm4, xmm4	;# xmm6=rinv, xmm4=rinvsq 
	movaps  xmm7, xmm6
	movaps  xmm0, [esp + i2020_krsqH1]
	addps   xmm6, xmm0	;# xmm6=rinv+ krsq 
	subps   xmm6, [esp + i2020_crf] ;# xmm6=rinv+ krsq-crf 
	mulps   xmm0, [esp + i2020_two]
	subps   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulps   xmm6, [esp + i2020_qqH] ;# vcoul 
	mulps   xmm7, [esp + i2020_qqH]
	mulps  xmm4, xmm7		;# total fsH1 in xmm4 
	
	addps  xmm6, [esp + i2020_vctot]

	movaps xmm0, [esp + i2020_dxH1]
	movaps xmm1, [esp + i2020_dyH1]
	movaps xmm2, [esp + i2020_dzH1]
	movaps [esp + i2020_vctot], xmm6
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H1 forces 
	movaps xmm3, [esp + i2020_fixH1]
	movaps xmm4, [esp + i2020_fiyH1]
	movaps xmm7, [esp + i2020_fizH1]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i2020_fixH1], xmm3
	movaps [esp + i2020_fiyH1], xmm4
	movaps [esp + i2020_fizH1], xmm7
	;# update j forces with water H1 
	addps  xmm0, [esp + i2020_fjx]
	addps  xmm1, [esp + i2020_fjy]
	addps  xmm2, [esp + i2020_fjz]
	movaps [esp + i2020_fjx], xmm0
	movaps [esp + i2020_fjy], xmm1
	movaps [esp + i2020_fjz], xmm2

	;# H2 interactions 
	movaps  xmm4, xmm5	
	mulps   xmm4, xmm4	;# xmm5=rinv, xmm4=rinvsq 
	movaps  xmm7, xmm5
	movaps  xmm0, [esp + i2020_krsqH2]
	addps   xmm5, xmm0	;# xmm6=rinv+ krsq 
	subps   xmm5, [esp + i2020_crf] ;# xmm5=rinv+ krsq-crf 
	mulps   xmm0, [esp + i2020_two]
	subps   xmm7, xmm0	;# xmm7=rinv-2*krsq 
	mulps   xmm5, [esp + i2020_qqH] ;# vcoul 
	mulps   xmm7, [esp + i2020_qqH]
	mulps  xmm4, xmm7		;# total fsH2 in xmm4 
	
	addps  xmm5, [esp + i2020_vctot]

	movaps xmm0, [esp + i2020_dxH2]
	movaps xmm1, [esp + i2020_dyH2]
	movaps xmm2, [esp + i2020_dzH2]
	movaps [esp + i2020_vctot], xmm5
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H2 forces 
	movaps xmm3, [esp + i2020_fixH2]
	movaps xmm4, [esp + i2020_fiyH2]
	movaps xmm7, [esp + i2020_fizH2]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i2020_fixH2], xmm3
	movaps [esp + i2020_fiyH2], xmm4
	movaps [esp + i2020_fizH2], xmm7

	mov edi, [ebp + i2020_faction]
	;# update j forces 
	addps xmm0, [esp + i2020_fjx]
	addps xmm1, [esp + i2020_fjy]
	addps xmm2, [esp + i2020_fjz]

	movlps xmm4, [edi + eax*4]
	movlps xmm7, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm7, [edi + edx*4]
	
	movaps xmm3, xmm4
	shufps xmm3, xmm7, 136  ;# 10001000
	shufps xmm4, xmm7, 221  ;# 11011101			      
	;# xmm3 has fjx, xmm4 has fjy 
	subps xmm3, xmm0
	subps xmm4, xmm1
	;# unpack them back for storing 
	movaps xmm7, xmm3
	unpcklps xmm7, xmm4
	unpckhps xmm3, xmm4	
	movlps [edi + eax*4], xmm7
	movlps [edi + ecx*4], xmm3
	movhps [edi + ebx*4], xmm7
	movhps [edi + edx*4], xmm3
	;# finally z forces 
	movss  xmm0, [edi + eax*4 + 8]
	movss  xmm1, [edi + ebx*4 + 8]
	movss  xmm3, [edi + ecx*4 + 8]
	movss  xmm4, [edi + edx*4 + 8]
	subss  xmm0, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm1, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm3, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm4, xmm2
	movss  [edi + eax*4 + 8], xmm0
	movss  [edi + ebx*4 + 8], xmm1
	movss  [edi + ecx*4 + 8], xmm3
	movss  [edi + edx*4 + 8], xmm4
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i2020_innerk],  4
	jl    .i2020_odd_inner
	jmp   .i2020_unroll_loop
.i2020_odd_inner:	
	add dword ptr [esp + i2020_innerk],  4
	jnz   .i2020_odd_loop
	jmp   .i2020_updateouterdata
.i2020_odd_loop:
	mov   edx, [esp + i2020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i2020_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + i2020_iqO]
	mov esi, [ebp + i2020_charge] 
	movhps xmm4, [esp + i2020_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + i2020_qqO], xmm3	;# use oxygen qq for storage 

	mov esi, [ebp + i2020_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + i2020_ixO]
	movss xmm4, [esp + i2020_iyO]
	movss xmm5, [esp + i2020_izO]
		
	movlps xmm6, [esp + i2020_ixH1]
	movlps xmm7, [esp + i2020_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + i2020_iyH1]
	movlps xmm7, [esp + i2020_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + i2020_izH1]
	movlps xmm7, [esp + i2020_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	
	movaps [esp + i2020_dxO], xmm3
	movaps [esp + i2020_dyO], xmm4
	movaps [esp + i2020_dzO], xmm5

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	movaps xmm0, xmm4
	mulps xmm0, [esp + i2020_krf]
	movaps [esp + i2020_krsqO], xmm0
	
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i2020_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i2020_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000

	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 

	movaps xmm1, xmm0	;# xmm1=rinv 
	movaps xmm3, [esp + i2020_krsqO]
	addps  xmm0, xmm3	;# xmm0=rinv+ krsq 
	subps  xmm0, [esp + i2020_crf] ;# xmm0=rinv+ krsq-crf 
	mulps  xmm3, [esp + i2020_two]
	subps  xmm1, xmm3	;# xmm1=rinv-2*krsq 
	mulps  xmm0, [esp + i2020_qqO]	;# xmm0=vcoul 
	mulps  xmm1, [esp + i2020_qqO] 	;# xmm1=coul part of fs 

	
	mulps  xmm4, xmm1	;# xmm4=total fscal 
	addps  xmm0, [esp + i2020_vctot]
	movaps [esp + i2020_vctot], xmm0
	
	movaps xmm0, [esp + i2020_dxO]
	movaps xmm1, [esp + i2020_dyO]
	movaps xmm2, [esp + i2020_dzO]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	movss  xmm3, [esp + i2020_fixO]	
	movss  xmm4, [esp + i2020_fiyO]	
	movss  xmm5, [esp + i2020_fizO]	
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esp + i2020_fixO], xmm3	
	movss  [esp + i2020_fiyO], xmm4	
	movss  [esp + i2020_fizO], xmm5	;# updated the O force now do the H's 
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	shufps xmm3, xmm3, 230 ;# 11100110	;# shift right 
	shufps xmm4, xmm4, 230 ;# 11100110
	shufps xmm5, xmm5, 230 ;# 11100110
	addss  xmm3, [esp + i2020_fixH1]
	addss  xmm4, [esp + i2020_fiyH1]
	addss  xmm5, [esp + i2020_fizH1]
	movss  [esp + i2020_fixH1], xmm3	
	movss  [esp + i2020_fiyH1], xmm4	
	movss  [esp + i2020_fizH1], xmm5	;# updated the H1 force 

	mov edi, [ebp + i2020_faction]
	shufps xmm3, xmm3, 231 ;# 11100111	;# shift right 
	shufps xmm4, xmm4, 231 ;# 11100111
	shufps xmm5, xmm5, 231 ;# 11100111
	addss  xmm3, [esp + i2020_fixH2]
	addss  xmm4, [esp + i2020_fiyH2]
	addss  xmm5, [esp + i2020_fizH2]
	movss  [esp + i2020_fixH2], xmm3	
	movss  [esp + i2020_fiyH2], xmm4	
	movss  [esp + i2020_fizH2], xmm5	;# updated the H2 force 

	;# the fj's - start by accumulating the tx/ty/tz force in xmm0, xmm1 
	xorps  xmm5, xmm5
	movaps xmm3, xmm0
	movlps xmm6, [edi + eax*4]
	movss  xmm7, [edi + eax*4 + 8]
	unpcklps xmm3, xmm1
	movlhps  xmm3, xmm5	
	unpckhps xmm0, xmm1		
	addps    xmm0, xmm3
	movhlps  xmm3, xmm0	
	addps    xmm0, xmm3	;# x,y sum in xmm0 

	movhlps  xmm1, xmm2
	addss    xmm2, xmm1
	shufps   xmm1, xmm1, 1 
	addss    xmm2, xmm1    ;# z sum in xmm2 
	subps    xmm6, xmm0
	subss    xmm7, xmm2
	
	movlps [edi + eax*4],     xmm6
	movss  [edi + eax*4 + 8], xmm7

	dec dword ptr [esp + i2020_innerk]
	jz    .i2020_updateouterdata
	jmp   .i2020_odd_loop
.i2020_updateouterdata:
	mov   ecx, [esp + i2020_ii3]
	mov   edi, [ebp + i2020_faction]
	mov   esi, [ebp + i2020_fshift]
	mov   edx, [esp + i2020_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2020_fixO]
	movaps xmm1, [esp + i2020_fiyO]
	movaps xmm2, [esp + i2020_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2020_fixH1]
	movaps xmm1, [esp + i2020_fiyH1]
	movaps xmm2, [esp + i2020_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2020_fixH2]
	movaps xmm1, [esp + i2020_fiyH2]
	movaps xmm2, [esp + i2020_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	mov   edx, [ebp + i2020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i2020_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i2020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + i2020_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i2020_nri]
	dec ecx
	jecxz .i2020_end
	;# not last, iterate once more!  
	mov [ebp + i2020_nri], ecx
	jmp .i2020_outer
.i2020_end:
	emms
	mov eax, [esp + i2020_salign]
	add esp, eax
	add esp, 724
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl inl2030_sse
.globl _inl2030_sse
inl2030_sse:	
_inl2030_sse:	
.equiv		i2030_nri,			8
.equiv		i2030_iinr,			12
.equiv		i2030_jindex,		16
.equiv		i2030_jjnr,			20
.equiv		i2030_shift,		24
.equiv		i2030_shiftvec,		28
.equiv		i2030_fshift,		32
.equiv		i2030_gid,			36
.equiv		i2030_pos,			40		
.equiv		i2030_faction,		44
.equiv		i2030_charge,		48
.equiv		i2030_facel,		52
.equiv		i2030_Vc,			56			
.equiv		i2030_argkrf,		60
.equiv		i2030_argcrf,		64
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i2030_ixO,			0
.equiv		i2030_iyO,			16
.equiv		i2030_izO,			32
.equiv		i2030_ixH1,			48
.equiv		i2030_iyH1,			64
.equiv		i2030_izH1,			80
.equiv		i2030_ixH2,			96
.equiv		i2030_iyH2,			112
.equiv		i2030_izH2,			128
.equiv		i2030_jxO,			144
.equiv		i2030_jyO,			160
.equiv		i2030_jzO,			176
.equiv		i2030_jxH1,			192
.equiv		i2030_jyH1,			208
.equiv		i2030_jzH1,			224
.equiv		i2030_jxH2,			240
.equiv		i2030_jyH2,			256
.equiv		i2030_jzH2,			272
.equiv		i2030_dxOO,			288
.equiv		i2030_dyOO,			304
.equiv		i2030_dzOO,			320	
.equiv		i2030_dxOH1,		336
.equiv		i2030_dyOH1,		352
.equiv		i2030_dzOH1,		368	
.equiv		i2030_dxOH2,		384
.equiv		i2030_dyOH2,		400
.equiv		i2030_dzOH2,		416	
.equiv		i2030_dxH1O,		432
.equiv		i2030_dyH1O,		448
.equiv		i2030_dzH1O,		464	
.equiv		i2030_dxH1H1,		480
.equiv		i2030_dyH1H1,		496
.equiv		i2030_dzH1H1,		512	
.equiv		i2030_dxH1H2,		528
.equiv		i2030_dyH1H2,		544
.equiv		i2030_dzH1H2,		560	
.equiv		i2030_dxH2O,		576
.equiv		i2030_dyH2O,		592
.equiv		i2030_dzH2O,		608	
.equiv		i2030_dxH2H1,		624
.equiv		i2030_dyH2H1,		640
.equiv		i2030_dzH2H1,		656	
.equiv		i2030_dxH2H2,		672
.equiv		i2030_dyH2H2,		688
.equiv		i2030_dzH2H2,		704
.equiv		i2030_qqOO,			720
.equiv		i2030_qqOH,			736
.equiv		i2030_qqHH,			752
.equiv		i2030_vctot,		768
.equiv		i2030_fixO,			784
.equiv		i2030_fiyO,			800
.equiv		i2030_fizO,			816
.equiv		i2030_fixH1,		832
.equiv		i2030_fiyH1,		848
.equiv		i2030_fizH1,		864
.equiv		i2030_fixH2,		880
.equiv		i2030_fiyH2,		896
.equiv		i2030_fizH2,		912
.equiv		i2030_fjxO,			928
.equiv		i2030_fjyO,			944
.equiv		i2030_fjzO,			960
.equiv		i2030_fjxH1,		976
.equiv		i2030_fjyH1,		992
.equiv		i2030_fjzH1,		1008
.equiv		i2030_fjxH2,		1024
.equiv		i2030_fjyH2,		1040
.equiv		i2030_fjzH2,		1056
.equiv		i2030_half,			1072
.equiv		i2030_three,		1088
.equiv		i2030_rsqOO,		1104
.equiv		i2030_rsqOH1,		1120
.equiv		i2030_rsqOH2,		1136
.equiv		i2030_rsqH1O,		1152
.equiv		i2030_rsqH1H1,		1168
.equiv		i2030_rsqH1H2,		1184
.equiv		i2030_rsqH2O,		1200
.equiv		i2030_rsqH2H1,		1216
.equiv		i2030_rsqH2H2,		1232
.equiv		i2030_rinvOO,		1248
.equiv		i2030_rinvOH1,		1264
.equiv		i2030_rinvOH2,		1280
.equiv		i2030_rinvH1O,		1296
.equiv		i2030_rinvH1H1,		1312
.equiv		i2030_rinvH1H2,		1328
.equiv		i2030_rinvH2O,		1344
.equiv		i2030_rinvH2H1,		1360
.equiv		i2030_rinvH2H2,		1376
.equiv		i2030_two,			1392
.equiv		i2030_krf,			1408	
.equiv		i2030_crf,			1424
.equiv		i2030_is3,			1440
.equiv		i2030_ii3,			1444
.equiv		i2030_innerjjnr,	1448
.equiv		i2030_innerk,		1452
.equiv		i2030_salign,		1456							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1460		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i2030_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movups xmm4, [sse_two]
	movss xmm5, [ebp + i2030_argkrf]
	movss xmm6, [ebp + i2030_argcrf]
	
	movaps [esp + i2030_half],  xmm0
	movaps [esp + i2030_three], xmm1
	movaps [esp + i2030_two], xmm4
	shufps xmm5, xmm5, 0
	shufps xmm6, xmm6, 0
	movaps [esp + i2030_krf], xmm5
	movaps [esp + i2030_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i2030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i2030_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + i2030_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i2030_qqOO], xmm3
	movaps [esp + i2030_qqOH], xmm4
	movaps [esp + i2030_qqHH], xmm5
	
.i2030_outer:
	mov   eax, [ebp + i2030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i2030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i2030_is3],ebx    	;# store is3 

	mov   eax, [ebp + i2030_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i2030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i2030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i2030_pos]    ;# eax = base of pos[]  
	mov   [esp + i2030_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i2030_ixO], xmm3
	movaps [esp + i2030_iyO], xmm4
	movaps [esp + i2030_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i2030_ixH1], xmm0
	movaps [esp + i2030_iyH1], xmm1
	movaps [esp + i2030_izH1], xmm2
	movaps [esp + i2030_ixH2], xmm3
	movaps [esp + i2030_iyH2], xmm4
	movaps [esp + i2030_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i2030_vctot], xmm4
	movaps [esp + i2030_fixO], xmm4
	movaps [esp + i2030_fiyO], xmm4
	movaps [esp + i2030_fizO], xmm4
	movaps [esp + i2030_fixH1], xmm4
	movaps [esp + i2030_fiyH1], xmm4
	movaps [esp + i2030_fizH1], xmm4
	movaps [esp + i2030_fixH2], xmm4
	movaps [esp + i2030_fiyH2], xmm4
	movaps [esp + i2030_fizH2], xmm4
	
	mov   eax, [ebp + i2030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i2030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i2030_pos]
	mov   edi, [ebp + i2030_faction]	
	mov   eax, [ebp + i2030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i2030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i2030_innerk], edx    ;# number of innerloop atoms 
	jge   .i2030_unroll_loop
	jmp   .i2030_single_check
.i2030_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i2030_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + i2030_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i2030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d 
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd 
	movaps [esp + i2030_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + i2030_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + i2030_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + i2030_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + i2030_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + i2030_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + i2030_jzO],  xmm0
	movaps [esp + i2030_jzH1],  xmm1
	movaps [esp + i2030_jzH2],  xmm2

	movaps xmm0, [esp + i2030_ixO]
	movaps xmm1, [esp + i2030_iyO]
	movaps xmm2, [esp + i2030_izO]
	movaps xmm3, [esp + i2030_ixO]
	movaps xmm4, [esp + i2030_iyO]
	movaps xmm5, [esp + i2030_izO]
	subps  xmm0, [esp + i2030_jxO]
	subps  xmm1, [esp + i2030_jyO]
	subps  xmm2, [esp + i2030_jzO]
	subps  xmm3, [esp + i2030_jxH1]
	subps  xmm4, [esp + i2030_jyH1]
	subps  xmm5, [esp + i2030_jzH1]
	movaps [esp + i2030_dxOO], xmm0
	movaps [esp + i2030_dyOO], xmm1
	movaps [esp + i2030_dzOO], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i2030_dxOH1], xmm3
	movaps [esp + i2030_dyOH1], xmm4
	movaps [esp + i2030_dzOH1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i2030_rsqOO], xmm0
	movaps [esp + i2030_rsqOH1], xmm3

	movaps xmm0, [esp + i2030_ixO]
	movaps xmm1, [esp + i2030_iyO]
	movaps xmm2, [esp + i2030_izO]
	movaps xmm3, [esp + i2030_ixH1]
	movaps xmm4, [esp + i2030_iyH1]
	movaps xmm5, [esp + i2030_izH1]
	subps  xmm0, [esp + i2030_jxH2]
	subps  xmm1, [esp + i2030_jyH2]
	subps  xmm2, [esp + i2030_jzH2]
	subps  xmm3, [esp + i2030_jxO]
	subps  xmm4, [esp + i2030_jyO]
	subps  xmm5, [esp + i2030_jzO]
	movaps [esp + i2030_dxOH2], xmm0
	movaps [esp + i2030_dyOH2], xmm1
	movaps [esp + i2030_dzOH2], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i2030_dxH1O], xmm3
	movaps [esp + i2030_dyH1O], xmm4
	movaps [esp + i2030_dzH1O], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i2030_rsqOH2], xmm0
	movaps [esp + i2030_rsqH1O], xmm3

	movaps xmm0, [esp + i2030_ixH1]
	movaps xmm1, [esp + i2030_iyH1]
	movaps xmm2, [esp + i2030_izH1]
	movaps xmm3, [esp + i2030_ixH1]
	movaps xmm4, [esp + i2030_iyH1]
	movaps xmm5, [esp + i2030_izH1]
	subps  xmm0, [esp + i2030_jxH1]
	subps  xmm1, [esp + i2030_jyH1]
	subps  xmm2, [esp + i2030_jzH1]
	subps  xmm3, [esp + i2030_jxH2]
	subps  xmm4, [esp + i2030_jyH2]
	subps  xmm5, [esp + i2030_jzH2]
	movaps [esp + i2030_dxH1H1], xmm0
	movaps [esp + i2030_dyH1H1], xmm1
	movaps [esp + i2030_dzH1H1], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i2030_dxH1H2], xmm3
	movaps [esp + i2030_dyH1H2], xmm4
	movaps [esp + i2030_dzH1H2], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i2030_rsqH1H1], xmm0
	movaps [esp + i2030_rsqH1H2], xmm3

	movaps xmm0, [esp + i2030_ixH2]
	movaps xmm1, [esp + i2030_iyH2]
	movaps xmm2, [esp + i2030_izH2]
	movaps xmm3, [esp + i2030_ixH2]
	movaps xmm4, [esp + i2030_iyH2]
	movaps xmm5, [esp + i2030_izH2]
	subps  xmm0, [esp + i2030_jxO]
	subps  xmm1, [esp + i2030_jyO]
	subps  xmm2, [esp + i2030_jzO]
	subps  xmm3, [esp + i2030_jxH1]
	subps  xmm4, [esp + i2030_jyH1]
	subps  xmm5, [esp + i2030_jzH1]
	movaps [esp + i2030_dxH2O], xmm0
	movaps [esp + i2030_dyH2O], xmm1
	movaps [esp + i2030_dzH2O], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i2030_dxH2H1], xmm3
	movaps [esp + i2030_dyH2H1], xmm4
	movaps [esp + i2030_dzH2H1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + i2030_rsqH2O], xmm0
	movaps [esp + i2030_rsqH2H1], xmm4

	movaps xmm0, [esp + i2030_ixH2]
	movaps xmm1, [esp + i2030_iyH2]
	movaps xmm2, [esp + i2030_izH2]
	subps  xmm0, [esp + i2030_jxH2]
	subps  xmm1, [esp + i2030_jyH2]
	subps  xmm2, [esp + i2030_jzH2]
	movaps [esp + i2030_dxH2H2], xmm0
	movaps [esp + i2030_dyH2H2], xmm1
	movaps [esp + i2030_dzH2H2], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + i2030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i2030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i2030_half] ;# rinvH2H2 
	mulps   xmm7, [esp + i2030_half] ;# rinvH2H1 
	movaps  [esp + i2030_rinvH2H2], xmm3
	movaps  [esp + i2030_rinvH2H1], xmm7
	
	rsqrtps xmm1, [esp + i2030_rsqOO]
	rsqrtps xmm5, [esp + i2030_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i2030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i2030_rsqOO]
	mulps   xmm5, [esp + i2030_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i2030_half] 
	mulps   xmm7, [esp + i2030_half]
	movaps  [esp + i2030_rinvOO], xmm3
	movaps  [esp + i2030_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + i2030_rsqOH2]
	rsqrtps xmm5, [esp + i2030_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i2030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i2030_rsqOH2]
	mulps   xmm5, [esp + i2030_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i2030_half] 
	mulps   xmm7, [esp + i2030_half]
	movaps  [esp + i2030_rinvOH2], xmm3
	movaps  [esp + i2030_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + i2030_rsqH1H1]
	rsqrtps xmm5, [esp + i2030_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i2030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i2030_rsqH1H1]
	mulps   xmm5, [esp + i2030_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i2030_half] 
	mulps   xmm7, [esp + i2030_half]
	movaps  [esp + i2030_rinvH1H1], xmm3
	movaps  [esp + i2030_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + i2030_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i2030_three]
	mulps   xmm1, [esp + i2030_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + i2030_half] 
	movaps  [esp + i2030_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + i2030_rinvOO]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2030_krf]
	mulps  xmm0, xmm0	;# xmm0=rinvsq 

	mulps  xmm5, [esp + i2030_rsqOO] ;# xmm5=krsq 
	movaps xmm6, xmm5
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	subps  xmm6, [esp + i2030_crf]
	mulps  xmm6, [esp + i2030_qqOO] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	mulps xmm5, [esp + i2030_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2030_qqOO] ;# xmm7 = coul part of fscal 
	
	addps  xmm6, [esp + i2030_vctot] ;# local vctot summation variable 
	mulps  xmm0, xmm7
	
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i2030_dxOO]
	mulps xmm1, [esp + i2030_dyOO]
	mulps xmm2, [esp + i2030_dzOO]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2030_fixO]
	addps xmm1, [esp + i2030_fiyO]
	addps xmm2, [esp + i2030_fizO]
	movaps [esp + i2030_fjxO], xmm3
	movaps [esp + i2030_fjyO], xmm4
	movaps [esp + i2030_fjzO], xmm5
	movaps [esp + i2030_fixO], xmm0
	movaps [esp + i2030_fiyO], xmm1
	movaps [esp + i2030_fizO], xmm2

	;# O-H1 interaction 
	movaps xmm0, [esp + i2030_rinvOH1]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2030_krf]
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2030_rsqOH1] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2030_crf]
	mulps  xmm0, xmm0
	mulps  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq-crf) 
	mulps  xmm5, [esp + i2030_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH1  
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i2030_dxOH1]
	mulps xmm1, [esp + i2030_dyOH1]
	mulps xmm2, [esp + i2030_dzOH1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2030_fixO]
	addps xmm1, [esp + i2030_fiyO]
	addps xmm2, [esp + i2030_fizO]
	movaps [esp + i2030_fjxH1], xmm3
	movaps [esp + i2030_fjyH1], xmm4
	movaps [esp + i2030_fjzH1], xmm5
	movaps [esp + i2030_fixO], xmm0
	movaps [esp + i2030_fiyO], xmm1
	movaps [esp + i2030_fizO], xmm2

	;# O-H2 interaction  
	movaps xmm0, [esp + i2030_rinvOH2]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2030_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2030_rsqOH2] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2030_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq-crf) 
	mulps  xmm5, [esp + i2030_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i2030_dxOH2]
	mulps xmm1, [esp + i2030_dyOH2]
	mulps xmm2, [esp + i2030_dzOH2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2030_fixO]
	addps xmm1, [esp + i2030_fiyO]
	addps xmm2, [esp + i2030_fizO]
	movaps [esp + i2030_fjxH2], xmm3
	movaps [esp + i2030_fjyH2], xmm4
	movaps [esp + i2030_fjzH2], xmm5
	movaps [esp + i2030_fixO], xmm0
	movaps [esp + i2030_fiyO], xmm1
	movaps [esp + i2030_fizO], xmm2

	;# H1-O interaction 
	movaps xmm0, [esp + i2030_rinvH1O]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2030_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2030_rsqH1O] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2030_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq-crf) 
	mulps  xmm5, [esp + i2030_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	movaps xmm3, [esp + i2030_fjxO]
	movaps xmm4, [esp + i2030_fjyO]
	movaps xmm5, [esp + i2030_fjzO]
	mulps xmm0, [esp + i2030_dxH1O]
	mulps xmm1, [esp + i2030_dyH1O]
	mulps xmm2, [esp + i2030_dzH1O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2030_fixH1]
	addps xmm1, [esp + i2030_fiyH1]
	addps xmm2, [esp + i2030_fizH1]
	movaps [esp + i2030_fjxO], xmm3
	movaps [esp + i2030_fjyO], xmm4
	movaps [esp + i2030_fjzO], xmm5
	movaps [esp + i2030_fixH1], xmm0
	movaps [esp + i2030_fiyH1], xmm1
	movaps [esp + i2030_fizH1], xmm2

	;# H1-H1 interaction 
	movaps xmm0, [esp + i2030_rinvH1H1]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2030_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2030_rsqH1H1] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2030_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq-crf) 
	mulps  xmm5, [esp + i2030_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	movaps xmm3, [esp + i2030_fjxH1]
	movaps xmm4, [esp + i2030_fjyH1]
	movaps xmm5, [esp + i2030_fjzH1]
	mulps xmm0, [esp + i2030_dxH1H1]
	mulps xmm1, [esp + i2030_dyH1H1]
	mulps xmm2, [esp + i2030_dzH1H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2030_fixH1]
	addps xmm1, [esp + i2030_fiyH1]
	addps xmm2, [esp + i2030_fizH1]
	movaps [esp + i2030_fjxH1], xmm3
	movaps [esp + i2030_fjyH1], xmm4
	movaps [esp + i2030_fjzH1], xmm5
	movaps [esp + i2030_fixH1], xmm0
	movaps [esp + i2030_fiyH1], xmm1
	movaps [esp + i2030_fizH1], xmm2

	;# H1-H2 interaction 
	movaps xmm0, [esp + i2030_rinvH1H2]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2030_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2030_rsqH1H2] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2030_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq-crf) 
	mulps  xmm5, [esp + i2030_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0
	
	movaps xmm3, [esp + i2030_fjxH2]
	movaps xmm4, [esp + i2030_fjyH2]
	movaps xmm5, [esp + i2030_fjzH2]
	mulps xmm0, [esp + i2030_dxH1H2]
	mulps xmm1, [esp + i2030_dyH1H2]
	mulps xmm2, [esp + i2030_dzH1H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2030_fixH1]
	addps xmm1, [esp + i2030_fiyH1]
	addps xmm2, [esp + i2030_fizH1]
	movaps [esp + i2030_fjxH2], xmm3
	movaps [esp + i2030_fjyH2], xmm4
	movaps [esp + i2030_fjzH2], xmm5
	movaps [esp + i2030_fixH1], xmm0
	movaps [esp + i2030_fiyH1], xmm1
	movaps [esp + i2030_fizH1], xmm2

	;# H2-O interaction 
	movaps xmm0, [esp + i2030_rinvH2O]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2030_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2030_rsqH2O] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2030_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2030_qqOH] ;# xmm4=voul=qq*(rinv+ krsq-crf) 
	mulps  xmm5, [esp + i2030_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2030_qqOH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	movaps xmm3, [esp + i2030_fjxO]
	movaps xmm4, [esp + i2030_fjyO]
	movaps xmm5, [esp + i2030_fjzO]
	mulps xmm0, [esp + i2030_dxH2O]
	mulps xmm1, [esp + i2030_dyH2O]
	mulps xmm2, [esp + i2030_dzH2O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2030_fixH2]
	addps xmm1, [esp + i2030_fiyH2]
	addps xmm2, [esp + i2030_fizH2]
	movaps [esp + i2030_fjxO], xmm3
	movaps [esp + i2030_fjyO], xmm4
	movaps [esp + i2030_fjzO], xmm5
	movaps [esp + i2030_fixH2], xmm0
	movaps [esp + i2030_fiyH2], xmm1
	movaps [esp + i2030_fizH2], xmm2

	;# H2-H1 interaction 
	movaps xmm0, [esp + i2030_rinvH2H1]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2030_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2030_rsqH2H1] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2030_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq-crf) 
	mulps  xmm5, [esp + i2030_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	movaps xmm3, [esp + i2030_fjxH1]
	movaps xmm4, [esp + i2030_fjyH1]
	movaps xmm5, [esp + i2030_fjzH1]
	mulps xmm0, [esp + i2030_dxH2H1]
	mulps xmm1, [esp + i2030_dyH2H1]
	mulps xmm2, [esp + i2030_dzH2H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2030_fixH2]
	addps xmm1, [esp + i2030_fiyH2]
	addps xmm2, [esp + i2030_fizH2]
	movaps [esp + i2030_fjxH1], xmm3
	movaps [esp + i2030_fjyH1], xmm4
	movaps [esp + i2030_fjzH1], xmm5
	movaps [esp + i2030_fixH2], xmm0
	movaps [esp + i2030_fiyH2], xmm1
	movaps [esp + i2030_fizH2], xmm2

	;# H2-H2 interaction 
	movaps xmm0, [esp + i2030_rinvH2H2]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + i2030_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + i2030_rsqH2H2] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + i2030_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + i2030_qqHH] ;# xmm4=voul=qq*(rinv+ krsq-crf) 
	mulps  xmm5, [esp + i2030_two]
	subps  xmm7, xmm5	;# xmm7=rinv-2*krsq 
	mulps  xmm7, [esp + i2030_qqHH] ;# xmm7 = coul part of fscal 
	addps  xmm6, xmm4	;# add to local vctot 
	mulps xmm0, xmm7	;# fsOH2 
	movaps xmm1, xmm0
	movaps xmm2, xmm0

	movaps xmm1, xmm0
	movaps [esp + i2030_vctot], xmm6
	movaps xmm2, xmm0
	
	movaps xmm3, [esp + i2030_fjxH2]
	movaps xmm4, [esp + i2030_fjyH2]
	movaps xmm5, [esp + i2030_fjzH2]
	mulps xmm0, [esp + i2030_dxH2H2]
	mulps xmm1, [esp + i2030_dyH2H2]
	mulps xmm2, [esp + i2030_dzH2H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i2030_fixH2]
	addps xmm1, [esp + i2030_fiyH2]
	addps xmm2, [esp + i2030_fizH2]
	movaps [esp + i2030_fjxH2], xmm3
	movaps [esp + i2030_fjyH2], xmm4
	movaps [esp + i2030_fjzH2], xmm5
	movaps [esp + i2030_fixH2], xmm0
	movaps [esp + i2030_fiyH2], xmm1
	movaps [esp + i2030_fizH2], xmm2

	mov edi, [ebp + i2030_faction]
		
	;# Did all interactions - now update j forces 
	;# 4 j waters with three atoms each - first do a & b j particles 
	movaps xmm0, [esp + i2030_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i2030_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpcklps xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjxOb  fjyOb 
	movaps xmm1, [esp + i2030_fjzO]
	movaps xmm2, [esp + i2030_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOb  fjyOb  
	unpcklps xmm1, xmm2	   ;# xmm1= fjzOa  fjxH1a fjzOb  fjxH1b 
	movaps xmm4, [esp + i2030_fjyH1]
	movaps xmm5, [esp + i2030_fjzH1]
	unpcklps xmm4, xmm5	   ;# xmm4= fjyH1a fjzH1a fjyH1b fjzH1b 
	movaps xmm5, [esp + i2030_fjxH2]
	movaps xmm6, [esp + i2030_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1b fjzH1b 
	unpcklps xmm5, xmm6	   ;# xmm5= fjxH2a fjyH2a fjxH2b fjyH2b 
	movlhps  xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjzOa  fjxH1a 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOb  fjyOb  fjzOb  fjxH1b 
	movlhps  xmm4, xmm5   	   ;# xmm4= fjyH1a fjzH1a fjxH2a fjyH2a 
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1b fjzH1b fjxH2b fjyH2b 
	movups   xmm1, [edi + eax*4]
	movups   xmm2, [edi + eax*4 + 16]
	movups   xmm5, [edi + ebx*4]
	movups   xmm6, [edi + ebx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + eax*4 + 32]
	movss    xmm3, [edi + ebx*4 + 32]
	
	movaps   xmm4, [esp + i2030_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm7, xmm7, 1
	
	movups   [edi + eax*4],     xmm1
	movups   [edi + eax*4 + 16],xmm2
	movups   [edi + ebx*4],     xmm5
	movups   [edi + ebx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + eax*4 + 32], xmm0
	movss    [edi + ebx*4 + 32], xmm3	

	;# then do the second pair (c & d) 
	movaps xmm0, [esp + i2030_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i2030_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpckhps xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjxOd  fjyOd 
	movaps xmm1, [esp + i2030_fjzO]
	movaps xmm2, [esp + i2030_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOd  fjyOd  
	unpckhps xmm1, xmm2	   ;# xmm1= fjzOc  fjxH1c fjzOd  fjxH1d 
	movaps xmm4, [esp + i2030_fjyH1]
	movaps xmm5, [esp + i2030_fjzH1]
	unpckhps xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjyH1d fjzH1d	
	movaps xmm5, [esp + i2030_fjxH2]
	movaps xmm6, [esp + i2030_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1d fjzH1d 	 
	unpckhps xmm5, xmm6	   ;# xmm5= fjxH2c fjyH2c fjxH2d fjyH2d 
	movlhps  xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjzOc  fjxH1c 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOd  fjyOd  fjzOd  fjxH1d 
	movlhps  xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjxH2c fjyH2c  
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1d fjzH1d fjxH2d fjyH2d 
	movups   xmm1, [edi + ecx*4]
	movups   xmm2, [edi + ecx*4 + 16]
	movups   xmm5, [edi + edx*4]
	movups   xmm6, [edi + edx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + ecx*4 + 32]
	movss    xmm3, [edi + edx*4 + 32]
	
	movaps   xmm4, [esp + i2030_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm4, xmm4, 2 ;# 00000010
	shufps   xmm7, xmm7, 3 ;# 00000011
	movups   [edi + ecx*4],     xmm1
	movups   [edi + ecx*4 + 16],xmm2
	movups   [edi + edx*4],     xmm5
	movups   [edi + edx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + ecx*4 + 32], xmm0
	movss    [edi + edx*4 + 32], xmm3	
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i2030_innerk],  4
	jl    .i2030_single_check
	jmp   .i2030_unroll_loop
.i2030_single_check:
	add dword ptr [esp + i2030_innerk],  4
	jnz   .i2030_single_loop
	jmp   .i2030_updateouterdata
.i2030_single_loop:
	mov   edx, [esp + i2030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i2030_innerjjnr],  4	

	mov esi, [ebp + i2030_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + i2030_ixO]     
	movaps  xmm1, [esp + i2030_iyO]
	movaps  xmm2, [esp + i2030_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + i2030_jxO], xmm3
	movaps [esp + i2030_jyO], xmm4
	movaps [esp + i2030_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	movaps [esp + i2030_dxOO], xmm0
	movaps [esp + i2030_dyOO], xmm1
	movaps [esp + i2030_dzOO], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 

	movaps xmm6, xmm0
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	mulps   xmm6, [esp + i2030_krf] ;# xmm6=krsq 
	movaps  xmm2, xmm1
	movaps  xmm7, xmm6     ;# xmm7=krsq 
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i2030_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + i2030_half] ;# rinv iO - j water 


	
	addps   xmm6, xmm3	;# xmm6=rinv+ krsq 
	mulps   xmm7, [esp + i2030_two]
	subps   xmm6, [esp + i2030_crf] ;# xmm6=rinv+ krsq-crf 
	
	xorps   xmm1, xmm1
	movaps  xmm0, xmm3
	subps   xmm3, xmm7	;# xmm3=rinv-2*krsq 
	xorps   xmm4, xmm4
	mulps   xmm0, xmm0	;# xmm0=rinvsq 
	;# fetch charges to xmm4 (temporary) 
	movss   xmm4, [esp + i2030_qqOO]
	movhps  xmm4, [esp + i2030_qqOH]

	mulps xmm6, xmm4	;# vcoul  
	mulps xmm3, xmm4	;# coul part of fs  


	addps   xmm6, [esp + i2030_vctot]
	mulps   xmm0, xmm3	;# total fscal 
	movaps  [esp + i2030_vctot], xmm6	

	movaps  xmm1, xmm0
	movaps  xmm2, xmm0
	mulps   xmm0, [esp + i2030_dxOO]
	mulps   xmm1, [esp + i2030_dyOO]
	mulps   xmm2, [esp + i2030_dzOO]
	
	;# initial update for j forces 
	xorps   xmm3, xmm3
	xorps   xmm4, xmm4
	xorps   xmm5, xmm5
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i2030_fjxO], xmm3
	movaps  [esp + i2030_fjyO], xmm4
	movaps  [esp + i2030_fjzO], xmm5
	addps   xmm0, [esp + i2030_fixO]
	addps   xmm1, [esp + i2030_fiyO]
	addps   xmm2, [esp + i2030_fizO]
	movaps  [esp + i2030_fixO], xmm0
	movaps  [esp + i2030_fiyO], xmm1
	movaps  [esp + i2030_fizO], xmm2

	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + i2030_ixH1]
	movaps  xmm1, [esp + i2030_iyH1]
	movaps  xmm2, [esp + i2030_izH1]	
	movaps  xmm3, [esp + i2030_ixH2] 
	movaps  xmm4, [esp + i2030_iyH2] 
	movaps  xmm5, [esp + i2030_izH2] 
	subps   xmm0, [esp + i2030_jxO]
	subps   xmm1, [esp + i2030_jyO]
	subps   xmm2, [esp + i2030_jzO]
	subps   xmm3, [esp + i2030_jxO]
	subps   xmm4, [esp + i2030_jyO]
	subps   xmm5, [esp + i2030_jzO]
	movaps [esp + i2030_dxH1O], xmm0
	movaps [esp + i2030_dyH1O], xmm1
	movaps [esp + i2030_dzH1O], xmm2
	movaps [esp + i2030_dxH2O], xmm3
	movaps [esp + i2030_dyH2O], xmm4
	movaps [esp + i2030_dzH2O], xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i2030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i2030_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + i2030_half] ;# rinv H2 - j water  

	mulps xmm0, [esp + i2030_krf] ;# krsq 
	mulps xmm4, [esp + i2030_krf] ;# krsq  

	;# assemble charges in xmm6 
	xorps   xmm6, xmm6
	movss   xmm6, [esp + i2030_qqOH]
	movhps  xmm6, [esp + i2030_qqHH]
	movaps  xmm1, xmm0
	movaps  xmm5, xmm4
	addps   xmm0, xmm3	;# krsq+ rinv 
	addps   xmm4, xmm7	;# krsq+ rinv 
	subps   xmm0, [esp + i2030_crf]
	subps   xmm4, [esp + i2030_crf]
	mulps   xmm1, [esp + i2030_two]
	mulps   xmm5, [esp + i2030_two]
	mulps   xmm0, xmm6	;# vcoul 
	mulps   xmm4, xmm6	;# vcoul 
	addps   xmm4, xmm0		
	addps   xmm4, [esp + i2030_vctot]
	movaps  [esp + i2030_vctot], xmm4
	movaps  xmm0, xmm3
	movaps  xmm4, xmm7
	mulps   xmm3, xmm3
	mulps   xmm7, xmm7
	subps   xmm0, xmm1
	subps   xmm4, xmm5
	mulps   xmm0, xmm6
	mulps   xmm4, xmm6
	mulps   xmm0, xmm3	;# fscal 
	mulps   xmm7, xmm4	;# fscal 
	
	movaps  xmm1, xmm0
	movaps  xmm2, xmm0
	mulps   xmm0, [esp + i2030_dxH1O]
	mulps   xmm1, [esp + i2030_dyH1O]
	mulps   xmm2, [esp + i2030_dzH1O]
	;# update forces H1 - j water 
	movaps  xmm3, [esp + i2030_fjxO]
	movaps  xmm4, [esp + i2030_fjyO]
	movaps  xmm5, [esp + i2030_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i2030_fjxO], xmm3
	movaps  [esp + i2030_fjyO], xmm4
	movaps  [esp + i2030_fjzO], xmm5
	addps   xmm0, [esp + i2030_fixH1]
	addps   xmm1, [esp + i2030_fiyH1]
	addps   xmm2, [esp + i2030_fizH1]
	movaps  [esp + i2030_fixH1], xmm0
	movaps  [esp + i2030_fiyH1], xmm1
	movaps  [esp + i2030_fizH1], xmm2
	;# do forces H2 - j water 
	movaps xmm0, xmm7
	movaps xmm1, xmm7
	movaps xmm2, xmm7
	mulps   xmm0, [esp + i2030_dxH2O]
	mulps   xmm1, [esp + i2030_dyH2O]
	mulps   xmm2, [esp + i2030_dzH2O]
	movaps  xmm3, [esp + i2030_fjxO]
	movaps  xmm4, [esp + i2030_fjyO]
	movaps  xmm5, [esp + i2030_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	mov     esi, [ebp + i2030_faction]
	movaps  [esp + i2030_fjxO], xmm3
	movaps  [esp + i2030_fjyO], xmm4
	movaps  [esp + i2030_fjzO], xmm5
	addps   xmm0, [esp + i2030_fixH2]
	addps   xmm1, [esp + i2030_fiyH2]
	addps   xmm2, [esp + i2030_fizH2]
	movaps  [esp + i2030_fixH2], xmm0
	movaps  [esp + i2030_fiyH2], xmm1
	movaps  [esp + i2030_fizH2], xmm2

	;# update j water forces from local variables 
	movlps  xmm0, [esi + eax*4]
	movlps  xmm1, [esi + eax*4 + 12]
	movhps  xmm1, [esi + eax*4 + 24]
	movaps  xmm3, [esp + i2030_fjxO]
	movaps  xmm4, [esp + i2030_fjyO]
	movaps  xmm5, [esp + i2030_fjzO]
	movaps  xmm6, xmm5
	movaps  xmm7, xmm5
	shufps  xmm6, xmm6, 2 ;# 00000010
	shufps  xmm7, xmm7, 3 ;# 00000011
	addss   xmm5, [esi + eax*4 + 8]
	addss   xmm6, [esi + eax*4 + 20]
	addss   xmm7, [esi + eax*4 + 32]
	movss   [esi + eax*4 + 8], xmm5
	movss   [esi + eax*4 + 20], xmm6
	movss   [esi + eax*4 + 32], xmm7
	movaps   xmm5, xmm3
	unpcklps xmm3, xmm4
	unpckhps xmm5, xmm4
	addps    xmm0, xmm3
	addps    xmm1, xmm5
	movlps  [esi + eax*4], xmm0 
	movlps  [esi + eax*4 + 12], xmm1 
	movhps  [esi + eax*4 + 24], xmm1 
	
	dec dword ptr [esp + i2030_innerk]
	jz    .i2030_updateouterdata
	jmp   .i2030_single_loop
.i2030_updateouterdata:
	mov   ecx, [esp + i2030_ii3]
	mov   edi, [ebp + i2030_faction]
	mov   esi, [ebp + i2030_fshift]
	mov   edx, [esp + i2030_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2030_fixO]
	movaps xmm1, [esp + i2030_fiyO] 
	movaps xmm2, [esp + i2030_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	
 
	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2030_fixH1]
	movaps xmm1, [esp + i2030_fiyH1]
	movaps xmm2, [esp + i2030_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i2030_fixH2]
	movaps xmm1, [esp + i2030_fiyH2]
	movaps xmm2, [esp + i2030_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	;# get group index for i particle 
	mov   edx, [ebp + i2030_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i2030_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i2030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i2030_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 	
	
	;# finish if last 
	mov   ecx, [ebp + i2030_nri]
	dec ecx
	jecxz .i2030_end
	;# not last, iterate once more!  
	mov [ebp + i2030_nri], ecx
	jmp .i2030_outer
.i2030_end:
	emms
	mov eax, [esp + i2030_salign]
	add esp, eax
	add esp, 1460
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	
		

.globl inl3000_sse
.globl _inl3000_sse
inl3000_sse:	
_inl3000_sse:	
.equiv		i3000_nri,			8
.equiv		i3000_iinr,			12
.equiv		i3000_jindex,		16
.equiv		i3000_jjnr,			20
.equiv		i3000_shift,		24
.equiv		i3000_shiftvec,		28
.equiv		i3000_fshift,		32
.equiv		i3000_gid,			36
.equiv		i3000_pos,			40		
.equiv		i3000_faction,		44
.equiv		i3000_charge,		48
.equiv		i3000_facel,		52
.equiv		i3000_Vc,			56			
.equiv		i3000_tabscale,		60
.equiv		i3000_VFtab,		64
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3000_ix,			0
.equiv		i3000_iy,			16
.equiv		i3000_iz,			32
.equiv		i3000_iq,			48
.equiv		i3000_dx,			64
.equiv		i3000_dy,			80
.equiv		i3000_dz,			96
.equiv		i3000_two,			112
.equiv		i3000_tsc,			128
.equiv		i3000_qq,			144	
.equiv		i3000_fs,			160
.equiv		i3000_vctot,		176
.equiv		i3000_fix,			192
.equiv		i3000_fiy,			208
.equiv		i3000_fiz,			224
.equiv		i3000_half,			240
.equiv		i3000_three,		256
.equiv		i3000_is3,			272
.equiv		i3000_ii3,			276
.equiv		i3000_innerjjnr,	280
.equiv		i3000_innerk,		284
.equiv		i3000_salign,		288								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 292		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3000_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + i3000_tabscale]
	movaps [esp + i3000_half],  xmm0
	movaps [esp + i3000_two], xmm1
	movaps [esp + i3000_three],  xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + i3000_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.i3000_outer:
	mov   eax, [ebp + i3000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3000_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3000_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i3000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3000_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i3000_facel]
	shufps xmm3, xmm3, 0

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3000_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i3000_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i3000_ix], xmm0
	movaps [esp + i3000_iy], xmm1
	movaps [esp + i3000_iz], xmm2

	mov   [esp + i3000_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i3000_vctot], xmm4
	movaps [esp + i3000_fix], xmm4
	movaps [esp + i3000_fiy], xmm4
	movaps [esp + i3000_fiz], xmm4
	
	mov   eax, [ebp + i3000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3000_pos]
	mov   edi, [ebp + i3000_faction]	
	mov   eax, [ebp + i3000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i3000_innerk], edx    ;# number of innerloop atoms 
	jge   .i3000_unroll_loop
	jmp   .i3000_finish_inner
.i3000_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3000_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i3000_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3000_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i3000_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	mulps  xmm3, xmm2

	movaps [esp + i3000_qq], xmm3	
	
	mov esi, [ebp + i3000_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i3000_ix]
	movaps xmm5, [esp + i3000_iy]
	movaps xmm6, [esp + i3000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3000_dx], xmm4
	movaps [esp + i3000_dy], xmm5
	movaps [esp + i3000_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3000_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i3000_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7
		
	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3000_two]	;# two*Heps2 
	movaps xmm3, [esp + i3000_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3000_vctot]
	movaps [esp + i3000_vctot], xmm5 

	xorps  xmm4, xmm4

	mulps xmm3, [esp + i3000_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3

	movaps xmm0, [esp + i3000_dx]
	movaps xmm1, [esp + i3000_dy]
	movaps xmm2, [esp + i3000_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i3000_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3000_fix]
	movaps xmm4, [esp + i3000_fiy]
	movaps xmm5, [esp + i3000_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3000_fix], xmm3
	movaps [esp + i3000_fiy], xmm4
	movaps [esp + i3000_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3000_innerk],  4
	jl    .i3000_finish_inner
	jmp   .i3000_unroll_loop
.i3000_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i3000_innerk],  4
	mov   edx, [esp + i3000_innerk]
	and   edx, 2
	jnz   .i3000_dopair
	jmp   .i3000_checksingle
.i3000_dopair:	
	mov esi, [ebp + i3000_charge]

    mov   ecx, [esp + i3000_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i3000_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + i3000_iq]
	movlhps xmm3, xmm7
	movaps [esp + i3000_qq], xmm3

	mov edi, [ebp + i3000_pos]	
	
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i3000_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i3000_ix]
	movaps xmm5, [esp + i3000_iy]
	movaps xmm6, [esp + i3000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3000_dx], xmm4
	movaps [esp + i3000_dy], xmm5
	movaps [esp + i3000_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3000_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3000_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3000_two]	;# two*Heps2 
	movaps xmm3, [esp + i3000_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3000_vctot]
	movaps [esp + i3000_vctot], xmm5 

	xorps  xmm4, xmm4

	mulps xmm3, [esp + i3000_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3

	movaps xmm0, [esp + i3000_dx]
	movaps xmm1, [esp + i3000_dy]
	movaps xmm2, [esp + i3000_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3000_fix]
	movaps xmm4, [esp + i3000_fiy]
	movaps xmm5, [esp + i3000_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3000_fix], xmm3
	movaps [esp + i3000_fiy], xmm4
	movaps [esp + i3000_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i3000_checksingle:				
	mov   edx, [esp + i3000_innerk]
	and   edx, 1
	jnz    .i3000_dosingle
	jmp    .i3000_updateouterdata
.i3000_dosingle:
	mov esi, [ebp + i3000_charge]
	mov edi, [ebp + i3000_pos]
	mov   ecx, [esp + i3000_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + i3000_iq]
	movaps [esp + i3000_qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i3000_ix]
	movaps xmm5, [esp + i3000_iy]
	movaps xmm6, [esp + i3000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3000_dx], xmm4
	movaps [esp + i3000_dy], xmm5
	movaps [esp + i3000_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3000_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3000_VFtab]
	movd ebx, mm6
	
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3000_two]	;# two*Heps2 
	movaps xmm3, [esp + i3000_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + i3000_vctot]
	movss [esp + i3000_vctot], xmm5 

	xorps xmm4, xmm4

	mulps xmm3, [esp + i3000_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3
	mov    edi, [ebp + i3000_faction]

	movaps xmm0, [esp + i3000_dx]
	movaps xmm1, [esp + i3000_dy]
	movaps xmm2, [esp + i3000_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3000_fix]
	movaps xmm4, [esp + i3000_fiy]
	movaps xmm5, [esp + i3000_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i3000_fix], xmm3
	movaps [esp + i3000_fiy], xmm4
	movaps [esp + i3000_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i3000_updateouterdata:
	mov   ecx, [esp + i3000_ii3]
	mov   edi, [ebp + i3000_faction]
	mov   esi, [ebp + i3000_fshift]
	mov   edx, [esp + i3000_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3000_fix]
	movaps xmm1, [esp + i3000_fiy]
	movaps xmm2, [esp + i3000_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i3000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3000_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3000_nri]
	dec ecx
	jecxz .i3000_end
	;# not last, iterate once more!  
	mov [ebp + i3000_nri], ecx
	jmp .i3000_outer
.i3000_end:
	emms
	mov eax, [esp + i3000_salign]
	add esp, eax
	add esp, 292
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl inl3010_sse
.globl _inl3010_sse
inl3010_sse:	
_inl3010_sse:	
.equiv		i3010_nri,			8
.equiv		i3010_iinr,			12
.equiv		i3010_jindex,		16
.equiv		i3010_jjnr,			20
.equiv		i3010_shift,		24
.equiv		i3010_shiftvec,		28
.equiv		i3010_fshift,		32
.equiv		i3010_gid,			36
.equiv		i3010_pos,			40		
.equiv		i3010_faction,		44
.equiv		i3010_charge,		48
.equiv		i3010_facel,		52
.equiv		i3010_Vc,			56
.equiv		i3010_tabscale,		60
.equiv		i3010_VFtab,		64
.equiv		i3010_nsatoms,		68	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3010_ix,			0
.equiv		i3010_iy,			16
.equiv		i3010_iz,			32
.equiv		i3010_iq,			48
.equiv		i3010_dx,			64
.equiv		i3010_dy,			80
.equiv		i3010_dz,			96
.equiv		i3010_two,			112
.equiv		i3010_tsc,			128
.equiv		i3010_qq,			144	
.equiv		i3010_fscal,		160
.equiv		i3010_vctot,		176
.equiv		i3010_fix,			192
.equiv		i3010_fiy,			208
.equiv		i3010_fiz,			224
.equiv		i3010_half,			240
.equiv		i3010_three,		256
.equiv		i3010_is3,			272
.equiv		i3010_ii3,			276
.equiv		i3010_shX,			280
.equiv		i3010_shY,			284
.equiv		i3010_shZ,			288
.equiv		i3010_ntia,			292	
.equiv		i3010_innerjjnr0,	296
.equiv		i3010_innerk0,		300
.equiv		i3010_innerjjnr,	304
.equiv		i3010_innerk,		308
.equiv		i3010_salign,		312
.equiv		i3010_nscoul,		316
.equiv		i3010_solnr,		320			
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 324		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3010_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + i3010_tabscale]
	movaps [esp + i3010_half],  xmm0
	movaps [esp + i3010_two], xmm1
	movaps [esp + i3010_three],  xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + i3010_tsc], xmm3

	add dword ptr [ebp + i3010_nsatoms],  8

	;# assume we have at least one i particle - start directly 	
.i3010_outer:
	mov   eax, [ebp + i3010_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3010_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3010_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3010_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 
	movss [esp + i3010_shX], xmm0
	movss [esp + i3010_shY], xmm1
	movss [esp + i3010_shZ], xmm2

	mov   ecx, [ebp + i3010_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3010_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + i3010_nsatoms]
	mov   ecx, [eax]
	add dword ptr [ebp + i3010_nsatoms],  12
	mov   [esp + i3010_nscoul], ecx	

	;# clear vctot 
	xorps xmm4, xmm4
	movaps [esp + i3010_vctot], xmm4
	mov   [esp + i3010_solnr], ebx

	mov   eax, [ebp + i3010_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3010_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   eax, [ebp + i3010_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3010_innerjjnr0], eax     ;# pointer to jjnr[nj0] 
	mov   [esp + i3010_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + i3010_nscoul]
	cmp   ecx,  0
	jnz  .i3010_mno_coul
	jmp   .i3010_last_mno
.i3010_mno_coul:
	mov   ebx,  [esp + i3010_solnr]
	inc   dword ptr [esp + i3010_solnr]

	movss xmm0, [esp + i3010_shX]
	movss xmm1, [esp + i3010_shY]
	movss xmm2, [esp + i3010_shZ]

	mov   edx, [ebp + i3010_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i3010_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3010_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i3010_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i3010_ix], xmm0
	movaps [esp + i3010_iy], xmm1
	movaps [esp + i3010_iz], xmm2

	mov   [esp + i3010_ii3], ebx
	
	;# clear i forces 
	xorps xmm4, xmm4
	movaps [esp + i3010_fix], xmm4
	movaps [esp + i3010_fiy], xmm4
	movaps [esp + i3010_fiz], xmm4

	mov   ecx, [esp + i3010_innerjjnr0]
	mov   [esp + i3010_innerjjnr], ecx
	mov   edx, [esp + i3010_innerk0]
    sub   edx,  4
    mov   [esp + i3010_innerk], edx    ;# number of innerloop atoms 
	jge   .i3010_unroll_coul_loop
	jmp   .i3010_finish_coul_inner

.i3010_unroll_coul_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3010_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i3010_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3010_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i3010_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	mulps  xmm3, xmm2

	movaps [esp + i3010_qq], xmm3	
	
	mov esi, [ebp + i3010_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i3010_ix]
	movaps xmm5, [esp + i3010_iy]
	movaps xmm6, [esp + i3010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3010_dx], xmm4
	movaps [esp + i3010_dy], xmm5
	movaps [esp + i3010_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3010_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i3010_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7
		
	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3010_two]	;# two*Heps2 
	movaps xmm3, [esp + i3010_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3010_vctot]
	movaps [esp + i3010_vctot], xmm5 

	xorps  xmm4, xmm4

	mulps xmm3, [esp + i3010_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3

	movaps xmm0, [esp + i3010_dx]
	movaps xmm1, [esp + i3010_dy]
	movaps xmm2, [esp + i3010_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i3010_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3010_fix]
	movaps xmm4, [esp + i3010_fiy]
	movaps xmm5, [esp + i3010_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3010_fix], xmm3
	movaps [esp + i3010_fiy], xmm4
	movaps [esp + i3010_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3010_innerk],  4
	jl    .i3010_finish_coul_inner
	jmp   .i3010_unroll_coul_loop
.i3010_finish_coul_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i3010_innerk],  4
	mov   edx, [esp + i3010_innerk]
	and   edx, 2
	jnz   .i3010_dopair_coul
	jmp   .i3010_checksingle_coul
.i3010_dopair_coul:	
	mov esi, [ebp + i3010_charge]

    mov   ecx, [esp + i3010_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i3010_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + i3010_iq]
	movlhps xmm3, xmm7
	movaps [esp + i3010_qq], xmm3

	mov edi, [ebp + i3010_pos]	
	
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i3010_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i3010_ix]
	movaps xmm5, [esp + i3010_iy]
	movaps xmm6, [esp + i3010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3010_dx], xmm4
	movaps [esp + i3010_dy], xmm5
	movaps [esp + i3010_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3010_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3010_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3010_two]	;# two*Heps2 
	movaps xmm3, [esp + i3010_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3010_vctot]
	movaps [esp + i3010_vctot], xmm5 

	xorps  xmm4, xmm4

	mulps xmm3, [esp + i3010_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3

	movaps xmm0, [esp + i3010_dx]
	movaps xmm1, [esp + i3010_dy]
	movaps xmm2, [esp + i3010_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3010_fix]
	movaps xmm4, [esp + i3010_fiy]
	movaps xmm5, [esp + i3010_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3010_fix], xmm3
	movaps [esp + i3010_fiy], xmm4
	movaps [esp + i3010_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i3010_checksingle_coul:				
	mov   edx, [esp + i3010_innerk]
	and   edx, 1
	jnz    .i3010_dosingle_coul
	jmp    .i3010_updateouterdata_coul
.i3010_dosingle_coul:
	mov esi, [ebp + i3010_charge]
	mov edi, [ebp + i3010_pos]
	mov   ecx, [esp + i3010_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + i3010_iq]
	movaps [esp + i3010_qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i3010_ix]
	movaps xmm5, [esp + i3010_iy]
	movaps xmm6, [esp + i3010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3010_dx], xmm4
	movaps [esp + i3010_dy], xmm5
	movaps [esp + i3010_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3010_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3010_VFtab]
	movd ebx, mm6
	
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3010_two]	;# two*Heps2 
	movaps xmm3, [esp + i3010_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + i3010_vctot]
	movss [esp + i3010_vctot], xmm5 

	xorps xmm4, xmm4

	mulps xmm3, [esp + i3010_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3
	mov    edi, [ebp + i3010_faction]

	movaps xmm0, [esp + i3010_dx]
	movaps xmm1, [esp + i3010_dy]
	movaps xmm2, [esp + i3010_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3010_fix]
	movaps xmm4, [esp + i3010_fiy]
	movaps xmm5, [esp + i3010_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i3010_fix], xmm3
	movaps [esp + i3010_fiy], xmm4
	movaps [esp + i3010_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i3010_updateouterdata_coul:
	mov   ecx, [esp + i3010_ii3]
	mov   edi, [ebp + i3010_faction]
	mov   esi, [ebp + i3010_fshift]
	mov   edx, [esp + i3010_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3010_fix]
	movaps xmm1, [esp + i3010_fiy]
	movaps xmm2, [esp + i3010_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# loop back to mno 
	dec  dword ptr [esp + i3010_nscoul]
	jz  .i3010_last_mno
	jmp .i3010_mno_coul
	
.i3010_last_mno:	
	;# get group index for i particle 
	mov   edx, [ebp + i3010_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3010_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3010_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3010_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3010_nri]
	dec ecx
	jecxz .i3010_end
	;# not last, iterate once more!  
	mov [ebp + i3010_nri], ecx
	jmp .i3010_outer
.i3010_end:
	emms
	mov eax, [esp + i3010_salign]
	add esp, eax
	add esp, 324
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl inl3020_sse
.globl _inl3020_sse
inl3020_sse:	
_inl3020_sse:	
.equiv		i3020_nri,			8
.equiv		i3020_iinr,			12
.equiv		i3020_jindex,		16
.equiv		i3020_jjnr,			20
.equiv		i3020_shift,		24
.equiv		i3020_shiftvec,		28
.equiv		i3020_fshift,		32
.equiv		i3020_gid,			36
.equiv		i3020_pos,			40		
.equiv		i3020_faction,		44
.equiv		i3020_charge,		48
.equiv		i3020_facel,		52
.equiv		i3020_Vc,			56			
.equiv		i3020_tabscale,		60	
.equiv		i3020_VFtab,		64	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3020_ixO,			0
.equiv		i3020_iyO,			16
.equiv		i3020_izO,			32
.equiv		i3020_ixH1,			48
.equiv		i3020_iyH1,			64
.equiv		i3020_izH1,			80
.equiv		i3020_ixH2,			96
.equiv		i3020_iyH2,			112
.equiv		i3020_izH2,			128
.equiv		i3020_iqO,			144 
.equiv		i3020_iqH,			160 
.equiv		i3020_dxO,			176
.equiv		i3020_dyO,			192
.equiv		i3020_dzO,			208	
.equiv		i3020_dxH1,			224
.equiv		i3020_dyH1,			240
.equiv		i3020_dzH1,			256	
.equiv		i3020_dxH2,			272
.equiv		i3020_dyH2,			288
.equiv		i3020_dzH2,			304	
.equiv		i3020_qqO,			320
.equiv		i3020_qqH,			336
.equiv		i3020_rinvO,		352
.equiv		i3020_rinvH1,		368
.equiv		i3020_rinvH2,		384		
.equiv		i3020_rO,			400
.equiv		i3020_rH1,			416
.equiv		i3020_rH2,			432
.equiv		i3020_tsc,			448	
.equiv		i3020_two,			464
.equiv		i3020_vctot,		480
.equiv		i3020_fixO,			496
.equiv		i3020_fiyO,			512
.equiv		i3020_fizO,			528
.equiv		i3020_fixH1,		544
.equiv		i3020_fiyH1,		560
.equiv		i3020_fizH1,		576
.equiv		i3020_fixH2,		592
.equiv		i3020_fiyH2,		608
.equiv		i3020_fizH2,		624
.equiv		i3020_fjx,			640
.equiv		i3020_fjy,			656
.equiv		i3020_fjz,			672
.equiv		i3020_half,			688
.equiv		i3020_three,		704
.equiv		i3020_is3,			720
.equiv		i3020_ii3,			724
.equiv		i3020_innerjjnr,	728
.equiv		i3020_innerk,		732
.equiv		i3020_salign,		736								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 740		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3020_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + i3020_tabscale]
	
	movaps [esp + i3020_half],  xmm0
	movaps [esp + i3020_two],  xmm1
	movaps [esp + i3020_three],  xmm2
	shufps xmm3, xmm3, 0 
	movaps [esp + i3020_tsc], xmm3
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3020_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + i3020_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + i3020_iqO], xmm3
	movaps [esp + i3020_iqH], xmm4
	
.i3020_outer:
	mov   eax, [ebp + i3020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3020_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3020_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i3020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3020_pos]    ;# eax = base of pos[]  
	mov   [esp + i3020_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3020_ixO], xmm3
	movaps [esp + i3020_iyO], xmm4
	movaps [esp + i3020_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3020_ixH1], xmm0
	movaps [esp + i3020_iyH1], xmm1
	movaps [esp + i3020_izH1], xmm2
	movaps [esp + i3020_ixH2], xmm3
	movaps [esp + i3020_iyH2], xmm4
	movaps [esp + i3020_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i3020_vctot], xmm4
	movaps [esp + i3020_fixO], xmm4
	movaps [esp + i3020_fiyO], xmm4
	movaps [esp + i3020_fizO], xmm4
	movaps [esp + i3020_fixH1], xmm4
	movaps [esp + i3020_fiyH1], xmm4
	movaps [esp + i3020_fizH1], xmm4
	movaps [esp + i3020_fixH2], xmm4
	movaps [esp + i3020_fiyH2], xmm4
	movaps [esp + i3020_fizH2], xmm4
	
	mov   eax, [ebp + i3020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3020_pos]
	mov   edi, [ebp + i3020_faction]	
	mov   eax, [ebp + i3020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i3020_innerk], edx    ;# number of innerloop atoms 
	jge   .i3020_unroll_loop
	jmp   .i3020_odd_inner
.i3020_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + i3020_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3020_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + i3020_iqO]
	mulps  xmm4, [esp + i3020_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx

	movaps  [esp + i3020_qqO], xmm3
	movaps  [esp + i3020_qqH], xmm4	

	mov esi, [ebp + i3020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + i3020_ixO]
	movaps xmm5, [esp + i3020_iyO]
	movaps xmm6, [esp + i3020_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3020_dxO], xmm4
	movaps [esp + i3020_dyO], xmm5
	movaps [esp + i3020_dzO], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + i3020_ixH1]
	movaps xmm5, [esp + i3020_iyH1]
	movaps xmm6, [esp + i3020_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3020_dxH1], xmm4
	movaps [esp + i3020_dyH1], xmm5
	movaps [esp + i3020_dzH1], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + i3020_ixH2]
	movaps xmm4, [esp + i3020_iyH2]
	movaps xmm5, [esp + i3020_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# store dr 
	movaps [esp + i3020_dxH2], xmm3
	movaps [esp + i3020_dyH2], xmm4
	movaps [esp + i3020_dzH2], xmm5
	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - seed to xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i3020_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i3020_half]
	movaps  [esp + i3020_rinvO], xmm4	;# rinvO in xmm4 
	mulps   xmm7, xmm4
	movaps  [esp + i3020_rO], xmm7	

	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i3020_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i3020_half]
	movaps  [esp + i3020_rinvH1], xmm4	;# rinvH1 in xmm4 
	mulps   xmm6, xmm4
	movaps  [esp + i3020_rH1], xmm6

	;# rsqH2 - seed to xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i3020_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i3020_half]
	movaps  [esp + i3020_rinvH2], xmm4	;# rinvH2 in xmm4 
	mulps   xmm5, xmm4
	movaps  [esp + i3020_rH2], xmm5

	;# do O interactions 
	;# rO is still in xmm7 
	mulps   xmm7, [esp + i3020_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3

	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd mm0, eax   
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + i3020_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3020_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3020_qqO]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm0, xmm7 ;# fijC=FF*qq 

    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + i3020_vctot]
    movaps [esp + i3020_vctot], xmm5 
	xorps  xmm4, xmm4

	mulps  xmm0, [esp + i3020_tsc]
	mulps  xmm0, [esp + i3020_rinvO]	
	subps  xmm4, xmm0

	movaps xmm0, [esp + i3020_dxO]
	movaps xmm1, [esp + i3020_dyO]
	movaps xmm2, [esp + i3020_dzO]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4	;# tx in xmm0-xmm2 

	;# update O forces 
	movaps xmm3, [esp + i3020_fixO]
	movaps xmm4, [esp + i3020_fiyO]
	movaps xmm7, [esp + i3020_fizO]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i3020_fixO], xmm3
	movaps [esp + i3020_fiyO], xmm4
	movaps [esp + i3020_fizO], xmm7
	;# update j forces with water O 
	movaps [esp + i3020_fjx], xmm0
	movaps [esp + i3020_fjy], xmm1
	movaps [esp + i3020_fjz], xmm2

	;# Done with O interactions - now H1! 
	movaps xmm7, [esp + i3020_rH1]
	mulps   xmm7, [esp + i3020_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3020_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3020_qqH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm7, xmm0 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm7 fijC 
    ;# increment vcoul 
	xorps  xmm4, xmm4
    addps  xmm5, [esp + i3020_vctot]
	mulps  xmm7, [esp + i3020_rinvH1]
    movaps [esp + i3020_vctot], xmm5 
	mulps  xmm7, [esp + i3020_tsc]
	subps xmm4, xmm7

	movaps xmm0, [esp + i3020_dxH1]
	movaps xmm1, [esp + i3020_dyH1]
	movaps xmm2, [esp + i3020_dzH1]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H1 forces 
	movaps xmm3, [esp + i3020_fixH1]
	movaps xmm4, [esp + i3020_fiyH1]
	movaps xmm7, [esp + i3020_fizH1]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i3020_fixH1], xmm3
	movaps [esp + i3020_fiyH1], xmm4
	movaps [esp + i3020_fizH1], xmm7
	;# update j forces with water H1 
	addps  xmm0, [esp + i3020_fjx]
	addps  xmm1, [esp + i3020_fjy]
	addps  xmm2, [esp + i3020_fjz]
	movaps [esp + i3020_fjx], xmm0
	movaps [esp + i3020_fjy], xmm1
	movaps [esp + i3020_fjz], xmm2

	;# Done with H1, finally we do H2 interactions 
	movaps xmm7, [esp + i3020_rH2]
	mulps   xmm7, [esp + i3020_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3020_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3020_qqH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm7, xmm0 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul 
	xorps  xmm4, xmm4
    addps  xmm5, [esp + i3020_vctot]
	mulps  xmm7, [esp + i3020_rinvH2]
    movaps [esp + i3020_vctot], xmm5 
	mulps  xmm7, [esp + i3020_tsc]
	subps  xmm4, xmm7

	movaps xmm0, [esp + i3020_dxH2]
	movaps xmm1, [esp + i3020_dyH2]
	movaps xmm2, [esp + i3020_dzH2]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

    movd eax, mm0   
    movd ebx, mm1
    movd ecx, mm2
    movd edx, mm3
	
	;# update H2 forces 
	movaps xmm3, [esp + i3020_fixH2]
	movaps xmm4, [esp + i3020_fiyH2]
	movaps xmm7, [esp + i3020_fizH2]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i3020_fixH2], xmm3
	movaps [esp + i3020_fiyH2], xmm4
	movaps [esp + i3020_fizH2], xmm7

	mov edi, [ebp + i3020_faction]
	;# update j forces 
	addps xmm0, [esp + i3020_fjx]
	addps xmm1, [esp + i3020_fjy]
	addps xmm2, [esp + i3020_fjz]

	movlps xmm4, [edi + eax*4]
	movlps xmm7, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm7, [edi + edx*4]
	
	movaps xmm3, xmm4
	shufps xmm3, xmm7, 136  ;# 10001000
	shufps xmm4, xmm7, 221  ;# 11011101			      
	;# xmm3 has fjx, xmm4 has fjy 
	subps xmm3, xmm0
	subps xmm4, xmm1
	;# unpack them back for storing 
	movaps xmm7, xmm3
	unpcklps xmm7, xmm4
	unpckhps xmm3, xmm4	
	movlps [edi + eax*4], xmm7
	movlps [edi + ecx*4], xmm3
	movhps [edi + ebx*4], xmm7
	movhps [edi + edx*4], xmm3
	;# finally z forces 
	movss  xmm0, [edi + eax*4 + 8]
	movss  xmm1, [edi + ebx*4 + 8]
	movss  xmm3, [edi + ecx*4 + 8]
	movss  xmm4, [edi + edx*4 + 8]
	subss  xmm0, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm1, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm3, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm4, xmm2
	movss  [edi + eax*4 + 8], xmm0
	movss  [edi + ebx*4 + 8], xmm1
	movss  [edi + ecx*4 + 8], xmm3
	movss  [edi + edx*4 + 8], xmm4
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3020_innerk],  4
	jl    .i3020_odd_inner
	jmp   .i3020_unroll_loop
.i3020_odd_inner:	
	add dword ptr [esp + i3020_innerk],  4
	jnz   .i3020_odd_loop
	jmp   .i3020_updateouterdata
.i3020_odd_loop:
	mov   edx, [esp + i3020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i3020_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + i3020_iqO]
	mov esi, [ebp + i3020_charge] 
	movhps xmm4, [esp + i3020_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + i3020_qqO], xmm3	;# use oxygen qq for storage 

	mov esi, [ebp + i3020_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + i3020_ixO]
	movss xmm4, [esp + i3020_iyO]
	movss xmm5, [esp + i3020_izO]
		
	movlps xmm6, [esp + i3020_ixH1]
	movlps xmm7, [esp + i3020_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + i3020_iyH1]
	movlps xmm7, [esp + i3020_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + i3020_izH1]
	movlps xmm7, [esp + i3020_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	
	movaps [esp + i3020_dxO], xmm3
	movaps [esp + i3020_dyO], xmm4
	movaps [esp + i3020_dzO], xmm5

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3020_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3020_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000	
	
	mulps xmm4, xmm0	;# xmm4=r 
	movaps [esp + i3020_rinvO], xmm0
	
	mulps xmm4, [esp + i3020_tsc]
	movhlps xmm7, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm7    ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm7, mm7
    movlhps xmm3, xmm7

	subps   xmm4, xmm3	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
	
    movd mm0, eax   
    movd mm1, ecx
    movd mm2, edx

    mov  esi, [ebp + i3020_VFtab]
    movd eax, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3020_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3020_qqO]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm0, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + i3020_vctot]
    movaps [esp + i3020_vctot], xmm5

	xorps xmm4, xmm4
	mulps  xmm0, [esp + i3020_tsc]
	mulps  xmm0, [esp + i3020_rinvO]	
	subps  xmm4, xmm0
		
    movd eax, mm0   
    movd ecx, mm1
    movd edx, mm2	
		
	movaps xmm0, [esp + i3020_dxO]
	movaps xmm1, [esp + i3020_dyO]
	movaps xmm2, [esp + i3020_dzO]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4 ;# xmm0-xmm2 now contains tx-tz (partial force) 
	movss  xmm3, [esp + i3020_fixO]	
	movss  xmm4, [esp + i3020_fiyO]	
	movss  xmm5, [esp + i3020_fizO]	
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esp + i3020_fixO], xmm3	
	movss  [esp + i3020_fiyO], xmm4	
	movss  [esp + i3020_fizO], xmm5	;# updated the O force now do the H's 
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	shufps xmm3, xmm3, 230 ;# 11100110	;# shift right 
	shufps xmm4, xmm4, 230 ;# 11100110
	shufps xmm5, xmm5, 230 ;# 11100110
	addss  xmm3, [esp + i3020_fixH1]
	addss  xmm4, [esp + i3020_fiyH1]
	addss  xmm5, [esp + i3020_fizH1]
	movss  [esp + i3020_fixH1], xmm3	
	movss  [esp + i3020_fiyH1], xmm4	
	movss  [esp + i3020_fizH1], xmm5	;# updated the H1 force 

	mov edi, [ebp + i3020_faction]
	shufps xmm3, xmm3, 231 ;# 11100111	;# shift right 
	shufps xmm4, xmm4, 231 ;# 11100111
	shufps xmm5, xmm5, 231 ;# 11100111
	addss  xmm3, [esp + i3020_fixH2]
	addss  xmm4, [esp + i3020_fiyH2]
	addss  xmm5, [esp + i3020_fizH2]
	movss  [esp + i3020_fixH2], xmm3	
	movss  [esp + i3020_fiyH2], xmm4	
	movss  [esp + i3020_fizH2], xmm5	;# updated the H2 force 

	;# the fj's - start by accumulating the tx/ty/tz force in xmm0, xmm1 
	xorps  xmm5, xmm5
	movaps xmm3, xmm0
	movlps xmm6, [edi + eax*4]
	movss  xmm7, [edi + eax*4 + 8]
	unpcklps xmm3, xmm1
	movlhps  xmm3, xmm5	
	unpckhps xmm0, xmm1		
	addps    xmm0, xmm3
	movhlps  xmm3, xmm0	
	addps    xmm0, xmm3	;# x,y sum in xmm0 

	movhlps  xmm1, xmm2
	addss    xmm2, xmm1
	shufps   xmm1, xmm1, 1 
	addss    xmm2, xmm1    ;# z sum in xmm2 
	subps    xmm6, xmm0
	subss    xmm7, xmm2
	
	movlps [edi + eax*4],     xmm6
	movss  [edi + eax*4 + 8], xmm7

	dec dword ptr [esp + i3020_innerk]
	jz    .i3020_updateouterdata
	jmp   .i3020_odd_loop
.i3020_updateouterdata:
	mov   ecx, [esp + i3020_ii3]
	mov   edi, [ebp + i3020_faction]
	mov   esi, [ebp + i3020_fshift]
	mov   edx, [esp + i3020_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3020_fixO]
	movaps xmm1, [esp + i3020_fiyO]
	movaps xmm2, [esp + i3020_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3020_fixH1]
	movaps xmm1, [esp + i3020_fiyH1]
	movaps xmm2, [esp + i3020_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3020_fixH2]
	movaps xmm1, [esp + i3020_fiyH2]
	movaps xmm2, [esp + i3020_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	mov   edx, [ebp + i3020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i3020_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + i3020_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 

	;# finish if last 
	mov   ecx, [ebp + i3020_nri]
	dec ecx
	jecxz .i3020_end
	;# not last, iterate once more!  
	mov [ebp + i3020_nri], ecx
	jmp .i3020_outer
.i3020_end:
	emms
	mov eax, [esp + i3020_salign]
	add esp, eax
	add esp, 740
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

	
.globl inl3030_sse
.globl _inl3030_sse
inl3030_sse:	
_inl3030_sse:	
.equiv		i3030_nri,			8
.equiv		i3030_iinr,			12
.equiv		i3030_jindex,		16
.equiv		i3030_jjnr,			20
.equiv		i3030_shift,		24
.equiv		i3030_shiftvec,		28
.equiv		i3030_fshift,		32
.equiv		i3030_gid,			36
.equiv		i3030_pos,			40		
.equiv		i3030_faction,		44
.equiv		i3030_charge,		48
.equiv		i3030_facel,		52
.equiv		i3030_Vc,			56			
.equiv		i3030_tabscale,		60	
.equiv		i3030_VFtab,		64
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3030_ixO,			0
.equiv		i3030_iyO,			16
.equiv		i3030_izO,			32
.equiv		i3030_ixH1,			48
.equiv		i3030_iyH1,			64
.equiv		i3030_izH1,			80
.equiv		i3030_ixH2,			96
.equiv		i3030_iyH2,			112
.equiv		i3030_izH2,			128
.equiv		i3030_jxO,			144
.equiv		i3030_jyO,			160
.equiv		i3030_jzO,			176
.equiv		i3030_jxH1,			192
.equiv		i3030_jyH1,			208
.equiv		i3030_jzH1,			224
.equiv		i3030_jxH2,			240
.equiv		i3030_jyH2,			256
.equiv		i3030_jzH2,			272
.equiv		i3030_dxOO,			288
.equiv		i3030_dyOO,			304
.equiv		i3030_dzOO,			320	
.equiv		i3030_dxOH1,		336
.equiv		i3030_dyOH1,		352
.equiv		i3030_dzOH1,		368	
.equiv		i3030_dxOH2,		384
.equiv		i3030_dyOH2,		400
.equiv		i3030_dzOH2,		416	
.equiv		i3030_dxH1O,		432
.equiv		i3030_dyH1O,		448
.equiv		i3030_dzH1O,		464	
.equiv		i3030_dxH1H1,		480
.equiv		i3030_dyH1H1,		496
.equiv		i3030_dzH1H1,		512	
.equiv		i3030_dxH1H2,		528
.equiv		i3030_dyH1H2,		544
.equiv		i3030_dzH1H2,		560	
.equiv		i3030_dxH2O,		576
.equiv		i3030_dyH2O,		592
.equiv		i3030_dzH2O,		608	
.equiv		i3030_dxH2H1,		624
.equiv		i3030_dyH2H1,		640
.equiv		i3030_dzH2H1,		656	
.equiv		i3030_dxH2H2,		672
.equiv		i3030_dyH2H2,		688
.equiv		i3030_dzH2H2,		704
.equiv		i3030_qqOO,			720
.equiv		i3030_qqOH,			736
.equiv		i3030_qqHH,			752
.equiv		i3030_two,			768
.equiv		i3030_tsc,			784
.equiv		i3030_vctot,		800
.equiv		i3030_fixO,			816
.equiv		i3030_fiyO,			832
.equiv		i3030_fizO,			848
.equiv		i3030_fixH1,		864
.equiv		i3030_fiyH1,		880
.equiv		i3030_fizH1,		896
.equiv		i3030_fixH2,		912
.equiv		i3030_fiyH2,		928
.equiv		i3030_fizH2,		944
.equiv		i3030_fjxO,			960
.equiv		i3030_fjyO,			976
.equiv		i3030_fjzO,			992
.equiv		i3030_fjxH1,		1008
.equiv		i3030_fjyH1,		1024
.equiv		i3030_fjzH1,		1040
.equiv		i3030_fjxH2,		1056
.equiv		i3030_fjyH2,		1072
.equiv		i3030_fjzH2,		1088
.equiv		i3030_half,			1104
.equiv		i3030_three,		1120
.equiv		i3030_rsqOO,		1136
.equiv		i3030_rsqOH1,		1152
.equiv		i3030_rsqOH2,		1168
.equiv		i3030_rsqH1O,		1184
.equiv		i3030_rsqH1H1,		1200
.equiv		i3030_rsqH1H2,		1216
.equiv		i3030_rsqH2O,		1232
.equiv		i3030_rsqH2H1,		1248
.equiv		i3030_rsqH2H2,		1264
.equiv		i3030_rinvOO,		1280
.equiv		i3030_rinvOH1,		1296
.equiv		i3030_rinvOH2,		1312
.equiv		i3030_rinvH1O,		1328
.equiv		i3030_rinvH1H1,		1344
.equiv		i3030_rinvH1H2,		1360
.equiv		i3030_rinvH2O,		1376
.equiv		i3030_rinvH2H1,		1392
.equiv		i3030_rinvH2H2,		1408	
.equiv		i3030_is3,			1424
.equiv		i3030_ii3,			1428
.equiv		i3030_innerjjnr,	1432
.equiv		i3030_innerk,		1436
.equiv		i3030_salign,		1440							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1444		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3030_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + i3030_tabscale]
	movaps [esp + i3030_half],  xmm0
	movaps [esp + i3030_two],  xmm1
	movaps [esp + i3030_three], xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + i3030_tsc],  xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3030_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + i3030_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3030_qqOO], xmm3
	movaps [esp + i3030_qqOH], xmm4
	movaps [esp + i3030_qqHH], xmm5		

.i3030_outer:
	mov   eax, [ebp + i3030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3030_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3030_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i3030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3030_pos]    ;# eax = base of pos[]  
	mov   [esp + i3030_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3030_ixO], xmm3
	movaps [esp + i3030_iyO], xmm4
	movaps [esp + i3030_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3030_ixH1], xmm0
	movaps [esp + i3030_iyH1], xmm1
	movaps [esp + i3030_izH1], xmm2
	movaps [esp + i3030_ixH2], xmm3
	movaps [esp + i3030_iyH2], xmm4
	movaps [esp + i3030_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i3030_vctot], xmm4
	movaps [esp + i3030_fixO], xmm4
	movaps [esp + i3030_fiyO], xmm4
	movaps [esp + i3030_fizO], xmm4
	movaps [esp + i3030_fixH1], xmm4
	movaps [esp + i3030_fiyH1], xmm4
	movaps [esp + i3030_fizH1], xmm4
	movaps [esp + i3030_fixH2], xmm4
	movaps [esp + i3030_fiyH2], xmm4
	movaps [esp + i3030_fizH2], xmm4
	
	mov   eax, [ebp + i3030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3030_pos]
	mov   edi, [ebp + i3030_faction]	
	mov   eax, [ebp + i3030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i3030_innerk], edx    ;# number of innerloop atoms 
	jge   .i3030_unroll_loop
	jmp   .i3030_single_check
.i3030_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3030_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + i3030_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d 
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd 
	movaps [esp + i3030_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + i3030_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + i3030_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + i3030_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + i3030_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + i3030_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + i3030_jzO],  xmm0
	movaps [esp + i3030_jzH1],  xmm1
	movaps [esp + i3030_jzH2],  xmm2

	movaps xmm0, [esp + i3030_ixO]
	movaps xmm1, [esp + i3030_iyO]
	movaps xmm2, [esp + i3030_izO]
	movaps xmm3, [esp + i3030_ixO]
	movaps xmm4, [esp + i3030_iyO]
	movaps xmm5, [esp + i3030_izO]
	subps  xmm0, [esp + i3030_jxO]
	subps  xmm1, [esp + i3030_jyO]
	subps  xmm2, [esp + i3030_jzO]
	subps  xmm3, [esp + i3030_jxH1]
	subps  xmm4, [esp + i3030_jyH1]
	subps  xmm5, [esp + i3030_jzH1]
	movaps [esp + i3030_dxOO], xmm0
	movaps [esp + i3030_dyOO], xmm1
	movaps [esp + i3030_dzOO], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3030_dxOH1], xmm3
	movaps [esp + i3030_dyOH1], xmm4
	movaps [esp + i3030_dzOH1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i3030_rsqOO], xmm0
	movaps [esp + i3030_rsqOH1], xmm3

	movaps xmm0, [esp + i3030_ixO]
	movaps xmm1, [esp + i3030_iyO]
	movaps xmm2, [esp + i3030_izO]
	movaps xmm3, [esp + i3030_ixH1]
	movaps xmm4, [esp + i3030_iyH1]
	movaps xmm5, [esp + i3030_izH1]
	subps  xmm0, [esp + i3030_jxH2]
	subps  xmm1, [esp + i3030_jyH2]
	subps  xmm2, [esp + i3030_jzH2]
	subps  xmm3, [esp + i3030_jxO]
	subps  xmm4, [esp + i3030_jyO]
	subps  xmm5, [esp + i3030_jzO]
	movaps [esp + i3030_dxOH2], xmm0
	movaps [esp + i3030_dyOH2], xmm1
	movaps [esp + i3030_dzOH2], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3030_dxH1O], xmm3
	movaps [esp + i3030_dyH1O], xmm4
	movaps [esp + i3030_dzH1O], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i3030_rsqOH2], xmm0
	movaps [esp + i3030_rsqH1O], xmm3

	movaps xmm0, [esp + i3030_ixH1]
	movaps xmm1, [esp + i3030_iyH1]
	movaps xmm2, [esp + i3030_izH1]
	movaps xmm3, [esp + i3030_ixH1]
	movaps xmm4, [esp + i3030_iyH1]
	movaps xmm5, [esp + i3030_izH1]
	subps  xmm0, [esp + i3030_jxH1]
	subps  xmm1, [esp + i3030_jyH1]
	subps  xmm2, [esp + i3030_jzH1]
	subps  xmm3, [esp + i3030_jxH2]
	subps  xmm4, [esp + i3030_jyH2]
	subps  xmm5, [esp + i3030_jzH2]
	movaps [esp + i3030_dxH1H1], xmm0
	movaps [esp + i3030_dyH1H1], xmm1
	movaps [esp + i3030_dzH1H1], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3030_dxH1H2], xmm3
	movaps [esp + i3030_dyH1H2], xmm4
	movaps [esp + i3030_dzH1H2], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i3030_rsqH1H1], xmm0
	movaps [esp + i3030_rsqH1H2], xmm3

	movaps xmm0, [esp + i3030_ixH2]
	movaps xmm1, [esp + i3030_iyH2]
	movaps xmm2, [esp + i3030_izH2]
	movaps xmm3, [esp + i3030_ixH2]
	movaps xmm4, [esp + i3030_iyH2]
	movaps xmm5, [esp + i3030_izH2]
	subps  xmm0, [esp + i3030_jxO]
	subps  xmm1, [esp + i3030_jyO]
	subps  xmm2, [esp + i3030_jzO]
	subps  xmm3, [esp + i3030_jxH1]
	subps  xmm4, [esp + i3030_jyH1]
	subps  xmm5, [esp + i3030_jzH1]
	movaps [esp + i3030_dxH2O], xmm0
	movaps [esp + i3030_dyH2O], xmm1
	movaps [esp + i3030_dzH2O], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3030_dxH2H1], xmm3
	movaps [esp + i3030_dyH2H1], xmm4
	movaps [esp + i3030_dzH2H1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + i3030_rsqH2O], xmm0
	movaps [esp + i3030_rsqH2H1], xmm4

	movaps xmm0, [esp + i3030_ixH2]
	movaps xmm1, [esp + i3030_iyH2]
	movaps xmm2, [esp + i3030_izH2]
	subps  xmm0, [esp + i3030_jxH2]
	subps  xmm1, [esp + i3030_jyH2]
	subps  xmm2, [esp + i3030_jzH2]
	movaps [esp + i3030_dxH2H2], xmm0
	movaps [esp + i3030_dyH2H2], xmm1
	movaps [esp + i3030_dzH2H2], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + i3030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3030_half] ;# rinvH2H2 
	mulps   xmm7, [esp + i3030_half] ;# rinvH2H1 
	movaps  [esp + i3030_rinvH2H2], xmm3
	movaps  [esp + i3030_rinvH2H1], xmm7
		
	rsqrtps xmm1, [esp + i3030_rsqOO]
	rsqrtps xmm5, [esp + i3030_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i3030_rsqOO]
	mulps   xmm5, [esp + i3030_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3030_half] 
	mulps   xmm7, [esp + i3030_half]
	movaps  [esp + i3030_rinvOO], xmm3
	movaps  [esp + i3030_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + i3030_rsqOH2]
	rsqrtps xmm5, [esp + i3030_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i3030_rsqOH2]
	mulps   xmm5, [esp + i3030_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3030_half] 
	mulps   xmm7, [esp + i3030_half]
	movaps  [esp + i3030_rinvOH2], xmm3
	movaps  [esp + i3030_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + i3030_rsqH1H1]
	rsqrtps xmm5, [esp + i3030_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i3030_rsqH1H1]
	mulps   xmm5, [esp + i3030_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3030_half] 
	mulps   xmm7, [esp + i3030_half]
	movaps  [esp + i3030_rinvH1H1], xmm3
	movaps  [esp + i3030_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + i3030_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i3030_three]
	mulps   xmm1, [esp + i3030_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + i3030_half] 
	movaps  [esp + i3030_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + i3030_rinvOO]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3030_rsqOO] ;# xmm1=r 
	mulps  xmm1, [esp + i3030_tsc]
		
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2
	
    movd mm0, eax
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + i3030_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3030_qqOO]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addps  xmm5, [esp + i3030_vctot]
	xorps  xmm2, xmm2
    movaps [esp + i3030_vctot], xmm5
	mulps  xmm3, [esp + i3030_tsc]
	
	subps  xmm2, xmm3
	mulps  xmm0, xmm2
	
	movaps xmm1, xmm0
	movaps xmm2, xmm0		

	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i3030_dxOO]
	mulps xmm1, [esp + i3030_dyOO]
	mulps xmm2, [esp + i3030_dzOO]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3030_fixO]
	addps xmm1, [esp + i3030_fiyO]
	addps xmm2, [esp + i3030_fizO]
	movaps [esp + i3030_fjxO], xmm3
	movaps [esp + i3030_fjyO], xmm4
	movaps [esp + i3030_fjzO], xmm5
	movaps [esp + i3030_fixO], xmm0
	movaps [esp + i3030_fiyO], xmm1
	movaps [esp + i3030_fizO], xmm2

	;# O-H1 interaction 
	movaps xmm0, [esp + i3030_rinvOH1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3030_rsqOH1] ;# xmm1=r 
	mulps  xmm1, [esp + i3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2
	
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3030_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3030_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i3030_dxOH1]
	mulps xmm1, [esp + i3030_dyOH1]
	mulps xmm2, [esp + i3030_dzOH1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3030_fixO]
	addps xmm1, [esp + i3030_fiyO]
	addps xmm2, [esp + i3030_fizO]
	movaps [esp + i3030_fjxH1], xmm3
	movaps [esp + i3030_fjyH1], xmm4
	movaps [esp + i3030_fjzH1], xmm5
	movaps [esp + i3030_fixO], xmm0
	movaps [esp + i3030_fiyO], xmm1
	movaps [esp + i3030_fizO], xmm2

	;# O-H2 interaction  
	movaps xmm0, [esp + i3030_rinvOH2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3030_rsqOH2] ;# xmm1=r 
	mulps  xmm1, [esp + i3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3030_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3030_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i3030_dxOH2]
	mulps xmm1, [esp + i3030_dyOH2]
	mulps xmm2, [esp + i3030_dzOH2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3030_fixO]
	addps xmm1, [esp + i3030_fiyO]
	addps xmm2, [esp + i3030_fizO]
	movaps [esp + i3030_fjxH2], xmm3
	movaps [esp + i3030_fjyH2], xmm4
	movaps [esp + i3030_fjzH2], xmm5
	movaps [esp + i3030_fixO], xmm0
	movaps [esp + i3030_fiyO], xmm1
	movaps [esp + i3030_fizO], xmm2

	;# H1-O interaction 
	movaps xmm0, [esp + i3030_rinvH1O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3030_rsqH1O] ;# xmm1=r 
	mulps  xmm1, [esp + i3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3030_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3030_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3030_fjxO]
	movaps xmm4, [esp + i3030_fjyO]
	movaps xmm5, [esp + i3030_fjzO]
	mulps xmm0, [esp + i3030_dxH1O]
	mulps xmm1, [esp + i3030_dyH1O]
	mulps xmm2, [esp + i3030_dzH1O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3030_fixH1]
	addps xmm1, [esp + i3030_fiyH1]
	addps xmm2, [esp + i3030_fizH1]
	movaps [esp + i3030_fjxO], xmm3
	movaps [esp + i3030_fjyO], xmm4
	movaps [esp + i3030_fjzO], xmm5
	movaps [esp + i3030_fixH1], xmm0
	movaps [esp + i3030_fiyH1], xmm1
	movaps [esp + i3030_fizH1], xmm2

	;# H1-H1 interaction 
	movaps xmm0, [esp + i3030_rinvH1H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3030_rsqH1H1] ;# xmm1=r 
	mulps  xmm1, [esp + i3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3030_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3030_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3030_fjxH1]
	movaps xmm4, [esp + i3030_fjyH1]
	movaps xmm5, [esp + i3030_fjzH1]
	mulps xmm0, [esp + i3030_dxH1H1]
	mulps xmm1, [esp + i3030_dyH1H1]
	mulps xmm2, [esp + i3030_dzH1H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3030_fixH1]
	addps xmm1, [esp + i3030_fiyH1]
	addps xmm2, [esp + i3030_fizH1]
	movaps [esp + i3030_fjxH1], xmm3
	movaps [esp + i3030_fjyH1], xmm4
	movaps [esp + i3030_fjzH1], xmm5
	movaps [esp + i3030_fixH1], xmm0
	movaps [esp + i3030_fiyH1], xmm1
	movaps [esp + i3030_fizH1], xmm2

	;# H1-H2 interaction 
	movaps xmm0, [esp + i3030_rinvH1H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3030_rsqH1H2] ;# xmm1=r 
	mulps  xmm1, [esp + i3030_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3030_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3030_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3030_fjxH2]
	movaps xmm4, [esp + i3030_fjyH2]
	movaps xmm5, [esp + i3030_fjzH2]
	mulps xmm0, [esp + i3030_dxH1H2]
	mulps xmm1, [esp + i3030_dyH1H2]
	mulps xmm2, [esp + i3030_dzH1H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3030_fixH1]
	addps xmm1, [esp + i3030_fiyH1]
	addps xmm2, [esp + i3030_fizH1]
	movaps [esp + i3030_fjxH2], xmm3
	movaps [esp + i3030_fjyH2], xmm4
	movaps [esp + i3030_fjzH2], xmm5
	movaps [esp + i3030_fixH1], xmm0
	movaps [esp + i3030_fiyH1], xmm1
	movaps [esp + i3030_fizH1], xmm2

	;# H2-O interaction 
	movaps xmm0, [esp + i3030_rinvH2O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3030_rsqH2O] ;# xmm1=r 
	mulps  xmm1, [esp + i3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3030_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3030_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1

	movaps xmm3, [esp + i3030_fjxO]
	movaps xmm4, [esp + i3030_fjyO]
	movaps xmm5, [esp + i3030_fjzO]
	mulps xmm0, [esp + i3030_dxH2O]
	mulps xmm1, [esp + i3030_dyH2O]
	mulps xmm2, [esp + i3030_dzH2O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3030_fixH2]
	addps xmm1, [esp + i3030_fiyH2]
	addps xmm2, [esp + i3030_fizH2]
	movaps [esp + i3030_fjxO], xmm3
	movaps [esp + i3030_fjyO], xmm4
	movaps [esp + i3030_fjzO], xmm5
	movaps [esp + i3030_fixH2], xmm0
	movaps [esp + i3030_fiyH2], xmm1
	movaps [esp + i3030_fizH2], xmm2

	;# H2-H1 interaction 
	movaps xmm0, [esp + i3030_rinvH2H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3030_rsqH2H1] ;# xmm1=r 
	mulps  xmm1, [esp + i3030_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3030_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3030_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3030_fjxH1]
	movaps xmm4, [esp + i3030_fjyH1]
	movaps xmm5, [esp + i3030_fjzH1]
	mulps xmm0, [esp + i3030_dxH2H1]
	mulps xmm1, [esp + i3030_dyH2H1]
	mulps xmm2, [esp + i3030_dzH2H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3030_fixH2]
	addps xmm1, [esp + i3030_fiyH2]
	addps xmm2, [esp + i3030_fizH2]
	movaps [esp + i3030_fjxH1], xmm3
	movaps [esp + i3030_fjyH1], xmm4
	movaps [esp + i3030_fjzH1], xmm5
	movaps [esp + i3030_fixH2], xmm0
	movaps [esp + i3030_fiyH2], xmm1
	movaps [esp + i3030_fizH2], xmm2

	;# H2-H2 interaction 
	movaps xmm0, [esp + i3030_rinvH2H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3030_rsqH2H2] ;# xmm1=r 
	mulps  xmm1, [esp + i3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3030_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3030_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3030_fjxH2]
	movaps xmm4, [esp + i3030_fjyH2]
	movaps xmm5, [esp + i3030_fjzH2]
	mulps xmm0, [esp + i3030_dxH2H2]
	mulps xmm1, [esp + i3030_dyH2H2]
	mulps xmm2, [esp + i3030_dzH2H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3030_fixH2]
	addps xmm1, [esp + i3030_fiyH2]
	addps xmm2, [esp + i3030_fizH2]
	movaps [esp + i3030_fjxH2], xmm3
	movaps [esp + i3030_fjyH2], xmm4
	movaps [esp + i3030_fjzH2], xmm5
	movaps [esp + i3030_fixH2], xmm0
	movaps [esp + i3030_fiyH2], xmm1
	movaps [esp + i3030_fizH2], xmm2

	mov edi, [ebp + i3030_faction]

	movd eax, mm0
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3
	
	;# Did all interactions - now update j forces 
	;# 4 j waters with three atoms each - first do a & b j particles 
	movaps xmm0, [esp + i3030_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i3030_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpcklps xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjxOb  fjyOb 
	movaps xmm1, [esp + i3030_fjzO]
	movaps xmm2, [esp + i3030_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOb  fjyOb  
	unpcklps xmm1, xmm2	   ;# xmm1= fjzOa  fjxH1a fjzOb  fjxH1b 
	movaps xmm4, [esp + i3030_fjyH1]
	movaps xmm5, [esp + i3030_fjzH1]
	unpcklps xmm4, xmm5	   ;# xmm4= fjyH1a fjzH1a fjyH1b fjzH1b 
	movaps xmm5, [esp + i3030_fjxH2]
	movaps xmm6, [esp + i3030_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1b fjzH1b 
	unpcklps xmm5, xmm6	   ;# xmm5= fjxH2a fjyH2a fjxH2b fjyH2b 
	movlhps  xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjzOa  fjxH1a 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOb  fjyOb  fjzOb  fjxH1b 
	movlhps  xmm4, xmm5   	   ;# xmm4= fjyH1a fjzH1a fjxH2a fjyH2a 
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1b fjzH1b fjxH2b fjyH2b 
	movups   xmm1, [edi + eax*4]
	movups   xmm2, [edi + eax*4 + 16]
	movups   xmm5, [edi + ebx*4]
	movups   xmm6, [edi + ebx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + eax*4 + 32]
	movss    xmm3, [edi + ebx*4 + 32]
	
	movaps   xmm4, [esp + i3030_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm7, xmm7, 1
	
	movups   [edi + eax*4],     xmm1
	movups   [edi + eax*4 + 16],xmm2
	movups   [edi + ebx*4],     xmm5
	movups   [edi + ebx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + eax*4 + 32], xmm0
	movss    [edi + ebx*4 + 32], xmm3	

	;# then do the second pair (c & d) 
	movaps xmm0, [esp + i3030_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i3030_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpckhps xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjxOd  fjyOd 
	movaps xmm1, [esp + i3030_fjzO]
	movaps xmm2, [esp + i3030_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOd  fjyOd  
	unpckhps xmm1, xmm2	   ;# xmm1= fjzOc  fjxH1c fjzOd  fjxH1d 
	movaps xmm4, [esp + i3030_fjyH1]
	movaps xmm5, [esp + i3030_fjzH1]
	unpckhps xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjyH1d fjzH1d	
	movaps xmm5, [esp + i3030_fjxH2]
	movaps xmm6, [esp + i3030_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1d fjzH1d 	 
	unpckhps xmm5, xmm6	   ;# xmm5= fjxH2c fjyH2c fjxH2d fjyH2d 
	movlhps  xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjzOc  fjxH1c 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOd  fjyOd  fjzOd  fjxH1d 
	movlhps  xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjxH2c fjyH2c  
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1d fjzH1d fjxH2d fjyH2d 
	movups   xmm1, [edi + ecx*4]
	movups   xmm2, [edi + ecx*4 + 16]
	movups   xmm5, [edi + edx*4]
	movups   xmm6, [edi + edx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + ecx*4 + 32]
	movss    xmm3, [edi + edx*4 + 32]
	
	movaps   xmm4, [esp + i3030_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm4, xmm4, 2 ;# 00000010
	shufps   xmm7, xmm7, 3 ;# 00000011
	movups   [edi + ecx*4],     xmm1
	movups   [edi + ecx*4 + 16],xmm2
	movups   [edi + edx*4],     xmm5
	movups   [edi + edx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + ecx*4 + 32], xmm0
	movss    [edi + edx*4 + 32], xmm3	
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3030_innerk],  4
	jl    .i3030_single_check
	jmp   .i3030_unroll_loop
.i3030_single_check:
	add dword ptr [esp + i3030_innerk],  4
	jnz   .i3030_single_loop
	jmp   .i3030_updateouterdata
.i3030_single_loop:
	mov   edx, [esp + i3030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i3030_innerjjnr],  4	

	mov esi, [ebp + i3030_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + i3030_ixO]     
	movaps  xmm1, [esp + i3030_iyO]
	movaps  xmm2, [esp + i3030_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + i3030_jxO], xmm3
	movaps [esp + i3030_jyO], xmm4
	movaps [esp + i3030_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	movaps [esp + i3030_dxOO], xmm0
	movaps [esp + i3030_dyOO], xmm1
	movaps [esp + i3030_dzOO], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	movaps  xmm2, xmm1	
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i3030_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + i3030_half] ;# rinv iO - j water 

	movaps  xmm1, xmm3
	mulps   xmm1, xmm0	;# xmm1=r 
	movaps  xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + i3030_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2
	
    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

	mov esi, [ebp + i3030_VFtab]
	
    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + i3030_qqOO]
	movhps  xmm3, [esp + i3030_qqOH]
		
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point xmm5 contains vcoul and xmm3 fijC 
	
    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5
	xorps  xmm2, xmm2
	mulps  xmm3, [esp + i3030_tsc]

	subps  xmm2, xmm3
	mulps  xmm0, xmm2
	
	movaps xmm1, xmm0
	movaps xmm2, xmm0			

	mulps   xmm0, [esp + i3030_dxOO]
	mulps   xmm1, [esp + i3030_dyOO]
	mulps   xmm2, [esp + i3030_dzOO]
	;# initial update for j forces 
	xorps   xmm3, xmm3
	xorps   xmm4, xmm4
	xorps   xmm5, xmm5
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i3030_fjxO], xmm3
	movaps  [esp + i3030_fjyO], xmm4
	movaps  [esp + i3030_fjzO], xmm5
	addps   xmm0, [esp + i3030_fixO]
	addps   xmm1, [esp + i3030_fiyO]
	addps   xmm2, [esp + i3030_fizO]
	movaps  [esp + i3030_fixO], xmm0
	movaps  [esp + i3030_fiyO], xmm1
	movaps  [esp + i3030_fizO], xmm2

	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + i3030_ixH1]
	movaps  xmm1, [esp + i3030_iyH1]
	movaps  xmm2, [esp + i3030_izH1]	
	movaps  xmm3, [esp + i3030_ixH2] 
	movaps  xmm4, [esp + i3030_iyH2] 
	movaps  xmm5, [esp + i3030_izH2] 
	subps   xmm0, [esp + i3030_jxO]
	subps   xmm1, [esp + i3030_jyO]
	subps   xmm2, [esp + i3030_jzO]
	subps   xmm3, [esp + i3030_jxO]
	subps   xmm4, [esp + i3030_jyO]
	subps   xmm5, [esp + i3030_jzO]
	movaps [esp + i3030_dxH1O], xmm0
	movaps [esp + i3030_dyH1O], xmm1
	movaps [esp + i3030_dzH1O], xmm2
	movaps [esp + i3030_dxH2O], xmm3
	movaps [esp + i3030_dyH2O], xmm4
	movaps [esp + i3030_dzH2O], xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 

	;# start with H1, save H2 data 
	movaps [esp + i3030_rsqH2O], xmm4
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3030_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + i3030_half] ;# rinv H2 - j water  

	;# start with H1, save H2 data 
	movaps [esp + i3030_rinvH2O], xmm7

	movaps xmm1, xmm3
	mulps  xmm1, xmm0	;# xmm1=r 
	movaps xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + i3030_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2

    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + i3030_qqOH]
	movhps  xmm3, [esp + i3030_qqHH]
		
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point xmm5 contains vcoul and xmm3 fijC 
    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5	

    xorps  xmm1, xmm1

    mulps xmm3, [esp + i3030_tsc]
    mulps xmm3, xmm0
    subps  xmm1, xmm3
	
	movaps  xmm0, xmm1
	movaps  xmm2, xmm1
	mulps   xmm0, [esp + i3030_dxH1O]
	mulps   xmm1, [esp + i3030_dyH1O]
	mulps   xmm2, [esp + i3030_dzH1O]
	;# update forces H1 - j water 
	movaps  xmm3, [esp + i3030_fjxO]
	movaps  xmm4, [esp + i3030_fjyO]
	movaps  xmm5, [esp + i3030_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i3030_fjxO], xmm3
	movaps  [esp + i3030_fjyO], xmm4
	movaps  [esp + i3030_fjzO], xmm5
	addps   xmm0, [esp + i3030_fixH1]
	addps   xmm1, [esp + i3030_fiyH1]
	addps   xmm2, [esp + i3030_fizH1]
	movaps  [esp + i3030_fixH1], xmm0
	movaps  [esp + i3030_fiyH1], xmm1
	movaps  [esp + i3030_fizH1], xmm2
	;# do table for H2 - j water interaction 
	movaps xmm0, [esp + i3030_rinvH2O]
	movaps xmm1, [esp + i3030_rsqH2O]
	mulps  xmm1, xmm0	;# xmm0=rinv, xmm1=r 
	mulps  xmm1, [esp + i3030_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2

    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3030_two]       ;# two*Heps2 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + i3030_qqOH]
	movhps  xmm3, [esp + i3030_qqHH]
		
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point xmm5 contains vcoul and xmm3 fijC 
    addps  xmm5, [esp + i3030_vctot]
    movaps [esp + i3030_vctot], xmm5	

    xorps  xmm1, xmm1

    mulps xmm3, [esp + i3030_tsc]
    mulps xmm3, xmm0
    subps  xmm1, xmm3
	
	movaps  xmm0, xmm1
	movaps  xmm2, xmm1
	
	mulps   xmm0, [esp + i3030_dxH2O]
	mulps   xmm1, [esp + i3030_dyH2O]
	mulps   xmm2, [esp + i3030_dzH2O]
	movaps  xmm3, [esp + i3030_fjxO]
	movaps  xmm4, [esp + i3030_fjyO]
	movaps  xmm5, [esp + i3030_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	mov     esi, [ebp + i3030_faction]
	movaps  [esp + i3030_fjxO], xmm3
	movaps  [esp + i3030_fjyO], xmm4
	movaps  [esp + i3030_fjzO], xmm5
	addps   xmm0, [esp + i3030_fixH2]
	addps   xmm1, [esp + i3030_fiyH2]
	addps   xmm2, [esp + i3030_fizH2]
	movaps  [esp + i3030_fixH2], xmm0
	movaps  [esp + i3030_fiyH2], xmm1
	movaps  [esp + i3030_fizH2], xmm2

	;# update j water forces from local variables 
	movlps  xmm0, [esi + eax*4]
	movlps  xmm1, [esi + eax*4 + 12]
	movhps  xmm1, [esi + eax*4 + 24]
	movaps  xmm3, [esp + i3030_fjxO]
	movaps  xmm4, [esp + i3030_fjyO]
	movaps  xmm5, [esp + i3030_fjzO]
	movaps  xmm6, xmm5
	movaps  xmm7, xmm5
	shufps  xmm6, xmm6, 2 ;# 00000010
	shufps  xmm7, xmm7, 3 ;# 00000011
	addss   xmm5, [esi + eax*4 + 8]
	addss   xmm6, [esi + eax*4 + 20]
	addss   xmm7, [esi + eax*4 + 32]
	movss   [esi + eax*4 + 8], xmm5
	movss   [esi + eax*4 + 20], xmm6
	movss   [esi + eax*4 + 32], xmm7
	movaps   xmm5, xmm3
	unpcklps xmm3, xmm4
	unpckhps xmm5, xmm4
	addps    xmm0, xmm3
	addps    xmm1, xmm5
	movlps  [esi + eax*4], xmm0 
	movlps  [esi + eax*4 + 12], xmm1 
	movhps  [esi + eax*4 + 24], xmm1 
	
	dec dword ptr [esp + i3030_innerk]
	jz    .i3030_updateouterdata
	jmp   .i3030_single_loop
.i3030_updateouterdata:
	mov   ecx, [esp + i3030_ii3]
	mov   edi, [ebp + i3030_faction]
	mov   esi, [ebp + i3030_fshift]
	mov   edx, [esp + i3030_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3030_fixO]
	movaps xmm1, [esp + i3030_fiyO] 
	movaps xmm2, [esp + i3030_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3030_fixH1]
	movaps xmm1, [esp + i3030_fiyH1]
	movaps xmm2, [esp + i3030_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3030_fixH2]
	movaps xmm1, [esp + i3030_fiyH2]
	movaps xmm2, [esp + i3030_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	;# get group index for i particle 
	mov   edx, [ebp + i3030_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3030_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3030_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3030_nri]
	dec ecx
	jecxz .i3030_end
	;# not last, iterate once more!  
	mov [ebp + i3030_nri], ecx
	jmp .i3030_outer
.i3030_end:
	emms
	mov eax, [esp + i3030_salign]
	add esp, eax
	add esp, 1444
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	



.globl inl3100_sse
.globl _inl3100_sse
inl3100_sse:	
_inl3100_sse:	
.equiv		i3100_nri,			8
.equiv		i3100_iinr,			12
.equiv		i3100_jindex,		16
.equiv		i3100_jjnr,			20
.equiv		i3100_shift,		24
.equiv		i3100_shiftvec,		28
.equiv		i3100_fshift,		32
.equiv		i3100_gid,			36
.equiv		i3100_pos,			40
.equiv		i3100_faction,		44
.equiv		i3100_charge,		48
.equiv		i3100_facel,		52
.equiv		i3100_Vc,			56			
.equiv		i3100_type,			60
.equiv		i3100_ntype,		64
.equiv		i3100_nbfp,			68	
.equiv		i3100_Vnb,			72
.equiv		i3100_tabscale,		76
.equiv		i3100_VFtab,		80
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3100_ix,			0
.equiv		i3100_iy,			16
.equiv		i3100_iz,			32
.equiv		i3100_iq,			48
.equiv		i3100_dx,			64
.equiv		i3100_dy,			80
.equiv		i3100_dz,			96
.equiv		i3100_two,			112
.equiv		i3100_six,			128
.equiv		i3100_twelve,		144
.equiv		i3100_tsc,			160
.equiv		i3100_qq,			176	
.equiv		i3100_c6,			192
.equiv		i3100_c12,			208
.equiv		i3100_fscal,		224
.equiv		i3100_vctot,		240
.equiv		i3100_vnbtot,		256
.equiv		i3100_fix,			272
.equiv		i3100_fiy,			288
.equiv		i3100_fiz,			304
.equiv		i3100_half,			320
.equiv		i3100_three,		336
.equiv		i3100_is3,			352
.equiv		i3100_ii3,			356
.equiv		i3100_ntia,			360	
.equiv		i3100_innerjjnr,	364
.equiv		i3100_innerk,		368
.equiv		i3100_salign,		372
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 376		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3100_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movups xmm3, [sse_six]
	movups xmm4, [sse_twelve]
	movss xmm5, [ebp + i3100_tabscale]
	movaps [esp + i3100_half],  xmm0
	movaps [esp + i3100_two], xmm1
	movaps [esp + i3100_three],  xmm2
	movaps [esp + i3100_six],  xmm3
	movaps [esp + i3100_twelve],  xmm4
	shufps xmm5, xmm5, 0
	movaps [esp + i3100_tsc], xmm5

	;# assume we have at least one i particle - start directly 	
.i3100_outer:
	mov   eax, [ebp + i3100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3100_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3100_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i3100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3100_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i3100_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + i3100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i3100_ntype]
    shl   edx, 1
    mov   [esp + i3100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3100_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i3100_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i3100_ix], xmm0
	movaps [esp + i3100_iy], xmm1
	movaps [esp + i3100_iz], xmm2

	mov   [esp + i3100_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i3100_vctot], xmm4
	movaps [esp + i3100_vnbtot], xmm4
	movaps [esp + i3100_fix], xmm4
	movaps [esp + i3100_fiy], xmm4
	movaps [esp + i3100_fiz], xmm4
	
	mov   eax, [ebp + i3100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3100_pos]
	mov   edi, [ebp + i3100_faction]	
	mov   eax, [ebp + i3100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i3100_innerk], edx    ;# number of innerloop atoms 
	jge   .i3100_unroll_loop
	jmp   .i3100_finish_inner
.i3100_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i3100_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3100_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i3100_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mulps  xmm3, xmm2
	movd  mm2, ecx
	movd  mm3, edx

	movaps [esp + i3100_qq], xmm3
	
	mov esi, [ebp + i3100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i3100_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3100_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i3100_c6], xmm4
	movaps [esp + i3100_c12], xmm6
	
	mov esi, [ebp + i3100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i3100_ix]
	movaps xmm5, [esp + i3100_iy]
	movaps xmm6, [esp + i3100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3100_dx], xmm4
	movaps [esp + i3100_dy], xmm5
	movaps [esp + i3100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3100_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i3100_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3100_two]	;# two*Heps2 
	movaps xmm3, [esp + i3100_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3100_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movaps [esp + i3100_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + i3100_c6]
	mulps  xmm4, [esp + i3100_c12]
	movaps xmm7, [esp + i3100_vnbtot]
	addps  xmm7, xmm4
	mulps  xmm4, [esp + i3100_twelve]
	subps  xmm7, xmm6
	mulps  xmm3, [esp + i3100_tsc]
	mulps  xmm6, [esp + i3100_six]
	movaps [esp + i3100_vnbtot], xmm7
	subps  xmm4, xmm6
	mulps  xmm4, xmm0
	subps  xmm4, xmm3
	mulps  xmm4, xmm0

	movaps xmm0, [esp + i3100_dx]
	movaps xmm1, [esp + i3100_dy]
	movaps xmm2, [esp + i3100_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i3100_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3100_fix]
	movaps xmm4, [esp + i3100_fiy]
	movaps xmm5, [esp + i3100_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3100_fix], xmm3
	movaps [esp + i3100_fiy], xmm4
	movaps [esp + i3100_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3100_innerk],  4
	jl    .i3100_finish_inner
	jmp   .i3100_unroll_loop
.i3100_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i3100_innerk],  4
	mov   edx, [esp + i3100_innerk]
	and   edx, 2
	jnz   .i3100_dopair
	jmp   .i3100_checksingle
.i3100_dopair:	
	mov esi, [ebp + i3100_charge]
    mov   ecx, [esp + i3100_innerjjnr]
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i3100_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + i3100_iq]
	movlhps xmm3, xmm7
	movaps [esp + i3100_qq], xmm3

	mov esi, [ebp + i3100_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i3100_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3100_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i3100_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i3100_c6], xmm4
	movaps [esp + i3100_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i3100_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i3100_ix]
	movaps xmm5, [esp + i3100_iy]
	movaps xmm6, [esp + i3100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3100_dx], xmm4
	movaps [esp + i3100_dy], xmm5
	movaps [esp + i3100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3100_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3100_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3100_two]	;# two*Heps2 
	movaps xmm3, [esp + i3100_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3100_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movaps [esp + i3100_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + i3100_c6]
	mulps  xmm4, [esp + i3100_c12]
	movaps xmm7, [esp + i3100_vnbtot]
	addps  xmm7, xmm4
	mulps  xmm4, [esp + i3100_twelve]
	subps  xmm7, xmm6
	mulps  xmm3, [esp + i3100_tsc]
	mulps  xmm6, [esp + i3100_six]
	movaps [esp + i3100_vnbtot], xmm7
	subps  xmm4, xmm6
	mulps  xmm4, xmm0
	subps  xmm4, xmm3
	mulps  xmm4, xmm0

	movaps xmm0, [esp + i3100_dx]
	movaps xmm1, [esp + i3100_dy]
	movaps xmm2, [esp + i3100_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3100_fix]
	movaps xmm4, [esp + i3100_fiy]
	movaps xmm5, [esp + i3100_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3100_fix], xmm3
	movaps [esp + i3100_fiy], xmm4
	movaps [esp + i3100_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i3100_checksingle:				
	mov   edx, [esp + i3100_innerk]
	and   edx, 1
	jnz    .i3100_dosingle
	jmp    .i3100_updateouterdata
.i3100_dosingle:
	mov esi, [ebp + i3100_charge]
	mov edi, [ebp + i3100_pos]
	mov   ecx, [esp + i3100_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + i3100_iq]
	movaps [esp + i3100_qq], xmm6

	mov esi, [ebp + i3100_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i3100_nbfp]
	shl ecx, 1
	add ecx, [esp + i3100_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i3100_c6], xmm4
	movaps [esp + i3100_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i3100_ix]
	movaps xmm5, [esp + i3100_iy]
	movaps xmm6, [esp + i3100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3100_dx], xmm4
	movaps [esp + i3100_dy], xmm5
	movaps [esp + i3100_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3100_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3100_VFtab]
	movd ebx, mm6
	
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3100_two]	;# two*Heps2 
	movaps xmm3, [esp + i3100_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + i3100_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movss [esp + i3100_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + i3100_c6]
	mulps  xmm4, [esp + i3100_c12]
	movss xmm7, [esp + i3100_vnbtot]
	addps  xmm7, xmm4
	mulps  xmm4, [esp + i3100_twelve]
	subps  xmm7, xmm6
	mulps  xmm3, [esp + i3100_tsc]
	mulps  xmm6, [esp + i3100_six]
	movss [esp + i3100_vnbtot], xmm7
	subps  xmm4, xmm6
	mulps  xmm4, xmm0
	subps  xmm4, xmm3
	mulps  xmm4, xmm0

	movaps xmm0, [esp + i3100_dx]
	movaps xmm1, [esp + i3100_dy]
	movaps xmm2, [esp + i3100_dz]

	mov    edi, [ebp + i3100_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3100_fix]
	movaps xmm4, [esp + i3100_fiy]
	movaps xmm5, [esp + i3100_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i3100_fix], xmm3
	movaps [esp + i3100_fiy], xmm4
	movaps [esp + i3100_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i3100_updateouterdata:
	mov   ecx, [esp + i3100_ii3]
	mov   edi, [ebp + i3100_faction]
	mov   esi, [ebp + i3100_fshift]
	mov   edx, [esp + i3100_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3100_fix]
	movaps xmm1, [esp + i3100_fiy]
	movaps xmm2, [esp + i3100_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i3100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3100_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i3100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3100_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3100_nri]
	dec ecx
	jecxz .i3100_end
	;# not last, iterate once more!  
	mov [ebp + i3100_nri], ecx
	jmp .i3100_outer
.i3100_end:
	emms
	mov eax, [esp + i3100_salign]
	add esp, eax
	add esp, 376
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl inl3110_sse
.globl _inl3110_sse
inl3110_sse:	
_inl3110_sse:	
.equiv		i3110_nri,			8
.equiv		i3110_iinr,			12
.equiv		i3110_jindex,		16
.equiv		i3110_jjnr,			20
.equiv		i3110_shift,		24
.equiv		i3110_shiftvec,		28
.equiv		i3110_fshift,		32
.equiv		i3110_gid,			36
.equiv		i3110_pos,			40		
.equiv		i3110_faction,		44
.equiv		i3110_charge,		48
.equiv		i3110_facel,		52
.equiv		i3110_Vc,			56			
.equiv		i3110_type,			60
.equiv		i3110_ntype,		64
.equiv		i3110_nbfp,			68	
.equiv		i3110_Vnb,			72
.equiv		i3110_tabscale,		76
.equiv		i3110_VFtab,		80
.equiv		i3110_nsatoms,		84			
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3110_ix,			0
.equiv		i3110_iy,			16
.equiv		i3110_iz,			32
.equiv		i3110_iq,			48
.equiv		i3110_dx,			64
.equiv		i3110_dy,			80
.equiv		i3110_dz,			96
.equiv		i3110_two,			112
.equiv		i3110_tsc,			128
.equiv		i3110_qq,			144	
.equiv		i3110_c6,			160
.equiv		i3110_c12,			176
.equiv		i3110_six,			192
.equiv		i3110_twelve,		208
.equiv		i3110_fscal,		224
.equiv		i3110_vctot,		240
.equiv		i3110_vnbtot,		256
.equiv		i3110_fix,			272
.equiv		i3110_fiy,			288
.equiv		i3110_fiz,			304
.equiv		i3110_half,			320
.equiv		i3110_three,		336
.equiv		i3110_is3,			352
.equiv		i3110_ii3,			356
.equiv		i3110_shX,			360
.equiv		i3110_shY,			364
.equiv		i3110_shZ,			368
.equiv		i3110_ntia,			372	
.equiv		i3110_innerjjnr0,	376
.equiv		i3110_innerk0,		380	
.equiv		i3110_innerjjnr,	384
.equiv		i3110_innerk,		388
.equiv		i3110_salign,		392
.equiv		i3110_nsvdwc,		396
.equiv		i3110_nscoul,		400
.equiv		i3110_nsvdw,		404
.equiv		i3110_solnr,		408		
	push ebp
	mov ebp,esp	
	push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 412		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3110_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movups xmm3, [sse_six]
	movups xmm4, [sse_twelve]
	movss xmm5, [ebp + i3110_tabscale]
	movaps [esp + i3110_half],  xmm0
	movaps [esp + i3110_two], xmm1
	movaps [esp + i3110_three], xmm2
	movaps [esp + i3110_six],  xmm3
	movaps [esp + i3110_twelve], xmm4
	shufps xmm5, xmm5, 0
	movaps [esp + i3110_tsc], xmm5

	;# assume we have at least one i particle - start directly 	
.i3110_outer:
	mov   eax, [ebp + i3110_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3110_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3110_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3110_shiftvec]   ;# eax = base of shiftvec[] 

	movlps xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 8] 
	movlps [esp + i3110_shX], xmm0
	movss [esp + i3110_shZ], xmm1

	mov   ecx, [ebp + i3110_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3110_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + i3110_nsatoms]
	add dword ptr [ebp + i3110_nsatoms],  12
	mov   ecx, [eax]	
	mov   edx, [eax + 4]
	mov   eax, [eax + 8]	
	sub   ecx, eax
	sub   eax, edx
	
	mov   [esp + i3110_nsvdwc], edx
	mov   [esp + i3110_nscoul], eax
	mov   [esp + i3110_nsvdw], ecx
		
	;# clear potential 
	xorps xmm4, xmm4
	movaps [esp + i3110_vctot], xmm4
	movaps [esp + i3110_vnbtot], xmm4
	mov   [esp + i3110_solnr],  ebx

	mov   eax, [ebp + i3110_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3110_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   eax, [ebp + i3110_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3110_innerjjnr0], eax     ;# pointer to jjnr[nj0] 
	mov   [esp + i3110_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + i3110_nsvdwc]
	cmp   ecx,  0
	jnz   .i3110_mno_vdwc
	jmp   .i3110_testcoul
.i3110_mno_vdwc:
	mov   ebx,  [esp + i3110_solnr]
	inc   dword ptr [esp + i3110_solnr]

	mov   edx, [ebp + i3110_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i3110_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + i3110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i3110_ntype]
    shl   edx, 1
    mov   [esp + i3110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3110_pos]    ;# eax = base of pos[]  

	movss xmm0, [esp + i3110_shX]
	movss xmm1, [esp + i3110_shY]
	movss xmm2, [esp + i3110_shZ]
	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i3110_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i3110_ix], xmm0
	movaps [esp + i3110_iy], xmm1
	movaps [esp + i3110_iz], xmm2

	mov   [esp + i3110_ii3], ebx
	
	;# clear i forces 
	xorps xmm4, xmm4
	movaps [esp + i3110_fix], xmm4
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm4
	
	mov   ecx, [esp + i3110_innerjjnr0]
	mov   [esp + i3110_innerjjnr], ecx
	mov   edx, [esp + i3110_innerk0]
    sub   edx,  4
    mov   [esp + i3110_innerk], edx    ;# number of innerloop atoms 
	jge   .i3110_unroll_vdwc_loop
	jmp   .i3110_finish_vdwc_inner
.i3110_unroll_vdwc_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i3110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3110_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i3110_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mulps  xmm3, xmm2
	movd  mm2, ecx
	movd  mm3, edx

	movaps [esp + i3110_qq], xmm3
	
	mov esi, [ebp + i3110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i3110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i3110_c6], xmm4
	movaps [esp + i3110_c12], xmm6
	
	mov esi, [ebp + i3110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i3110_ix]
	movaps xmm5, [esp + i3110_iy]
	movaps xmm6, [esp + i3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3110_dx], xmm4
	movaps [esp + i3110_dy], xmm5
	movaps [esp + i3110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3110_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i3110_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3110_two]	;# two*Heps2 
	movaps xmm3, [esp + i3110_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3110_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movaps [esp + i3110_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + i3110_c6]
	mulps  xmm4, [esp + i3110_c12]
	movaps xmm7, [esp + i3110_vnbtot]
	addps  xmm7, xmm4
	mulps  xmm4, [esp + i3110_twelve]
	subps  xmm7, xmm6
	mulps  xmm3, [esp + i3110_tsc]
	mulps  xmm6, [esp + i3110_six]
	movaps [esp + i3110_vnbtot], xmm7
	subps  xmm4, xmm6
	mulps  xmm4, xmm0
	subps  xmm4, xmm3
	mulps  xmm4, xmm0

	movaps xmm0, [esp + i3110_dx]
	movaps xmm1, [esp + i3110_dy]
	movaps xmm2, [esp + i3110_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i3110_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3110_fix]
	movaps xmm4, [esp + i3110_fiy]
	movaps xmm5, [esp + i3110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3110_fix], xmm3
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3110_innerk],  4
	jl    .i3110_finish_vdwc_inner
	jmp   .i3110_unroll_vdwc_loop
.i3110_finish_vdwc_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i3110_innerk],  4
	mov   edx, [esp + i3110_innerk]
	and   edx, 2
	jnz   .i3110_dopair_vdwc
	jmp   .i3110_checksingle_vdwc
.i3110_dopair_vdwc:	
	mov esi, [ebp + i3110_charge]

    mov   ecx, [esp + i3110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i3110_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + i3110_iq]
	movlhps xmm3, xmm7
	movaps [esp + i3110_qq], xmm3

	mov esi, [ebp + i3110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i3110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i3110_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i3110_c6], xmm4
	movaps [esp + i3110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i3110_ix]
	movaps xmm5, [esp + i3110_iy]
	movaps xmm6, [esp + i3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3110_dx], xmm4
	movaps [esp + i3110_dy], xmm5
	movaps [esp + i3110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3110_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3110_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3110_two]	;# two*Heps2 
	movaps xmm3, [esp + i3110_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3110_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movaps [esp + i3110_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + i3110_c6]
	mulps  xmm4, [esp + i3110_c12]
	movaps xmm7, [esp + i3110_vnbtot]
	addps  xmm7, xmm4
	mulps  xmm4, [esp + i3110_twelve]
	subps  xmm7, xmm6
	mulps  xmm3, [esp + i3110_tsc]
	mulps  xmm6, [esp + i3110_six]
	movaps [esp + i3110_vnbtot], xmm7
	subps  xmm4, xmm6
	mulps  xmm4, xmm0
	subps  xmm4, xmm3
	mulps  xmm4, xmm0

	movaps xmm0, [esp + i3110_dx]
	movaps xmm1, [esp + i3110_dy]
	movaps xmm2, [esp + i3110_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	mov    edi, [ebp + i3110_faction]
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3110_fix]
	movaps xmm4, [esp + i3110_fiy]
	movaps xmm5, [esp + i3110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3110_fix], xmm3
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i3110_checksingle_vdwc:				
	mov   edx, [esp + i3110_innerk]
	and   edx, 1
	jnz    .i3110_dosingle_vdwc
	jmp    .i3110_updateouterdata_vdwc
.i3110_dosingle_vdwc:
	mov esi, [ebp + i3110_charge]
	mov edi, [ebp + i3110_pos]
	mov   ecx, [esp + i3110_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + i3110_iq]
	movaps [esp + i3110_qq], xmm6

	mov esi, [ebp + i3110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i3110_nbfp]
	shl ecx, 1
	add ecx, [esp + i3110_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i3110_c6], xmm4
	movaps [esp + i3110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i3110_ix]
	movaps xmm5, [esp + i3110_iy]
	movaps xmm6, [esp + i3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3110_dx], xmm4
	movaps [esp + i3110_dy], xmm5
	movaps [esp + i3110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3110_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3110_VFtab]
	movd ebx, mm6
						
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3110_two]	;# two*Heps2 
	movaps xmm3, [esp + i3110_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + i3110_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movss [esp + i3110_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + i3110_c6]
	mulps  xmm4, [esp + i3110_c12]
	movss xmm7, [esp + i3110_vnbtot]
	addps  xmm7, xmm4
	mulps  xmm4, [esp + i3110_twelve]
	subps  xmm7, xmm6
	mulps  xmm3, [esp + i3110_tsc]
	mulps  xmm6, [esp + i3110_six]
	movss [esp + i3110_vnbtot], xmm7
	subps  xmm4, xmm6
	mulps  xmm4, xmm0
	subps  xmm4, xmm3
	mulps  xmm4, xmm0

	mov edi, [ebp + i3110_faction]

	movaps xmm0, [esp + i3110_dx]
	movaps xmm1, [esp + i3110_dy]
	movaps xmm2, [esp + i3110_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3110_fix]
	movaps xmm4, [esp + i3110_fiy]
	movaps xmm5, [esp + i3110_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i3110_fix], xmm3
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i3110_updateouterdata_vdwc:
	mov   ecx, [esp + i3110_ii3]
	mov   edi, [ebp + i3110_faction]
	mov   esi, [ebp + i3110_fshift]
	mov   edx, [esp + i3110_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3110_fix]
	movaps xmm1, [esp + i3110_fiy]
	movaps xmm2, [esp + i3110_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5


	;# loop back to mno 
	dec  dword ptr [esp + i3110_nsvdwc]
	jz  .i3110_testcoul
	jmp .i3110_mno_vdwc
.i3110_testcoul:
	mov  ecx, [esp + i3110_nscoul]
	cmp  ecx,  0
	jnz  .i3110_mno_coul
	jmp  .i3110_testvdw
.i3110_mno_coul:
	mov   ebx,  [esp + i3110_solnr]
	inc   dword ptr [esp + i3110_solnr]

	movss xmm0, [esp + i3110_shX]
	movss xmm1, [esp + i3110_shY]
	movss xmm2, [esp + i3110_shZ]

	mov   edx, [ebp + i3110_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i3110_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3110_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i3110_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movaps [esp + i3110_ix], xmm0
	movaps [esp + i3110_iy], xmm1
	movaps [esp + i3110_iz], xmm2

	mov   [esp + i3110_ii3], ebx
	
	;# clear i forces 
	xorps xmm4, xmm4
	movaps [esp + i3110_fix], xmm4
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm4

	mov   ecx, [esp + i3110_innerjjnr0]
	mov   [esp + i3110_innerjjnr], ecx
	mov   edx, [esp + i3110_innerk0]
    sub   edx,  4
    mov   [esp + i3110_innerk], edx    ;# number of innerloop atoms 
	jge   .i3110_unroll_coul_loop
	jmp   .i3110_finish_coul_inner

.i3110_unroll_coul_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i3110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3110_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i3110_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	mulps  xmm3, xmm2

	movaps [esp + i3110_qq], xmm3	
	
	mov esi, [ebp + i3110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i3110_ix]
	movaps xmm5, [esp + i3110_iy]
	movaps xmm6, [esp + i3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3110_dx], xmm4
	movaps [esp + i3110_dy], xmm5
	movaps [esp + i3110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3110_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i3110_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3110_two]	;# two*Heps2 
	movaps xmm3, [esp + i3110_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3110_vctot]
	movaps [esp + i3110_vctot], xmm5 

	xorps  xmm4, xmm4

	mulps xmm3, [esp + i3110_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3

	movaps xmm0, [esp + i3110_dx]
	movaps xmm1, [esp + i3110_dy]
	movaps xmm2, [esp + i3110_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i3110_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3110_fix]
	movaps xmm4, [esp + i3110_fiy]
	movaps xmm5, [esp + i3110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3110_fix], xmm3
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3110_innerk],  4
	jl    .i3110_finish_coul_inner
	jmp   .i3110_unroll_coul_loop
.i3110_finish_coul_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i3110_innerk],  4
	mov   edx, [esp + i3110_innerk]
	and   edx, 2
	jnz   .i3110_dopair_coul
	jmp   .i3110_checksingle_coul
.i3110_dopair_coul:	
	mov esi, [ebp + i3110_charge]

    mov   ecx, [esp + i3110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i3110_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + i3110_iq]
	movlhps xmm3, xmm7
	movaps [esp + i3110_qq], xmm3

	mov edi, [ebp + i3110_pos]	
	
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i3110_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i3110_ix]
	movaps xmm5, [esp + i3110_iy]
	movaps xmm6, [esp + i3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3110_dx], xmm4
	movaps [esp + i3110_dy], xmm5
	movaps [esp + i3110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3110_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3110_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3110_two]	;# two*Heps2 
	movaps xmm3, [esp + i3110_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3110_vctot]
	movaps [esp + i3110_vctot], xmm5 

	xorps  xmm4, xmm4

	mulps xmm3, [esp + i3110_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3

	movaps xmm0, [esp + i3110_dx]
	movaps xmm1, [esp + i3110_dy]
	movaps xmm2, [esp + i3110_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3110_fix]
	movaps xmm4, [esp + i3110_fiy]
	movaps xmm5, [esp + i3110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3110_fix], xmm3
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i3110_checksingle_coul:				
	mov   edx, [esp + i3110_innerk]
	and   edx, 1
	jnz    .i3110_dosingle_coul
	jmp    .i3110_updateouterdata_coul
.i3110_dosingle_coul:
	mov esi, [ebp + i3110_charge]
	mov edi, [ebp + i3110_pos]
	mov   ecx, [esp + i3110_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + i3110_iq]
	movaps [esp + i3110_qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i3110_ix]
	movaps xmm5, [esp + i3110_iy]
	movaps xmm6, [esp + i3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3110_dx], xmm4
	movaps [esp + i3110_dy], xmm5
	movaps [esp + i3110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3110_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3110_VFtab]
	movd ebx, mm6
	
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3110_two]	;# two*Heps2 
	movaps xmm3, [esp + i3110_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + i3110_vctot]
	movss [esp + i3110_vctot], xmm5 

	xorps xmm4, xmm4

	mulps xmm3, [esp + i3110_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3
	mov    edi, [ebp + i3110_faction]

	movaps xmm0, [esp + i3110_dx]
	movaps xmm1, [esp + i3110_dy]
	movaps xmm2, [esp + i3110_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3110_fix]
	movaps xmm4, [esp + i3110_fiy]
	movaps xmm5, [esp + i3110_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i3110_fix], xmm3
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i3110_updateouterdata_coul:
	mov   ecx, [esp + i3110_ii3]
	mov   edi, [ebp + i3110_faction]
	mov   esi, [ebp + i3110_fshift]
	mov   edx, [esp + i3110_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3110_fix]
	movaps xmm1, [esp + i3110_fiy]
	movaps xmm2, [esp + i3110_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# loop back to mno 
	dec  dword ptr [esp + i3110_nscoul]
	jz  .i3110_testvdw
	jmp .i3110_mno_coul
.i3110_testvdw:
	mov  ecx, [esp + i3110_nsvdw]
	cmp  ecx,  0
	jnz  .i3110_mno_vdw
	jmp  .i3110_last_mno
.i3110_mno_vdw:
	mov   ebx,  [esp + i3110_solnr]
	inc   dword ptr [esp + i3110_solnr]

    mov   edx, [ebp + i3110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i3110_ntype]
    shl   edx, 1
    mov   [esp + i3110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3110_pos]    ;# eax = base of pos[]  
	mov   [esp + i3110_ii3], ebx

	movss xmm0, [esp + i3110_shX]
	movss xmm1, [esp + i3110_shY]
	movss xmm2, [esp + i3110_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	xorps xmm4, xmm4
	movaps [esp + i3110_fix], xmm4
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm4

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i3110_ix], xmm0
	movaps [esp + i3110_iy], xmm1
	movaps [esp + i3110_iz], xmm2

	mov   ecx, [esp + i3110_innerjjnr0]
	mov   [esp + i3110_innerjjnr], ecx
	mov   edx, [esp + i3110_innerk0]
    sub   edx,  4
    mov   [esp + i3110_innerk], edx    ;# number of innerloop atoms 
	jge   .i3110_unroll_vdw_loop
	jmp   .i3110_finish_vdw_inner
.i3110_unroll_vdw_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i3110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i3110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i3110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i3110_c6], xmm4
	movaps [esp + i3110_c12], xmm6
	
	mov esi, [ebp + i3110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i3110_ix]
	movaps xmm5, [esp + i3110_iy]
	movaps xmm6, [esp + i3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3110_dx], xmm4
	movaps [esp + i3110_dy], xmm5
	movaps [esp + i3110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i3110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i3110_c6]
	mulps  xmm2, [esp + i3110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i3110_vnbtot]
	mulps  xmm1, [esp + i3110_six]
	mulps  xmm2, [esp + i3110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	movaps xmm0, [esp + i3110_dx]
	movaps xmm1, [esp + i3110_dy]
	movaps xmm2, [esp + i3110_dz]

	movaps [esp + i3110_vnbtot], xmm5

	mov    edi, [ebp + i3110_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3110_fix]
	movaps xmm4, [esp + i3110_fiy]
	movaps xmm5, [esp + i3110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3110_fix], xmm3
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3110_innerk],  4
	jl    .i3110_finish_vdw_inner
	jmp   .i3110_unroll_vdw_loop
.i3110_finish_vdw_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i3110_innerk],  4
	mov   edx, [esp + i3110_innerk]
	and   edx, 2
	jnz   .i3110_dopair_vdw
	jmp   .i3110_checksingle_vdw
.i3110_dopair_vdw:	
    mov   ecx, [esp + i3110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i3110_innerjjnr],  8	
	xorps xmm7, xmm7

	mov esi, [ebp + i3110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i3110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i3110_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i3110_c6], xmm4
	movaps [esp + i3110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i3110_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i3110_ix]
	movaps xmm5, [esp + i3110_iy]
	movaps xmm6, [esp + i3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3110_dx], xmm4
	movaps [esp + i3110_dy], xmm5
	movaps [esp + i3110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i3110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i3110_c6]
	mulps  xmm2, [esp + i3110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + i3110_vnbtot]
	mulps  xmm1, [esp + i3110_six]
	mulps  xmm2, [esp + i3110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 

	movaps xmm0, [esp + i3110_dx]
	movaps xmm1, [esp + i3110_dy]
	movaps xmm2, [esp + i3110_dz]

	movaps [esp + i3110_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3110_fix]
	movaps xmm4, [esp + i3110_fiy]
	movaps xmm5, [esp + i3110_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3110_fix], xmm3
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i3110_checksingle_vdw:				
	mov   edx, [esp + i3110_innerk]
	and   edx, 1
	jnz    .i3110_dosingle_vdw
	jmp    .i3110_updateouterdata_vdw
.i3110_dosingle_vdw:
	mov edi, [ebp + i3110_pos]
	mov   ecx, [esp + i3110_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6

	mov esi, [ebp + i3110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i3110_nbfp]
	shl ecx, 1
	add ecx, [esp + i3110_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i3110_c6], xmm4
	movaps [esp + i3110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i3110_ix]
	movaps xmm5, [esp + i3110_iy]
	movaps xmm6, [esp + i3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3110_dx], xmm4
	movaps [esp + i3110_dy], xmm5
	movaps [esp + i3110_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + i3110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + i3110_c6]
	mulps  xmm2, [esp + i3110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + i3110_vnbtot]
	mulps  xmm1, [esp + i3110_six]
	mulps  xmm2, [esp + i3110_twelve]
	subps  xmm2, xmm1
	mulps  xmm4, xmm2	;# xmm4=total fscal 
	
	mov    edi, [ebp + i3110_faction]

	movaps xmm0, [esp + i3110_dx]
	movaps xmm1, [esp + i3110_dy]
	movaps xmm2, [esp + i3110_dz]

	movss [esp + i3110_vnbtot], xmm5

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	mov edi, [ebp + i3110_faction]

	;# now update f_i 
	movaps xmm3, [esp + i3110_fix]
	movaps xmm4, [esp + i3110_fiy]
	movaps xmm5, [esp + i3110_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i3110_fix], xmm3
	movaps [esp + i3110_fiy], xmm4
	movaps [esp + i3110_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5
.i3110_updateouterdata_vdw:
	mov   ecx, [esp + i3110_ii3]
	mov   edi, [ebp + i3110_faction]
	mov   esi, [ebp + i3110_fshift]
	mov   edx, [esp + i3110_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3110_fix]
	movaps xmm1, [esp + i3110_fiy]
	movaps xmm2, [esp + i3110_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5
	
	;# loop back to mno 
	dec dword ptr [esp + i3110_nsvdw]
	jz  .i3110_last_mno
	jmp .i3110_mno_vdw
.i3110_last_mno:	
	;# get group index for i particle 
	mov   edx, [ebp + i3110_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3110_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3110_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3110_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i3110_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3110_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3110_nri]
	dec ecx
	jecxz .i3110_end
	;# not last, iterate once more!  
	mov [ebp + i3110_nri], ecx
	jmp .i3110_outer
.i3110_end:
	emms
	mov eax, [esp + i3110_salign]
	add esp, eax
	add esp, 412
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl inl3120_sse
.globl _inl3120_sse
inl3120_sse:	
_inl3120_sse:	
.equiv		i3120_nri,			8
.equiv		i3120_iinr,			12
.equiv		i3120_jindex,		16
.equiv		i3120_jjnr,			20
.equiv		i3120_shift,		24
.equiv		i3120_shiftvec,		28
.equiv		i3120_fshift,		32
.equiv		i3120_gid,			36
.equiv		i3120_pos,			40		
.equiv		i3120_faction,		44
.equiv		i3120_charge,		48
.equiv		i3120_facel,		52
.equiv		i3120_Vc,			56			
.equiv		i3120_type,			60
.equiv		i3120_ntype,		64
.equiv		i3120_nbfp,			68	
.equiv		i3120_Vnb,			72	
.equiv		i3120_tabscale,		76	
.equiv		i3120_VFtab,		80	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3120_ixO,			0
.equiv		i3120_iyO,			16
.equiv		i3120_izO,			32
.equiv		i3120_ixH1,			48
.equiv		i3120_iyH1,			64
.equiv		i3120_izH1,			80
.equiv		i3120_ixH2,			96
.equiv		i3120_iyH2,			112
.equiv		i3120_izH2,			128
.equiv		i3120_iqO,			144 
.equiv		i3120_iqH,			160 
.equiv		i3120_dxO,			176
.equiv		i3120_dyO,			192
.equiv		i3120_dzO,			208	
.equiv		i3120_dxH1,			224
.equiv		i3120_dyH1,			240
.equiv		i3120_dzH1,			256	
.equiv		i3120_dxH2,			272
.equiv		i3120_dyH2,			288
.equiv		i3120_dzH2,			304	
.equiv		i3120_qqO,			320
.equiv		i3120_qqH,			336
.equiv		i3120_rinvO,		352
.equiv		i3120_rinvH1,		368
.equiv		i3120_rinvH2,		384		
.equiv		i3120_rO,			400
.equiv		i3120_rH1,			416
.equiv		i3120_rH2,			432
.equiv		i3120_tsc,			448	
.equiv		i3120_two,			464
.equiv		i3120_c6,			480
.equiv		i3120_c12,			496
.equiv		i3120_six,			512
.equiv		i3120_twelve,		528
.equiv		i3120_vctot,		544
.equiv		i3120_vnbtot,		560
.equiv		i3120_fixO,			576
.equiv		i3120_fiyO,			592
.equiv		i3120_fizO,			608
.equiv		i3120_fixH1,		624
.equiv		i3120_fiyH1,		640
.equiv		i3120_fizH1,		656
.equiv		i3120_fixH2,		672
.equiv		i3120_fiyH2,		688
.equiv		i3120_fizH2,		704
.equiv		i3120_fjx,			720
.equiv		i3120_fjy,			736
.equiv		i3120_fjz,			752
.equiv		i3120_half,			768
.equiv		i3120_three,		784
.equiv		i3120_is3,			800
.equiv		i3120_ii3,			804
.equiv		i3120_ntia,			808	
.equiv		i3120_innerjjnr,	812
.equiv		i3120_innerk,		816
.equiv		i3120_salign,		820
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 824		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3120_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movups xmm3, [sse_six]
	movups xmm4, [sse_twelve]
	movss xmm5, [ebp + i3120_tabscale]
	
	movaps [esp + i3120_half],  xmm0
	movaps [esp + i3120_two],  xmm1
	movaps [esp + i3120_three],  xmm2
	movaps [esp + i3120_six],  xmm3
	movaps [esp + i3120_twelve],  xmm4
	shufps xmm5, xmm5, 0
	movaps [esp + i3120_tsc], xmm5
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3120_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + i3120_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + i3120_iqO], xmm3
	movaps [esp + i3120_iqH], xmm4
	
	mov   edx, [ebp + i3120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + i3120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + i3120_ntia], ecx		
.i3120_outer:
	mov   eax, [ebp + i3120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3120_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3120_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i3120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3120_pos]    ;# eax = base of pos[]  
	mov   [esp + i3120_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3120_ixO], xmm3
	movaps [esp + i3120_iyO], xmm4
	movaps [esp + i3120_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3120_ixH1], xmm0
	movaps [esp + i3120_iyH1], xmm1
	movaps [esp + i3120_izH1], xmm2
	movaps [esp + i3120_ixH2], xmm3
	movaps [esp + i3120_iyH2], xmm4
	movaps [esp + i3120_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i3120_vctot], xmm4
	movaps [esp + i3120_vnbtot], xmm4
	movaps [esp + i3120_fixO], xmm4
	movaps [esp + i3120_fiyO], xmm4
	movaps [esp + i3120_fizO], xmm4
	movaps [esp + i3120_fixH1], xmm4
	movaps [esp + i3120_fiyH1], xmm4
	movaps [esp + i3120_fizH1], xmm4
	movaps [esp + i3120_fixH2], xmm4
	movaps [esp + i3120_fiyH2], xmm4
	movaps [esp + i3120_fizH2], xmm4
	
	mov   eax, [ebp + i3120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3120_pos]
	mov   edi, [ebp + i3120_faction]	
	mov   eax, [ebp + i3120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i3120_innerk], edx    ;# number of innerloop atoms 
	jge   .i3120_unroll_loop
	jmp   .i3120_odd_inner
.i3120_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + i3120_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3120_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + i3120_iqO]
	mulps  xmm4, [esp + i3120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx

	movaps  [esp + i3120_qqO], xmm3
	movaps  [esp + i3120_qqH], xmm4
	
	mov esi, [ebp + i3120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i3120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3120_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i3120_c6], xmm4
	movaps [esp + i3120_c12], xmm6

	mov esi, [ebp + i3120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + i3120_ixO]
	movaps xmm5, [esp + i3120_iyO]
	movaps xmm6, [esp + i3120_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3120_dxO], xmm4
	movaps [esp + i3120_dyO], xmm5
	movaps [esp + i3120_dzO], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + i3120_ixH1]
	movaps xmm5, [esp + i3120_iyH1]
	movaps xmm6, [esp + i3120_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3120_dxH1], xmm4
	movaps [esp + i3120_dyH1], xmm5
	movaps [esp + i3120_dzH1], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + i3120_ixH2]
	movaps xmm4, [esp + i3120_iyH2]
	movaps xmm5, [esp + i3120_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# store dr 
	movaps [esp + i3120_dxH2], xmm3
	movaps [esp + i3120_dyH2], xmm4
	movaps [esp + i3120_dzH2], xmm5
	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - seed to xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i3120_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i3120_half]
	movaps  [esp + i3120_rinvO], xmm4	;# rinvO in xmm4 
	mulps   xmm7, xmm4
	movaps  [esp + i3120_rO], xmm7	

	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i3120_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i3120_half]
	movaps  [esp + i3120_rinvH1], xmm4	;# rinvH1 in xmm4 
	mulps   xmm6, xmm4
	movaps  [esp + i3120_rH1], xmm6

	;# rsqH2 - seed to xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i3120_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i3120_half]
	movaps  [esp + i3120_rinvH2], xmm4	;# rinvH2 in xmm4 
	mulps   xmm5, xmm4
	movaps  [esp + i3120_rH2], xmm5

	;# do O interactions 
	;# rO is still in xmm7 
	mulps   xmm7, [esp + i3120_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3

	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd mm0, eax   
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + i3120_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3120_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3120_qqO]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm0, xmm7 ;# fijC=FF*qq 

	;# do nontable L-J 
	movaps xmm2, [esp + i3120_rinvO]
	mulps  xmm2, xmm2

    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + i3120_vctot]
    movaps [esp + i3120_vctot], xmm5 

	movaps xmm1, xmm2
	mulps  xmm1, xmm1
	mulps  xmm1, xmm2	;# xmm1=rinvsix 
	movaps xmm4, xmm1
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm1, [esp + i3120_c6]
	mulps  xmm4, [esp + i3120_c12]
	movaps xmm3, xmm4
	subps  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	mulps  xmm1, [esp + i3120_six]
	mulps  xmm4, [esp + i3120_twelve]
	subps  xmm4, xmm1
	addps  xmm3, [esp + i3120_vnbtot]
	mulps  xmm4, [esp + i3120_rinvO]
	mulps  xmm0, [esp + i3120_tsc]
	subps  xmm4, xmm0
	movaps [esp + i3120_vnbtot], xmm3
	mulps  xmm4, [esp + i3120_rinvO]	

	movaps xmm0, [esp + i3120_dxO]
	movaps xmm1, [esp + i3120_dyO]
	movaps xmm2, [esp + i3120_dzO]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4	;# tx in xmm0-xmm2 

	;# update O forces 
	movaps xmm3, [esp + i3120_fixO]
	movaps xmm4, [esp + i3120_fiyO]
	movaps xmm7, [esp + i3120_fizO]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i3120_fixO], xmm3
	movaps [esp + i3120_fiyO], xmm4
	movaps [esp + i3120_fizO], xmm7
	;# update j forces with water O 
	movaps [esp + i3120_fjx], xmm0
	movaps [esp + i3120_fjy], xmm1
	movaps [esp + i3120_fjz], xmm2

	;# Done with O interactions - now H1! 
	movaps xmm7, [esp + i3120_rH1]
	mulps   xmm7, [esp + i3120_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3120_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3120_qqH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm7, xmm0 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm7 fijC 
    ;# increment vcoul 
	xorps  xmm4, xmm4
    addps  xmm5, [esp + i3120_vctot]
	mulps  xmm7, [esp + i3120_rinvH1]
    movaps [esp + i3120_vctot], xmm5 
	mulps  xmm7, [esp + i3120_tsc]
	subps xmm4, xmm7

	movaps xmm0, [esp + i3120_dxH1]
	movaps xmm1, [esp + i3120_dyH1]
	movaps xmm2, [esp + i3120_dzH1]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H1 forces 
	movaps xmm3, [esp + i3120_fixH1]
	movaps xmm4, [esp + i3120_fiyH1]
	movaps xmm7, [esp + i3120_fizH1]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i3120_fixH1], xmm3
	movaps [esp + i3120_fiyH1], xmm4
	movaps [esp + i3120_fizH1], xmm7
	;# update j forces with water H1 
	addps  xmm0, [esp + i3120_fjx]
	addps  xmm1, [esp + i3120_fjy]
	addps  xmm2, [esp + i3120_fjz]
	movaps [esp + i3120_fjx], xmm0
	movaps [esp + i3120_fjy], xmm1
	movaps [esp + i3120_fjz], xmm2

	;# Done with H1, finally we do H2 interactions 
	movaps xmm7, [esp + i3120_rH2]
	mulps   xmm7, [esp + i3120_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3120_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3120_qqH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm7, xmm0 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul 
	xorps  xmm4, xmm4
    addps  xmm5, [esp + i3120_vctot]
	mulps  xmm7, [esp + i3120_rinvH2]
    movaps [esp + i3120_vctot], xmm5 
	mulps  xmm7, [esp + i3120_tsc]
	subps  xmm4, xmm7

	movaps xmm0, [esp + i3120_dxH2]
	movaps xmm1, [esp + i3120_dyH2]
	movaps xmm2, [esp + i3120_dzH2]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

    movd eax, mm0   
    movd ebx, mm1
    movd ecx, mm2
    movd edx, mm3
	
	;# update H2 forces 
	movaps xmm3, [esp + i3120_fixH2]
	movaps xmm4, [esp + i3120_fiyH2]
	movaps xmm7, [esp + i3120_fizH2]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i3120_fixH2], xmm3
	movaps [esp + i3120_fiyH2], xmm4
	movaps [esp + i3120_fizH2], xmm7

	mov edi, [ebp + i3120_faction]
	;# update j forces 
	addps xmm0, [esp + i3120_fjx]
	addps xmm1, [esp + i3120_fjy]
	addps xmm2, [esp + i3120_fjz]

	movlps xmm4, [edi + eax*4]
	movlps xmm7, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm7, [edi + edx*4]
	
	movaps xmm3, xmm4
	shufps xmm3, xmm7, 136  ;# 10001000
	shufps xmm4, xmm7, 221  ;# 11011101			      
	;# xmm3 has fjx, xmm4 has fjy 
	subps xmm3, xmm0
	subps xmm4, xmm1
	;# unpack them back for storing 
	movaps xmm7, xmm3
	unpcklps xmm7, xmm4
	unpckhps xmm3, xmm4	
	movlps [edi + eax*4], xmm7
	movlps [edi + ecx*4], xmm3
	movhps [edi + ebx*4], xmm7
	movhps [edi + edx*4], xmm3
	;# finally z forces 
	movss  xmm0, [edi + eax*4 + 8]
	movss  xmm1, [edi + ebx*4 + 8]
	movss  xmm3, [edi + ecx*4 + 8]
	movss  xmm4, [edi + edx*4 + 8]
	subss  xmm0, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm1, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm3, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm4, xmm2
	movss  [edi + eax*4 + 8], xmm0
	movss  [edi + ebx*4 + 8], xmm1
	movss  [edi + ecx*4 + 8], xmm3
	movss  [edi + edx*4 + 8], xmm4
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3120_innerk],  4
	jl    .i3120_odd_inner
	jmp   .i3120_unroll_loop
.i3120_odd_inner:	
	add dword ptr [esp + i3120_innerk],  4
	jnz   .i3120_odd_loop
	jmp   .i3120_updateouterdata
.i3120_odd_loop:
	mov   edx, [esp + i3120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i3120_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + i3120_iqO]
	mov esi, [ebp + i3120_charge] 
	movhps xmm4, [esp + i3120_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + i3120_qqO], xmm3	;# use oxygen qq for storage 
	
	xorps xmm6, xmm6
	mov esi, [ebp + i3120_type]
	mov ebx, [esi + eax*4]
	mov esi, [ebp + i3120_nbfp]
	shl ebx, 1	
	add ebx, [esp + i3120_ntia]
	movlps xmm6, [esi + ebx*4]
	movaps xmm7, xmm6
	shufps xmm6, xmm6, 252  ;# 11111100
	shufps xmm7, xmm7, 253  ;# 11111101
	movaps [esp + i3120_c6], xmm6
	movaps [esp + i3120_c12], xmm7
	
	mov esi, [ebp + i3120_pos]
	lea eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0	
	movss xmm3, [esp + i3120_ixO]
	movss xmm4, [esp + i3120_iyO]
	movss xmm5, [esp + i3120_izO]
		
	movlps xmm6, [esp + i3120_ixH1]
	movlps xmm7, [esp + i3120_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + i3120_iyH1]
	movlps xmm7, [esp + i3120_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + i3120_izH1]
	movlps xmm7, [esp + i3120_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	
	movaps [esp + i3120_dxO], xmm3
	movaps [esp + i3120_dyO], xmm4
	movaps [esp + i3120_dzO], xmm5

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3120_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3120_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000
	mulps xmm4, xmm0	;# xmm4=r 
	movaps [esp + i3120_rinvO], xmm0
	
	mulps xmm4, [esp + i3120_tsc]
	movhlps xmm7, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm7    ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm7, mm7
    movlhps xmm3, xmm7

	subps   xmm4, xmm3	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
	
    movd mm0, eax   
    movd mm1, ecx
    movd mm2, edx

    mov  esi, [ebp + i3120_VFtab]
    movd eax, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7
	
    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3120_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3120_qqO]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm0, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + i3120_vctot]
    movaps [esp + i3120_vctot], xmm5
	
	;# do nontable L-J 
	movaps xmm2, [esp + i3120_rinvO]
	mulps  xmm2, xmm2
	movaps xmm1, xmm2
	mulps  xmm1, xmm1
	mulps  xmm1, xmm2	;# xmm1=rinvsix 
	movaps xmm4, xmm1
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm1, [esp + i3120_c6]
	mulps  xmm4, [esp + i3120_c12]
	movaps xmm3, xmm4
	subps  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	mulps  xmm1, [esp + i3120_six]
	mulps  xmm4, [esp + i3120_twelve]
	subps  xmm4, xmm1
	addps  xmm3, [esp + i3120_vnbtot]
	mulps  xmm4, [esp + i3120_rinvO]
	mulps  xmm0, [esp + i3120_tsc]
	subps  xmm4, xmm0
	movaps [esp + i3120_vnbtot], xmm3
	mulps  xmm4, [esp + i3120_rinvO]	
		
    movd eax, mm0   
    movd ecx, mm1
    movd edx, mm2	
		
	movaps xmm0, [esp + i3120_dxO]
	movaps xmm1, [esp + i3120_dyO]
	movaps xmm2, [esp + i3120_dzO]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4 ;# xmm0-xmm2 now contains tx-tz (partial force) 
	movss  xmm3, [esp + i3120_fixO]	
	movss  xmm4, [esp + i3120_fiyO]	
	movss  xmm5, [esp + i3120_fizO]	
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esp + i3120_fixO], xmm3	
	movss  [esp + i3120_fiyO], xmm4	
	movss  [esp + i3120_fizO], xmm5	;# updated the O force now do the H's 
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	shufps xmm3, xmm3, 230 ;# 11100110	;# shift right 
	shufps xmm4, xmm4, 230 ;# 11100110
	shufps xmm5, xmm5, 230 ;# 11100110
	addss  xmm3, [esp + i3120_fixH1]
	addss  xmm4, [esp + i3120_fiyH1]
	addss  xmm5, [esp + i3120_fizH1]
	movss  [esp + i3120_fixH1], xmm3	
	movss  [esp + i3120_fiyH1], xmm4	
	movss  [esp + i3120_fizH1], xmm5	;# updated the H1 force 

	mov edi, [ebp + i3120_faction]
	shufps xmm3, xmm3, 231 ;# 11100111	;# shift right 
	shufps xmm4, xmm4, 231 ;# 11100111
	shufps xmm5, xmm5, 231 ;# 11100111
	addss  xmm3, [esp + i3120_fixH2]
	addss  xmm4, [esp + i3120_fiyH2]
	addss  xmm5, [esp + i3120_fizH2]
	movss  [esp + i3120_fixH2], xmm3	
	movss  [esp + i3120_fiyH2], xmm4	
	movss  [esp + i3120_fizH2], xmm5	;# updated the H2 force 

	;# the fj's - start by accumulating the tx/ty/tz force in xmm0, xmm1 
	xorps  xmm5, xmm5
	movaps xmm3, xmm0
	movlps xmm6, [edi + eax*4]
	movss  xmm7, [edi + eax*4 + 8]
	unpcklps xmm3, xmm1
	movlhps  xmm3, xmm5	
	unpckhps xmm0, xmm1		
	addps    xmm0, xmm3
	movhlps  xmm3, xmm0	
	addps    xmm0, xmm3	;# x,y sum in xmm0 

	movhlps  xmm1, xmm2
	addss    xmm2, xmm1
	shufps   xmm1, xmm1, 1 
	addss    xmm2, xmm1    ;# z sum in xmm2 
	subps    xmm6, xmm0
	subss    xmm7, xmm2
	
	movlps [edi + eax*4],     xmm6
	movss  [edi + eax*4 + 8], xmm7

	dec dword ptr [esp + i3120_innerk]
	jz    .i3120_updateouterdata
	jmp   .i3120_odd_loop
.i3120_updateouterdata:
	mov   ecx, [esp + i3120_ii3]
	mov   edi, [ebp + i3120_faction]
	mov   esi, [ebp + i3120_fshift]
	mov   edx, [esp + i3120_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3120_fixO]
	movaps xmm1, [esp + i3120_fiyO]
	movaps xmm2, [esp + i3120_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3120_fixH1]
	movaps xmm1, [esp + i3120_fiyH1]
	movaps xmm2, [esp + i3120_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3120_fixH2]
	movaps xmm1, [esp + i3120_fiyH2]
	movaps xmm2, [esp + i3120_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	mov   edx, [ebp + i3120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i3120_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + i3120_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i3120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3120_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3120_nri]
	dec ecx
	jecxz .i3120_end
	;# not last, iterate once more!  
	mov [ebp + i3120_nri], ecx
	jmp .i3120_outer
.i3120_end:
	emms
	mov eax, [esp + i3120_salign]
	add esp, eax
	add esp, 824
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

	
.globl inl3130_sse
.globl _inl3130_sse
inl3130_sse:	
_inl3130_sse:	
.equiv		i3130_nri,			8
.equiv		i3130_iinr,			12
.equiv		i3130_jindex,		16
.equiv		i3130_jjnr,			20
.equiv		i3130_shift,		24
.equiv		i3130_shiftvec,		28
.equiv		i3130_fshift,		32
.equiv		i3130_gid,			36
.equiv		i3130_pos,			40		
.equiv		i3130_faction,		44
.equiv		i3130_charge,		48
.equiv		i3130_facel,		52
.equiv		i3130_Vc,			56			
.equiv		i3130_type,			60
.equiv		i3130_ntype,		64
.equiv		i3130_nbfp,			68	
.equiv		i3130_Vnb,			72
.equiv		i3130_tabscale,		76	
.equiv		i3130_VFtab,		80
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3130_ixO,			0
.equiv		i3130_iyO,			16
.equiv		i3130_izO,			32
.equiv		i3130_ixH1,			48
.equiv		i3130_iyH1,			64
.equiv		i3130_izH1,			80
.equiv		i3130_ixH2,			96
.equiv		i3130_iyH2,			112
.equiv		i3130_izH2,			128
.equiv		i3130_jxO,			144
.equiv		i3130_jyO,			160
.equiv		i3130_jzO,			176
.equiv		i3130_jxH1,			192
.equiv		i3130_jyH1,			208
.equiv		i3130_jzH1,			224 
.equiv		i3130_jxH2,			240
.equiv		i3130_jyH2,			256
.equiv		i3130_jzH2,			272
.equiv		i3130_dxOO,			288
.equiv		i3130_dyOO,			304
.equiv		i3130_dzOO,			320	
.equiv		i3130_dxOH1,		336
.equiv		i3130_dyOH1,		352
.equiv		i3130_dzOH1,		368	
.equiv		i3130_dxOH2,		384
.equiv		i3130_dyOH2,		400
.equiv		i3130_dzOH2,		416	
.equiv		i3130_dxH1O,		432
.equiv		i3130_dyH1O,		448
.equiv		i3130_dzH1O,		464	
.equiv		i3130_dxH1H1,		480
.equiv		i3130_dyH1H1,		496
.equiv		i3130_dzH1H1,		512	
.equiv		i3130_dxH1H2,		528
.equiv		i3130_dyH1H2,		544
.equiv		i3130_dzH1H2,		560	
.equiv		i3130_dxH2O,		576
.equiv		i3130_dyH2O,		592
.equiv		i3130_dzH2O,		608	
.equiv		i3130_dxH2H1,		624
.equiv		i3130_dyH2H1,		640
.equiv		i3130_dzH2H1,		656	
.equiv		i3130_dxH2H2,		672
.equiv		i3130_dyH2H2,		688
.equiv		i3130_dzH2H2,		704
.equiv		i3130_qqOO,			720
.equiv		i3130_qqOH,			736
.equiv		i3130_qqHH,			752
.equiv		i3130_two,			768
.equiv		i3130_tsc,			784
.equiv		i3130_c6,			800
.equiv		i3130_c12,			816		 
.equiv		i3130_six,			832
.equiv		i3130_twelve,		848		 
.equiv		i3130_vctot,		864
.equiv		i3130_vnbtot,		880
.equiv		i3130_fixO,			896
.equiv		i3130_fiyO,			912
.equiv		i3130_fizO,			928
.equiv		i3130_fixH1,		944
.equiv		i3130_fiyH1,		960
.equiv		i3130_fizH1,		976
.equiv		i3130_fixH2,		992
.equiv		i3130_fiyH2,		1008
.equiv		i3130_fizH2,		1024
.equiv		i3130_fjxO,			1040
.equiv		i3130_fjyO,			1056
.equiv		i3130_fjzO,			1072
.equiv		i3130_fjxH1,		1088
.equiv		i3130_fjyH1,		1104
.equiv		i3130_fjzH1,		1120
.equiv		i3130_fjxH2,		1136
.equiv		i3130_fjyH2,		1152
.equiv		i3130_fjzH2,		1168
.equiv		i3130_half,			1184
.equiv		i3130_three,		1200
.equiv		i3130_rsqOO,		1216
.equiv		i3130_rsqOH1,		1232
.equiv		i3130_rsqOH2,		1248
.equiv		i3130_rsqH1O,		1264
.equiv		i3130_rsqH1H1,		1280
.equiv		i3130_rsqH1H2,		1296
.equiv		i3130_rsqH2O,		1312
.equiv		i3130_rsqH2H1,		1328
.equiv		i3130_rsqH2H2,		1344
.equiv		i3130_rinvOO,		1360
.equiv		i3130_rinvOH1,		1376
.equiv		i3130_rinvOH2,		1392
.equiv		i3130_rinvH1O,		1408
.equiv		i3130_rinvH1H1,		1424
.equiv		i3130_rinvH1H2,		1440
.equiv		i3130_rinvH2O,		1456
.equiv		i3130_rinvH2H1,		1472
.equiv		i3130_rinvH2H2,		1488
.equiv		i3130_fstmp,		1504	
.equiv		i3130_is3,			1520
.equiv		i3130_ii3,			1524
.equiv		i3130_innerjjnr,	1528
.equiv		i3130_innerk,		1532
.equiv		i3130_salign,		1536							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1540		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3130_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movups xmm3, [sse_six]
	movups xmm4, [sse_twelve]
	movss xmm5, [ebp + i3130_tabscale]
	movaps [esp + i3130_half],  xmm0
	movaps [esp + i3130_two],  xmm1
	movaps [esp + i3130_three], xmm2
	movaps [esp + i3130_six], xmm3
	movaps [esp + i3130_twelve], xmm4
	shufps xmm5, xmm5, 0
	movaps [esp + i3130_tsc],  xmm5

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3130_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + i3130_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3130_qqOO], xmm3
	movaps [esp + i3130_qqOH], xmm4
	movaps [esp + i3130_qqHH], xmm5
		
	xorps xmm0, xmm0
	mov   edx, [ebp + i3130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + i3130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + i3130_nbfp]
	movlps xmm0, [eax + edx*4] 
	movaps xmm1, xmm0
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 85  ;# 01010101
	movaps [esp + i3130_c6], xmm0
	movaps [esp + i3130_c12], xmm1

.i3130_outer:
	mov   eax, [ebp + i3130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3130_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3130_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i3130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3130_pos]    ;# eax = base of pos[]  
	mov   [esp + i3130_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3130_ixO], xmm3
	movaps [esp + i3130_iyO], xmm4
	movaps [esp + i3130_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3130_ixH1], xmm0
	movaps [esp + i3130_iyH1], xmm1
	movaps [esp + i3130_izH1], xmm2
	movaps [esp + i3130_ixH2], xmm3
	movaps [esp + i3130_iyH2], xmm4
	movaps [esp + i3130_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i3130_vctot], xmm4
	movaps [esp + i3130_vnbtot], xmm4
	movaps [esp + i3130_fixO], xmm4
	movaps [esp + i3130_fiyO], xmm4
	movaps [esp + i3130_fizO], xmm4
	movaps [esp + i3130_fixH1], xmm4
	movaps [esp + i3130_fiyH1], xmm4
	movaps [esp + i3130_fizH1], xmm4
	movaps [esp + i3130_fixH2], xmm4
	movaps [esp + i3130_fiyH2], xmm4
	movaps [esp + i3130_fizH2], xmm4
	
	mov   eax, [ebp + i3130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3130_pos]
	mov   edi, [ebp + i3130_faction]	
	mov   eax, [ebp + i3130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i3130_innerk], edx    ;# number of innerloop atoms 
	jge   .i3130_unroll_loop
	jmp   .i3130_single_check
.i3130_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3130_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + i3130_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d 
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd 
	movaps [esp + i3130_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + i3130_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + i3130_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + i3130_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + i3130_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + i3130_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + i3130_jzO],  xmm0
	movaps [esp + i3130_jzH1],  xmm1
	movaps [esp + i3130_jzH2],  xmm2

	movaps xmm0, [esp + i3130_ixO]
	movaps xmm1, [esp + i3130_iyO]
	movaps xmm2, [esp + i3130_izO]
	movaps xmm3, [esp + i3130_ixO]
	movaps xmm4, [esp + i3130_iyO]
	movaps xmm5, [esp + i3130_izO]
	subps  xmm0, [esp + i3130_jxO]
	subps  xmm1, [esp + i3130_jyO]
	subps  xmm2, [esp + i3130_jzO]
	subps  xmm3, [esp + i3130_jxH1]
	subps  xmm4, [esp + i3130_jyH1]
	subps  xmm5, [esp + i3130_jzH1]
	movaps [esp + i3130_dxOO], xmm0
	movaps [esp + i3130_dyOO], xmm1
	movaps [esp + i3130_dzOO], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3130_dxOH1], xmm3
	movaps [esp + i3130_dyOH1], xmm4
	movaps [esp + i3130_dzOH1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i3130_rsqOO], xmm0
	movaps [esp + i3130_rsqOH1], xmm3

	movaps xmm0, [esp + i3130_ixO]
	movaps xmm1, [esp + i3130_iyO]
	movaps xmm2, [esp + i3130_izO]
	movaps xmm3, [esp + i3130_ixH1]
	movaps xmm4, [esp + i3130_iyH1]
	movaps xmm5, [esp + i3130_izH1]
	subps  xmm0, [esp + i3130_jxH2]
	subps  xmm1, [esp + i3130_jyH2]
	subps  xmm2, [esp + i3130_jzH2]
	subps  xmm3, [esp + i3130_jxO]
	subps  xmm4, [esp + i3130_jyO]
	subps  xmm5, [esp + i3130_jzO]
	movaps [esp + i3130_dxOH2], xmm0
	movaps [esp + i3130_dyOH2], xmm1
	movaps [esp + i3130_dzOH2], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3130_dxH1O], xmm3
	movaps [esp + i3130_dyH1O], xmm4
	movaps [esp + i3130_dzH1O], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i3130_rsqOH2], xmm0
	movaps [esp + i3130_rsqH1O], xmm3

	movaps xmm0, [esp + i3130_ixH1]
	movaps xmm1, [esp + i3130_iyH1]
	movaps xmm2, [esp + i3130_izH1]
	movaps xmm3, [esp + i3130_ixH1]
	movaps xmm4, [esp + i3130_iyH1]
	movaps xmm5, [esp + i3130_izH1]
	subps  xmm0, [esp + i3130_jxH1]
	subps  xmm1, [esp + i3130_jyH1]
	subps  xmm2, [esp + i3130_jzH1]
	subps  xmm3, [esp + i3130_jxH2]
	subps  xmm4, [esp + i3130_jyH2]
	subps  xmm5, [esp + i3130_jzH2]
	movaps [esp + i3130_dxH1H1], xmm0
	movaps [esp + i3130_dyH1H1], xmm1
	movaps [esp + i3130_dzH1H1], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3130_dxH1H2], xmm3
	movaps [esp + i3130_dyH1H2], xmm4
	movaps [esp + i3130_dzH1H2], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i3130_rsqH1H1], xmm0
	movaps [esp + i3130_rsqH1H2], xmm3

	movaps xmm0, [esp + i3130_ixH2]
	movaps xmm1, [esp + i3130_iyH2]
	movaps xmm2, [esp + i3130_izH2]
	movaps xmm3, [esp + i3130_ixH2]
	movaps xmm4, [esp + i3130_iyH2]
	movaps xmm5, [esp + i3130_izH2]
	subps  xmm0, [esp + i3130_jxO]
	subps  xmm1, [esp + i3130_jyO]
	subps  xmm2, [esp + i3130_jzO]
	subps  xmm3, [esp + i3130_jxH1]
	subps  xmm4, [esp + i3130_jyH1]
	subps  xmm5, [esp + i3130_jzH1]
	movaps [esp + i3130_dxH2O], xmm0
	movaps [esp + i3130_dyH2O], xmm1
	movaps [esp + i3130_dzH2O], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3130_dxH2H1], xmm3
	movaps [esp + i3130_dyH2H1], xmm4
	movaps [esp + i3130_dzH2H1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + i3130_rsqH2O], xmm0
	movaps [esp + i3130_rsqH2H1], xmm4

	movaps xmm0, [esp + i3130_ixH2]
	movaps xmm1, [esp + i3130_iyH2]
	movaps xmm2, [esp + i3130_izH2]
	subps  xmm0, [esp + i3130_jxH2]
	subps  xmm1, [esp + i3130_jyH2]
	subps  xmm2, [esp + i3130_jzH2]
	movaps [esp + i3130_dxH2H2], xmm0
	movaps [esp + i3130_dyH2H2], xmm1
	movaps [esp + i3130_dzH2H2], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + i3130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3130_half] ;# rinvH2H2 
	mulps   xmm7, [esp + i3130_half] ;# rinvH2H1 
	movaps  [esp + i3130_rinvH2H2], xmm3
	movaps  [esp + i3130_rinvH2H1], xmm7
		
	rsqrtps xmm1, [esp + i3130_rsqOO]
	rsqrtps xmm5, [esp + i3130_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i3130_rsqOO]
	mulps   xmm5, [esp + i3130_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3130_half] 
	mulps   xmm7, [esp + i3130_half]
	movaps  [esp + i3130_rinvOO], xmm3
	movaps  [esp + i3130_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + i3130_rsqOH2]
	rsqrtps xmm5, [esp + i3130_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i3130_rsqOH2]
	mulps   xmm5, [esp + i3130_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3130_half] 
	mulps   xmm7, [esp + i3130_half]
	movaps  [esp + i3130_rinvOH2], xmm3
	movaps  [esp + i3130_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + i3130_rsqH1H1]
	rsqrtps xmm5, [esp + i3130_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i3130_rsqH1H1]
	mulps   xmm5, [esp + i3130_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3130_half] 
	mulps   xmm7, [esp + i3130_half]
	movaps  [esp + i3130_rinvH1H1], xmm3
	movaps  [esp + i3130_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + i3130_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i3130_three]
	mulps   xmm1, [esp + i3130_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + i3130_half] 
	movaps  [esp + i3130_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + i3130_rinvOO]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3130_rsqOO] ;# xmm1=r 
	mulps  xmm1, [esp + i3130_tsc]
		
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2
	
    movd mm0, eax
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + i3130_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3130_qqOO]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5
	mulps  xmm3, [esp + i3130_tsc]
	
	;# start doing lj 
	movaps xmm2, xmm0
	mulps  xmm2, xmm2
	movaps xmm1, xmm2
	mulps  xmm1, xmm2
	mulps  xmm1, xmm2	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm1, [esp + i3130_c6]
	mulps  xmm2, [esp + i3130_c12]
	movaps xmm4, xmm2
	subps  xmm4, xmm1
	addps  xmm4, [esp + i3130_vnbtot]
	mulps  xmm1, [esp + i3130_six]
	mulps  xmm2, [esp + i3130_twelve]
	movaps [esp + i3130_vnbtot], xmm4
	subps  xmm2, xmm1
	mulps  xmm2, xmm0

	subps  xmm2, xmm3
	mulps  xmm0, xmm2
	
	movaps xmm1, xmm0
	movaps xmm2, xmm0		

	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i3130_dxOO]
	mulps xmm1, [esp + i3130_dyOO]
	mulps xmm2, [esp + i3130_dzOO]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3130_fixO]
	addps xmm1, [esp + i3130_fiyO]
	addps xmm2, [esp + i3130_fizO]
	movaps [esp + i3130_fjxO], xmm3
	movaps [esp + i3130_fjyO], xmm4
	movaps [esp + i3130_fjzO], xmm5
	movaps [esp + i3130_fixO], xmm0
	movaps [esp + i3130_fiyO], xmm1
	movaps [esp + i3130_fizO], xmm2

	;# O-H1 interaction 
	movaps xmm0, [esp + i3130_rinvOH1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3130_rsqOH1] ;# xmm1=r 
	mulps  xmm1, [esp + i3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2
	
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3130_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3130_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i3130_dxOH1]
	mulps xmm1, [esp + i3130_dyOH1]
	mulps xmm2, [esp + i3130_dzOH1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3130_fixO]
	addps xmm1, [esp + i3130_fiyO]
	addps xmm2, [esp + i3130_fizO]
	movaps [esp + i3130_fjxH1], xmm3
	movaps [esp + i3130_fjyH1], xmm4
	movaps [esp + i3130_fjzH1], xmm5
	movaps [esp + i3130_fixO], xmm0
	movaps [esp + i3130_fiyO], xmm1
	movaps [esp + i3130_fizO], xmm2

	;# O-H2 interaction  
	movaps xmm0, [esp + i3130_rinvOH2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3130_rsqOH2] ;# xmm1=r 
	mulps  xmm1, [esp + i3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3130_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3130_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i3130_dxOH2]
	mulps xmm1, [esp + i3130_dyOH2]
	mulps xmm2, [esp + i3130_dzOH2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3130_fixO]
	addps xmm1, [esp + i3130_fiyO]
	addps xmm2, [esp + i3130_fizO]
	movaps [esp + i3130_fjxH2], xmm3
	movaps [esp + i3130_fjyH2], xmm4
	movaps [esp + i3130_fjzH2], xmm5
	movaps [esp + i3130_fixO], xmm0
	movaps [esp + i3130_fiyO], xmm1
	movaps [esp + i3130_fizO], xmm2

	;# H1-O interaction 
	movaps xmm0, [esp + i3130_rinvH1O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3130_rsqH1O] ;# xmm1=r 
	mulps  xmm1, [esp + i3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3130_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3130_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3130_fjxO]
	movaps xmm4, [esp + i3130_fjyO]
	movaps xmm5, [esp + i3130_fjzO]
	mulps xmm0, [esp + i3130_dxH1O]
	mulps xmm1, [esp + i3130_dyH1O]
	mulps xmm2, [esp + i3130_dzH1O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3130_fixH1]
	addps xmm1, [esp + i3130_fiyH1]
	addps xmm2, [esp + i3130_fizH1]
	movaps [esp + i3130_fjxO], xmm3
	movaps [esp + i3130_fjyO], xmm4
	movaps [esp + i3130_fjzO], xmm5
	movaps [esp + i3130_fixH1], xmm0
	movaps [esp + i3130_fiyH1], xmm1
	movaps [esp + i3130_fizH1], xmm2

	;# H1-H1 interaction 
	movaps xmm0, [esp + i3130_rinvH1H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3130_rsqH1H1] ;# xmm1=r 
	mulps  xmm1, [esp + i3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3130_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3130_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3130_fjxH1]
	movaps xmm4, [esp + i3130_fjyH1]
	movaps xmm5, [esp + i3130_fjzH1]
	mulps xmm0, [esp + i3130_dxH1H1]
	mulps xmm1, [esp + i3130_dyH1H1]
	mulps xmm2, [esp + i3130_dzH1H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3130_fixH1]
	addps xmm1, [esp + i3130_fiyH1]
	addps xmm2, [esp + i3130_fizH1]
	movaps [esp + i3130_fjxH1], xmm3
	movaps [esp + i3130_fjyH1], xmm4
	movaps [esp + i3130_fjzH1], xmm5
	movaps [esp + i3130_fixH1], xmm0
	movaps [esp + i3130_fiyH1], xmm1
	movaps [esp + i3130_fizH1], xmm2

	;# H1-H2 interaction 
	movaps xmm0, [esp + i3130_rinvH1H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3130_rsqH1H2] ;# xmm1=r 
	mulps  xmm1, [esp + i3130_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3130_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3130_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3130_fjxH2]
	movaps xmm4, [esp + i3130_fjyH2]
	movaps xmm5, [esp + i3130_fjzH2]
	mulps xmm0, [esp + i3130_dxH1H2]
	mulps xmm1, [esp + i3130_dyH1H2]
	mulps xmm2, [esp + i3130_dzH1H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3130_fixH1]
	addps xmm1, [esp + i3130_fiyH1]
	addps xmm2, [esp + i3130_fizH1]
	movaps [esp + i3130_fjxH2], xmm3
	movaps [esp + i3130_fjyH2], xmm4
	movaps [esp + i3130_fjzH2], xmm5
	movaps [esp + i3130_fixH1], xmm0
	movaps [esp + i3130_fiyH1], xmm1
	movaps [esp + i3130_fizH1], xmm2

	;# H2-O interaction 
	movaps xmm0, [esp + i3130_rinvH2O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3130_rsqH2O] ;# xmm1=r 
	mulps  xmm1, [esp + i3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3130_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3130_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1

	movaps xmm3, [esp + i3130_fjxO]
	movaps xmm4, [esp + i3130_fjyO]
	movaps xmm5, [esp + i3130_fjzO]
	mulps xmm0, [esp + i3130_dxH2O]
	mulps xmm1, [esp + i3130_dyH2O]
	mulps xmm2, [esp + i3130_dzH2O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3130_fixH2]
	addps xmm1, [esp + i3130_fiyH2]
	addps xmm2, [esp + i3130_fizH2]
	movaps [esp + i3130_fjxO], xmm3
	movaps [esp + i3130_fjyO], xmm4
	movaps [esp + i3130_fjzO], xmm5
	movaps [esp + i3130_fixH2], xmm0
	movaps [esp + i3130_fiyH2], xmm1
	movaps [esp + i3130_fizH2], xmm2

	;# H2-H1 interaction 
	movaps xmm0, [esp + i3130_rinvH2H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3130_rsqH2H1] ;# xmm1=r 
	mulps  xmm1, [esp + i3130_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3130_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3130_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3130_fjxH1]
	movaps xmm4, [esp + i3130_fjyH1]
	movaps xmm5, [esp + i3130_fjzH1]
	mulps xmm0, [esp + i3130_dxH2H1]
	mulps xmm1, [esp + i3130_dyH2H1]
	mulps xmm2, [esp + i3130_dzH2H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3130_fixH2]
	addps xmm1, [esp + i3130_fiyH2]
	addps xmm2, [esp + i3130_fizH2]
	movaps [esp + i3130_fjxH1], xmm3
	movaps [esp + i3130_fjyH1], xmm4
	movaps [esp + i3130_fjzH1], xmm5
	movaps [esp + i3130_fixH2], xmm0
	movaps [esp + i3130_fiyH2], xmm1
	movaps [esp + i3130_fizH2], xmm2

	;# H2-H2 interaction 
	movaps xmm0, [esp + i3130_rinvH2H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3130_rsqH2H2] ;# xmm1=r 
	mulps  xmm1, [esp + i3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3130_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3130_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3130_fjxH2]
	movaps xmm4, [esp + i3130_fjyH2]
	movaps xmm5, [esp + i3130_fjzH2]
	mulps xmm0, [esp + i3130_dxH2H2]
	mulps xmm1, [esp + i3130_dyH2H2]
	mulps xmm2, [esp + i3130_dzH2H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3130_fixH2]
	addps xmm1, [esp + i3130_fiyH2]
	addps xmm2, [esp + i3130_fizH2]
	movaps [esp + i3130_fjxH2], xmm3
	movaps [esp + i3130_fjyH2], xmm4
	movaps [esp + i3130_fjzH2], xmm5
	movaps [esp + i3130_fixH2], xmm0
	movaps [esp + i3130_fiyH2], xmm1
	movaps [esp + i3130_fizH2], xmm2

	mov edi, [ebp + i3130_faction]

	movd eax, mm0
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3
	
	;# Did all interactions - now update j forces 
	;# 4 j waters with three atoms each - first do a & b j particles 
	movaps xmm0, [esp + i3130_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i3130_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpcklps xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjxOb  fjyOb 
	movaps xmm1, [esp + i3130_fjzO]
	movaps xmm2, [esp + i3130_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOb  fjyOb  
	unpcklps xmm1, xmm2	   ;# xmm1= fjzOa  fjxH1a fjzOb  fjxH1b 
	movaps xmm4, [esp + i3130_fjyH1]
	movaps xmm5, [esp + i3130_fjzH1]
	unpcklps xmm4, xmm5	   ;# xmm4= fjyH1a fjzH1a fjyH1b fjzH1b 
	movaps xmm5, [esp + i3130_fjxH2]
	movaps xmm6, [esp + i3130_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1b fjzH1b 
	unpcklps xmm5, xmm6	   ;# xmm5= fjxH2a fjyH2a fjxH2b fjyH2b 
	movlhps  xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjzOa  fjxH1a 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOb  fjyOb  fjzOb  fjxH1b 
	movlhps  xmm4, xmm5   	   ;# xmm4= fjyH1a fjzH1a fjxH2a fjyH2a 
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1b fjzH1b fjxH2b fjyH2b 
	movups   xmm1, [edi + eax*4]
	movups   xmm2, [edi + eax*4 + 16]
	movups   xmm5, [edi + ebx*4]
	movups   xmm6, [edi + ebx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + eax*4 + 32]
	movss    xmm3, [edi + ebx*4 + 32]
	
	movaps   xmm4, [esp + i3130_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm7, xmm7, 1
	
	movups   [edi + eax*4],     xmm1
	movups   [edi + eax*4 + 16],xmm2
	movups   [edi + ebx*4],     xmm5
	movups   [edi + ebx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + eax*4 + 32], xmm0
	movss    [edi + ebx*4 + 32], xmm3	

	;# then do the second pair (c & d) 
	movaps xmm0, [esp + i3130_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i3130_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpckhps xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjxOd  fjyOd 
	movaps xmm1, [esp + i3130_fjzO]
	movaps xmm2, [esp + i3130_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOd  fjyOd  
	unpckhps xmm1, xmm2	   ;# xmm1= fjzOc  fjxH1c fjzOd  fjxH1d 
	movaps xmm4, [esp + i3130_fjyH1]
	movaps xmm5, [esp + i3130_fjzH1]
	unpckhps xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjyH1d fjzH1d	
	movaps xmm5, [esp + i3130_fjxH2]
	movaps xmm6, [esp + i3130_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1d fjzH1d 	 
	unpckhps xmm5, xmm6	   ;# xmm5= fjxH2c fjyH2c fjxH2d fjyH2d 
	movlhps  xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjzOc  fjxH1c 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOd  fjyOd  fjzOd  fjxH1d 
	movlhps  xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjxH2c fjyH2c  
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1d fjzH1d fjxH2d fjyH2d 
	movups   xmm1, [edi + ecx*4]
	movups   xmm2, [edi + ecx*4 + 16]
	movups   xmm5, [edi + edx*4]
	movups   xmm6, [edi + edx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + ecx*4 + 32]
	movss    xmm3, [edi + edx*4 + 32]
	
	movaps   xmm4, [esp + i3130_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm4, xmm4, 2 ;# 00000010
	shufps   xmm7, xmm7, 3 ;# 00000011
	movups   [edi + ecx*4],     xmm1
	movups   [edi + ecx*4 + 16],xmm2
	movups   [edi + edx*4],     xmm5
	movups   [edi + edx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + ecx*4 + 32], xmm0
	movss    [edi + edx*4 + 32], xmm3	
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3130_innerk],  4
	jl    .i3130_single_check
	jmp   .i3130_unroll_loop
.i3130_single_check:
	add dword ptr [esp + i3130_innerk],  4
	jnz   .i3130_single_loop
	jmp   .i3130_updateouterdata
.i3130_single_loop:
	mov   edx, [esp + i3130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i3130_innerjjnr],  4	

	mov esi, [ebp + i3130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + i3130_ixO]     
	movaps  xmm1, [esp + i3130_iyO]
	movaps  xmm2, [esp + i3130_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + i3130_jxO], xmm3
	movaps [esp + i3130_jyO], xmm4
	movaps [esp + i3130_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	movaps [esp + i3130_dxOO], xmm0
	movaps [esp + i3130_dyOO], xmm1
	movaps [esp + i3130_dzOO], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	movaps  xmm2, xmm1	
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i3130_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + i3130_half] ;# rinv iO - j water 

	movaps  xmm1, xmm3
	mulps   xmm1, xmm0	;# xmm1=r 
	movaps  xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + i3130_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2
	
    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

	mov esi, [ebp + i3130_VFtab]
	
    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + i3130_qqOO]
	movhps  xmm3, [esp + i3130_qqOH]
		
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point xmm5 contains vcoul and xmm3 fijC 
	
    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5

	mulps  xmm3, [esp + i3130_tsc]
	
	;# start doing lj 
	xorps  xmm2, xmm2
	movss  xmm2, xmm0
	mulss  xmm2, xmm2
	movaps xmm1, xmm2
	mulss  xmm1, xmm2
	mulss  xmm1, xmm2	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulss  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulss  xmm1, [esp + i3130_c6]
	mulss  xmm2, [esp + i3130_c12]
	movaps xmm4, xmm2
	subss  xmm4, xmm1
	addps  xmm4, [esp + i3130_vnbtot]
	mulss  xmm1, [esp + i3130_six]
	mulss  xmm2, [esp + i3130_twelve]
	movaps [esp + i3130_vnbtot], xmm4
	subss  xmm2, xmm1
	mulss  xmm2, xmm0

	subps  xmm2, xmm3
	mulps  xmm0, xmm2
	
	movaps xmm1, xmm0
	movaps xmm2, xmm0			

	mulps   xmm0, [esp + i3130_dxOO]
	mulps   xmm1, [esp + i3130_dyOO]
	mulps   xmm2, [esp + i3130_dzOO]
	;# initial update for j forces 
	xorps   xmm3, xmm3
	xorps   xmm4, xmm4
	xorps   xmm5, xmm5
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i3130_fjxO], xmm3
	movaps  [esp + i3130_fjyO], xmm4
	movaps  [esp + i3130_fjzO], xmm5
	addps   xmm0, [esp + i3130_fixO]
	addps   xmm1, [esp + i3130_fiyO]
	addps   xmm2, [esp + i3130_fizO]
	movaps  [esp + i3130_fixO], xmm0
	movaps  [esp + i3130_fiyO], xmm1
	movaps  [esp + i3130_fizO], xmm2

	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + i3130_ixH1]
	movaps  xmm1, [esp + i3130_iyH1]
	movaps  xmm2, [esp + i3130_izH1]	
	movaps  xmm3, [esp + i3130_ixH2] 
	movaps  xmm4, [esp + i3130_iyH2] 
	movaps  xmm5, [esp + i3130_izH2] 
	subps   xmm0, [esp + i3130_jxO]
	subps   xmm1, [esp + i3130_jyO]
	subps   xmm2, [esp + i3130_jzO]
	subps   xmm3, [esp + i3130_jxO]
	subps   xmm4, [esp + i3130_jyO]
	subps   xmm5, [esp + i3130_jzO]
	movaps [esp + i3130_dxH1O], xmm0
	movaps [esp + i3130_dyH1O], xmm1
	movaps [esp + i3130_dzH1O], xmm2
	movaps [esp + i3130_dxH2O], xmm3
	movaps [esp + i3130_dyH2O], xmm4
	movaps [esp + i3130_dzH2O], xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 

	;# start with H1, save H2 data 
	movaps [esp + i3130_rsqH2O], xmm4
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3130_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + i3130_half] ;# rinv H2 - j water  

	;# start with H1, save H2 data 
	movaps [esp + i3130_rinvH2O], xmm7

	movaps xmm1, xmm3
	mulps  xmm1, xmm0	;# xmm1=r 
	movaps xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + i3130_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2

    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + i3130_qqOH]
	movhps  xmm3, [esp + i3130_qqHH]
		
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point xmm5 contains vcoul and xmm3 fijC 
    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5	

    xorps  xmm1, xmm1

    mulps xmm3, [esp + i3130_tsc]
    mulps xmm3, xmm0
    subps  xmm1, xmm3
	
	movaps  xmm0, xmm1
	movaps  xmm2, xmm1
	mulps   xmm0, [esp + i3130_dxH1O]
	mulps   xmm1, [esp + i3130_dyH1O]
	mulps   xmm2, [esp + i3130_dzH1O]
	;# update forces H1 - j water 
	movaps  xmm3, [esp + i3130_fjxO]
	movaps  xmm4, [esp + i3130_fjyO]
	movaps  xmm5, [esp + i3130_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i3130_fjxO], xmm3
	movaps  [esp + i3130_fjyO], xmm4
	movaps  [esp + i3130_fjzO], xmm5
	addps   xmm0, [esp + i3130_fixH1]
	addps   xmm1, [esp + i3130_fiyH1]
	addps   xmm2, [esp + i3130_fizH1]
	movaps  [esp + i3130_fixH1], xmm0
	movaps  [esp + i3130_fiyH1], xmm1
	movaps  [esp + i3130_fizH1], xmm2
	;# do table for H2 - j water interaction 
	movaps xmm0, [esp + i3130_rinvH2O]
	movaps xmm1, [esp + i3130_rsqH2O]
	mulps  xmm1, xmm0	;# xmm0=rinv, xmm1=r 
	mulps  xmm1, [esp + i3130_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2

    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3130_two]       ;# two*Heps2 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + i3130_qqOH]
	movhps  xmm3, [esp + i3130_qqHH]
		
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point xmm5 contains vcoul and xmm3 fijC 
    addps  xmm5, [esp + i3130_vctot]
    movaps [esp + i3130_vctot], xmm5	

    xorps  xmm1, xmm1

    mulps xmm3, [esp + i3130_tsc]
    mulps xmm3, xmm0
    subps  xmm1, xmm3
	
	movaps  xmm0, xmm1
	movaps  xmm2, xmm1
	
	mulps   xmm0, [esp + i3130_dxH2O]
	mulps   xmm1, [esp + i3130_dyH2O]
	mulps   xmm2, [esp + i3130_dzH2O]
	movaps  xmm3, [esp + i3130_fjxO]
	movaps  xmm4, [esp + i3130_fjyO]
	movaps  xmm5, [esp + i3130_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	mov     esi, [ebp + i3130_faction]
	movaps  [esp + i3130_fjxO], xmm3
	movaps  [esp + i3130_fjyO], xmm4
	movaps  [esp + i3130_fjzO], xmm5
	addps   xmm0, [esp + i3130_fixH2]
	addps   xmm1, [esp + i3130_fiyH2]
	addps   xmm2, [esp + i3130_fizH2]
	movaps  [esp + i3130_fixH2], xmm0
	movaps  [esp + i3130_fiyH2], xmm1
	movaps  [esp + i3130_fizH2], xmm2

	;# update j water forces from local variables 
	movlps  xmm0, [esi + eax*4]
	movlps  xmm1, [esi + eax*4 + 12]
	movhps  xmm1, [esi + eax*4 + 24]
	movaps  xmm3, [esp + i3130_fjxO]
	movaps  xmm4, [esp + i3130_fjyO]
	movaps  xmm5, [esp + i3130_fjzO]
	movaps  xmm6, xmm5
	movaps  xmm7, xmm5
	shufps  xmm6, xmm6, 2 ;# 00000010
	shufps  xmm7, xmm7, 3 ;# 00000011
	addss   xmm5, [esi + eax*4 + 8]
	addss   xmm6, [esi + eax*4 + 20]
	addss   xmm7, [esi + eax*4 + 32]
	movss   [esi + eax*4 + 8], xmm5
	movss   [esi + eax*4 + 20], xmm6
	movss   [esi + eax*4 + 32], xmm7
	movaps   xmm5, xmm3
	unpcklps xmm3, xmm4
	unpckhps xmm5, xmm4
	addps    xmm0, xmm3
	addps    xmm1, xmm5
	movlps  [esi + eax*4], xmm0 
	movlps  [esi + eax*4 + 12], xmm1 
	movhps  [esi + eax*4 + 24], xmm1 
	
	dec dword ptr [esp + i3130_innerk]
	jz    .i3130_updateouterdata
	jmp   .i3130_single_loop
.i3130_updateouterdata:
	mov   ecx, [esp + i3130_ii3]
	mov   edi, [ebp + i3130_faction]
	mov   esi, [ebp + i3130_fshift]
	mov   edx, [esp + i3130_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3130_fixO]
	movaps xmm1, [esp + i3130_fiyO] 
	movaps xmm2, [esp + i3130_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3130_fixH1]
	movaps xmm1, [esp + i3130_fiyH1]
	movaps xmm2, [esp + i3130_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3130_fixH2]
	movaps xmm1, [esp + i3130_fiyH2]
	movaps xmm2, [esp + i3130_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	;# get group index for i particle 
	mov   edx, [ebp + i3130_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3130_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3130_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i3130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3130_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3130_nri]
	dec ecx
	jecxz .i3130_end
	;# not last, iterate once more!  
	mov [ebp + i3130_nri], ecx
	jmp .i3130_outer
.i3130_end:
	emms
	mov eax, [esp + i3130_salign]
	add esp, eax
	add esp, 1540
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	


.globl inl3300_sse
.globl _inl3300_sse
inl3300_sse:	
_inl3300_sse:	
.equiv		i3300_nri,			8
.equiv		i3300_iinr,			12
.equiv		i3300_jindex,		16
.equiv		i3300_jjnr,			20
.equiv		i3300_shift,		24
.equiv		i3300_shiftvec,		28
.equiv		i3300_fshift,		32
.equiv		i3300_gid,			36
.equiv		i3300_pos,			40		
.equiv		i3300_faction,		44
.equiv		i3300_charge,		48
.equiv		i3300_facel,		52
.equiv		i3300_Vc,			56			
.equiv		i3300_type,			60
.equiv		i3300_ntype,		64
.equiv		i3300_nbfp,			68	
.equiv		i3300_Vnb,			72
.equiv		i3300_tabscale,		76
.equiv		i3300_VFtab,		80
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3300_ix,			0
.equiv		i3300_iy,			16
.equiv		i3300_iz,			32
.equiv		i3300_iq,			48
.equiv		i3300_dx,			64
.equiv		i3300_dy,			80
.equiv		i3300_dz,			96
.equiv		i3300_two,			112
.equiv		i3300_tsc,			128
.equiv		i3300_qq,			144	
.equiv		i3300_c6,			160
.equiv		i3300_c12,			176
.equiv		i3300_fscal,		192
.equiv		i3300_vctot,		208
.equiv		i3300_vnbtot,		224
.equiv		i3300_fix,			240
.equiv		i3300_fiy,			256
.equiv		i3300_fiz,			272
.equiv		i3300_half,			288
.equiv		i3300_three,		304
.equiv		i3300_is3,			320
.equiv		i3300_ii3,			324
.equiv		i3300_ntia,			328	
.equiv		i3300_innerjjnr,	332
.equiv		i3300_innerk,		336
.equiv		i3300_salign,		340								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 344		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3300_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + i3300_tabscale]
	movaps [esp + i3300_half],  xmm0
	movaps [esp + i3300_two], xmm1
	movaps [esp + i3300_three],  xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + i3300_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.i3300_outer:
	mov   eax, [ebp + i3300_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3300_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3300_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3300_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i3300_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3300_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3300_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i3300_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + i3300_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i3300_ntype]
    shl   edx, 1
    mov   [esp + i3300_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3300_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i3300_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i3300_ix], xmm0
	movaps [esp + i3300_iy], xmm1
	movaps [esp + i3300_iz], xmm2

	mov   [esp + i3300_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i3300_vctot], xmm4
	movaps [esp + i3300_vnbtot], xmm4
	movaps [esp + i3300_fix], xmm4
	movaps [esp + i3300_fiy], xmm4
	movaps [esp + i3300_fiz], xmm4
	
	mov   eax, [ebp + i3300_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3300_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3300_pos]
	mov   edi, [ebp + i3300_faction]	
	mov   eax, [ebp + i3300_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3300_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i3300_innerk], edx    ;# number of innerloop atoms 
	jge   .i3300_unroll_loop
	jmp   .i3300_finish_inner
.i3300_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3300_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i3300_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3300_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i3300_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mulps  xmm3, xmm2
	movd  mm2, ecx
	movd  mm3, edx

	movaps [esp + i3300_qq], xmm3
	
	mov esi, [ebp + i3300_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i3300_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3300_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i3300_c6], xmm4
	movaps [esp + i3300_c12], xmm6
	
	mov esi, [ebp + i3300_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i3300_ix]
	movaps xmm5, [esp + i3300_iy]
	movaps xmm6, [esp + i3300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3300_dx], xmm4
	movaps [esp + i3300_dy], xmm5
	movaps [esp + i3300_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3300_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i3300_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]
		
	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3300_two]	;# two*Heps2 
	movaps xmm3, [esp + i3300_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3300_vctot]
	movaps [esp + i3300_vctot], xmm5 

	;# put scalar force on stack temporarily 
	movaps [esp + i3300_fscal], xmm3

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i3300_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 
	addps  xmm7, [esp + i3300_fscal] ;# add to fscal 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i3300_vnbtot]
	movaps [esp + i3300_fscal], xmm7
	movaps [esp + i3300_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 32]
	movlps xmm7, [esi + ecx*4 + 32]
	movhps xmm5, [esi + ebx*4 + 32]
	movhps xmm7, [esi + edx*4 + 32] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 40]
	movlps xmm3, [esi + ecx*4 + 40]
	movhps xmm7, [esi + ebx*4 + 40]
	movhps xmm3, [esi + edx*4 + 40] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i3300_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i3300_fscal] 
	
	addps  xmm5, [esp + i3300_vnbtot]
	movaps [esp + i3300_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i3300_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i3300_dx]
	movaps xmm1, [esp + i3300_dy]
	movaps xmm2, [esp + i3300_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i3300_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3300_fix]
	movaps xmm4, [esp + i3300_fiy]
	movaps xmm5, [esp + i3300_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3300_fix], xmm3
	movaps [esp + i3300_fiy], xmm4
	movaps [esp + i3300_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3300_innerk],  4
	jl    .i3300_finish_inner
	jmp   .i3300_unroll_loop
.i3300_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i3300_innerk],  4
	mov   edx, [esp + i3300_innerk]
	and   edx, 2
	jnz   .i3300_dopair
	jmp   .i3300_checksingle
.i3300_dopair:	
	mov esi, [ebp + i3300_charge]

    mov   ecx, [esp + i3300_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i3300_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + i3300_iq]
	movlhps xmm3, xmm7
	movaps [esp + i3300_qq], xmm3

	mov esi, [ebp + i3300_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i3300_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3300_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i3300_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i3300_c6], xmm4
	movaps [esp + i3300_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i3300_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i3300_ix]
	movaps xmm5, [esp + i3300_iy]
	movaps xmm6, [esp + i3300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3300_dx], xmm4
	movaps [esp + i3300_dy], xmm5
	movaps [esp + i3300_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3300_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3300_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6
	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3300_two]	;# two*Heps2 
	movaps xmm3, [esp + i3300_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3300_vctot]
	movaps [esp + i3300_vctot], xmm5 

	;# put scalar force on stack temporarily 
	movaps [esp + i3300_fscal], xmm3

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i3300_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 
	addps  xmm7, [esp + i3300_fscal] ;# add to fscal 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i3300_vnbtot]
	movaps [esp + i3300_fscal], xmm7
	movaps [esp + i3300_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 32]
	movhps xmm5, [esi + edx*4 + 32] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 40]
	movhps xmm7, [esi + edx*4 + 40] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i3300_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i3300_fscal] 
	
	addps  xmm5, [esp + i3300_vnbtot]
	movaps [esp + i3300_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i3300_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i3300_dx]
	movaps xmm1, [esp + i3300_dy]
	movaps xmm2, [esp + i3300_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3300_fix]
	movaps xmm4, [esp + i3300_fiy]
	movaps xmm5, [esp + i3300_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3300_fix], xmm3
	movaps [esp + i3300_fiy], xmm4
	movaps [esp + i3300_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i3300_checksingle:				
	mov   edx, [esp + i3300_innerk]
	and   edx, 1
	jnz    .i3300_dosingle
	jmp    .i3300_updateouterdata
.i3300_dosingle:
	mov esi, [ebp + i3300_charge]
	mov edi, [ebp + i3300_pos]
	mov   ecx, [esp + i3300_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + i3300_iq]
	movaps [esp + i3300_qq], xmm6

	mov esi, [ebp + i3300_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i3300_nbfp]
	shl ecx, 1
	add ecx, [esp + i3300_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i3300_c6], xmm4
	movaps [esp + i3300_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i3300_ix]
	movaps xmm5, [esp + i3300_iy]
	movaps xmm6, [esp + i3300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3300_dx], xmm4
	movaps [esp + i3300_dy], xmm5
	movaps [esp + i3300_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3300_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3300_VFtab]
	movd ebx, mm6
	
	lea  ebx, [ebx + ebx*2]
						
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3300_two]	;# two*Heps2 
	movaps xmm3, [esp + i3300_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + i3300_vctot]
	movss [esp + i3300_vctot], xmm5 

	;# put scalar force on stack temporarily 
	movaps [esp + i3300_fscal], xmm3

	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i3300_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 
	addps  xmm7, [esp + i3300_fscal] ;# add to fscal 

	;# put scalar force on stack Update vnbtot directly 
	addss  xmm5, [esp + i3300_vnbtot]
	movaps [esp + i3300_fscal], xmm7
	movss [esp + i3300_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 32]
	movlps xmm6, [esi + ebx*4 + 40]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3300_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i3300_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i3300_fscal] 
	
	addss  xmm5, [esp + i3300_vnbtot]
	movss [esp + i3300_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i3300_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7
	mov    edi, [ebp + i3300_faction]

	movaps xmm0, [esp + i3300_dx]
	movaps xmm1, [esp + i3300_dy]
	movaps xmm2, [esp + i3300_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3300_fix]
	movaps xmm4, [esp + i3300_fiy]
	movaps xmm5, [esp + i3300_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i3300_fix], xmm3
	movaps [esp + i3300_fiy], xmm4
	movaps [esp + i3300_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i3300_updateouterdata:
	mov   ecx, [esp + i3300_ii3]
	mov   edi, [ebp + i3300_faction]
	mov   esi, [ebp + i3300_fshift]
	mov   edx, [esp + i3300_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3300_fix]
	movaps xmm1, [esp + i3300_fiy]
	movaps xmm2, [esp + i3300_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# get group index for i particle 
	mov   edx, [ebp + i3300_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3300_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3300_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3300_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i3300_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3300_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3300_nri]
	dec ecx
	jecxz .i3300_end
	;# not last, iterate once more!  
	mov [ebp + i3300_nri], ecx
	jmp .i3300_outer
.i3300_end:
	emms
	mov eax, [esp + i3300_salign]
	add esp, eax
	add esp, 344
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret





.globl inl3310_sse
.globl _inl3310_sse
inl3310_sse:	
_inl3310_sse:	
.equiv		i3310_nri,			8
.equiv		i3310_iinr,			12
.equiv		i3310_jindex,		16
.equiv		i3310_jjnr,			20
.equiv		i3310_shift,		24
.equiv		i3310_shiftvec,		28
.equiv		i3310_fshift,		32
.equiv		i3310_gid,			36
.equiv		i3310_pos,			40		
.equiv		i3310_faction,		44
.equiv		i3310_charge,		48
.equiv		i3310_facel,		52
.equiv		i3310_Vc,			56			
.equiv		i3310_type,			60
.equiv		i3310_ntype,		64
.equiv		i3310_nbfp,			68	
.equiv		i3310_Vnb,			72
.equiv		i3310_tabscale,		76
.equiv		i3310_VFtab,		80
.equiv		i3310_nsatoms,		84			
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3310_ix,			0
.equiv		i3310_iy,			16
.equiv		i3310_iz,			32
.equiv		i3310_iq,			48
.equiv		i3310_dx,			64
.equiv		i3310_dy,			80
.equiv		i3310_dz,			96
.equiv		i3310_two,			112
.equiv		i3310_tsc,			128
.equiv		i3310_qq,			144	
.equiv		i3310_c6,			160
.equiv		i3310_c12,			176
.equiv		i3310_fscal,		192
.equiv		i3310_vctot,		208
.equiv		i3310_vnbtot,		224
.equiv		i3310_fix,			240
.equiv		i3310_fiy,			256
.equiv		i3310_fiz,			272
.equiv		i3310_half,			288
.equiv		i3310_three,		304
.equiv		i3310_is3,			320
.equiv		i3310_ii3,			324
.equiv		i3310_shX,			328
.equiv		i3310_shY,			332
.equiv		i3310_shZ,			336
.equiv		i3310_ntia,			340	
.equiv		i3310_innerjjnr0,	344
.equiv		i3310_innerk0,		348	
.equiv		i3310_innerjjnr,	352
.equiv		i3310_innerk,		356
.equiv		i3310_salign,		360
.equiv		i3310_nsvdwc,		364
.equiv		i3310_nscoul,		368
.equiv		i3310_nsvdw,		372
.equiv		i3310_solnr,		376		
	push ebp
	mov ebp,esp	
	push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 380		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3310_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + i3310_tabscale]
	movaps [esp + i3310_half],  xmm0
	movaps [esp + i3310_two], xmm1
	movaps [esp + i3310_three], xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + i3310_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.i3310_outer:
	mov   eax, [ebp + i3310_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3310_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3310_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3310_shiftvec]   ;# eax = base of shiftvec[] 

	movlps xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 8] 
	movlps [esp + i3310_shX], xmm0
	movss [esp + i3310_shZ], xmm1

	mov   ecx, [ebp + i3310_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3310_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + i3310_nsatoms]
	add dword ptr [ebp + i3310_nsatoms],  12
	mov   ecx, [eax]	
	mov   edx, [eax + 4]
	mov   eax, [eax + 8]	
	sub   ecx, eax
	sub   eax, edx
	
	mov   [esp + i3310_nsvdwc], edx
	mov   [esp + i3310_nscoul], eax
	mov   [esp + i3310_nsvdw], ecx
		
	;# clear potential 
	xorps xmm4, xmm4
	movaps [esp + i3310_vctot], xmm4
	movaps [esp + i3310_vnbtot], xmm4
	mov   [esp + i3310_solnr],  ebx

	mov   eax, [ebp + i3310_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3310_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   eax, [ebp + i3310_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3310_innerjjnr0], eax     ;# pointer to jjnr[nj0] 
	mov   [esp + i3310_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + i3310_nsvdwc]
	cmp   ecx,  0
	jnz   .i3310_mno_vdwc
	jmp   .i3310_testcoul
.i3310_mno_vdwc:
	mov   ebx,  [esp + i3310_solnr]
	inc   dword ptr [esp + i3310_solnr]

	mov   edx, [ebp + i3310_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i3310_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + i3310_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i3310_ntype]
    shl   edx, 1
    mov   [esp + i3310_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3310_pos]    ;# eax = base of pos[]  

	movss xmm0, [esp + i3310_shX]
	movss xmm1, [esp + i3310_shY]
	movss xmm2, [esp + i3310_shZ]
	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	;# clear i forces 
	movaps [esp + i3310_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i3310_ix], xmm0
	movaps [esp + i3310_iy], xmm1
	movaps [esp + i3310_iz], xmm2

	mov   [esp + i3310_ii3], ebx
	
	;# clear i forces 
	xorps xmm4, xmm4
	movaps [esp + i3310_fix], xmm4
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm4
	
	mov   ecx, [esp + i3310_innerjjnr0]
	mov   [esp + i3310_innerjjnr], ecx
	mov   edx, [esp + i3310_innerk0]
    sub   edx,  4
    mov   [esp + i3310_innerk], edx    ;# number of innerloop atoms 
	jge   .i3310_unroll_vdwc_loop
	jmp   .i3310_finish_vdwc_inner
.i3310_unroll_vdwc_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3310_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i3310_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3310_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i3310_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mulps  xmm3, xmm2
	movd  mm2, ecx
	movd  mm3, edx

	movaps [esp + i3310_qq], xmm3
	
	mov esi, [ebp + i3310_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i3310_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3310_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i3310_c6], xmm4
	movaps [esp + i3310_c12], xmm6
	
	mov esi, [ebp + i3310_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i3310_ix]
	movaps xmm5, [esp + i3310_iy]
	movaps xmm6, [esp + i3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3310_dx], xmm4
	movaps [esp + i3310_dy], xmm5
	movaps [esp + i3310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3310_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i3310_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]
		
	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	movaps xmm3, [esp + i3310_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3310_vctot]
	movaps [esp + i3310_vctot], xmm5 

	;# put scalar force on stack temporarily 
	movaps [esp + i3310_fscal], xmm3

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i3310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 
	addps  xmm7, [esp + i3310_fscal] ;# add to fscal 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i3310_vnbtot]
	movaps [esp + i3310_fscal], xmm7
	movaps [esp + i3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 32]
	movlps xmm7, [esi + ecx*4 + 32]
	movhps xmm5, [esi + ebx*4 + 32]
	movhps xmm7, [esi + edx*4 + 32] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 40]
	movlps xmm3, [esi + ecx*4 + 40]
	movhps xmm7, [esi + ebx*4 + 40]
	movhps xmm3, [esi + edx*4 + 40] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i3310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i3310_fscal] 
	
	addps  xmm5, [esp + i3310_vnbtot]
	movaps [esp + i3310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i3310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i3310_dx]
	movaps xmm1, [esp + i3310_dy]
	movaps xmm2, [esp + i3310_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i3310_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3310_fix]
	movaps xmm4, [esp + i3310_fiy]
	movaps xmm5, [esp + i3310_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3310_fix], xmm3
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3310_innerk],  4
	jl    .i3310_finish_vdwc_inner
	jmp   .i3310_unroll_vdwc_loop
.i3310_finish_vdwc_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i3310_innerk],  4
	mov   edx, [esp + i3310_innerk]
	and   edx, 2
	jnz   .i3310_dopair_vdwc
	jmp   .i3310_checksingle_vdwc
.i3310_dopair_vdwc:	
	mov esi, [ebp + i3310_charge]

    mov   ecx, [esp + i3310_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i3310_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + i3310_iq]
	movlhps xmm3, xmm7
	movaps [esp + i3310_qq], xmm3

	mov esi, [ebp + i3310_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i3310_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3310_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i3310_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i3310_c6], xmm4
	movaps [esp + i3310_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i3310_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i3310_ix]
	movaps xmm5, [esp + i3310_iy]
	movaps xmm6, [esp + i3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3310_dx], xmm4
	movaps [esp + i3310_dy], xmm5
	movaps [esp + i3310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3310_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6
	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	movaps xmm3, [esp + i3310_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3310_vctot]
	movaps [esp + i3310_vctot], xmm5 

	;# put scalar force on stack temporarily 
	movaps [esp + i3310_fscal], xmm3

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i3310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 
	addps  xmm7, [esp + i3310_fscal] ;# add to fscal 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i3310_vnbtot]
	movaps [esp + i3310_fscal], xmm7
	movaps [esp + i3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 32]
	movhps xmm5, [esi + edx*4 + 32] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 40]
	movhps xmm7, [esi + edx*4 + 40] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i3310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i3310_fscal] 
	
	addps  xmm5, [esp + i3310_vnbtot]
	movaps [esp + i3310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i3310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i3310_dx]
	movaps xmm1, [esp + i3310_dy]
	movaps xmm2, [esp + i3310_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3310_fix]
	movaps xmm4, [esp + i3310_fiy]
	movaps xmm5, [esp + i3310_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3310_fix], xmm3
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i3310_checksingle_vdwc:				
	mov   edx, [esp + i3310_innerk]
	and   edx, 1
	jnz    .i3310_dosingle_vdwc
	jmp    .i3310_updateouterdata_vdwc
.i3310_dosingle_vdwc:
	mov esi, [ebp + i3310_charge]
	mov edi, [ebp + i3310_pos]
	mov   ecx, [esp + i3310_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + i3310_iq]
	movaps [esp + i3310_qq], xmm6

	mov esi, [ebp + i3310_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i3310_nbfp]
	shl ecx, 1
	add ecx, [esp + i3310_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i3310_c6], xmm4
	movaps [esp + i3310_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i3310_ix]
	movaps xmm5, [esp + i3310_iy]
	movaps xmm6, [esp + i3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3310_dx], xmm4
	movaps [esp + i3310_dy], xmm5
	movaps [esp + i3310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3310_VFtab]
	movd ebx, mm6
	
	lea  ebx, [ebx + ebx*2]
						
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	movaps xmm3, [esp + i3310_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + i3310_vctot]
	movss [esp + i3310_vctot], xmm5 

	;# put scalar force on stack temporarily 
	movaps [esp + i3310_fscal], xmm3

	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i3310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 
	addps  xmm7, [esp + i3310_fscal] ;# add to fscal 

	;# put scalar force on stack Update vnbtot directly 
	addss  xmm5, [esp + i3310_vnbtot]
	movaps [esp + i3310_fscal], xmm7
	movss [esp + i3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 32]
	movlps xmm6, [esi + ebx*4 + 40]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i3310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i3310_fscal] 
	
	addss  xmm5, [esp + i3310_vnbtot]
	movss [esp + i3310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i3310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7
	mov    edi, [ebp + i3310_faction]

	movaps xmm0, [esp + i3310_dx]
	movaps xmm1, [esp + i3310_dy]
	movaps xmm2, [esp + i3310_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3310_fix]
	movaps xmm4, [esp + i3310_fiy]
	movaps xmm5, [esp + i3310_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i3310_fix], xmm3
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i3310_updateouterdata_vdwc:
	mov   ecx, [esp + i3310_ii3]
	mov   edi, [ebp + i3310_faction]
	mov   esi, [ebp + i3310_fshift]
	mov   edx, [esp + i3310_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3310_fix]
	movaps xmm1, [esp + i3310_fiy]
	movaps xmm2, [esp + i3310_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5


	;# loop back to mno 
	dec  dword ptr [esp + i3310_nsvdwc]
	jz  .i3310_testcoul
	jmp .i3310_mno_vdwc
.i3310_testcoul:
	mov  ecx, [esp + i3310_nscoul]
	cmp  ecx,  0
	jnz  .i3310_mno_coul
	jmp  .i3310_testvdw
.i3310_mno_coul:
	mov   ebx,  [esp + i3310_solnr]
	inc   dword ptr [esp + i3310_solnr]

	movss xmm0, [esp + i3310_shX]
	movss xmm1, [esp + i3310_shY]
	movss xmm2, [esp + i3310_shZ]

	mov   edx, [ebp + i3310_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + i3310_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3310_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + i3310_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i3310_ix], xmm0
	movaps [esp + i3310_iy], xmm1
	movaps [esp + i3310_iz], xmm2

	mov   [esp + i3310_ii3], ebx
	
	;# clear i forces 
	xorps xmm4, xmm4
	movaps [esp + i3310_fix], xmm4
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm4

	mov   ecx, [esp + i3310_innerjjnr0]
	mov   [esp + i3310_innerjjnr], ecx
	mov   edx, [esp + i3310_innerk0]
    sub   edx,  4
    mov   [esp + i3310_innerk], edx    ;# number of innerloop atoms 
	jge   .i3310_unroll_coul_loop
	jmp   .i3310_finish_coul_inner

.i3310_unroll_coul_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3310_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i3310_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3310_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + i3310_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	mulps  xmm3, xmm2

	movaps [esp + i3310_qq], xmm3	
	
	mov esi, [ebp + i3310_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i3310_ix]
	movaps xmm5, [esp + i3310_iy]
	movaps xmm6, [esp + i3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3310_dx], xmm4
	movaps [esp + i3310_dy], xmm5
	movaps [esp + i3310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3310_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i3310_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]
		
	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	movaps xmm3, [esp + i3310_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3310_vctot]
	movaps [esp + i3310_vctot], xmm5 

	xorps  xmm4, xmm4

	mulps xmm3, [esp + i3310_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3

	movaps xmm0, [esp + i3310_dx]
	movaps xmm1, [esp + i3310_dy]
	movaps xmm2, [esp + i3310_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i3310_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3310_fix]
	movaps xmm4, [esp + i3310_fiy]
	movaps xmm5, [esp + i3310_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3310_fix], xmm3
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3310_innerk],  4
	jl    .i3310_finish_coul_inner
	jmp   .i3310_unroll_coul_loop
.i3310_finish_coul_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i3310_innerk],  4
	mov   edx, [esp + i3310_innerk]
	and   edx, 2
	jnz   .i3310_dopair_coul
	jmp   .i3310_checksingle_coul
.i3310_dopair_coul:	
	mov esi, [ebp + i3310_charge]

    mov   ecx, [esp + i3310_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i3310_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + i3310_iq]
	movlhps xmm3, xmm7
	movaps [esp + i3310_qq], xmm3

	mov edi, [ebp + i3310_pos]	
	
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i3310_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i3310_ix]
	movaps xmm5, [esp + i3310_iy]
	movaps xmm6, [esp + i3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3310_dx], xmm4
	movaps [esp + i3310_dy], xmm5
	movaps [esp + i3310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3310_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	movaps xmm3, [esp + i3310_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + i3310_vctot]
	movaps [esp + i3310_vctot], xmm5 

	xorps  xmm4, xmm4

	mulps xmm3, [esp + i3310_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3

	movaps xmm0, [esp + i3310_dx]
	movaps xmm1, [esp + i3310_dy]
	movaps xmm2, [esp + i3310_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3310_fix]
	movaps xmm4, [esp + i3310_fiy]
	movaps xmm5, [esp + i3310_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3310_fix], xmm3
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i3310_checksingle_coul:				
	mov   edx, [esp + i3310_innerk]
	and   edx, 1
	jnz    .i3310_dosingle_coul
	jmp    .i3310_updateouterdata_coul
.i3310_dosingle_coul:
	mov esi, [ebp + i3310_charge]
	mov edi, [ebp + i3310_pos]
	mov   ecx, [esp + i3310_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + i3310_iq]
	movaps [esp + i3310_qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i3310_ix]
	movaps xmm5, [esp + i3310_iy]
	movaps xmm6, [esp + i3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3310_dx], xmm4
	movaps [esp + i3310_dy], xmm5
	movaps [esp + i3310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3310_VFtab]
	movd ebx, mm6
	
	lea   ebx, [ebx + ebx*2]

	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	movaps xmm3, [esp + i3310_qq]
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	mulps  xmm3, xmm7 ;# fijC=FF*qq 
	;# at this point mm5 contains vcoul and mm3 fijC 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + i3310_vctot]
	movss [esp + i3310_vctot], xmm5 

	xorps xmm4, xmm4

	mulps xmm3, [esp + i3310_tsc]
	mulps xmm3, xmm0
	subps  xmm4, xmm3
	mov    edi, [ebp + i3310_faction]

	movaps xmm0, [esp + i3310_dx]
	movaps xmm1, [esp + i3310_dy]
	movaps xmm2, [esp + i3310_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3310_fix]
	movaps xmm4, [esp + i3310_fiy]
	movaps xmm5, [esp + i3310_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i3310_fix], xmm3
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i3310_updateouterdata_coul:
	mov   ecx, [esp + i3310_ii3]
	mov   edi, [ebp + i3310_faction]
	mov   esi, [ebp + i3310_fshift]
	mov   edx, [esp + i3310_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3310_fix]
	movaps xmm1, [esp + i3310_fiy]
	movaps xmm2, [esp + i3310_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5

	;# loop back to mno 
	dec  dword ptr [esp + i3310_nscoul]
	jz  .i3310_testvdw
	jmp .i3310_mno_coul
.i3310_testvdw:
	mov  ecx, [esp + i3310_nsvdw]
	cmp  ecx,  0
	jnz  .i3310_mno_vdw
	jmp  .i3310_last_mno
.i3310_mno_vdw:
	mov   ebx,  [esp + i3310_solnr]
	inc   dword ptr [esp + i3310_solnr]

    mov   edx, [ebp + i3310_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + i3310_ntype]
    shl   edx, 1
    mov   [esp + i3310_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3310_pos]    ;# eax = base of pos[]  
	mov   [esp + i3310_ii3], ebx

	movss xmm0, [esp + i3310_shX]
	movss xmm1, [esp + i3310_shY]
	movss xmm2, [esp + i3310_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	xorps xmm4, xmm4
	movaps [esp + i3310_fix], xmm4
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm4

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + i3310_ix], xmm0
	movaps [esp + i3310_iy], xmm1
	movaps [esp + i3310_iz], xmm2

	mov   ecx, [esp + i3310_innerjjnr0]
	mov   [esp + i3310_innerjjnr], ecx
	mov   edx, [esp + i3310_innerk0]
    sub   edx,  4
    mov   [esp + i3310_innerk], edx    ;# number of innerloop atoms 
	jge   .i3310_unroll_vdw_loop
	jmp   .i3310_finish_vdw_inner
.i3310_unroll_vdw_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3310_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + i3310_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + i3310_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i3310_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3310_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i3310_c6], xmm4
	movaps [esp + i3310_c12], xmm6
	
	mov esi, [ebp + i3310_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + i3310_ix]
	movaps xmm5, [esp + i3310_iy]
	movaps xmm6, [esp + i3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3310_dx], xmm4
	movaps [esp + i3310_dy], xmm5
	movaps [esp + i3310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3310_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + i3310_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	lea   eax, [eax + eax*2] 
	lea   ebx, [ebx + ebx*2] 
	lea   ecx, [ecx + ecx*2] 
	lea   edx, [edx + edx*2] 

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 0]
	movlps xmm7, [esi + ecx*4 + 0]
	movhps xmm5, [esi + ebx*4 + 0]
	movhps xmm7, [esi + edx*4 + 0] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i3310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i3310_vnbtot]
	movaps [esp + i3310_fscal], xmm7
	movaps [esp + i3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i3310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i3310_fscal] 
	
	addps  xmm5, [esp + i3310_vnbtot]
	movaps [esp + i3310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i3310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i3310_dx]
	movaps xmm1, [esp + i3310_dy]
	movaps xmm2, [esp + i3310_dz]

	movd eax, mm0	
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3

	mov    edi, [ebp + i3310_faction]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3310_fix]
	movaps xmm4, [esp + i3310_fiy]
	movaps xmm5, [esp + i3310_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3310_fix], xmm3
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm5
	;# the fj's - start by accumulating x & y forces from memory 
	movlps xmm4, [edi + eax*4]
	movlps xmm6, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm6, [edi + edx*4]

	movaps xmm3, xmm4
	shufps xmm3, xmm6, 136  ;# 10001000
	shufps xmm4, xmm6, 221  ;# 11011101			      

	;# now xmm3-xmm5 contains fjx, fjy, fjz 
	subps  xmm3, xmm0
	subps  xmm4, xmm1
	
	;# unpack them back so we can store them - first x & y in xmm3/xmm4 

	movaps xmm6, xmm3
	unpcklps xmm6, xmm4
	unpckhps xmm3, xmm4	
	;# xmm6(l)=x & y for j1, (h) for j2 
	;# xmm3(l)=x & y for j3, (h) for j4 
	movlps [edi + eax*4], xmm6
	movlps [edi + ecx*4], xmm3
	
	movhps [edi + ebx*4], xmm6
	movhps [edi + edx*4], xmm3

	;# and the z forces 
	movss  xmm4, [edi + eax*4 + 8]
	movss  xmm5, [edi + ebx*4 + 8]
	movss  xmm6, [edi + ecx*4 + 8]
	movss  xmm7, [edi + edx*4 + 8]
	subss  xmm4, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm5, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm6, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm7, xmm2
	movss  [edi + eax*4 + 8], xmm4
	movss  [edi + ebx*4 + 8], xmm5
	movss  [edi + ecx*4 + 8], xmm6
	movss  [edi + edx*4 + 8], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3310_innerk],  4
	jl    .i3310_finish_vdw_inner
	jmp   .i3310_unroll_vdw_loop
.i3310_finish_vdw_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + i3310_innerk],  4
	mov   edx, [esp + i3310_innerk]
	and   edx, 2
	jnz   .i3310_dopair_vdw
	jmp   .i3310_checksingle_vdw
.i3310_dopair_vdw:	
    mov   ecx, [esp + i3310_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + i3310_innerjjnr],  8	
	xorps xmm7, xmm7

	mov esi, [ebp + i3310_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + i3310_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3310_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + i3310_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + i3310_c6], xmm4
	movaps [esp + i3310_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	mov    edi, [ebp + i3310_faction]
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + i3310_ix]
	movaps xmm5, [esp + i3310_iy]
	movaps xmm6, [esp + i3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3310_dx], xmm4
	movaps [esp + i3310_dy], xmm5
	movaps [esp + i3310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3310_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	lea   ecx, [ecx + ecx*2] 
	lea   edx, [edx + edx*2] 

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 0]
	movhps xmm5, [esi + edx*4 + 0];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i3310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + i3310_vnbtot]
	movaps [esp + i3310_fscal], xmm7
	movaps [esp + i3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i3310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i3310_fscal] 
	
	addps  xmm5, [esp + i3310_vnbtot]
	movaps [esp + i3310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i3310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7

	movaps xmm0, [esp + i3310_dx]
	movaps xmm1, [esp + i3310_dy]
	movaps xmm2, [esp + i3310_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3310_fix]
	movaps xmm4, [esp + i3310_fiy]
	movaps xmm5, [esp + i3310_fiz]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm5, xmm2
	movaps [esp + i3310_fix], xmm3
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm5
	;# update the fj's 
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	

	shufps  xmm0, xmm0, 225  ;# 11100001
	shufps  xmm1, xmm1, 225  ;# 11100001
	shufps  xmm2, xmm2, 225  ;# 11100001

	movss   xmm3, [edi + ebx*4]
	movss   xmm4, [edi + ebx*4 + 4]
	movss   xmm5, [edi + ebx*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + ebx*4], xmm3
	movss   [edi + ebx*4 + 4], xmm4
	movss   [edi + ebx*4 + 8], xmm5	

.i3310_checksingle_vdw:				
	mov   edx, [esp + i3310_innerk]
	and   edx, 1
	jnz    .i3310_dosingle_vdw
	jmp    .i3310_updateouterdata_vdw
.i3310_dosingle_vdw:
	mov edi, [ebp + i3310_pos]
	mov   ecx, [esp + i3310_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6

	mov esi, [ebp + i3310_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + i3310_nbfp]
	shl ecx, 1
	add ecx, [esp + i3310_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + i3310_c6], xmm4
	movaps [esp + i3310_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + i3310_ix]
	movaps xmm5, [esp + i3310_iy]
	movaps xmm6, [esp + i3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3310_dx], xmm4
	movaps [esp + i3310_dy], xmm5
	movaps [esp + i3310_dz], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + i3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + i3310_VFtab]
	movd ebx, mm6

	lea   ebx, [ebx + ebx*2] 	

	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 0]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + i3310_c6]
	mulps  xmm7, xmm4	 ;# fijD 
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addss  xmm5, [esp + i3310_vnbtot]
	movaps [esp + i3310_fscal], xmm7
	movss [esp + i3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + i3310_two]	;# two*Heps2 
	addps  xmm7, xmm6
	addps  xmm7, xmm5 ;# xmm7=FF 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + i3310_c12]
	mulps  xmm7, xmm4 ;# fijR 
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm7, [esp + i3310_fscal] 
	
	addss  xmm5, [esp + i3310_vnbtot]
	movss [esp + i3310_vnbtot], xmm5
	xorps  xmm4, xmm4

	mulps xmm7, [esp + i3310_tsc]
	mulps xmm7, xmm0
	subps  xmm4, xmm7
	mov    edi, [ebp + i3310_faction]

	movaps xmm0, [esp + i3310_dx]
	movaps xmm1, [esp + i3310_dy]
	movaps xmm2, [esp + i3310_dz]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4
	;# xmm0-xmm2 contains tx-tz (partial force) 
	;# now update f_i 
	movaps xmm3, [esp + i3310_fix]
	movaps xmm4, [esp + i3310_fiy]
	movaps xmm5, [esp + i3310_fiz]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movaps [esp + i3310_fix], xmm3
	movaps [esp + i3310_fiy], xmm4
	movaps [esp + i3310_fiz], xmm5
	;# update fj 
	
	movss   xmm3, [edi + eax*4]
	movss   xmm4, [edi + eax*4 + 4]
	movss   xmm5, [edi + eax*4 + 8]
	subss   xmm3, xmm0
	subss   xmm4, xmm1
	subss   xmm5, xmm2	
	movss   [edi + eax*4], xmm3
	movss   [edi + eax*4 + 4], xmm4
	movss   [edi + eax*4 + 8], xmm5	
.i3310_updateouterdata_vdw:
	mov   ecx, [esp + i3310_ii3]
	mov   edi, [ebp + i3310_faction]
	mov   esi, [ebp + i3310_fshift]
	mov   edx, [esp + i3310_is3]

	;# accumulate i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3310_fix]
	movaps xmm1, [esp + i3310_fiy]
	movaps xmm2, [esp + i3310_fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# increment fshift force  
	movss  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 4]
	movss  xmm5, [esi + edx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esi + edx*4],     xmm3
	movss  [esi + edx*4 + 4], xmm4
	movss  [esi + edx*4 + 8], xmm5
	
	;# loop back to mno 
	dec dword ptr [esp + i3310_nsvdw]
	jz  .i3310_last_mno
	jmp .i3310_mno_vdw
.i3310_last_mno:	
	;# get group index for i particle 
	mov   edx, [ebp + i3310_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3310_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3310_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3310_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i3310_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3310_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3310_nri]
	dec ecx
	jecxz .i3310_end
	;# not last, iterate once more!  
	mov [ebp + i3310_nri], ecx
	jmp .i3310_outer
.i3310_end:
	emms
	mov eax, [esp + i3310_salign]
	add esp, eax
	add esp, 380
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl inl3320_sse
.globl _inl3320_sse
inl3320_sse:	
_inl3320_sse:	
.equiv		i3320_nri,			8
.equiv		i3320_iinr,			12
.equiv		i3320_jindex,		16
.equiv		i3320_jjnr,			20
.equiv		i3320_shift,		24
.equiv		i3320_shiftvec,		28
.equiv		i3320_fshift,		32
.equiv		i3320_gid,			36
.equiv		i3320_pos,			40		
.equiv		i3320_faction,		44
.equiv		i3320_charge,		48
.equiv		i3320_facel,		52
.equiv		i3320_Vc,			56			
.equiv		i3320_type,			60
.equiv		i3320_ntype,		64
.equiv		i3320_nbfp,			68	
.equiv		i3320_Vnb,			72	
.equiv		i3320_tabscale,		76	
.equiv		i3320_VFtab,		80	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3320_ixO,			0
.equiv		i3320_iyO,			16
.equiv		i3320_izO,			32
.equiv		i3320_ixH1,			48
.equiv		i3320_iyH1,			64
.equiv		i3320_izH1,			80
.equiv		i3320_ixH2,			96
.equiv		i3320_iyH2,			112
.equiv		i3320_izH2,			128
.equiv		i3320_iqO,			144 
.equiv		i3320_iqH,			160 
.equiv		i3320_dxO,			176
.equiv		i3320_dyO,			192
.equiv		i3320_dzO,			208	
.equiv		i3320_dxH1,			224
.equiv		i3320_dyH1,			240
.equiv		i3320_dzH1,			256	
.equiv		i3320_dxH2,			272
.equiv		i3320_dyH2,			288
.equiv		i3320_dzH2,			304	
.equiv		i3320_qqO,			320
.equiv		i3320_qqH,			336
.equiv		i3320_rinvO,		352
.equiv		i3320_rinvH1,		368
.equiv		i3320_rinvH2,		384		
.equiv		i3320_rO,			400
.equiv		i3320_rH1,			416
.equiv		i3320_rH2,			432
.equiv		i3320_tsc,			448	
.equiv		i3320_two,			464
.equiv		i3320_c6,			480
.equiv		i3320_c12,			496
.equiv		i3320_vctot,		512
.equiv		i3320_vnbtot,		528
.equiv		i3320_fixO,			544
.equiv		i3320_fiyO,			560
.equiv		i3320_fizO,			576
.equiv		i3320_fixH1,		592
.equiv		i3320_fiyH1,		608
.equiv		i3320_fizH1,		624
.equiv		i3320_fixH2,		640
.equiv		i3320_fiyH2,		656
.equiv		i3320_fizH2,		672
.equiv		i3320_fjx,			688
.equiv		i3320_fjy,			704
.equiv		i3320_fjz,			720
.equiv		i3320_half,			736
.equiv		i3320_three,		752
.equiv		i3320_is3,			768
.equiv		i3320_ii3,			772
.equiv		i3320_ntia,			776	
.equiv		i3320_innerjjnr,	780
.equiv		i3320_innerk,		784
.equiv		i3320_salign,		788								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 792		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3320_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + i3320_tabscale]
	
	movaps [esp + i3320_half],  xmm0
	movaps [esp + i3320_two],  xmm1
	movaps [esp + i3320_three],  xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + i3320_tsc], xmm3
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3320_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3320_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + i3320_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + i3320_iqO], xmm3
	movaps [esp + i3320_iqH], xmm4
	
	mov   edx, [ebp + i3320_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + i3320_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + i3320_ntia], ecx		
.i3320_outer:
	mov   eax, [ebp + i3320_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3320_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3320_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3320_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i3320_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3320_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3320_pos]    ;# eax = base of pos[]  
	mov   [esp + i3320_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3320_ixO], xmm3
	movaps [esp + i3320_iyO], xmm4
	movaps [esp + i3320_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3320_ixH1], xmm0
	movaps [esp + i3320_iyH1], xmm1
	movaps [esp + i3320_izH1], xmm2
	movaps [esp + i3320_ixH2], xmm3
	movaps [esp + i3320_iyH2], xmm4
	movaps [esp + i3320_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i3320_vctot], xmm4
	movaps [esp + i3320_vnbtot], xmm4
	movaps [esp + i3320_fixO], xmm4
	movaps [esp + i3320_fiyO], xmm4
	movaps [esp + i3320_fizO], xmm4
	movaps [esp + i3320_fixH1], xmm4
	movaps [esp + i3320_fiyH1], xmm4
	movaps [esp + i3320_fizH1], xmm4
	movaps [esp + i3320_fixH2], xmm4
	movaps [esp + i3320_fiyH2], xmm4
	movaps [esp + i3320_fizH2], xmm4
	
	mov   eax, [ebp + i3320_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3320_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3320_pos]
	mov   edi, [ebp + i3320_faction]	
	mov   eax, [ebp + i3320_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3320_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i3320_innerk], edx    ;# number of innerloop atoms 
	jge   .i3320_unroll_loop
	jmp   .i3320_odd_inner
.i3320_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3320_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + i3320_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3320_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + i3320_iqO]
	mulps  xmm4, [esp + i3320_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx

	movaps  [esp + i3320_qqO], xmm3
	movaps  [esp + i3320_qqH], xmm4
	
	mov esi, [ebp + i3320_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + i3320_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + i3320_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + i3320_c6], xmm4
	movaps [esp + i3320_c12], xmm6

	mov esi, [ebp + i3320_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + i3320_ixO]
	movaps xmm5, [esp + i3320_iyO]
	movaps xmm6, [esp + i3320_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3320_dxO], xmm4
	movaps [esp + i3320_dyO], xmm5
	movaps [esp + i3320_dzO], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + i3320_ixH1]
	movaps xmm5, [esp + i3320_iyH1]
	movaps xmm6, [esp + i3320_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# store dr 
	movaps [esp + i3320_dxH1], xmm4
	movaps [esp + i3320_dyH1], xmm5
	movaps [esp + i3320_dzH1], xmm6
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + i3320_ixH2]
	movaps xmm4, [esp + i3320_iyH2]
	movaps xmm5, [esp + i3320_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# store dr 
	movaps [esp + i3320_dxH2], xmm3
	movaps [esp + i3320_dyH2], xmm4
	movaps [esp + i3320_dzH2], xmm5
	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - seed to xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i3320_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i3320_half]
	movaps  [esp + i3320_rinvO], xmm4	;# rinvO in xmm4 
	mulps   xmm7, xmm4
	movaps  [esp + i3320_rO], xmm7	

	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i3320_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i3320_half]
	movaps  [esp + i3320_rinvH1], xmm4	;# rinvH1 in xmm4 
	mulps   xmm6, xmm4
	movaps  [esp + i3320_rH1], xmm6

	;# rsqH2 - seed to xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + i3320_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + i3320_half]
	movaps  [esp + i3320_rinvH2], xmm4	;# rinvH2 in xmm4 
	mulps   xmm5, xmm4
	movaps  [esp + i3320_rH2], xmm5

	;# do O interactions 
	;# rO is still in xmm7 
	mulps   xmm7, [esp + i3320_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3

	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd mm0, eax   
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + i3320_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3320_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3320_qqO]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm0, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + i3320_vctot]
    movaps [esp + i3320_vctot], xmm5 

    ;# dispersion 
    movlps xmm5, [esi + eax*4 + 16]
    movlps xmm7, [esi + ecx*4 + 16]
    movhps xmm5, [esi + ebx*4 + 16]
    movhps xmm7, [esi + edx*4 + 16] ;# got half dispersion table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101
        
    movlps xmm7, [esi + eax*4 + 24]
    movlps xmm3, [esi + ecx*4 + 24]
    movhps xmm7, [esi + ebx*4 + 24]
    movhps xmm3, [esi + edx*4 + 24] ;# other half of dispersion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# dispersion table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3320_two]       ;# two*Heps2 
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 

    movaps xmm4, [esp + i3320_c6]
    mulps  xmm7, xmm4    ;# fijD 
    mulps  xmm5, xmm4    ;# vnb6 
    addps  xmm0, xmm7 ;# add to fscal 

    ;# Update vnbtot directly 
    addps  xmm5, [esp + i3320_vnbtot]
    movaps [esp + i3320_vnbtot], xmm5

    ;# repulsion 
    movlps xmm5, [esi + eax*4 + 32]
    movlps xmm7, [esi + ecx*4 + 32]
    movhps xmm5, [esi + ebx*4 + 32]
    movhps xmm7, [esi + edx*4 + 32] ;# got half repulsion table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 40]
    movlps xmm3, [esi + ecx*4 + 40]
    movhps xmm7, [esi + ebx*4 + 40]
    movhps xmm3, [esi + edx*4 + 40] ;# other half of repulsion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# repulsion table ready, in xmm4-xmm7 	
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3320_two]       ;# two*Heps2 
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 

    movaps xmm4, [esp + i3320_c12]
    mulps  xmm7, xmm4    ;# fijD 
    mulps  xmm5, xmm4    ;# vnb12 
    addps  xmm7, xmm0 ;# add to fscal 
    addps  xmm5, [esp + i3320_vnbtot] ;# total nonbonded potential in xmm5 
	xorps xmm4, xmm4
	
	mulps  xmm7, [esp + i3320_rinvO] ;# total fscal now in xmm7 

	mulps  xmm7, [esp + i3320_tsc]
    movaps [esp + i3320_vnbtot], xmm5
	subps  xmm4, xmm7

	movaps xmm0, [esp + i3320_dxO]
	movaps xmm1, [esp + i3320_dyO]
	movaps xmm2, [esp + i3320_dzO]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4	;# tx in xmm0-xmm2 

	;# update O forces 
	movaps xmm3, [esp + i3320_fixO]
	movaps xmm4, [esp + i3320_fiyO]
	movaps xmm7, [esp + i3320_fizO]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i3320_fixO], xmm3
	movaps [esp + i3320_fiyO], xmm4
	movaps [esp + i3320_fizO], xmm7
	;# update j forces with water O 
	movaps [esp + i3320_fjx], xmm0
	movaps [esp + i3320_fjy], xmm1
	movaps [esp + i3320_fjz], xmm2

	;# Done with O interactions - now H1! 
	movaps xmm7, [esp + i3320_rH1]
	mulps   xmm7, [esp + i3320_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3320_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3320_qqH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm7, xmm0 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm7 fijC 
    ;# increment vcoul 
	xorps  xmm4, xmm4
    addps  xmm5, [esp + i3320_vctot]
	mulps  xmm7, [esp + i3320_rinvH1]
    movaps [esp + i3320_vctot], xmm5 
	mulps  xmm7, [esp + i3320_tsc]
	subps xmm4, xmm7

	movaps xmm0, [esp + i3320_dxH1]
	movaps xmm1, [esp + i3320_dyH1]
	movaps xmm2, [esp + i3320_dzH1]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

	;# update H1 forces 
	movaps xmm3, [esp + i3320_fixH1]
	movaps xmm4, [esp + i3320_fiyH1]
	movaps xmm7, [esp + i3320_fizH1]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i3320_fixH1], xmm3
	movaps [esp + i3320_fiyH1], xmm4
	movaps [esp + i3320_fizH1], xmm7
	;# update j forces with water H1 
	addps  xmm0, [esp + i3320_fjx]
	addps  xmm1, [esp + i3320_fjy]
	addps  xmm2, [esp + i3320_fjz]
	movaps [esp + i3320_fjx], xmm0
	movaps [esp + i3320_fjy], xmm1
	movaps [esp + i3320_fjz], xmm2

	;# Done with H1, finally we do H2 interactions 
	movaps xmm7, [esp + i3320_rH2]
	mulps   xmm7, [esp + i3320_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3320_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3320_qqH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm7, xmm0 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul 
	xorps  xmm4, xmm4
    addps  xmm5, [esp + i3320_vctot]
	mulps  xmm7, [esp + i3320_rinvH2]
    movaps [esp + i3320_vctot], xmm5 
	mulps  xmm7, [esp + i3320_tsc]
	subps  xmm4, xmm7

	movaps xmm0, [esp + i3320_dxH2]
	movaps xmm1, [esp + i3320_dyH2]
	movaps xmm2, [esp + i3320_dzH2]
	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4

    movd eax, mm0   
    movd ebx, mm1
    movd ecx, mm2
    movd edx, mm3
	
	;# update H2 forces 
	movaps xmm3, [esp + i3320_fixH2]
	movaps xmm4, [esp + i3320_fiyH2]
	movaps xmm7, [esp + i3320_fizH2]
	addps  xmm3, xmm0
	addps  xmm4, xmm1
	addps  xmm7, xmm2
	movaps [esp + i3320_fixH2], xmm3
	movaps [esp + i3320_fiyH2], xmm4
	movaps [esp + i3320_fizH2], xmm7

	mov edi, [ebp + i3320_faction]
	;# update j forces 
	addps xmm0, [esp + i3320_fjx]
	addps xmm1, [esp + i3320_fjy]
	addps xmm2, [esp + i3320_fjz]

	movlps xmm4, [edi + eax*4]
	movlps xmm7, [edi + ecx*4]
	movhps xmm4, [edi + ebx*4]
	movhps xmm7, [edi + edx*4]
	
	movaps xmm3, xmm4
	shufps xmm3, xmm7, 136  ;# 10001000
	shufps xmm4, xmm7, 221  ;# 11011101			      
	;# xmm3 has fjx, xmm4 has fjy 
	subps xmm3, xmm0
	subps xmm4, xmm1
	;# unpack them back for storing 
	movaps xmm7, xmm3
	unpcklps xmm7, xmm4
	unpckhps xmm3, xmm4	
	movlps [edi + eax*4], xmm7
	movlps [edi + ecx*4], xmm3
	movhps [edi + ebx*4], xmm7
	movhps [edi + edx*4], xmm3
	;# finally z forces 
	movss  xmm0, [edi + eax*4 + 8]
	movss  xmm1, [edi + ebx*4 + 8]
	movss  xmm3, [edi + ecx*4 + 8]
	movss  xmm4, [edi + edx*4 + 8]
	subss  xmm0, xmm2
	shufps xmm2, xmm2, 229  ;# 11100101
	subss  xmm1, xmm2
	shufps xmm2, xmm2, 234  ;# 11101010
	subss  xmm3, xmm2
	shufps xmm2, xmm2, 255  ;# 11111111
	subss  xmm4, xmm2
	movss  [edi + eax*4 + 8], xmm0
	movss  [edi + ebx*4 + 8], xmm1
	movss  [edi + ecx*4 + 8], xmm3
	movss  [edi + edx*4 + 8], xmm4
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3320_innerk],  4
	jl    .i3320_odd_inner
	jmp   .i3320_unroll_loop
.i3320_odd_inner:	
	add dword ptr [esp + i3320_innerk],  4
	jnz   .i3320_odd_loop
	jmp   .i3320_updateouterdata
.i3320_odd_loop:
	mov   edx, [esp + i3320_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i3320_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + i3320_iqO]
	mov esi, [ebp + i3320_charge] 
	movhps xmm4, [esp + i3320_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + i3320_qqO], xmm3	;# use oxygen qq for storage 

	xorps xmm6, xmm6
	mov esi, [ebp + i3320_type]
	mov ebx, [esi + eax*4]
	mov esi, [ebp + i3320_nbfp]
	shl ebx, 1	
	add ebx, [esp + i3320_ntia]
	movlps xmm6, [esi + ebx*4]
	movaps xmm7, xmm6
	shufps xmm6, xmm6, 252  ;# 11111100
	shufps xmm7, xmm7, 253  ;# 11111101
	movaps [esp + i3320_c6], xmm6
	movaps [esp + i3320_c12], xmm7

	mov esi, [ebp + i3320_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + i3320_ixO]
	movss xmm4, [esp + i3320_iyO]
	movss xmm5, [esp + i3320_izO]
		
	movlps xmm6, [esp + i3320_ixH1]
	movlps xmm7, [esp + i3320_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + i3320_iyH1]
	movlps xmm7, [esp + i3320_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + i3320_izH1]
	movlps xmm7, [esp + i3320_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	
	movaps [esp + i3320_dxO], xmm3
	movaps [esp + i3320_dyO], xmm4
	movaps [esp + i3320_dzO], xmm5

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + i3320_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + i3320_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000	
	
	mulps xmm4, xmm0	;# xmm4=r 
	movaps [esp + i3320_rinvO], xmm0
	
	mulps xmm4, [esp + i3320_tsc]
	movhlps xmm7, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm7    ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm7, mm7
    movlhps xmm3, xmm7

	subps   xmm4, xmm3	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
	
    movd mm0, eax   
    movd mm1, ecx
    movd mm2, edx

    mov  esi, [ebp + i3320_VFtab]
    movd eax, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]
	
    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm7, [esp + i3320_two]       ;# two*Heps2 
    movaps xmm0, [esp + i3320_qqO]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    mulps  xmm0, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and xmm0 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + i3320_vctot]
    movaps [esp + i3320_vctot], xmm5
	
    ;# dispersion 
    movlps xmm5, [esi + eax*4 + 16]	;# half table 
    movaps xmm4, xmm5
    shufps xmm4, xmm4, 252  ;# 11111100
    shufps xmm5, xmm5, 253  ;# 11111101
        
    movlps xmm7, [esi + eax*4 + 24] ;# other half of dispersion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm6, 252  ;# 11111100
    shufps xmm7, xmm7, 253  ;# 11111101
    ;# dispersion table ready, in xmm4-xmm7  
    mulss  xmm6, xmm1       ;# xmm6=Geps 
    mulss  xmm7, xmm2       ;# xmm7=Heps2 
    addss  xmm5, xmm6	;# Update vnbtot directly 
    addss  xmm5, xmm7       ;# xmm5=Fp        
    mulss  xmm7, [esp + i3320_two]       ;# two*Heps2 
    addss  xmm7, xmm6
    addss  xmm7, xmm5 ;# xmm7=FF 
    mulss  xmm5, xmm1 ;# xmm5=eps*Fp 
    addss  xmm5, xmm4 ;# xmm5=VV 

    movaps xmm4, [esp + i3320_c6]
    mulps  xmm7, xmm4    ;# fijD 
    mulps  xmm5, xmm4    ;# vnb6 
    addps  xmm0, xmm7 ;# add to fscal 

    ;# Update vnbtot directly 
    addps  xmm5, [esp + i3320_vnbtot]
    movaps [esp + i3320_vnbtot], xmm5

    ;# repulsion 
    movlps xmm5, [esi + eax*4 + 32] ;# got half repulsion table 
    movaps xmm4, xmm5
    shufps xmm4, xmm4, 136  ;# 10001000
    shufps xmm5, xmm5, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 40] ;# other half of repulsion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm6, 136  ;# 10001000
    shufps xmm7, xmm7, 221  ;# 11011101
    ;# repulsion table ready, in xmm4-xmm7 	
    mulss  xmm6, xmm1       ;# xmm6=Geps 
    mulss  xmm7, xmm2       ;# xmm7=Heps2 
    addss  xmm5, xmm6
    addss  xmm5, xmm7       ;# xmm5=Fp        
    mulss  xmm7, [esp + i3320_two]       ;# two*Heps2 
    addss  xmm7, xmm6
    addss  xmm7, xmm5 ;# xmm7=FF 
    mulss  xmm5, xmm1 ;# xmm5=eps*Fp 
    addss  xmm5, xmm4 ;# xmm5=VV 

    movaps xmm4, [esp + i3320_c12]
    mulps  xmm7, xmm4    ;# fijD 
    mulps  xmm5, xmm4    ;# vnb12 
    addps  xmm7, xmm0 ;# add to fscal 
    addps  xmm5, [esp + i3320_vnbtot] ;# total nonbonded potential in xmm5 

	xorps  xmm4, xmm4
    movd eax, mm0   
    movd ecx, mm1
    movd edx, mm2	
		
	mulps  xmm7, [esp + i3320_rinvO] ;# total fscal now in xmm7 
    movaps [esp + i3320_vnbtot], xmm5
	mulps  xmm7, [esp + i3320_tsc]
	subps xmm4, xmm7

	movaps xmm0, [esp + i3320_dxO]
	movaps xmm1, [esp + i3320_dyO]
	movaps xmm2, [esp + i3320_dzO]

	mulps  xmm0, xmm4
	mulps  xmm1, xmm4
	mulps  xmm2, xmm4 ;# xmm0-xmm2 now contains tx-tz (partial force) 
	movss  xmm3, [esp + i3320_fixO]	
	movss  xmm4, [esp + i3320_fiyO]	
	movss  xmm5, [esp + i3320_fizO]	
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [esp + i3320_fixO], xmm3	
	movss  [esp + i3320_fiyO], xmm4	
	movss  [esp + i3320_fizO], xmm5	;# updated the O force now do the H's 
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	shufps xmm3, xmm3, 230 ;# 11100110	;# shift right 
	shufps xmm4, xmm4, 230 ;# 11100110
	shufps xmm5, xmm5, 230 ;# 11100110
	addss  xmm3, [esp + i3320_fixH1]
	addss  xmm4, [esp + i3320_fiyH1]
	addss  xmm5, [esp + i3320_fizH1]
	movss  [esp + i3320_fixH1], xmm3	
	movss  [esp + i3320_fiyH1], xmm4	
	movss  [esp + i3320_fizH1], xmm5	;# updated the H1 force 

	mov edi, [ebp + i3320_faction]
	shufps xmm3, xmm3, 231 ;# 11100111	;# shift right 
	shufps xmm4, xmm4, 231 ;# 11100111
	shufps xmm5, xmm5, 231 ;# 11100111
	addss  xmm3, [esp + i3320_fixH2]
	addss  xmm4, [esp + i3320_fiyH2]
	addss  xmm5, [esp + i3320_fizH2]
	movss  [esp + i3320_fixH2], xmm3	
	movss  [esp + i3320_fiyH2], xmm4	
	movss  [esp + i3320_fizH2], xmm5	;# updated the H2 force 

	;# the fj's - start by accumulating the tx/ty/tz force in xmm0, xmm1 
	xorps  xmm5, xmm5
	movaps xmm3, xmm0
	movlps xmm6, [edi + eax*4]
	movss  xmm7, [edi + eax*4 + 8]
	unpcklps xmm3, xmm1
	movlhps  xmm3, xmm5	
	unpckhps xmm0, xmm1		
	addps    xmm0, xmm3
	movhlps  xmm3, xmm0	
	addps    xmm0, xmm3	;# x,y sum in xmm0 

	movhlps  xmm1, xmm2
	addss    xmm2, xmm1
	shufps   xmm1, xmm1, 1 
	addss    xmm2, xmm1    ;# z sum in xmm2 
	subps    xmm6, xmm0
	subss    xmm7, xmm2
	
	movlps [edi + eax*4],     xmm6
	movss  [edi + eax*4 + 8], xmm7

	dec dword ptr [esp + i3320_innerk]
	jz    .i3320_updateouterdata
	jmp   .i3320_odd_loop
.i3320_updateouterdata:
	mov   ecx, [esp + i3320_ii3]
	mov   edi, [ebp + i3320_faction]
	mov   esi, [ebp + i3320_fshift]
	mov   edx, [esp + i3320_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3320_fixO]
	movaps xmm1, [esp + i3320_fiyO]
	movaps xmm2, [esp + i3320_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3320_fixH1]
	movaps xmm1, [esp + i3320_fiyH1]
	movaps xmm2, [esp + i3320_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3320_fixH2]
	movaps xmm1, [esp + i3320_fiyH2]
	movaps xmm2, [esp + i3320_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	mov   edx, [ebp + i3320_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + i3320_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3320_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + i3320_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i3320_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3320_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3320_nri]
	dec ecx
	jecxz .i3320_end
	;# not last, iterate once more!  
	mov [ebp + i3320_nri], ecx
	jmp .i3320_outer
.i3320_end:
	emms
	mov eax, [esp + i3320_salign]
	add esp, eax
	add esp, 792
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

	
.globl inl3330_sse
.globl _inl3330_sse
inl3330_sse:	
_inl3330_sse:	
.equiv		i3330_nri,			8
.equiv		i3330_iinr,			12
.equiv		i3330_jindex,		16
.equiv		i3330_jjnr,			20
.equiv		i3330_shift,		24
.equiv		i3330_shiftvec,		28
.equiv		i3330_fshift,		32
.equiv		i3330_gid,			36
.equiv		i3330_pos,			40		
.equiv		i3330_faction,		44
.equiv		i3330_charge,		48
.equiv		i3330_facel,		52
.equiv		i3330_Vc,			56
.equiv		i3330_type,			60
.equiv		i3330_ntype,		64
.equiv		i3330_nbfp,			68	
.equiv		i3330_Vnb,			72
.equiv		i3330_tabscale,		76
.equiv		i3330_VFtab,		80
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		i3330_ixO,			0
.equiv		i3330_iyO,			16
.equiv		i3330_izO,			32
.equiv		i3330_ixH1,			48
.equiv		i3330_iyH1,			64
.equiv		i3330_izH1,			80
.equiv		i3330_ixH2,			96
.equiv		i3330_iyH2,			112
.equiv		i3330_izH2,			128
.equiv		i3330_jxO,			144
.equiv		i3330_jyO,			160
.equiv		i3330_jzO,			176
.equiv		i3330_jxH1,			192
.equiv		i3330_jyH1,			208
.equiv		i3330_jzH1,			224
.equiv		i3330_jxH2,			240
.equiv		i3330_jyH2,			256
.equiv		i3330_jzH2,			272
.equiv		i3330_dxOO,			288
.equiv		i3330_dyOO,			304
.equiv		i3330_dzOO,			320	
.equiv		i3330_dxOH1,		336
.equiv		i3330_dyOH1,		352
.equiv		i3330_dzOH1,		368	
.equiv		i3330_dxOH2,		384
.equiv		i3330_dyOH2,		400
.equiv		i3330_dzOH2,		416	
.equiv		i3330_dxH1O,		432
.equiv		i3330_dyH1O,		448
.equiv		i3330_dzH1O,		464	
.equiv		i3330_dxH1H1,		480
.equiv		i3330_dyH1H1,		496
.equiv		i3330_dzH1H1,		512	
.equiv		i3330_dxH1H2,		528
.equiv		i3330_dyH1H2,		544
.equiv		i3330_dzH1H2,		560	
.equiv		i3330_dxH2O,		576
.equiv		i3330_dyH2O,		592
.equiv		i3330_dzH2O,		608	
.equiv		i3330_dxH2H1,		624
.equiv		i3330_dyH2H1,		640
.equiv		i3330_dzH2H1,		656	
.equiv		i3330_dxH2H2,		672
.equiv		i3330_dyH2H2,		688
.equiv		i3330_dzH2H2,		704
.equiv		i3330_qqOO,			720
.equiv		i3330_qqOH,			736
.equiv		i3330_qqHH,			752
.equiv		i3330_two,			768
.equiv		i3330_tsc,			784
.equiv		i3330_c6,			800
.equiv		i3330_c12,			816		 
.equiv		i3330_vctot,		832
.equiv		i3330_vnbtot,		848
.equiv		i3330_fixO,			864
.equiv		i3330_fiyO,			880
.equiv		i3330_fizO,			896
.equiv		i3330_fixH1,		912
.equiv		i3330_fiyH1,		928
.equiv		i3330_fizH1,		944
.equiv		i3330_fixH2,		960
.equiv		i3330_fiyH2,		976
.equiv		i3330_fizH2,		992
.equiv		i3330_fjxO,			1008
.equiv		i3330_fjyO,			1024
.equiv		i3330_fjzO,			1040
.equiv		i3330_fjxH1,		1056
.equiv		i3330_fjyH1,		1072
.equiv		i3330_fjzH1,		1088
.equiv		i3330_fjxH2,		1104
.equiv		i3330_fjyH2,		1120
.equiv		i3330_fjzH2,		1136
.equiv		i3330_half,			1152
.equiv		i3330_three,		1168
.equiv		i3330_rsqOO,		1184
.equiv		i3330_rsqOH1,		1200
.equiv		i3330_rsqOH2,		1216
.equiv		i3330_rsqH1O,		1232
.equiv		i3330_rsqH1H1,		1248
.equiv		i3330_rsqH1H2,		1264
.equiv		i3330_rsqH2O,		1280
.equiv		i3330_rsqH2H1,		1296
.equiv		i3330_rsqH2H2,		1312
.equiv		i3330_rinvOO,		1328
.equiv		i3330_rinvOH1,		1344
.equiv		i3330_rinvOH2,		1360
.equiv		i3330_rinvH1O,		1376
.equiv		i3330_rinvH1H1,		1392
.equiv		i3330_rinvH1H2,		1408
.equiv		i3330_rinvH2O,		1424
.equiv		i3330_rinvH2H1,		1440
.equiv		i3330_rinvH2H2,		1456
.equiv		i3330_fstmp,		1472	
.equiv		i3330_is3,			1488
.equiv		i3330_ii3,			1492
.equiv		i3330_innerjjnr,	1496
.equiv		i3330_innerk,		1500
.equiv		i3330_salign,		1504							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 1508		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + i3330_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + i3330_tabscale]
	movaps [esp + i3330_half],  xmm0
	movaps [esp + i3330_two],  xmm1
	movaps [esp + i3330_three], xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + i3330_tsc],  xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + i3330_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + i3330_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + i3330_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3330_qqOO], xmm3
	movaps [esp + i3330_qqOH], xmm4
	movaps [esp + i3330_qqHH], xmm5
		
	xorps xmm0, xmm0
	mov   edx, [ebp + i3330_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + i3330_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + i3330_nbfp]
	movlps xmm0, [eax + edx*4] 
	movaps xmm1, xmm0
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 85  ;# 01010101
	movaps [esp + i3330_c6], xmm0
	movaps [esp + i3330_c12], xmm1

.i3330_outer:
	mov   eax, [ebp + i3330_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + i3330_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + i3330_is3],ebx    	;# store is3 

	mov   eax, [ebp + i3330_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + i3330_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + i3330_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + i3330_pos]    ;# eax = base of pos[]  
	mov   [esp + i3330_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3330_ixO], xmm3
	movaps [esp + i3330_iyO], xmm4
	movaps [esp + i3330_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + i3330_ixH1], xmm0
	movaps [esp + i3330_iyH1], xmm1
	movaps [esp + i3330_izH1], xmm2
	movaps [esp + i3330_ixH2], xmm3
	movaps [esp + i3330_iyH2], xmm4
	movaps [esp + i3330_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + i3330_vctot], xmm4
	movaps [esp + i3330_vnbtot], xmm4
	movaps [esp + i3330_fixO], xmm4
	movaps [esp + i3330_fiyO], xmm4
	movaps [esp + i3330_fizO], xmm4
	movaps [esp + i3330_fixH1], xmm4
	movaps [esp + i3330_fiyH1], xmm4
	movaps [esp + i3330_fizH1], xmm4
	movaps [esp + i3330_fixH2], xmm4
	movaps [esp + i3330_fiyH2], xmm4
	movaps [esp + i3330_fizH2], xmm4
	
	mov   eax, [ebp + i3330_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + i3330_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + i3330_pos]
	mov   edi, [ebp + i3330_faction]	
	mov   eax, [ebp + i3330_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + i3330_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + i3330_innerk], edx    ;# number of innerloop atoms 
	jge   .i3330_unroll_loop
	jmp   .i3330_single_check
.i3330_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + i3330_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + i3330_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + i3330_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d  
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd  
	movaps [esp + i3330_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + i3330_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + i3330_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + i3330_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + i3330_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + i3330_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + i3330_jzO],  xmm0
	movaps [esp + i3330_jzH1],  xmm1
	movaps [esp + i3330_jzH2],  xmm2

	movaps xmm0, [esp + i3330_ixO]
	movaps xmm1, [esp + i3330_iyO]
	movaps xmm2, [esp + i3330_izO]
	movaps xmm3, [esp + i3330_ixO]
	movaps xmm4, [esp + i3330_iyO]
	movaps xmm5, [esp + i3330_izO]
	subps  xmm0, [esp + i3330_jxO]
	subps  xmm1, [esp + i3330_jyO]
	subps  xmm2, [esp + i3330_jzO]
	subps  xmm3, [esp + i3330_jxH1]
	subps  xmm4, [esp + i3330_jyH1]
	subps  xmm5, [esp + i3330_jzH1]
	movaps [esp + i3330_dxOO], xmm0
	movaps [esp + i3330_dyOO], xmm1
	movaps [esp + i3330_dzOO], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3330_dxOH1], xmm3
	movaps [esp + i3330_dyOH1], xmm4
	movaps [esp + i3330_dzOH1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i3330_rsqOO], xmm0
	movaps [esp + i3330_rsqOH1], xmm3

	movaps xmm0, [esp + i3330_ixO]
	movaps xmm1, [esp + i3330_iyO]
	movaps xmm2, [esp + i3330_izO]
	movaps xmm3, [esp + i3330_ixH1]
	movaps xmm4, [esp + i3330_iyH1]
	movaps xmm5, [esp + i3330_izH1]
	subps  xmm0, [esp + i3330_jxH2]
	subps  xmm1, [esp + i3330_jyH2]
	subps  xmm2, [esp + i3330_jzH2]
	subps  xmm3, [esp + i3330_jxO]
	subps  xmm4, [esp + i3330_jyO]
	subps  xmm5, [esp + i3330_jzO]
	movaps [esp + i3330_dxOH2], xmm0
	movaps [esp + i3330_dyOH2], xmm1
	movaps [esp + i3330_dzOH2], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3330_dxH1O], xmm3
	movaps [esp + i3330_dyH1O], xmm4
	movaps [esp + i3330_dzH1O], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i3330_rsqOH2], xmm0
	movaps [esp + i3330_rsqH1O], xmm3

	movaps xmm0, [esp + i3330_ixH1]
	movaps xmm1, [esp + i3330_iyH1]
	movaps xmm2, [esp + i3330_izH1]
	movaps xmm3, [esp + i3330_ixH1]
	movaps xmm4, [esp + i3330_iyH1]
	movaps xmm5, [esp + i3330_izH1]
	subps  xmm0, [esp + i3330_jxH1]
	subps  xmm1, [esp + i3330_jyH1]
	subps  xmm2, [esp + i3330_jzH1]
	subps  xmm3, [esp + i3330_jxH2]
	subps  xmm4, [esp + i3330_jyH2]
	subps  xmm5, [esp + i3330_jzH2]
	movaps [esp + i3330_dxH1H1], xmm0
	movaps [esp + i3330_dyH1H1], xmm1
	movaps [esp + i3330_dzH1H1], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3330_dxH1H2], xmm3
	movaps [esp + i3330_dyH1H2], xmm4
	movaps [esp + i3330_dzH1H2], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + i3330_rsqH1H1], xmm0
	movaps [esp + i3330_rsqH1H2], xmm3

	movaps xmm0, [esp + i3330_ixH2]
	movaps xmm1, [esp + i3330_iyH2]
	movaps xmm2, [esp + i3330_izH2]
	movaps xmm3, [esp + i3330_ixH2]
	movaps xmm4, [esp + i3330_iyH2]
	movaps xmm5, [esp + i3330_izH2]
	subps  xmm0, [esp + i3330_jxO]
	subps  xmm1, [esp + i3330_jyO]
	subps  xmm2, [esp + i3330_jzO]
	subps  xmm3, [esp + i3330_jxH1]
	subps  xmm4, [esp + i3330_jyH1]
	subps  xmm5, [esp + i3330_jzH1]
	movaps [esp + i3330_dxH2O], xmm0
	movaps [esp + i3330_dyH2O], xmm1
	movaps [esp + i3330_dzH2O], xmm2
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	movaps [esp + i3330_dxH2H1], xmm3
	movaps [esp + i3330_dyH2H1], xmm4
	movaps [esp + i3330_dzH2H1], xmm5
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + i3330_rsqH2O], xmm0
	movaps [esp + i3330_rsqH2H1], xmm4

	movaps xmm0, [esp + i3330_ixH2]
	movaps xmm1, [esp + i3330_iyH2]
	movaps xmm2, [esp + i3330_izH2]
	subps  xmm0, [esp + i3330_jxH2]
	subps  xmm1, [esp + i3330_jyH2]
	subps  xmm2, [esp + i3330_jzH2]
	movaps [esp + i3330_dxH2H2], xmm0
	movaps [esp + i3330_dyH2H2], xmm1
	movaps [esp + i3330_dzH2H2], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + i3330_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3330_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3330_half] ;# rinvH2H2 
	mulps   xmm7, [esp + i3330_half] ;# rinvH2H1 
	movaps  [esp + i3330_rinvH2H2], xmm3
	movaps  [esp + i3330_rinvH2H1], xmm7
		
	rsqrtps xmm1, [esp + i3330_rsqOO]
	rsqrtps xmm5, [esp + i3330_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3330_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i3330_rsqOO]
	mulps   xmm5, [esp + i3330_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3330_half] 
	mulps   xmm7, [esp + i3330_half]
	movaps  [esp + i3330_rinvOO], xmm3
	movaps  [esp + i3330_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + i3330_rsqOH2]
	rsqrtps xmm5, [esp + i3330_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3330_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i3330_rsqOH2]
	mulps   xmm5, [esp + i3330_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3330_half] 
	mulps   xmm7, [esp + i3330_half]
	movaps  [esp + i3330_rinvOH2], xmm3
	movaps  [esp + i3330_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + i3330_rsqH1H1]
	rsqrtps xmm5, [esp + i3330_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3330_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + i3330_rsqH1H1]
	mulps   xmm5, [esp + i3330_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3330_half] 
	mulps   xmm7, [esp + i3330_half]
	movaps  [esp + i3330_rinvH1H1], xmm3
	movaps  [esp + i3330_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + i3330_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i3330_three]
	mulps   xmm1, [esp + i3330_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + i3330_half] 
	movaps  [esp + i3330_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + i3330_rinvOO]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3330_rsqOO] ;# xmm1=r 
	mulps  xmm1, [esp + i3330_tsc]
		
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
	
    movd mm0, eax
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + i3330_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3330_qqOO]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5 

    ;# put scalar force on stack temporarily 
    movaps [esp + i3330_fstmp], xmm3

    ;# dispersion 
    movlps xmm5, [esi + eax*4 + 16]
    movlps xmm7, [esi + ecx*4 + 16]
    movhps xmm5, [esi + ebx*4 + 16]
    movhps xmm7, [esi + edx*4 + 16] ;# got half dispersion table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 24]
    movlps xmm3, [esi + ecx*4 + 24]
    movhps xmm7, [esi + ebx*4 + 24]
    movhps xmm3, [esi + edx*4 + 24] ;# other half of dispersion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# dispersion table ready, in xmm4-xmm7 
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 

    movaps xmm4, [esp + i3330_c6]
    mulps  xmm7, xmm4    ;# fijD 
    mulps  xmm5, xmm4    ;# vnb6 
    addps  xmm7, [esp + i3330_fstmp] ;# add to fscal 

    ;# put scalar force on stack Update vnbtot directly 
    addps  xmm5, [esp + i3330_vnbtot]
    movaps [esp + i3330_fstmp], xmm7
    movaps [esp + i3330_vnbtot], xmm5

    ;# repulsion 
    movlps xmm5, [esi + eax*4 + 32]
    movlps xmm7, [esi + ecx*4 + 32]
    movhps xmm5, [esi + ebx*4 + 32]
    movhps xmm7, [esi + edx*4 + 32] ;# got half repulsion table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 40]
    movlps xmm3, [esi + ecx*4 + 40]
    movhps xmm7, [esi + ebx*4 + 40]
    movhps xmm3, [esi + edx*4 + 40] ;# other half of repulsion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# table ready, in xmm4-xmm7 
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
 
    movaps xmm4, [esp + i3330_c12]
    mulps  xmm7, xmm4 ;# fijR 
    mulps  xmm5, xmm4 ;# vnb12 
    addps  xmm7, [esp + i3330_fstmp] 

    addps  xmm5, [esp + i3330_vnbtot]
    movaps [esp + i3330_vnbtot], xmm5
    xorps  xmm1, xmm1

    mulps xmm7, [esp + i3330_tsc]
    mulps xmm7, xmm0
    subps  xmm1, xmm7

	movaps xmm0, xmm1
	movaps xmm2, xmm1		

	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i3330_dxOO]
	mulps xmm1, [esp + i3330_dyOO]
	mulps xmm2, [esp + i3330_dzOO]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3330_fixO]
	addps xmm1, [esp + i3330_fiyO]
	addps xmm2, [esp + i3330_fizO]
	movaps [esp + i3330_fjxO], xmm3
	movaps [esp + i3330_fjyO], xmm4
	movaps [esp + i3330_fjzO], xmm5
	movaps [esp + i3330_fixO], xmm0
	movaps [esp + i3330_fiyO], xmm1
	movaps [esp + i3330_fizO], xmm2

	;# O-H1 interaction 
	movaps xmm0, [esp + i3330_rinvOH1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3330_rsqOH1] ;# xmm1=r 
	mulps  xmm1, [esp + i3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3330_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3330_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i3330_dxOH1]
	mulps xmm1, [esp + i3330_dyOH1]
	mulps xmm2, [esp + i3330_dzOH1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3330_fixO]
	addps xmm1, [esp + i3330_fiyO]
	addps xmm2, [esp + i3330_fizO]
	movaps [esp + i3330_fjxH1], xmm3
	movaps [esp + i3330_fjyH1], xmm4
	movaps [esp + i3330_fjzH1], xmm5
	movaps [esp + i3330_fixO], xmm0
	movaps [esp + i3330_fiyO], xmm1
	movaps [esp + i3330_fizO], xmm2

	;# O-H2 interaction  
	movaps xmm0, [esp + i3330_rinvOH2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3330_rsqOH2] ;# xmm1=r 
	mulps  xmm1, [esp + i3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3330_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3330_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	xorps xmm3, xmm3
	movaps xmm4, xmm3
	movaps xmm5, xmm3
	mulps xmm0, [esp + i3330_dxOH2]
	mulps xmm1, [esp + i3330_dyOH2]
	mulps xmm2, [esp + i3330_dzOH2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3330_fixO]
	addps xmm1, [esp + i3330_fiyO]
	addps xmm2, [esp + i3330_fizO]
	movaps [esp + i3330_fjxH2], xmm3
	movaps [esp + i3330_fjyH2], xmm4
	movaps [esp + i3330_fjzH2], xmm5
	movaps [esp + i3330_fixO], xmm0
	movaps [esp + i3330_fiyO], xmm1
	movaps [esp + i3330_fizO], xmm2

	;# H1-O interaction 
	movaps xmm0, [esp + i3330_rinvH1O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3330_rsqH1O] ;# xmm1=r 
	mulps  xmm1, [esp + i3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3330_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3330_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3330_fjxO]
	movaps xmm4, [esp + i3330_fjyO]
	movaps xmm5, [esp + i3330_fjzO]
	mulps xmm0, [esp + i3330_dxH1O]
	mulps xmm1, [esp + i3330_dyH1O]
	mulps xmm2, [esp + i3330_dzH1O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3330_fixH1]
	addps xmm1, [esp + i3330_fiyH1]
	addps xmm2, [esp + i3330_fizH1]
	movaps [esp + i3330_fjxO], xmm3
	movaps [esp + i3330_fjyO], xmm4
	movaps [esp + i3330_fjzO], xmm5
	movaps [esp + i3330_fixH1], xmm0
	movaps [esp + i3330_fiyH1], xmm1
	movaps [esp + i3330_fizH1], xmm2

	;# H1-H1 interaction 
	movaps xmm0, [esp + i3330_rinvH1H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3330_rsqH1H1] ;# xmm1=r 
	mulps  xmm1, [esp + i3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3330_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3330_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3330_fjxH1]
	movaps xmm4, [esp + i3330_fjyH1]
	movaps xmm5, [esp + i3330_fjzH1]
	mulps xmm0, [esp + i3330_dxH1H1]
	mulps xmm1, [esp + i3330_dyH1H1]
	mulps xmm2, [esp + i3330_dzH1H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3330_fixH1]
	addps xmm1, [esp + i3330_fiyH1]
	addps xmm2, [esp + i3330_fizH1]
	movaps [esp + i3330_fjxH1], xmm3
	movaps [esp + i3330_fjyH1], xmm4
	movaps [esp + i3330_fjzH1], xmm5
	movaps [esp + i3330_fixH1], xmm0
	movaps [esp + i3330_fiyH1], xmm1
	movaps [esp + i3330_fizH1], xmm2

	;# H1-H2 interaction 
	movaps xmm0, [esp + i3330_rinvH1H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3330_rsqH1H2] ;# xmm1=r 
	mulps  xmm1, [esp + i3330_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3330_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3330_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3330_fjxH2]
	movaps xmm4, [esp + i3330_fjyH2]
	movaps xmm5, [esp + i3330_fjzH2]
	mulps xmm0, [esp + i3330_dxH1H2]
	mulps xmm1, [esp + i3330_dyH1H2]
	mulps xmm2, [esp + i3330_dzH1H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3330_fixH1]
	addps xmm1, [esp + i3330_fiyH1]
	addps xmm2, [esp + i3330_fizH1]
	movaps [esp + i3330_fjxH2], xmm3
	movaps [esp + i3330_fjyH2], xmm4
	movaps [esp + i3330_fjzH2], xmm5
	movaps [esp + i3330_fixH1], xmm0
	movaps [esp + i3330_fiyH1], xmm1
	movaps [esp + i3330_fizH1], xmm2

	;# H2-O interaction 
	movaps xmm0, [esp + i3330_rinvH2O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3330_rsqH2O] ;# xmm1=r 
	mulps  xmm1, [esp + i3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3330_qqOH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3330_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1

	movaps xmm3, [esp + i3330_fjxO]
	movaps xmm4, [esp + i3330_fjyO]
	movaps xmm5, [esp + i3330_fjzO]
	mulps xmm0, [esp + i3330_dxH2O]
	mulps xmm1, [esp + i3330_dyH2O]
	mulps xmm2, [esp + i3330_dzH2O]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3330_fixH2]
	addps xmm1, [esp + i3330_fiyH2]
	addps xmm2, [esp + i3330_fizH2]
	movaps [esp + i3330_fjxO], xmm3
	movaps [esp + i3330_fjyO], xmm4
	movaps [esp + i3330_fjzO], xmm5
	movaps [esp + i3330_fixH2], xmm0
	movaps [esp + i3330_fiyH2], xmm1
	movaps [esp + i3330_fizH2], xmm2

	;# H2-H1 interaction 
	movaps xmm0, [esp + i3330_rinvH2H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3330_rsqH2H1] ;# xmm1=r 
	mulps  xmm1, [esp + i3330_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3330_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3330_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3330_fjxH1]
	movaps xmm4, [esp + i3330_fjyH1]
	movaps xmm5, [esp + i3330_fjzH1]
	mulps xmm0, [esp + i3330_dxH2H1]
	mulps xmm1, [esp + i3330_dyH2H1]
	mulps xmm2, [esp + i3330_dzH2H1]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3330_fixH2]
	addps xmm1, [esp + i3330_fiyH2]
	addps xmm2, [esp + i3330_fizH2]
	movaps [esp + i3330_fjxH1], xmm3
	movaps [esp + i3330_fjyH1], xmm4
	movaps [esp + i3330_fjzH1], xmm5
	movaps [esp + i3330_fixH2], xmm0
	movaps [esp + i3330_fiyH2], xmm1
	movaps [esp + i3330_fizH2], xmm2

	;# H2-H2 interaction 
	movaps xmm0, [esp + i3330_rinvH2H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + i3330_rsqH2H2] ;# xmm1=r 
	mulps  xmm1, [esp + i3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 
    movaps xmm3, [esp + i3330_qqHH]
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point mm5 contains vcoul and mm3 fijC 

    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5
	xorps  xmm1, xmm1
	mulps  xmm3,  [esp + i3330_tsc]
	mulps  xmm3, xmm0
	subps  xmm1, xmm3

	movaps xmm0, xmm1
	movaps xmm2, xmm1
	
	movaps xmm3, [esp + i3330_fjxH2]
	movaps xmm4, [esp + i3330_fjyH2]
	movaps xmm5, [esp + i3330_fjzH2]
	mulps xmm0, [esp + i3330_dxH2H2]
	mulps xmm1, [esp + i3330_dyH2H2]
	mulps xmm2, [esp + i3330_dzH2H2]
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	addps xmm0, [esp + i3330_fixH2]
	addps xmm1, [esp + i3330_fiyH2]
	addps xmm2, [esp + i3330_fizH2]
	movaps [esp + i3330_fjxH2], xmm3
	movaps [esp + i3330_fjyH2], xmm4
	movaps [esp + i3330_fjzH2], xmm5
	movaps [esp + i3330_fixH2], xmm0
	movaps [esp + i3330_fiyH2], xmm1
	movaps [esp + i3330_fizH2], xmm2

	mov edi, [ebp + i3330_faction]

	movd eax, mm0
	movd ebx, mm1
	movd ecx, mm2
	movd edx, mm3
	
	;# Did all interactions - now update j forces 
	;# 4 j waters with three atoms each - first do a & b j particles 
	movaps xmm0, [esp + i3330_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i3330_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpcklps xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjxOb  fjyOb 
	movaps xmm1, [esp + i3330_fjzO]
	movaps xmm2, [esp + i3330_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOb  fjyOb  
	unpcklps xmm1, xmm2	   ;# xmm1= fjzOa  fjxH1a fjzOb  fjxH1b 
	movaps xmm4, [esp + i3330_fjyH1]
	movaps xmm5, [esp + i3330_fjzH1]
	unpcklps xmm4, xmm5	   ;# xmm4= fjyH1a fjzH1a fjyH1b fjzH1b 
	movaps xmm5, [esp + i3330_fjxH2]
	movaps xmm6, [esp + i3330_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1b fjzH1b 
	unpcklps xmm5, xmm6	   ;# xmm5= fjxH2a fjyH2a fjxH2b fjyH2b 
	movlhps  xmm0, xmm1    	   ;# xmm0= fjxOa  fjyOa  fjzOa  fjxH1a 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOb  fjyOb  fjzOb  fjxH1b 
	movlhps  xmm4, xmm5   	   ;# xmm4= fjyH1a fjzH1a fjxH2a fjyH2a 
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1b fjzH1b fjxH2b fjyH2b 
	movups   xmm1, [edi + eax*4]
	movups   xmm2, [edi + eax*4 + 16]
	movups   xmm5, [edi + ebx*4]
	movups   xmm6, [edi + ebx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + eax*4 + 32]
	movss    xmm3, [edi + ebx*4 + 32]
	
	movaps   xmm4, [esp + i3330_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm7, xmm7, 1
	
	movups   [edi + eax*4],     xmm1
	movups   [edi + eax*4 + 16],xmm2
	movups   [edi + ebx*4],     xmm5
	movups   [edi + ebx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + eax*4 + 32], xmm0
	movss    [edi + ebx*4 + 32], xmm3	

	;# then do the second pair (c & d) 
	movaps xmm0, [esp + i3330_fjxO] ;# xmm0= fjxOa  fjxOb  fjxOc  fjxOd 
	movaps xmm1, [esp + i3330_fjyO] ;# xmm1= fjyOa  fjyOb  fjyOc  fjyOd  
	unpckhps xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjxOd  fjyOd 
	movaps xmm1, [esp + i3330_fjzO]
	movaps xmm2, [esp + i3330_fjxH1]
	movhlps  xmm3, xmm0	   ;# xmm3= fjxOd  fjyOd  
	unpckhps xmm1, xmm2	   ;# xmm1= fjzOc  fjxH1c fjzOd  fjxH1d 
	movaps xmm4, [esp + i3330_fjyH1]
	movaps xmm5, [esp + i3330_fjzH1]
	unpckhps xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjyH1d fjzH1d	
	movaps xmm5, [esp + i3330_fjxH2]
	movaps xmm6, [esp + i3330_fjyH2]
	movhlps  xmm7, xmm4	   ;# xmm7= fjyH1d fjzH1d 	 
	unpckhps xmm5, xmm6	   ;# xmm5= fjxH2c fjyH2c fjxH2d fjyH2d 
	movlhps  xmm0, xmm1	   ;# xmm0= fjxOc  fjyOc  fjzOc  fjxH1c 
	shufps   xmm3, xmm1, 228 ;# 11100100
                               ;# xmm3= fjxOd  fjyOd fjzOd  fjxH1d 
	movlhps  xmm4, xmm5	   ;# xmm4= fjyH1c fjzH1c fjxH2c fjyH2c  
	shufps   xmm7, xmm5, 228 ;# 11100100
                               ;# xmm7= fjyH1d fjzH1d fjxH2d fjyH2d 
	movups   xmm1, [edi + ecx*4]
	movups   xmm2, [edi + ecx*4 + 16]
	movups   xmm5, [edi + edx*4]
	movups   xmm6, [edi + edx*4 + 16]
	addps    xmm1, xmm0
	addps    xmm2, xmm4
	addps    xmm5, xmm3
	addps    xmm6, xmm7
	movss    xmm0, [edi + ecx*4 + 32]
	movss    xmm3, [edi + edx*4 + 32]
	
	movaps   xmm4, [esp + i3330_fjzH2]
	movaps   xmm7, xmm4
	shufps   xmm4, xmm4, 2 ;# 00000010
	shufps   xmm7, xmm7, 3 ;# 00000011
	movups   [edi + ecx*4],     xmm1
	movups   [edi + ecx*4 + 16],xmm2
	movups   [edi + edx*4],     xmm5
	movups   [edi + edx*4 + 16],xmm6	
	addss    xmm0, xmm4
	addss    xmm3, xmm7
	movss    [edi + ecx*4 + 32], xmm0
	movss    [edi + edx*4 + 32], xmm3	
	
	;# should we do one more iteration? 
	sub dword ptr [esp + i3330_innerk],  4
	jl    .i3330_single_check
	jmp   .i3330_unroll_loop
.i3330_single_check:
	add dword ptr [esp + i3330_innerk],  4
	jnz   .i3330_single_loop
	jmp   .i3330_updateouterdata
.i3330_single_loop:
	mov   edx, [esp + i3330_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + i3330_innerjjnr],  4	

	mov esi, [ebp + i3330_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + i3330_ixO]     
	movaps  xmm1, [esp + i3330_iyO]
	movaps  xmm2, [esp + i3330_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + i3330_jxO], xmm3
	movaps [esp + i3330_jyO], xmm4
	movaps [esp + i3330_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	movaps [esp + i3330_dxOO], xmm0
	movaps [esp + i3330_dyOO], xmm1
	movaps [esp + i3330_dzOO], xmm2
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	movaps  xmm2, xmm1	
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + i3330_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + i3330_half] ;# rinv iO - j water 

	movaps  xmm1, xmm3
	mulps   xmm1, xmm0	;# xmm1=r 
	movaps  xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + i3330_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

	mov esi, [ebp + i3330_VFtab]
	
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]
	
    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + i3330_qqOO]
	movhps  xmm3, [esp + i3330_qqOH]
		
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point xmm5 contains vcoul and xmm3 fijC 
	
    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5
    ;# put scalar force on stack temporarily 
    movaps [esp + i3330_fstmp], xmm3

    ;# dispersion 
	movss  xmm4, [esi + ebx*4 + 16]	
	movss  xmm5, [esi + ebx*4 + 20]	
	movss  xmm6, [esi + ebx*4 + 24]	
	movss  xmm7, [esi + ebx*4 + 28]
    ;# dispersion table ready, in xmm4-xmm7 
    mulss  xmm6, xmm1       ;# xmm6=Geps 
    mulss  xmm7, xmm2       ;# xmm7=Heps2 
    addss  xmm5, xmm6
    addss  xmm5, xmm7       ;# xmm5=Fp 
    mulss  xmm7, [esp + i3330_two]       ;# two*Heps2 
    addss  xmm7, xmm6
    addss  xmm7, xmm5 ;# xmm7=FF 
    mulss  xmm5, xmm1 ;# xmm5=eps*Fp 
    addss  xmm5, xmm4 ;# xmm5=VV 
	xorps  xmm4, xmm4
    movss  xmm4, [esp + i3330_c6]
    mulps  xmm7, xmm4    ;# fijD 
    mulps  xmm5, xmm4    ;# vnb6 
    addps  xmm7, [esp + i3330_fstmp] ;# add to fscal 

    ;# put scalar force on stack Update vnbtot directly 
    addps  xmm5, [esp + i3330_vnbtot]
    movaps [esp + i3330_fstmp], xmm7
    movaps [esp + i3330_vnbtot], xmm5

    ;# repulsion 
	movss  xmm4, [esi + ebx*4 + 32]	
	movss  xmm5, [esi + ebx*4 + 36]	
	movss  xmm6, [esi + ebx*4 + 40]	
	movss  xmm7, [esi + ebx*4 + 44]
    ;# table ready, in xmm4-xmm7 
    mulss  xmm6, xmm1       ;# xmm6=Geps 
    mulss  xmm7, xmm2       ;# xmm7=Heps2 
    addss  xmm5, xmm6
    addss  xmm5, xmm7       ;# xmm5=Fp 
    mulss  xmm7, [esp + i3330_two]       ;# two*Heps2 
    addss  xmm7, xmm6
    addss  xmm7, xmm5 ;# xmm7=FF 
    mulss  xmm5, xmm1 ;# xmm5=eps*Fp 
    addss  xmm5, xmm4 ;# xmm5=VV 

	xorps  xmm4, xmm4
    movss  xmm4, [esp + i3330_c12]
    mulps  xmm7, xmm4 ;# fijR 
    mulps  xmm5, xmm4 ;# vnb12 
    addps  xmm7, [esp + i3330_fstmp] 

    addps  xmm5, [esp + i3330_vnbtot]
    movaps [esp + i3330_vnbtot], xmm5
    xorps  xmm1, xmm1

    mulps xmm7, [esp + i3330_tsc]
    mulps xmm7, xmm0
    subps  xmm1, xmm7

	movaps xmm0, xmm1
	movaps xmm2, xmm1		

	mulps   xmm0, [esp + i3330_dxOO]
	mulps   xmm1, [esp + i3330_dyOO]
	mulps   xmm2, [esp + i3330_dzOO]
	;# initial update for j forces 
	xorps   xmm3, xmm3
	xorps   xmm4, xmm4
	xorps   xmm5, xmm5
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i3330_fjxO], xmm3
	movaps  [esp + i3330_fjyO], xmm4
	movaps  [esp + i3330_fjzO], xmm5
	addps   xmm0, [esp + i3330_fixO]
	addps   xmm1, [esp + i3330_fiyO]
	addps   xmm2, [esp + i3330_fizO]
	movaps  [esp + i3330_fixO], xmm0
	movaps  [esp + i3330_fiyO], xmm1
	movaps  [esp + i3330_fizO], xmm2

	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + i3330_ixH1]
	movaps  xmm1, [esp + i3330_iyH1]
	movaps  xmm2, [esp + i3330_izH1]	
	movaps  xmm3, [esp + i3330_ixH2] 
	movaps  xmm4, [esp + i3330_iyH2] 
	movaps  xmm5, [esp + i3330_izH2] 
	subps   xmm0, [esp + i3330_jxO]
	subps   xmm1, [esp + i3330_jyO]
	subps   xmm2, [esp + i3330_jzO]
	subps   xmm3, [esp + i3330_jxO]
	subps   xmm4, [esp + i3330_jyO]
	subps   xmm5, [esp + i3330_jzO]
	movaps [esp + i3330_dxH1O], xmm0
	movaps [esp + i3330_dyH1O], xmm1
	movaps [esp + i3330_dzH1O], xmm2
	movaps [esp + i3330_dxH2O], xmm3
	movaps [esp + i3330_dyH2O], xmm4
	movaps [esp + i3330_dzH2O], xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 

	;# start with H1, save H2 data 
	movaps [esp + i3330_rsqH2O], xmm4
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + i3330_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + i3330_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + i3330_half] ;# rinv H2 - j water  

	;# start with H1, save H2 data 
	movaps [esp + i3330_rinvH2O], xmm7

	movaps xmm1, xmm3
	mulps  xmm1, xmm0	;# xmm1=r 
	movaps xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + i3330_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]
	
    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + i3330_qqOH]
	movhps  xmm3, [esp + i3330_qqHH]
		
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point xmm5 contains vcoul and xmm3 fijC 
    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5	

    xorps  xmm1, xmm1

    mulps xmm3, [esp + i3330_tsc]
    mulps xmm3, xmm0
    subps  xmm1, xmm3
	
	movaps  xmm0, xmm1
	movaps  xmm2, xmm1
	mulps   xmm0, [esp + i3330_dxH1O]
	mulps   xmm1, [esp + i3330_dyH1O]
	mulps   xmm2, [esp + i3330_dzH1O]
	;# update forces H1 - j water 
	movaps  xmm3, [esp + i3330_fjxO]
	movaps  xmm4, [esp + i3330_fjyO]
	movaps  xmm5, [esp + i3330_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	movaps  [esp + i3330_fjxO], xmm3
	movaps  [esp + i3330_fjyO], xmm4
	movaps  [esp + i3330_fjzO], xmm5
	addps   xmm0, [esp + i3330_fixH1]
	addps   xmm1, [esp + i3330_fiyH1]
	addps   xmm2, [esp + i3330_fizH1]
	movaps  [esp + i3330_fixH1], xmm0
	movaps  [esp + i3330_fiyH1], xmm1
	movaps  [esp + i3330_fizH1], xmm2
	;# do table for H2 - j water interaction 
	movaps xmm0, [esp + i3330_rinvH2O]
	movaps xmm1, [esp + i3330_rsqH2O]
	mulps  xmm1, xmm0	;# xmm0=rinv, xmm1=r 
	mulps  xmm1, [esp + i3330_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]
	
    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm7, [esp + i3330_two]       ;# two*Heps2 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + i3330_qqOH]
	movhps  xmm3, [esp + i3330_qqHH]
		
    addps  xmm7, xmm6
    addps  xmm7, xmm5 ;# xmm7=FF 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    mulps  xmm3, xmm7 ;# fijC=FF*qq 
    ;# at this point xmm5 contains vcoul and xmm3 fijC 
    addps  xmm5, [esp + i3330_vctot]
    movaps [esp + i3330_vctot], xmm5	

    xorps  xmm1, xmm1

    mulps xmm3, [esp + i3330_tsc]
    mulps xmm3, xmm0
    subps  xmm1, xmm3
	
	movaps  xmm0, xmm1
	movaps  xmm2, xmm1
	
	mulps   xmm0, [esp + i3330_dxH2O]
	mulps   xmm1, [esp + i3330_dyH2O]
	mulps   xmm2, [esp + i3330_dzH2O]
	movaps  xmm3, [esp + i3330_fjxO]
	movaps  xmm4, [esp + i3330_fjyO]
	movaps  xmm5, [esp + i3330_fjzO]
	subps   xmm3, xmm0
	subps   xmm4, xmm1
	subps   xmm5, xmm2
	mov     esi, [ebp + i3330_faction]
	movaps  [esp + i3330_fjxO], xmm3
	movaps  [esp + i3330_fjyO], xmm4
	movaps  [esp + i3330_fjzO], xmm5
	addps   xmm0, [esp + i3330_fixH2]
	addps   xmm1, [esp + i3330_fiyH2]
	addps   xmm2, [esp + i3330_fizH2]
	movaps  [esp + i3330_fixH2], xmm0
	movaps  [esp + i3330_fiyH2], xmm1
	movaps  [esp + i3330_fizH2], xmm2

	;# update j water forces from local variables 
	movlps  xmm0, [esi + eax*4]
	movlps  xmm1, [esi + eax*4 + 12]
	movhps  xmm1, [esi + eax*4 + 24]
	movaps  xmm3, [esp + i3330_fjxO]
	movaps  xmm4, [esp + i3330_fjyO]
	movaps  xmm5, [esp + i3330_fjzO]
	movaps  xmm6, xmm5
	movaps  xmm7, xmm5
	shufps  xmm6, xmm6, 2 ;# 00000010
	shufps  xmm7, xmm7, 3 ;# 00000011
	addss   xmm5, [esi + eax*4 + 8]
	addss   xmm6, [esi + eax*4 + 20]
	addss   xmm7, [esi + eax*4 + 32]
	movss   [esi + eax*4 + 8], xmm5
	movss   [esi + eax*4 + 20], xmm6
	movss   [esi + eax*4 + 32], xmm7
	movaps   xmm5, xmm3
	unpcklps xmm3, xmm4
	unpckhps xmm5, xmm4
	addps    xmm0, xmm3
	addps    xmm1, xmm5
	movlps  [esi + eax*4], xmm0 
	movlps  [esi + eax*4 + 12], xmm1 
	movhps  [esi + eax*4 + 24], xmm1 
	
	dec dword ptr [esp + i3330_innerk]
	jz    .i3330_updateouterdata
	jmp   .i3330_single_loop
.i3330_updateouterdata:
	mov   ecx, [esp + i3330_ii3]
	mov   edi, [ebp + i3330_faction]
	mov   esi, [ebp + i3330_fshift]
	mov   edx, [esp + i3330_is3]

	;# accumulate  Oi forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3330_fixO]
	movaps xmm1, [esp + i3330_fiyO] 
	movaps xmm2, [esp + i3330_fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4]
	movss  xmm4, [edi + ecx*4 + 4]
	movss  xmm5, [edi + ecx*4 + 8]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4],     xmm3
	movss  [edi + ecx*4 + 4], xmm4
	movss  [edi + ecx*4 + 8], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	movaps xmm6, xmm0
	movss xmm7, xmm2
	movlhps xmm6, xmm1
	shufps  xmm6, xmm6, 8 ;# 00001000	

	;# accumulate H1i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3330_fixH1]
	movaps xmm1, [esp + i3330_fiyH1]
	movaps xmm2, [esp + i3330_fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 in xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 12]
	movss  xmm4, [edi + ecx*4 + 16]
	movss  xmm5, [edi + ecx*4 + 20]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 12], xmm3
	movss  [edi + ecx*4 + 16], xmm4
	movss  [edi + ecx*4 + 20], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# accumulate H2i forces in xmm0, xmm1, xmm2 
	movaps xmm0, [esp + i3330_fixH2]
	movaps xmm1, [esp + i3330_fiyH2]
	movaps xmm2, [esp + i3330_fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addps  xmm0, xmm3
	addps  xmm1, xmm4
	addps  xmm2, xmm5 ;# sum is in 1/2 i xmm0-xmm2 

	movaps xmm3, xmm0	
	movaps xmm4, xmm1	
	movaps xmm5, xmm2	

	shufps xmm3, xmm3, 1
	shufps xmm4, xmm4, 1
	shufps xmm5, xmm5, 1
	addss  xmm0, xmm3
	addss  xmm1, xmm4
	addss  xmm2, xmm5	;# xmm0-xmm2 has single force in pos0 

	;# increment i force 
	movss  xmm3, [edi + ecx*4 + 24]
	movss  xmm4, [edi + ecx*4 + 28]
	movss  xmm5, [edi + ecx*4 + 32]
	addss  xmm3, xmm0
	addss  xmm4, xmm1
	addss  xmm5, xmm2
	movss  [edi + ecx*4 + 24], xmm3
	movss  [edi + ecx*4 + 28], xmm4
	movss  [edi + ecx*4 + 32], xmm5

	;# accumulate force in xmm6/xmm7 for fshift 
	addss xmm7, xmm2
	movlhps xmm0, xmm1
	shufps  xmm0, xmm0, 8 ;# 00001000	
	addps   xmm6, xmm0

	;# increment fshift force  
	movlps  xmm3, [esi + edx*4]
	movss  xmm4, [esi + edx*4 + 8]
	addps  xmm3, xmm6
	addss  xmm4, xmm7
	movlps  [esi + edx*4],    xmm3
	movss  [esi + edx*4 + 8], xmm4

	;# get group index for i particle 
	mov   edx, [ebp + i3330_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + i3330_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + i3330_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3330_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + i3330_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + i3330_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + i3330_nri]
	dec ecx
	jecxz .i3330_end
	;# not last, iterate once more!  
	mov [ebp + i3330_nri], ecx
	jmp .i3330_outer
.i3330_end:
	emms
	mov eax, [esp + i3330_salign]
	add esp, eax
	add esp, 1508
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




		
.globl mcinl0100_sse
.globl _mcinl0100_sse
mcinl0100_sse:	
_mcinl0100_sse:	
.equiv		mci0100_nri,		8
.equiv		mci0100_iinr,		12
.equiv		mci0100_jindex,		16
.equiv		mci0100_jjnr,		20
.equiv		mci0100_shift,		24
.equiv		mci0100_shiftvec,	28
.equiv		mci0100_gid,		32
.equiv		mci0100_pos,		36		
.equiv		mci0100_type,		40
.equiv		mci0100_ntype,		44
.equiv		mci0100_nbfp,		48	
.equiv		mci0100_Vnb,		52	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci0100_ix,			0
.equiv		mci0100_iy,	        16
.equiv		mci0100_iz,         32
.equiv		mci0100_two,        48
.equiv		mci0100_c6,			64
.equiv		mci0100_c12,		80 
.equiv		mci0100_vnbtot,		96
.equiv		mci0100_half,		112
.equiv		mci0100_three,		128
.equiv		mci0100_is3,		144
.equiv		mci0100_ii3,		148
.equiv		mci0100_ntia,		152	
.equiv		mci0100_innerjjnr,  156
.equiv		mci0100_innerk,     160
.equiv		mci0100_salign,     164
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 168		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci0100_salign], eax

	emms

	movups xmm1, [sse_two]
	movaps [esp + mci0100_two], xmm1

	;# assume we have at least one i particle - start directly 	
.mci0100_outer:
	mov   eax, [ebp + mci0100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add   dword ptr [ebp + mci0100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci0100_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci0100_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci0100_iinr]       ;# ecx = pointer into iinr[] 	
	add   dword ptr [ebp + mci0100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

    mov   edx, [ebp + mci0100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci0100_ntype]
    shl   edx, 1
    mov   [esp + mci0100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci0100_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci0100_ix], xmm0
	movaps [esp + mci0100_iy], xmm1
	movaps [esp + mci0100_iz], xmm2

	mov   [esp + mci0100_ii3], ebx
	
	;# clear vnbtot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci0100_vnbtot], xmm4
	
	mov   eax, [ebp + mci0100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add   dword ptr [ebp + mci0100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci0100_pos]
	mov   eax, [ebp + mci0100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci0100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci0100_innerk], edx    ;# number of innerloop atoms 
	
	jge   .mci0100_unroll_loop
	jmp   .mci0100_finish_inner
.mci0100_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci0100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add   dword ptr [esp + mci0100_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci0100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci0100_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0100_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci0100_c6], xmm4
	movaps [esp + mci0100_c12], xmm6
	
	mov esi, [ebp + mci0100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci0100_ix]
	movaps xmm5, [esp + mci0100_iy]
	movaps xmm6, [esp + mci0100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6

	;# rsq in xmm4 
	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci0100_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0

	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci0100_c6]
	mulps  xmm2, [esp + mci0100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci0100_vnbtot]
	movaps [esp + mci0100_vnbtot], xmm5

	;# should we do one more iteration? 
	sub   dword ptr [esp + mci0100_innerk],  4
	jl    .mci0100_finish_inner
	jmp   .mci0100_unroll_loop
.mci0100_finish_inner:
	;# check if at least two particles remain 
	add   dword ptr [esp + mci0100_innerk],  4
	mov   edx, [esp + mci0100_innerk]
	and   edx, 2
	jnz   .mci0100_dopair
	jmp   .mci0100_checksingle
.mci0100_dopair:	
    mov   ecx, [esp + mci0100_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add   dword ptr [esp + mci0100_innerjjnr],  8

	mov esi, [ebp + mci0100_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci0100_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0100_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci0100_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci0100_c6], xmm4
	movaps [esp + mci0100_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move mci0100_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci0100_ix]
	movaps xmm5, [esp + mci0100_iy]
	movaps xmm6, [esp + mci0100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 


	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci0100_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci0100_c6]
	mulps  xmm2, [esp + mci0100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci0100_vnbtot]
	movaps [esp + mci0100_vnbtot], xmm5

.mci0100_checksingle:				
	mov   edx, [esp + mci0100_innerk]
	and   edx, 1
	jnz    .mci0100_dosingle
	jmp    .mci0100_updateouterdata
.mci0100_dosingle:
	mov edi, [ebp + mci0100_pos]
	mov   ecx, [esp + mci0100_innerjjnr]
	mov   eax, [ecx]		

	mov esi, [ebp + mci0100_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci0100_nbfp]
	shl ecx, 1
	add ecx, [esp + mci0100_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci0100_c6], xmm4
	movaps [esp + mci0100_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci0100_ix]
	movaps xmm5, [esp + mci0100_iy]
	movaps xmm6, [esp + mci0100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci0100_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci0100_c6]
	mulps  xmm2, [esp + mci0100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + mci0100_vnbtot]
	movss [esp + mci0100_vnbtot], xmm5
	
.mci0100_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci0100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add   dword ptr [ebp + mci0100_gid],  4  ;# advance pointer 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci0100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6	

	;# add earlier value from mem 
	mov   eax, [ebp + mci0100_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 

	;# finish if last 
	mov   ecx, [ebp + mci0100_nri]
	dec ecx
	jecxz .mci0100_end

	;# not last, iterate once more!  
	mov [ebp + mci0100_nri], ecx
	jmp .mci0100_outer
.mci0100_end:
	emms
	mov eax, [esp + mci0100_salign]
	add esp, eax
	add esp, 168
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	
.globl mcinl0110_sse
.globl _mcinl0110_sse
mcinl0110_sse:	
_mcinl0110_sse:	
.equiv		mci0110_nri,		8
.equiv		mci0110_iinr,		12
.equiv		mci0110_jindex,		16
.equiv		mci0110_jjnr,		20
.equiv		mci0110_shift,		24
.equiv		mci0110_shiftvec,	28
.equiv		mci0110_gid,		32
.equiv		mci0110_pos,		36		
.equiv		mci0110_type,		40
.equiv		mci0110_ntype,		44
.equiv		mci0110_nbfp,		48	
.equiv		mci0110_Vnb,		52
.equiv		mci0110_nsatoms,    56
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci0110_ix,	        0
.equiv		mci0110_iy,	        16
.equiv		mci0110_iz,         32
.equiv		mci0110_two,        48		
.equiv		mci0110_c6,         64
.equiv		mci0110_c12,        80		 
.equiv		mci0110_vnbtot,     96
.equiv		mci0110_half,       112
.equiv		mci0110_three,      128
.equiv		mci0110_is3,        144
.equiv		mci0110_ii3,        148
.equiv		mci0110_shX,	    152
.equiv		mci0110_shY,        156
.equiv		mci0110_shZ,        160
.equiv		mci0110_ntia,       164	
.equiv		mci0110_innerjjnr0, 168
.equiv		mci0110_innerjjnr,  172
.equiv		mci0110_innerk0,    176
.equiv		mci0110_innerk,     180
.equiv		mci0110_salign,     184			
.equiv		mci0110_nsvdwc,     188
.equiv		mci0110_nscoul,     192
.equiv		mci0110_nsvdw,      196
.equiv		mci0110_solnr,	    200		
	push ebp
	mov ebp,esp		
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 204		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci0110_salign], eax

	emms

	movups xmm1, [sse_two]
	movaps [esp + mci0110_two], xmm1

	;# assume we have at least one i particle - start directly 	
.mci0110_outer:
	mov   eax, [ebp + mci0110_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci0110_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci0110_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci0110_shiftvec]   ;# eax = base of shiftvec[] 

	movlps xmm0, [eax + ebx*4]	;# getting the shiftvector 
	movss xmm1, [eax + ebx*4 + 8] 
	movlps [esp + mci0110_shX], xmm0
	movss [esp + mci0110_shZ], xmm1

	mov   ecx, [ebp + mci0110_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci0110_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + mci0110_nsatoms]
	add dword ptr [ebp + mci0110_nsatoms],  12
	mov   ecx, [eax]	
	mov   edx, [eax + 4]
	mov   eax, [eax + 8]	
	sub   ecx, eax
	sub   eax, edx
	
	mov   [esp + mci0110_nsvdwc], edx
	mov   [esp + mci0110_nscoul], eax
	mov   [esp + mci0110_nsvdw], ecx

	;# clear vnbtot 
	xorps xmm4, xmm4
	movaps [esp + mci0110_vnbtot], xmm4
	mov   [esp + mci0110_solnr],  ebx
		
	mov   eax, [ebp + mci0110_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci0110_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 
	mov   eax, [ebp + mci0110_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci0110_innerjjnr0], eax     ;# pointer to jjnr[nj0] 

	mov   [esp + mci0110_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + mci0110_nsvdwc]
	cmp   ecx,  0
	jnz   .mci0110_mno_vdwc
	jmp   .mci0110_testvdw
.mci0110_mno_vdwc:
	mov   ebx,  [esp + mci0110_solnr]
	inc   dword ptr [esp + mci0110_solnr]

    mov   edx, [ebp + mci0110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci0110_ntype]
    shl   edx, 1
    mov   [esp + mci0110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci0110_pos]    ;# eax = base of pos[]  
	mov   [esp + mci0110_ii3], ebx

	movss xmm0, [esp + mci0110_shX]
	movss xmm1, [esp + mci0110_shY]
	movss xmm2, [esp + mci0110_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci0110_ix], xmm0
	movaps [esp + mci0110_iy], xmm1
	movaps [esp + mci0110_iz], xmm2

	mov   ecx, [esp + mci0110_innerjjnr0]
	mov   [esp + mci0110_innerjjnr], ecx
	mov   edx, [esp + mci0110_innerk0]
    sub   edx,  4
    mov   [esp + mci0110_innerk], edx    ;# number of innerloop atoms 
	jge   .mci0110_unroll_vdwc_loop
	jmp   .mci0110_finish_vdwc_inner
.mci0110_unroll_vdwc_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci0110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci0110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci0110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci0110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci0110_c6], xmm4
	movaps [esp + mci0110_c12], xmm6
	
	mov esi, [ebp + mci0110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move mci0110_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci0110_ix]
	movaps xmm5, [esp + mci0110_iy]
	movaps xmm6, [esp + mci0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci0110_c6]
	mulps  xmm2, [esp + mci0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci0110_vnbtot]
	movaps [esp + mci0110_vnbtot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci0110_innerk],  4
	jl    .mci0110_finish_vdwc_inner
	jmp   .mci0110_unroll_vdwc_loop	
.mci0110_finish_vdwc_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci0110_innerk],  4
	mov   edx, [esp + mci0110_innerk]
	and   edx, 2
	jnz   .mci0110_dopair_vdwc
	jmp   .mci0110_checksingle_vdwc
.mci0110_dopair_vdwc:	

    mov   ecx, [esp + mci0110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci0110_innerjjnr],  8

	mov esi, [ebp + mci0110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci0110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci0110_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci0110_c6], xmm4
	movaps [esp + mci0110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move mci0110_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci0110_ix]
	movaps xmm5, [esp + mci0110_iy]
	movaps xmm6, [esp + mci0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 


	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci0110_c6]
	mulps  xmm2, [esp + mci0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci0110_vnbtot]
	movaps [esp + mci0110_vnbtot], xmm5

.mci0110_checksingle_vdwc:				
	mov   edx, [esp + mci0110_innerk]
	and   edx, 1
	jnz    .mci0110_dosingle_vdwc
	jmp    .mci0110_updateouterdata_vdwc
.mci0110_dosingle_vdwc:			
	mov edi, [ebp + mci0110_pos]
	mov   ecx, [esp + mci0110_innerjjnr]
	mov   eax, [ecx]		

	mov esi, [ebp + mci0110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci0110_nbfp]
	shl ecx, 1
	add ecx, [esp + mci0110_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci0110_c6], xmm4
	movaps [esp + mci0110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci0110_ix]
	movaps xmm5, [esp + mci0110_iy]
	movaps xmm6, [esp + mci0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci0110_c6]
	mulps  xmm2, [esp + mci0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + mci0110_vnbtot]
	movss [esp + mci0110_vnbtot], xmm5
.mci0110_updateouterdata_vdwc:

	;# loop back to mno 
	dec dword ptr [esp + mci0110_nsvdwc]
	jz  .mci0110_testvdw
	jmp .mci0110_mno_vdwc
.mci0110_testvdw:	
	mov  ebx,  [esp + mci0110_nscoul]
	add  [esp + mci0110_solnr],  ebx

	mov  ecx, [esp + mci0110_nsvdw]
	cmp  ecx,  0
	jnz  .mci0110_mno_vdw
	jmp  .mci0110_last_mno
.mci0110_mno_vdw:
	mov   ebx,  [esp + mci0110_solnr]
	inc   dword ptr [esp + mci0110_solnr]

    mov   edx, [ebp + mci0110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci0110_ntype]
    shl   edx, 1
    mov   [esp + mci0110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci0110_pos]    ;# eax = base of pos[]  
	mov   [esp + mci0110_ii3], ebx

	movss xmm0, [esp + mci0110_shX]
	movss xmm1, [esp + mci0110_shY]
	movss xmm2, [esp + mci0110_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci0110_ix], xmm0
	movaps [esp + mci0110_iy], xmm1
	movaps [esp + mci0110_iz], xmm2

	mov   ecx, [esp + mci0110_innerjjnr0]
	mov   [esp + mci0110_innerjjnr], ecx
	mov   edx, [esp + mci0110_innerk0]
    sub   edx,  4
    mov   [esp + mci0110_innerk], edx    ;# number of innerloop atoms 
	jge   .mci0110_unroll_vdw_loop
	jmp   .mci0110_finish_vdw_inner
.mci0110_unroll_vdw_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci0110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci0110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci0110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci0110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci0110_c6], xmm4
	movaps [esp + mci0110_c12], xmm6
	
	mov esi, [ebp + mci0110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move mci0110_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci0110_ix]
	movaps xmm5, [esp + mci0110_iy]
	movaps xmm6, [esp + mci0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci0110_c6]
	mulps  xmm2, [esp + mci0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci0110_vnbtot]
	movaps [esp + mci0110_vnbtot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci0110_innerk],  4
	jl    .mci0110_finish_vdw_inner
	jmp   .mci0110_unroll_vdw_loop
.mci0110_finish_vdw_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci0110_innerk],  4
	mov   edx, [esp + mci0110_innerk]
	and   edx, 2
	jnz   .mci0110_dopair_vdw
	jmp   .mci0110_checksingle_vdw
.mci0110_dopair_vdw:	

    mov   ecx, [esp + mci0110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci0110_innerjjnr],  8

	mov esi, [ebp + mci0110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci0110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci0110_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci0110_c6], xmm4
	movaps [esp + mci0110_c12], xmm6	

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move mci0110_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci0110_ix]
	movaps xmm5, [esp + mci0110_iy]
	movaps xmm6, [esp + mci0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci0110_c6]
	mulps  xmm2, [esp + mci0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci0110_vnbtot]
	movaps [esp + mci0110_vnbtot], xmm5

.mci0110_checksingle_vdw:				
	mov   edx, [esp + mci0110_innerk]
	and   edx, 1
	jnz   .mci0110_dosingle_vdw
	jmp   .mci0110_updateouterdata_vdw
.mci0110_dosingle_vdw:			
	mov edi, [ebp + mci0110_pos]
	mov   ecx, [esp + mci0110_innerjjnr]
	mov   eax, [ecx]		

	mov esi, [ebp + mci0110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci0110_nbfp]
	shl ecx, 1
	add ecx, [esp + mci0110_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci0110_c6], xmm4
	movaps [esp + mci0110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci0110_ix]
	movaps xmm5, [esp + mci0110_iy]
	movaps xmm6, [esp + mci0110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci0110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci0110_c6]
	mulps  xmm2, [esp + mci0110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + mci0110_vnbtot]
	movss [esp + mci0110_vnbtot], xmm5
.mci0110_updateouterdata_vdw:
	
	;# loop back to mno 
	dec dword ptr [esp + mci0110_nsvdw]
	jz  .mci0110_last_mno
	jmp .mci0110_mno_vdw
	
.mci0110_last_mno:	

	;# get group index for i particle 
	mov   edx, [ebp + mci0110_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci0110_gid],  4  ;# advance pointer 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci0110_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci0110_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci0110_nri]
	dec ecx
	jecxz .mci0110_end
	;# not last, iterate once more!  
	mov [ebp + mci0110_nri], ecx
	jmp .mci0110_outer
.mci0110_end:
	emms
	mov eax, [esp + mci0110_salign]
	add esp, eax
	add esp, 204
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


.globl mcinl0300_sse
.globl _mcinl0300_sse
mcinl0300_sse:	
_mcinl0300_sse:	
.equiv		mci0300_nri,		8
.equiv		mci0300_iinr,		12
.equiv		mci0300_jindex,		16
.equiv		mci0300_jjnr,		20
.equiv		mci0300_shift,		24
.equiv		mci0300_shiftvec,	28
.equiv		mci0300_gid,		32
.equiv		mci0300_pos,		36		
.equiv		mci0300_type,		40
.equiv		mci0300_ntype,		44
.equiv		mci0300_nbfp,		48	
.equiv		mci0300_Vnb,		52
.equiv		mci0300_tabscale,	56
.equiv		mci0300_VFtab,		60
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci0300_ix,	        0
.equiv		mci0300_iy,			16
.equiv		mci0300_iz,         32
.equiv		mci0300_tsc,		48
.equiv		mci0300_c6,         64
.equiv		mci0300_c12,        80
.equiv		mci0300_vnbtot,     96
.equiv		mci0300_half,       112
.equiv		mci0300_three,      128
.equiv		mci0300_is3,        144
.equiv		mci0300_ii3,        148
.equiv		mci0300_ntia,	    152	
.equiv		mci0300_innerjjnr,  156
.equiv		mci0300_innerk,     160
.equiv		mci0300_salign,     164	
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 168		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci0300_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + mci0300_tabscale]
	movaps [esp + mci0300_half],  xmm0
	movaps [esp + mci0300_three],  xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + mci0300_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.mci0300_outer:
	mov   eax, [ebp + mci0300_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci0300_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci0300_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci0300_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci0300_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci0300_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

    mov   edx, [ebp + mci0300_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci0300_ntype]
    shl   edx, 1
    mov   [esp + mci0300_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci0300_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci0300_ix], xmm0
	movaps [esp + mci0300_iy], xmm1
	movaps [esp + mci0300_iz], xmm2

	mov   [esp + mci0300_ii3], ebx
	
	;# clear tot potential and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci0300_vnbtot], xmm4
	
	mov   eax, [ebp + mci0300_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci0300_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci0300_pos]
	mov   eax, [ebp + mci0300_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci0300_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci0300_innerk], edx    ;# number of innerloop atoms 
	jge   .mci0300_unroll_loop
	jmp   .mci0300_finish_inner
.mci0300_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci0300_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci0300_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci0300_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci0300_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0300_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci0300_c6], xmm4
	movaps [esp + mci0300_c12], xmm6
	
	mov esi, [ebp + mci0300_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move mci0300_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci0300_ix]
	movaps xmm5, [esp + mci0300_iy]
	movaps xmm6, [esp + mci0300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci0300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci0300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci0300_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 3
	pslld mm7, 3

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci0300_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 0]
	movlps xmm7, [esi + ecx*4 + 0]
	movhps xmm5, [esi + ebx*4 + 0]
	movhps xmm7, [esi + edx*4 + 0] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci0300_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# Update vnbtot 
	addps  xmm5, [esp + mci0300_vnbtot]
	movaps [esp + mci0300_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	
	movaps xmm4, [esp + mci0300_c12]
	mulps  xmm5, xmm4  
	addps  xmm5, [esp + mci0300_vnbtot]
	movaps [esp + mci0300_vnbtot], xmm5
	xorps  xmm4, xmm4
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci0300_innerk],  4
	jl    .mci0300_finish_inner
	jmp   .mci0300_unroll_loop
.mci0300_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci0300_innerk],  4
	mov   edx, [esp + mci0300_innerk]
	and   edx, 2
	jnz   .mci0300_dopair
	jmp   .mci0300_checksingle
.mci0300_dopair:	
    mov   ecx, [esp + mci0300_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci0300_innerjjnr],  8	
	xorps xmm7, xmm7

	mov esi, [ebp + mci0300_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci0300_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0300_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci0300_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci0300_c6], xmm4
	movaps [esp + mci0300_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move mci0300_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci0300_ix]
	movaps xmm5, [esp + mci0300_iy]
	movaps xmm6, [esp + mci0300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci0300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci0300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci0300_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + mci0300_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 0]
	movhps xmm5, [esi + edx*4 + 0];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci0300_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;#  Update vnbtot  
	addps  xmm5, [esp + mci0300_vnbtot]
	movaps [esp + mci0300_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci0300_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addps  xmm5, [esp + mci0300_vnbtot]
	movaps [esp + mci0300_vnbtot], xmm5

.mci0300_checksingle:				
	mov   edx, [esp + mci0300_innerk]
	and   edx, 1
	jnz    .mci0300_dosingle
	jmp    .mci0300_updateouterdata
.mci0300_dosingle:
	mov edi, [ebp + mci0300_pos]
	mov   ecx, [esp + mci0300_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6

	mov esi, [ebp + mci0300_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci0300_nbfp]
	shl ecx, 1
	add ecx, [esp + mci0300_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci0300_c6], xmm4
	movaps [esp + mci0300_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci0300_ix]
	movaps xmm5, [esp + mci0300_iy]
	movaps xmm6, [esp + mci0300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci0300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci0300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci0300_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + mci0300_VFtab]
	movd ebx, mm6
	
	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 0]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci0300_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addss  xmm5, [esp + mci0300_vnbtot]
	movss [esp + mci0300_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci0300_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addss  xmm5, [esp + mci0300_vnbtot]
	movss [esp + mci0300_vnbtot], xmm5

.mci0300_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci0300_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci0300_gid],  4  ;# advance pointer 

	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci0300_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci0300_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci0300_nri]
	dec ecx
	jecxz .mci0300_end
	;# not last, iterate once more!  
	mov [ebp + mci0300_nri], ecx
	jmp .mci0300_outer
.mci0300_end:
	emms
	mov eax, [esp + mci0300_salign]
	add esp, eax
	add esp, 168
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	
.globl mcinl0310_sse
.globl _mcinl0310_sse
mcinl0310_sse:	
_mcinl0310_sse:	
.equiv		mci0310_nri,			8
.equiv		mci0310_iinr,			12
.equiv		mci0310_jindex,			16
.equiv		mci0310_jjnr,			20
.equiv		mci0310_shift,			24
.equiv		mci0310_shiftvec,		28
.equiv		mci0310_gid,			32
.equiv		mci0310_pos,			36		
.equiv		mci0310_type,			40
.equiv		mci0310_ntype,			44
.equiv		mci0310_nbfp,			48	
.equiv		mci0310_Vnb,			52	
.equiv		mci0310_tabscale,		56
.equiv		mci0310_VFtab,			60
.equiv		mci0310_nsatoms,		64
	;# stack offsets for local variables  
    ;# bottom of stack is cache-aligned for sse use 
.equiv		mci0310_ix,				0
.equiv		mci0310_iy,				16
.equiv		mci0310_iz,				32
.equiv		mci0310_tsc,			48
.equiv		mci0310_c6,				64
.equiv		mci0310_c12,			80
.equiv		mci0310_vnbtot,			96
.equiv		mci0310_half,			112
.equiv		mci0310_three,			128
.equiv		mci0310_is3,			144
.equiv		mci0310_ii3,			148
.equiv		mci0310_shX,			152
.equiv		mci0310_shY,			156
.equiv		mci0310_shZ,			160
.equiv		mci0310_ntia,	        164	
.equiv		mci0310_innerjjnr0,		168
.equiv		mci0310_innerjjnr,		172
.equiv		mci0310_innerk0,		176
.equiv		mci0310_innerk,			180
.equiv		mci0310_salign,			184
.equiv		mci0310_nsvdwc,			188
.equiv		mci0310_nscoul,			192
.equiv		mci0310_nsvdw,			196
.equiv		mci0310_solnr,			200
	push ebp
	mov ebp,esp	
    push eax      
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 204		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci0310_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + mci0310_tabscale]
	movaps [esp + mci0310_half],  xmm0
	movaps [esp + mci0310_three], xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + mci0310_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.mci0310_outer:
	mov   eax, [ebp + mci0310_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci0310_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci0310_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci0310_shiftvec]   ;# eax = base of shiftvec[] 

	movlps xmm0, [eax + ebx*4]	;# getting the shiftvector 
	movss xmm1, [eax + ebx*4 + 8] 
	movlps [esp + mci0310_shX], xmm0
	movss [esp + mci0310_shZ], xmm1

	mov   ecx, [ebp + mci0310_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci0310_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + mci0310_nsatoms]
	add dword ptr [ebp + mci0310_nsatoms],  12
	mov   ecx, [eax]	
	mov   edx, [eax + 4]
	mov   eax, [eax + 8]	
	sub   ecx, eax
	sub   eax, edx
	
	mov   [esp + mci0310_nsvdwc], edx
	mov   [esp + mci0310_nscoul], eax
	mov   [esp + mci0310_nsvdw], ecx

	;# clear vnbtot 
	xorps xmm4, xmm4
	movaps [esp + mci0310_vnbtot], xmm4
	mov   [esp + mci0310_solnr],  ebx
		
	mov   eax, [ebp + mci0310_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci0310_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 
	mov   eax, [ebp + mci0310_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci0310_innerjjnr0], eax     ;# pointer to jjnr[nj0] 

	mov   [esp + mci0310_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + mci0310_nsvdwc]
	cmp   ecx,  0
	jnz   .mci0310_mno_vdwc
	jmp   .mci0310_testvdw
.mci0310_mno_vdwc:
	mov   ebx,  [esp + mci0310_solnr]
	inc   dword ptr [esp + mci0310_solnr]

    mov   edx, [ebp + mci0310_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci0310_ntype]
    shl   edx, 1
    mov   [esp + mci0310_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci0310_pos]    ;# eax = base of pos[]  
	mov   [esp + mci0310_ii3], ebx

	movss xmm0, [esp + mci0310_shX]
	movss xmm1, [esp + mci0310_shY]
	movss xmm2, [esp + mci0310_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci0310_ix], xmm0
	movaps [esp + mci0310_iy], xmm1
	movaps [esp + mci0310_iz], xmm2

	mov   ecx, [esp + mci0310_innerjjnr0]
	mov   [esp + mci0310_innerjjnr], ecx
	mov   edx, [esp + mci0310_innerk0]
    sub   edx,  4
    mov   [esp + mci0310_innerk], edx    ;# number of innerloop atoms 
	jge   .mci0310_unroll_vdwc_loop
	jmp   .mci0310_finish_vdwc_inner
.mci0310_unroll_vdwc_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci0310_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci0310_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci0310_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci0310_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0310_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci0310_c6], xmm4
	movaps [esp + mci0310_c12], xmm6
	
	mov esi, [ebp + mci0310_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move mci0310_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci0310_ix]
	movaps xmm5, [esp + mci0310_iy]
	movaps xmm6, [esp + mci0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci0310_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 3
	pslld mm7, 3

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci0310_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 0]
	movlps xmm7, [esi + ecx*4 + 0]
	movhps xmm5, [esi + ebx*4 + 0]
	movhps xmm7, [esi + edx*4 + 0] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci0310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# Update vnbtot directly 
	addps  xmm5, [esp + mci0310_vnbtot]
	movaps [esp + mci0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci0310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addps  xmm5, [esp + mci0310_vnbtot]
	movaps [esp + mci0310_vnbtot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci0310_innerk],  4
	jl    .mci0310_finish_vdwc_inner
	jmp   .mci0310_unroll_vdwc_loop
.mci0310_finish_vdwc_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci0310_innerk],  4
	mov   edx, [esp + mci0310_innerk]
	and   edx, 2
	jnz   .mci0310_dopair_vdwc
	jmp   .mci0310_checksingle_vdwc
.mci0310_dopair_vdwc:	
    mov   ecx, [esp + mci0310_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci0310_innerjjnr],  8	
	xorps xmm7, xmm7

	mov esi, [ebp + mci0310_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci0310_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0310_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci0310_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci0310_c6], xmm4
	movaps [esp + mci0310_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move mci0310_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci0310_ix]
	movaps xmm5, [esp + mci0310_iy]
	movaps xmm6, [esp + mci0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci0310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + mci0310_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 0]
	movhps xmm5, [esi + edx*4 + 0];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci0310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# Update vnbtot directly 
	addps  xmm5, [esp + mci0310_vnbtot]
	movaps [esp + mci0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci0310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addps  xmm5, [esp + mci0310_vnbtot]
	movaps [esp + mci0310_vnbtot], xmm5

.mci0310_checksingle_vdwc:				
	mov   edx, [esp + mci0310_innerk]
	and   edx, 1
	jnz    .mci0310_dosingle_vdwc
	jmp    .mci0310_updateouterdata_vdwc
.mci0310_dosingle_vdwc:
	mov edi, [ebp + mci0310_pos]
	mov   ecx, [esp + mci0310_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6

	mov esi, [ebp + mci0310_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci0310_nbfp]
	shl ecx, 1
	add ecx, [esp + mci0310_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci0310_c6], xmm4
	movaps [esp + mci0310_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci0310_ix]
	movaps xmm5, [esp + mci0310_iy]
	movaps xmm6, [esp + mci0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci0310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + mci0310_VFtab]
	movd ebx, mm6
	
	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 0]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci0310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addss  xmm5, [esp + mci0310_vnbtot]
	movss [esp + mci0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci0310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addss  xmm5, [esp + mci0310_vnbtot]
	movss [esp + mci0310_vnbtot], xmm5

.mci0310_updateouterdata_vdwc:

	;# loop back to mno 
	dec  dword ptr [esp + mci0310_nsvdwc]
	jz  .mci0310_testvdw
	jmp .mci0310_mno_vdwc
.mci0310_testvdw:	
	mov  ebx,  [esp + mci0310_nscoul]
	add  [esp + mci0310_solnr],  ebx

	mov  ecx, [esp + mci0310_nsvdw]
	cmp  ecx,  0
	jnz  .mci0310_mno_vdw
	jmp  .mci0310_last_mno
.mci0310_mno_vdw:
	mov   ebx,  [esp + mci0310_solnr]
	inc   dword ptr [esp + mci0310_solnr]

    mov   edx, [ebp + mci0310_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci0310_ntype]
    shl   edx, 1
    mov   [esp + mci0310_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci0310_pos]    ;# eax = base of pos[]  
	mov   [esp + mci0310_ii3], ebx

	movss xmm0, [esp + mci0310_shX]
	movss xmm1, [esp + mci0310_shY]
	movss xmm2, [esp + mci0310_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci0310_ix], xmm0
	movaps [esp + mci0310_iy], xmm1
	movaps [esp + mci0310_iz], xmm2

	mov   ecx, [esp + mci0310_innerjjnr0]
	mov   [esp + mci0310_innerjjnr], ecx
	mov   edx, [esp + mci0310_innerk0]
    sub   edx,  4
    mov   [esp + mci0310_innerk], edx    ;# number of innerloop atoms 
	jge   .mci0310_unroll_vdw_loop
	jmp   .mci0310_finish_vdw_inner
.mci0310_unroll_vdw_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci0310_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci0310_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci0310_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci0310_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0310_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci0310_c6], xmm4
	movaps [esp + mci0310_c12], xmm6
	
	mov esi, [ebp + mci0310_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move mci0310_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci0310_ix]
	movaps xmm5, [esp + mci0310_iy]
	movaps xmm6, [esp + mci0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci0310_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 3
	pslld mm7, 3

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci0310_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 0]
	movlps xmm7, [esi + ecx*4 + 0]
	movhps xmm5, [esi + ebx*4 + 0]
	movhps xmm7, [esi + edx*4 + 0] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci0310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + mci0310_vnbtot]
	movaps [esp + mci0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci0310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addps  xmm5, [esp + mci0310_vnbtot]
	movaps [esp + mci0310_vnbtot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci0310_innerk],  4
	jl    .mci0310_finish_vdw_inner
	jmp   .mci0310_unroll_vdw_loop
.mci0310_finish_vdw_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci0310_innerk],  4
	mov   edx, [esp + mci0310_innerk]
	and   edx, 2
	jnz   .mci0310_dopair_vdw
	jmp   .mci0310_checksingle_vdw
.mci0310_dopair_vdw:	
    mov   ecx, [esp + mci0310_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci0310_innerjjnr],  8	
	xorps xmm7, xmm7

	mov esi, [ebp + mci0310_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci0310_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci0310_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci0310_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci0310_c6], xmm4
	movaps [esp + mci0310_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move mci0310_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci0310_ix]
	movaps xmm5, [esp + mci0310_iy]
	movaps xmm6, [esp + mci0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci0310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + mci0310_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 0]
	movhps xmm5, [esi + edx*4 + 0];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci0310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + mci0310_vnbtot]
	movaps [esp + mci0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci0310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addps  xmm5, [esp + mci0310_vnbtot]
	movaps [esp + mci0310_vnbtot], xmm5

.mci0310_checksingle_vdw:				
	mov   edx, [esp + mci0310_innerk]
	and   edx, 1
	jnz    .mci0310_dosingle_vdw
	jmp    .mci0310_updateouterdata_vdw
.mci0310_dosingle_vdw:
	mov edi, [ebp + mci0310_pos]
	mov   ecx, [esp + mci0310_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6

	mov esi, [ebp + mci0310_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci0310_nbfp]
	shl ecx, 1
	add ecx, [esp + mci0310_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci0310_c6], xmm4
	movaps [esp + mci0310_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci0310_ix]
	movaps xmm5, [esp + mci0310_iy]
	movaps xmm6, [esp + mci0310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci0310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci0310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci0310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 3

	mov  esi, [ebp + mci0310_VFtab]
	movd ebx, mm6
	
	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 0]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci0310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addss  xmm5, [esp + mci0310_vnbtot]
	movss [esp + mci0310_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci0310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addss  xmm5, [esp + mci0310_vnbtot]
	movss [esp + mci0310_vnbtot], xmm5

.mci0310_updateouterdata_vdw:

	;# loop back to mno 
	dec  dword ptr [esp + mci0310_nsvdw]
	jz  .mci0310_last_mno
	jmp .mci0310_mno_vdw	
.mci0310_last_mno:	

	;# get group index for i particle 
	mov   edx, [ebp + mci0310_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci0310_gid],  4  ;# advance pointer 

	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci0310_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci0310_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci0310_nri]
	dec ecx
	jecxz .mci0310_end
	;# not last, iterate once more!  
	mov [ebp + mci0310_nri], ecx
	jmp .mci0310_outer
.mci0310_end:
	emms
	mov eax, [esp + mci0310_salign]
	add esp, eax
	add esp, 204
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl1000_sse
.globl _mcinl1000_sse
mcinl1000_sse:	
_mcinl1000_sse:	
.equiv		mci1000_nri,			8
.equiv		mci1000_iinr,			12
.equiv		mci1000_jindex,			16
.equiv		mci1000_jjnr,			20
.equiv		mci1000_shift,			24
.equiv		mci1000_shiftvec,		28
.equiv		mci1000_gid,			32
.equiv		mci1000_pos,			36		
.equiv		mci1000_charge,			40
.equiv		mci1000_facel,			44
.equiv		mci1000_Vc,				48
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1000_ix,				0
.equiv		mci1000_iy,				16
.equiv		mci1000_iz,             32
.equiv		mci1000_iq,             48
.equiv		mci1000_vctot,          64
.equiv		mci1000_half,           80
.equiv		mci1000_three,          96
.equiv		mci1000_is3,            112
.equiv		mci1000_ii3,            116
.equiv		mci1000_innerjjnr,      120
.equiv		mci1000_innerk,         124		
.equiv		mci1000_salign,         128
	push ebp
	mov ebp,esp	
    push eax
    push ebx 
    push ecx
    push edx
	push esi
	push edi
	sub esp, 132		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1000_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + mci1000_half],  xmm0
	movaps [esp + mci1000_three], xmm1

	;# assume we have at least one i particle - start directly 	
.mci1000_outer:
	mov   eax, [ebp + mci1000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci1000_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci1000_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci1000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1000_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci1000_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1000_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci1000_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci1000_ix], xmm0
	movaps [esp + mci1000_iy], xmm1
	movaps [esp + mci1000_iz], xmm2

	mov   [esp + mci1000_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci1000_vctot], xmm4

	mov   eax, [ebp + mci1000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1000_pos]

	mov   eax, [ebp + mci1000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci1000_innerk], edx    ;# number of innerloop atoms 
	jge   .mci1000_unroll_loop
	jmp   .mci1000_finish_inner
.mci1000_unroll_loop:	
	;# quad-unrolled innerloop here 
	mov   edx, [esp + mci1000_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci1000_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci1000_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm5, [esp + mci1000_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0
	shufps xmm3, xmm4, 136  ;# 10001000	      
	mov esi, [ebp + mci1000_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm5
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]	;# x1 y1 - - 
	movlps xmm5, [esi + ecx*4]	;# x3 y3 - - 
	movss xmm2, [esi + eax*4 + 8]	;# z1 -  - - 
	movss xmm6, [esi + ecx*4 + 8]   ;# z3 -  - - 

	movhps xmm4, [esi + ebx*4]	;# x1 y1 x2 y2 
	movhps xmm5, [esi + edx*4]	;# x3 y3 x4 y4 

	movss xmm0, [esi + ebx*4 + 8]	;# z2 - - - 
	movss xmm1, [esi + edx*4 + 8]	;# z4 - - - 

	shufps xmm2, xmm0, 0		;# z1 z1 z2 z2 
	shufps xmm6, xmm1, 0		;# z3 z3 z4 z4 
	
	movaps xmm0, xmm4		;# x1 y1 x2 y2 	
	movaps xmm1, xmm4		;# x1 y1 x2 y2 

	shufps xmm2, xmm6, 136  ;# 10001000	;# z1 z2 z3 z4 
	
	shufps xmm0, xmm5, 136  ;# 10001000	;# x1 x2 x3 x4 
	shufps xmm1, xmm5, 221  ;# 11011101	;# y1 y2 y3 y4 		

	;# move mci1000_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci1000_ix]
	movaps xmm5, [esp + mci1000_iy]
	movaps xmm6, [esp + mci1000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	movaps xmm5, [esp + mci1000_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	addps  xmm5, xmm3
	movaps [esp + mci1000_vctot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci1000_innerk],  4
	jl    .mci1000_finish_inner
	jmp   .mci1000_unroll_loop
.mci1000_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci1000_innerk],  4
	mov   edx, [esp + mci1000_innerk]
	and   edx, 2
	jnz   .mci1000_dopair
	jmp   .mci1000_checksingle
.mci1000_dopair:	
	mov esi, [ebp + mci1000_charge]
	mov edi, [ebp + mci1000_pos]
    mov   ecx, [esp + mci1000_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci1000_innerjjnr],  8

	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + mci1000_iq]
	xorps  xmm7,xmm7
	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move mci1000_ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1000_ix]
	movaps xmm5, [esp + mci1000_iy]
	movaps xmm6, [esp + mci1000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 

	movaps xmm5, [esp + mci1000_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	addps  xmm5, xmm3
	movaps [esp + mci1000_vctot], xmm5
.mci1000_checksingle:				
	mov   edx, [esp + mci1000_innerk]
	and   edx, 1
	jnz    .mci1000_dosingle
	jmp    .mci1000_updateouterdata
.mci1000_dosingle:			
	mov esi, [ebp + mci1000_charge]
	mov edi, [ebp + mci1000_pos]
	mov   ecx, [esp + mci1000_innerjjnr]
	mov   eax, [ecx]	
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	
	
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + mci1000_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1000_ix]
	movaps xmm5, [esp + mci1000_iy]
	movaps xmm6, [esp + mci1000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm5, [esp + mci1000_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	addss  xmm5, xmm3
	movaps [esp + mci1000_vctot], xmm5

.mci1000_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci1000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci1000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci1000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci1000_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci1000_nri]
	dec  ecx
	jecxz .mci1000_end
	;# not last, iterate once more!  
	mov [ebp + mci1000_nri], ecx
	jmp .mci1000_outer
.mci1000_end:
	emms
	mov eax, [esp + mci1000_salign]
	add esp, eax
	add esp, 132
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl1010_sse
.globl _mcinl1010_sse
mcinl1010_sse:	
_mcinl1010_sse:	
.equiv		mci1010_nri,			8
.equiv		mci1010_iinr,			12
.equiv		mci1010_jindex,			16
.equiv		mci1010_jjnr,			20
.equiv		mci1010_shift,			24
.equiv		mci1010_shiftvec,		28
.equiv		mci1010_gid,			32
.equiv		mci1010_pos,			36		
.equiv		mci1010_charge,			40
.equiv		mci1010_facel,			44
.equiv		mci1010_Vc,				48
.equiv		mci1010_nsatoms,        52		
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1010_ix,				0
.equiv		mci1010_iy,				16
.equiv		mci1010_iz,             32
.equiv		mci1010_iq,             48
.equiv		mci1010_vctot,          64
.equiv		mci1010_half,           80
.equiv		mci1010_three,          96
.equiv		mci1010_is3,			112
.equiv		mci1010_ii3,			128
.equiv		mci1010_shX,	        144
.equiv		mci1010_shY,			160
.equiv		mci1010_shZ,			176
.equiv		mci1010_ntia,	        192	
.equiv		mci1010_innerjjnr0,		208
.equiv		mci1010_innerk0,		212
.equiv		mci1010_innerjjnr,		216
.equiv		mci1010_innerk,			220		
.equiv		mci1010_salign,			224
.equiv		mci1010_nscoul,			228
.equiv		mci1010_solnr,	        232		
	push ebp
	mov ebp,esp		
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 236		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1010_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + mci1010_half],  xmm0
	movaps [esp + mci1010_three], xmm1
	add dword ptr [ebp + mci1010_nsatoms],  8

	;# assume we have at least one i particle - start directly 	
.mci1010_outer:
	mov   eax, [ebp + mci1010_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1010_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci1010_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci1010_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 
	movss [esp + mci1010_shX], xmm0
	movss [esp + mci1010_shY], xmm1
	movss [esp + mci1010_shZ], xmm2

	mov   ecx, [ebp + mci1010_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1010_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + mci1010_nsatoms]
	mov   ecx, [eax]
	add dword ptr [ebp + mci1010_nsatoms],  12
	mov   [esp + mci1010_nscoul], ecx	

	;# clear vctot 
	xorps xmm4, xmm4
	movaps [esp + mci1010_vctot], xmm4
	mov   [esp + mci1010_solnr], ebx

	mov   eax, [ebp + mci1010_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1010_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   eax, [ebp + mci1010_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1010_innerjjnr0], eax     ;# pointer to jjnr[nj0] 
	mov   [esp + mci1010_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + mci1010_nscoul]
	cmp   ecx,  0
	jnz   .mci1010_mno_coul
	jmp   .mci1010_last_mno
.mci1010_mno_coul:
	mov   ebx,  [esp + mci1010_solnr]
	inc   dword ptr [esp + mci1010_solnr]

	movss xmm0, [esp + mci1010_shX]
	movss xmm1, [esp + mci1010_shY]
	movss xmm2, [esp + mci1010_shZ]

	mov   edx, [ebp + mci1010_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci1010_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1010_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci1010_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci1010_ix], xmm0
	movaps [esp + mci1010_iy], xmm1
	movaps [esp + mci1010_iz], xmm2

	mov   [esp + mci1010_ii3], ebx
	
	mov   ecx, [esp + mci1010_innerjjnr0]
	mov   [esp + mci1010_innerjjnr], ecx
	mov   edx, [esp + mci1010_innerk0]
    sub   edx,  4
    mov   [esp + mci1010_innerk], edx    ;# number of innerloop atoms 
	jge   .mci1010_unroll_coul_loop
	jmp   .mci1010_finish_coul_inner

.mci1010_unroll_coul_loop:	
	;# quad-unrolled innerloop here 
	mov   edx, [esp + mci1010_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci1010_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci1010_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm5, [esp + mci1010_iq]
	shufps xmm3, xmm6, 0
	shufps xmm4, xmm7, 0
	shufps xmm3, xmm4, 136  ;# 10001000	      
	mov esi, [ebp + mci1010_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm5
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move mci1010_ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci1010_ix]
	movaps xmm5, [esp + mci1010_iy]
	movaps xmm6, [esp + mci1010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 

	movaps xmm5, [esp + mci1010_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	addps  xmm5, xmm3
	movaps [esp + mci1010_vctot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci1010_innerk],  4
	jl    .mci1010_finish_coul_inner
	jmp   .mci1010_unroll_coul_loop
.mci1010_finish_coul_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci1010_innerk],  4
	mov   edx, [esp + mci1010_innerk]
	and   edx, 2
	jnz   .mci1010_dopair_coul
	jmp   .mci1010_checksingle_coul
.mci1010_dopair_coul:	
	mov esi, [ebp + mci1010_charge]
	mov edi, [ebp + mci1010_pos]
    mov   ecx, [esp + mci1010_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci1010_innerjjnr],  8

	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + mci1010_iq]
	xorps  xmm7,xmm7
	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1010_ix]
	movaps xmm5, [esp + mci1010_iy]
	movaps xmm6, [esp + mci1010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 

	movaps xmm5, [esp + mci1010_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	addps  xmm5, xmm3
	movaps [esp + mci1010_vctot], xmm5

.mci1010_checksingle_coul:				
	mov   edx, [esp + mci1010_innerk]
	and   edx, 1
	jnz    .mci1010_dosingle_coul
	jmp    .mci1010_updateouterdata_coul
.mci1010_dosingle_coul:			
	mov esi, [ebp + mci1010_charge]
	mov edi, [ebp + mci1010_pos]
	mov   ecx, [esp + mci1010_innerjjnr]
	mov   eax, [ecx]	
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	
	
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + mci1010_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1010_ix]
	movaps xmm5, [esp + mci1010_iy]
	movaps xmm6, [esp + mci1010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm5, [esp + mci1010_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	addss  xmm5, xmm3
	movaps [esp + mci1010_vctot], xmm5

.mci1010_updateouterdata_coul:
	mov   ecx, [esp + mci1010_ii3]
	;# loop back to mno 
	dec dword ptr [esp + mci1010_nscoul]
	jz  .mci1010_last_mno
	jmp .mci1010_mno_coul
	
.mci1010_last_mno:	
	;# get group index for i particle 
	mov   edx, [ebp + mci1010_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci1010_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci1010_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci1010_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci1010_nri]
	dec ecx
	jecxz .mci1010_end
	;# not last, iterate once more!  
	mov [ebp + mci1010_nri], ecx
	jmp .mci1010_outer
.mci1010_end:
	emms
	mov eax, [esp + mci1010_salign]
	add esp, eax
	add esp, 236
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl mcinl1020_sse
.globl _mcinl1020_sse
mcinl1020_sse:	
_mcinl1020_sse:	
.equiv		mci1020_nri,			8
.equiv		mci1020_iinr,			12
.equiv		mci1020_jindex,			16
.equiv		mci1020_jjnr,			20
.equiv		mci1020_shift,			24
.equiv		mci1020_shiftvec,		28
.equiv		mci1020_gid,			32
.equiv		mci1020_pos,			36		
.equiv		mci1020_charge,			40
.equiv		mci1020_facel,			44
.equiv		mci1020_Vc,				48			
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1020_ixO,	        0
.equiv		mci1020_iyO,	        16
.equiv		mci1020_izO,			32
.equiv		mci1020_ixH1,	        48
.equiv		mci1020_iyH1,	        64
.equiv		mci1020_izH1,			80
.equiv		mci1020_ixH2,	        96
.equiv		mci1020_iyH2,	        112
.equiv		mci1020_izH2,			128
.equiv		mci1020_iqO,			144 
.equiv		mci1020_iqH,			160 
.equiv		mci1020_qqO,			176
.equiv		mci1020_qqH,			192
.equiv		mci1020_vctot,			208
.equiv		mci1020_half,			224
.equiv		mci1020_three,			240
.equiv		mci1020_is3,			256
.equiv		mci1020_ii3,			260
.equiv		mci1020_innerjjnr,		264
.equiv		mci1020_innerk,			268
.equiv		mci1020_salign,			272
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 276		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1020_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + mci1020_half],  xmm0
	movaps [esp + mci1020_three], xmm1

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci1020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1020_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + mci1020_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + mci1020_iqO], xmm3
	movaps [esp + mci1020_iqH], xmm4
	
.mci1020_outer:
	mov   eax, [ebp + mci1020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci1020_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci1020_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci1020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1020_pos]    ;# eax = base of pos[]  
	mov   [esp + mci1020_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci1020_ixO], xmm3
	movaps [esp + mci1020_iyO], xmm4
	movaps [esp + mci1020_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci1020_ixH1], xmm0
	movaps [esp + mci1020_iyH1], xmm1
	movaps [esp + mci1020_izH1], xmm2
	movaps [esp + mci1020_ixH2], xmm3
	movaps [esp + mci1020_iyH2], xmm4
	movaps [esp + mci1020_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci1020_vctot], xmm4
	
	mov   eax, [ebp + mci1020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1020_pos]
	mov   eax, [ebp + mci1020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci1020_innerk], edx    ;# number of innerloop atoms 
	jge   .mci1020_unroll_loop
	jmp   .mci1020_odd_inner
.mci1020_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci1020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + mci1020_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci1020_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0
	shufps xmm4, xmm7, 0
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + mci1020_iqO]
	mulps  xmm4, [esp + mci1020_iqH]

	movaps  [esp + mci1020_qqO], xmm3
	movaps  [esp + mci1020_qqH], xmm4	

	mov esi, [ebp + mci1020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + mci1020_ixO]
	movaps xmm5, [esp + mci1020_iyO]
	movaps xmm6, [esp + mci1020_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + mci1020_ixH1]
	movaps xmm5, [esp + mci1020_iyH1]
	movaps xmm6, [esp + mci1020_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + mci1020_ixH2]
	movaps xmm4, [esp + mci1020_iyH2]
	movaps xmm5, [esp + mci1020_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - seed in xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci1020_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci1020_half]
	movaps  xmm7, xmm4	;# rinvO in xmm7 
	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci1020_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci1020_half]
	movaps  xmm6, xmm4	;# rinvH1 in xmm6 
	;# rsqH2 - seed in xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci1020_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci1020_half]
	movaps  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	mulps  xmm7, [esp + mci1020_qqO]	;# xmm7=vcoul 
	addps  xmm7, [esp + mci1020_vctot]
	movaps [esp + mci1020_vctot], xmm7

	;# H1 interactions 
	mulps  xmm6, [esp + mci1020_qqH]	;# xmm6=vcoul 
	addps  xmm6, [esp + mci1020_vctot]
	movaps [esp + mci1020_vctot], xmm6

	;# H2 interactions 
	mulps  xmm5, [esp + mci1020_qqH]	;# xmm5=vcoul 
	addps  xmm5, [esp + mci1020_vctot]
	movaps [esp + mci1020_vctot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci1020_innerk],  4
	jl    .mci1020_odd_inner
	jmp   .mci1020_unroll_loop
.mci1020_odd_inner:	
	add dword ptr [esp + mci1020_innerk],  4
	jnz   .mci1020_odd_loop
	jmp   .mci1020_updateouterdata
.mci1020_odd_loop:
	mov   edx, [esp + mci1020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci1020_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + mci1020_iqO]
	mov esi, [ebp + mci1020_charge] 
	movhps xmm4, [esp + mci1020_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + mci1020_qqO], xmm3	;# use oxygen qq for storage 

	mov esi, [ebp + mci1020_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + mci1020_ixO]
	movss xmm4, [esp + mci1020_iyO]
	movss xmm5, [esp + mci1020_izO]
		
	movlps xmm6, [esp + mci1020_ixH1]
	movlps xmm7, [esp + mci1020_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + mci1020_iyH1]
	movlps xmm7, [esp + mci1020_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + mci1020_izH1]
	movlps xmm7, [esp + mci1020_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1020_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1020_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000	
	
	movaps xmm3, [esp + mci1020_qqO]

	mulps  xmm3, xmm0	;# xmm3=vcoul 
	addps  xmm3, [esp + mci1020_vctot]
	movaps [esp + mci1020_vctot], xmm3

	dec   dword ptr [esp + mci1020_innerk]
	jz    .mci1020_updateouterdata
	jmp   .mci1020_odd_loop
.mci1020_updateouterdata:
	;# accumulate total potential energy and update it 
	mov   edx, [ebp + mci1020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci1020_gid],  4	

	movaps xmm7, [esp + mci1020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci1020_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 	
	
	;# finish if last 
	mov   ecx, [ebp + mci1020_nri]
	dec ecx
	jecxz .mci1020_end
	;# not last, iterate once more!  
	mov [ebp + mci1020_nri], ecx
	jmp .mci1020_outer
.mci1020_end:
	emms
	mov eax, [esp + mci1020_salign]
	add esp, eax
	add esp, 276
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl mcinl1030_sse
.globl _mcinl1030_sse
mcinl1030_sse:	
_mcinl1030_sse:	
.equiv		mci1030_nri,			8
.equiv		mci1030_iinr,			12
.equiv		mci1030_jindex,			16
.equiv		mci1030_jjnr,			20
.equiv		mci1030_shift,			24
.equiv		mci1030_shiftvec,		28
.equiv		mci1030_gid,			32
.equiv		mci1030_pos,			36		
.equiv		mci1030_charge,			40
.equiv		mci1030_facel,			44
.equiv		mci1030_Vc,				48			
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 	
.equiv		mci1030_ixO,	        0
.equiv		mci1030_iyO,	        16
.equiv		mci1030_izO,			32
.equiv		mci1030_ixH1,	        48
.equiv		mci1030_iyH1,	        64
.equiv		mci1030_izH1,			80
.equiv		mci1030_ixH2,	        96
.equiv		mci1030_iyH2,	        112
.equiv		mci1030_izH2,			128
.equiv		mci1030_jxO,	        144
.equiv		mci1030_jyO,	        160
.equiv		mci1030_jzO,			176
.equiv		mci1030_jxH1,	        192
.equiv		mci1030_jyH1,	        208
.equiv		mci1030_jzH1,			224
.equiv		mci1030_jxH2,	        240
.equiv		mci1030_jyH2,	        256
.equiv		mci1030_jzH2,			272
.equiv		mci1030_qqOO,			288
.equiv		mci1030_qqOH,			304
.equiv		mci1030_qqHH,			320
.equiv		mci1030_vctot,			336
.equiv		mci1030_half,			352
.equiv		mci1030_three,			368
.equiv		mci1030_rsqOO,			384
.equiv		mci1030_rsqOH1,			400
.equiv		mci1030_rsqOH2,			416
.equiv		mci1030_rsqH1O,			432
.equiv		mci1030_rsqH1H1,		448
.equiv		mci1030_rsqH1H2,		464
.equiv		mci1030_rsqH2O,			480
.equiv		mci1030_rsqH2H1,		496
.equiv		mci1030_rsqH2H2,		512
.equiv		mci1030_rinvOO,			528
.equiv		mci1030_rinvOH1,		544
.equiv		mci1030_rinvOH2,		560
.equiv		mci1030_rinvH1O,		576
.equiv		mci1030_rinvH1H1,		592
.equiv		mci1030_rinvH1H2,		608
.equiv		mci1030_rinvH2O,		624
.equiv		mci1030_rinvH2H1,		640
.equiv		mci1030_rinvH2H2,		656
.equiv		mci1030_is3,			672
.equiv		mci1030_ii3,			676
.equiv		mci1030_innerjjnr,		680
.equiv		mci1030_innerk,			684
.equiv		mci1030_salign,			688							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 692		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1030_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + mci1030_half],  xmm0
	movaps [esp + mci1030_three], xmm1
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci1030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1030_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + mci1030_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci1030_qqOO], xmm3
	movaps [esp + mci1030_qqOH], xmm4
	movaps [esp + mci1030_qqHH], xmm5

.mci1030_outer:
	mov   eax, [ebp + mci1030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci1030_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci1030_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci1030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1030_pos]    ;# eax = base of pos[]  
	mov   [esp + mci1030_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci1030_ixO], xmm3
	movaps [esp + mci1030_iyO], xmm4
	movaps [esp + mci1030_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci1030_ixH1], xmm0
	movaps [esp + mci1030_iyH1], xmm1
	movaps [esp + mci1030_izH1], xmm2
	movaps [esp + mci1030_ixH2], xmm3
	movaps [esp + mci1030_iyH2], xmm4
	movaps [esp + mci1030_izH2], xmm5

	;# clear vctot 
	xorps xmm4, xmm4
	movaps [esp + mci1030_vctot], xmm4
	
	mov   eax, [ebp + mci1030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1030_pos]
	mov   eax, [ebp + mci1030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci1030_innerk], edx    ;# number of innerloop atoms 
	jge   .mci1030_unroll_loop
	jmp   .mci1030_single_check
.mci1030_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci1030_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + mci1030_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci1030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d  
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd  
	movaps [esp + mci1030_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + mci1030_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + mci1030_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + mci1030_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + mci1030_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + mci1030_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + mci1030_jzO],  xmm0
	movaps [esp + mci1030_jzH1],  xmm1
	movaps [esp + mci1030_jzH2],  xmm2

	movaps xmm0, [esp + mci1030_ixO]
	movaps xmm1, [esp + mci1030_iyO]
	movaps xmm2, [esp + mci1030_izO]
	movaps xmm3, [esp + mci1030_ixO]
	movaps xmm4, [esp + mci1030_iyO]
	movaps xmm5, [esp + mci1030_izO]
	subps  xmm0, [esp + mci1030_jxO]
	subps  xmm1, [esp + mci1030_jyO]
	subps  xmm2, [esp + mci1030_jzO]
	subps  xmm3, [esp + mci1030_jxH1]
	subps  xmm4, [esp + mci1030_jyH1]
	subps  xmm5, [esp + mci1030_jzH1]
	
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci1030_rsqOO], xmm0
	movaps [esp + mci1030_rsqOH1], xmm3

	movaps xmm0, [esp + mci1030_ixO]
	movaps xmm1, [esp + mci1030_iyO]
	movaps xmm2, [esp + mci1030_izO]
	movaps xmm3, [esp + mci1030_ixH1]
	movaps xmm4, [esp + mci1030_iyH1]
	movaps xmm5, [esp + mci1030_izH1]
	subps  xmm0, [esp + mci1030_jxH2]
	subps  xmm1, [esp + mci1030_jyH2]
	subps  xmm2, [esp + mci1030_jzH2]
	subps  xmm3, [esp + mci1030_jxO]
	subps  xmm4, [esp + mci1030_jyO]
	subps  xmm5, [esp + mci1030_jzO]

	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci1030_rsqOH2], xmm0
	movaps [esp + mci1030_rsqH1O], xmm3

	movaps xmm0, [esp + mci1030_ixH1]
	movaps xmm1, [esp + mci1030_iyH1]
	movaps xmm2, [esp + mci1030_izH1]
	movaps xmm3, [esp + mci1030_ixH1]
	movaps xmm4, [esp + mci1030_iyH1]
	movaps xmm5, [esp + mci1030_izH1]
	subps  xmm0, [esp + mci1030_jxH1]
	subps  xmm1, [esp + mci1030_jyH1]
	subps  xmm2, [esp + mci1030_jzH1]
	subps  xmm3, [esp + mci1030_jxH2]
	subps  xmm4, [esp + mci1030_jyH2]
	subps  xmm5, [esp + mci1030_jzH2]

	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci1030_rsqH1H1], xmm0
	movaps [esp + mci1030_rsqH1H2], xmm3

	movaps xmm0, [esp + mci1030_ixH2]
	movaps xmm1, [esp + mci1030_iyH2]
	movaps xmm2, [esp + mci1030_izH2]
	movaps xmm3, [esp + mci1030_ixH2]
	movaps xmm4, [esp + mci1030_iyH2]
	movaps xmm5, [esp + mci1030_izH2]
	subps  xmm0, [esp + mci1030_jxO]
	subps  xmm1, [esp + mci1030_jyO]
	subps  xmm2, [esp + mci1030_jzO]
	subps  xmm3, [esp + mci1030_jxH1]
	subps  xmm4, [esp + mci1030_jyH1]
	subps  xmm5, [esp + mci1030_jzH1]

	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + mci1030_rsqH2O], xmm0
	movaps [esp + mci1030_rsqH2H1], xmm4

	movaps xmm0, [esp + mci1030_ixH2]
	movaps xmm1, [esp + mci1030_iyH2]
	movaps xmm2, [esp + mci1030_izH2]
	subps  xmm0, [esp + mci1030_jxH2]
	subps  xmm1, [esp + mci1030_jyH2]
	subps  xmm2, [esp + mci1030_jzH2]

	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + mci1030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci1030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci1030_half] ;# rinvH2H2 
	mulps   xmm7, [esp + mci1030_half] ;# rinvH2H1 
	movaps  [esp + mci1030_rinvH2H2], xmm3
	movaps  [esp + mci1030_rinvH2H1], xmm7
	
	rsqrtps xmm1, [esp + mci1030_rsqOO]
	rsqrtps xmm5, [esp + mci1030_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci1030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci1030_rsqOO]
	mulps   xmm5, [esp + mci1030_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci1030_half] 
	mulps   xmm7, [esp + mci1030_half]
	movaps  [esp + mci1030_rinvOO], xmm3
	movaps  [esp + mci1030_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + mci1030_rsqOH2]
	rsqrtps xmm5, [esp + mci1030_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci1030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci1030_rsqOH2]
	mulps   xmm5, [esp + mci1030_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci1030_half] 
	mulps   xmm7, [esp + mci1030_half]
	movaps  [esp + mci1030_rinvOH2], xmm3
	movaps  [esp + mci1030_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + mci1030_rsqH1H1]
	rsqrtps xmm5, [esp + mci1030_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci1030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci1030_rsqH1H1]
	mulps   xmm5, [esp + mci1030_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci1030_half] 
	mulps   xmm7, [esp + mci1030_half]
	movaps  [esp + mci1030_rinvH1H1], xmm3
	movaps  [esp + mci1030_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + mci1030_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci1030_three]
	mulps   xmm1, [esp + mci1030_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + mci1030_half] 
	movaps  [esp + mci1030_rinvH2O], xmm3

	;# sum OO pot in xmm0, OH in xmm1 HH in xmm2 
	movaps xmm0, [esp + mci1030_rinvOO]
	movaps xmm1, [esp + mci1030_rinvOH1]
	movaps xmm2, [esp + mci1030_rinvH1H1]
	addps  xmm1, [esp + mci1030_rinvOH2]
	addps  xmm2, [esp + mci1030_rinvH1H2]
	addps  xmm1, [esp + mci1030_rinvH1O]
	addps  xmm2, [esp + mci1030_rinvH2H1]
	addps  xmm1, [esp + mci1030_rinvH2O]
	addps  xmm2, [esp + mci1030_rinvH2H2]
	
	mulps  xmm0, [esp + mci1030_qqOO]
	mulps  xmm1, [esp + mci1030_qqOH]
	mulps  xmm2, [esp + mci1030_qqHH]
	addps  xmm0, [esp + mci1030_vctot]
	addps  xmm1, xmm2
	addps  xmm0, xmm1
	movaps 	[esp + mci1030_vctot], xmm0

	;# should we do one more iteration? 
	sub dword ptr [esp + mci1030_innerk],  4
	jl    .mci1030_single_check
	jmp   .mci1030_unroll_loop
.mci1030_single_check:
	add dword ptr [esp + mci1030_innerk],  4
	jnz   .mci1030_single_loop
	jmp   .mci1030_updateouterdata
.mci1030_single_loop:
	mov   edx, [esp + mci1030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci1030_innerjjnr],  4	

	mov esi, [ebp + mci1030_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + mci1030_ixO]     
	movaps  xmm1, [esp + mci1030_iyO]
	movaps  xmm2, [esp + mci1030_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + mci1030_jxO], xmm3
	movaps [esp + mci1030_jyO], xmm4
	movaps [esp + mci1030_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	movaps  xmm2, xmm1	
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci1030_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + mci1030_half] ;# rinv iO - j water 

	xorps   xmm1, xmm1

	xorps   xmm4, xmm4

	;# fetch charges to xmm4 (temporary) 
	movss   xmm4, [esp + mci1030_qqOO]

	movhps  xmm4, [esp + mci1030_qqOH]

	mulps   xmm3, xmm4	;# xmm3=vcoul 

	addps   xmm3, [esp + mci1030_vctot]
	movaps  [esp + mci1030_vctot], xmm3	

	;# done with i O Now do i H1 & H2 simultaneously: 
	movaps  xmm0, [esp + mci1030_ixH1]
	movaps  xmm1, [esp + mci1030_iyH1]
	movaps  xmm2, [esp + mci1030_izH1]	
	movaps  xmm3, [esp + mci1030_ixH2] 
	movaps  xmm4, [esp + mci1030_iyH2] 
	movaps  xmm5, [esp + mci1030_izH2] 
	subps   xmm0, [esp + mci1030_jxO]
	subps   xmm1, [esp + mci1030_jyO]
	subps   xmm2, [esp + mci1030_jzO]
	subps   xmm3, [esp + mci1030_jxO]
	subps   xmm4, [esp + mci1030_jyO]
	subps   xmm5, [esp + mci1030_jzO]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 

	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci1030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci1030_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + mci1030_half] ;# rinv H2 - j water  

	;# assemble charges in xmm6 
	xorps   xmm6, xmm6
	;# do coulomb interaction 
	movaps  xmm0, xmm3
	movss   xmm6, [esp + mci1030_qqOH]
	movaps  xmm4, xmm7
	movhps  xmm6, [esp + mci1030_qqHH]
	mulps   xmm3, xmm6	;# vcoul 
	mulps   xmm7, xmm6	;# vcoul 
	addps   xmm3, xmm7	;# total vcoul 
	addps   xmm3, [esp + mci1030_vctot]
	movaps  [esp + mci1030_vctot], xmm3
	
	dec   dword ptr [esp + mci1030_innerk]
	jz    .mci1030_updateouterdata
	jmp   .mci1030_single_loop
.mci1030_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci1030_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci1030_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci1030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci1030_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 	

	;# finish if last 
	mov   ecx, [ebp + mci1030_nri]
	dec ecx
	jecxz .mci1030_end
	;# not last, iterate once more!  
	mov [ebp + mci1030_nri], ecx
	jmp .mci1030_outer
.mci1030_end:
	emms
	mov eax, [esp + mci1030_salign]
	add esp, eax
	add esp, 692
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret





.globl mcinl1100_sse
.globl _mcinl1100_sse
mcinl1100_sse:	
_mcinl1100_sse:	
.equiv		mci1100_nri,			8
.equiv		mci1100_iinr,			12
.equiv		mci1100_jindex,			16
.equiv		mci1100_jjnr,			20
.equiv		mci1100_shift,			24
.equiv		mci1100_shiftvec,		28
.equiv		mci1100_gid,			32
.equiv		mci1100_pos,			36		
.equiv		mci1100_charge,			40
.equiv		mci1100_facel,			44
.equiv		mci1100_Vc,				48	
.equiv		mci1100_type,			52
.equiv		mci1100_ntype,			56
.equiv		mci1100_nbfp,			60	
.equiv		mci1100_Vnb,			64	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1100_ix,				0
.equiv		mci1100_iy,				16
.equiv		mci1100_iz,				32
.equiv		mci1100_iq,				48	
.equiv		mci1100_c6,				64
.equiv		mci1100_c12,			80		 
.equiv		mci1100_vctot,			96
.equiv		mci1100_vnbtot,			112
.equiv		mci1100_half,			128
.equiv		mci1100_three,			144
.equiv		mci1100_is3,			160
.equiv		mci1100_ii3,			164
.equiv		mci1100_ntia,	        168	
.equiv		mci1100_innerjjnr,		172
.equiv		mci1100_innerk,			176
.equiv		mci1100_salign,			180
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  184		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1100_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + mci1100_half],  xmm0
	movaps [esp + mci1100_three], xmm1

	;# assume we have at least one i particle - start directly 	
.mci1100_outer:
	mov   eax, [ebp + mci1100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci1100_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci1100_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci1100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1100_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci1100_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + mci1100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci1100_ntype]
    shl   edx, 1
    mov   [esp + mci1100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1100_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci1100_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci1100_ix], xmm0
	movaps [esp + mci1100_iy], xmm1
	movaps [esp + mci1100_iz], xmm2

	mov   [esp + mci1100_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci1100_vctot], xmm4
	movaps [esp + mci1100_vnbtot], xmm4
	
	mov   eax, [ebp + mci1100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1100_pos]
	mov   eax, [ebp + mci1100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci1100_innerk], edx    ;# number of innerloop atoms 
	jge   .mci1100_unroll_loop
	jmp   .mci1100_finish_inner
.mci1100_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci1100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci1100_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci1100_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci1100_iq]
	shufps xmm3, xmm6, 0
	shufps xmm4, xmm7, 0
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci1100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci1100_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci1100_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci1100_c6], xmm4
	movaps [esp + mci1100_c12], xmm6
	
	mov esi, [ebp + mci1100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci1100_ix]
	movaps xmm5, [esp + mci1100_iy]
	movaps xmm6, [esp + mci1100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + mci1100_c6]
	mulps  xmm2, [esp + mci1100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci1100_vnbtot]
	addps  xmm3, [esp + mci1100_vctot]
	movaps [esp + mci1100_vctot], xmm3
	movaps [esp + mci1100_vnbtot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci1100_innerk],  4
	jl    .mci1100_finish_inner
	jmp   .mci1100_unroll_loop
.mci1100_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci1100_innerk],  4
	mov   edx, [esp + mci1100_innerk]
	and   edx, 2
	jnz   .mci1100_dopair
	jmp   .mci1100_checksingle
.mci1100_dopair:	
	mov esi, [ebp + mci1100_charge]

    mov   ecx, [esp + mci1100_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci1100_innerjjnr],  8

	xorps xmm3, xmm3
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 12 ;# 00001100 
	shufps xmm3, xmm3, 88 ;# 01011000 ;# xmm3(0,1) has the charges 

	mov esi, [ebp + mci1100_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci1100_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci1100_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci1100_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci1100_c6], xmm4
	movaps [esp + mci1100_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + mci1100_iq]

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1100_ix]
	movaps xmm5, [esp + mci1100_iy]
	movaps xmm6, [esp + mci1100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + mci1100_c6]
	mulps  xmm2, [esp + mci1100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci1100_vnbtot]
	addps  xmm3, [esp + mci1100_vctot]
	movaps [esp + mci1100_vctot], xmm3
	movaps [esp + mci1100_vnbtot], xmm5

.mci1100_checksingle:				
	mov   edx, [esp + mci1100_innerk]
	and   edx, 1
	jnz    .mci1100_dosingle
	jmp    .mci1100_updateouterdata
.mci1100_dosingle:			
	mov esi, [ebp + mci1100_charge]
	mov edi, [ebp + mci1100_pos]
	mov   ecx, [esp + mci1100_innerjjnr]
	xorps xmm3, xmm3
	mov   eax, [ecx]
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	

	mov esi, [ebp + mci1100_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci1100_nbfp]
	shl ecx, 1
	add ecx, [esp + mci1100_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci1100_c6], xmm4
	movaps [esp + mci1100_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + mci1100_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1100_ix]
	movaps xmm5, [esp + mci1100_iy]
	movaps xmm6, [esp + mci1100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + mci1100_c6]
	mulps  xmm2, [esp + mci1100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + mci1100_vnbtot]
	addss  xmm3, [esp + mci1100_vctot]
	movss [esp + mci1100_vctot], xmm3
	movss [esp + mci1100_vnbtot], xmm5

.mci1100_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci1100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci1100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci1100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci1100_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci1100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci1100_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci1100_nri]
	dec ecx
	jecxz .mci1100_end
	;# not last, iterate once more!  
	mov [ebp + mci1100_nri], ecx
	jmp .mci1100_outer
.mci1100_end:
	emms
	mov eax, [esp + mci1100_salign]
	add esp, eax
	add esp,  184
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl mcinl2100_sse
.globl _mcinl2100_sse
mcinl2100_sse:	
_mcinl2100_sse:	
.equiv		mci2100_nri,			8
.equiv		mci2100_iinr,			12
.equiv		mci2100_jindex,			16
.equiv		mci2100_jjnr,			20
.equiv		mci2100_shift,			24
.equiv		mci2100_shiftvec,		28
.equiv		mci2100_gid,			32
.equiv		mci2100_pos,			36		
.equiv		mci2100_charge,			40
.equiv		mci2100_facel,			44
.equiv		mci2100_Vc,				48			
.equiv		mci2100_argkrf,			52	
.equiv		mci2100_argcrf,			56	
.equiv		mci2100_type,			60
.equiv		mci2100_ntype,			64
.equiv		mci2100_nbfp,			68	
.equiv		mci2100_Vnb,			72	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2100_ix,				0
.equiv		mci2100_iy,				16
.equiv		mci2100_iz,				32
.equiv		mci2100_iq,				48	
.equiv		mci2100_c6,				64
.equiv		mci2100_c12,			80		 
.equiv		mci2100_vctot,			96
.equiv		mci2100_vnbtot,			112
.equiv		mci2100_half,			128
.equiv		mci2100_three,			144
.equiv		mci2100_krf,			160	 
.equiv		mci2100_crf,			176	 
.equiv		mci2100_is3,			192
.equiv		mci2100_ii3,			196
.equiv		mci2100_ntia,	        200
.equiv		mci2100_innerjjnr,		204
.equiv		mci2100_innerk,			208
.equiv		mci2100_salign,			212
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  216		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2100_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movss xmm5, [ebp + mci2100_argkrf]
	movss xmm6, [ebp + mci2100_argcrf]
	
	movaps [esp + mci2100_half],  xmm0
	movaps [esp + mci2100_three], xmm1
	shufps xmm5, xmm5, 0
	shufps xmm6, xmm6, 0
	movaps [esp + mci2100_krf], xmm5
	movaps [esp + mci2100_crf], xmm6

	;# assume we have at least one i particle - start directly 	
.mci2100_outer:
	mov   eax, [ebp + mci2100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci2100_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci2100_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci2100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2100_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci2100_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + mci2100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci2100_ntype]
    shl   edx, 1
    mov   [esp + mci2100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2100_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci2100_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci2100_ix], xmm0
	movaps [esp + mci2100_iy], xmm1
	movaps [esp + mci2100_iz], xmm2

	mov   [esp + mci2100_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci2100_vctot], xmm4
	movaps [esp + mci2100_vnbtot], xmm4
	
	mov   eax, [ebp + mci2100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2100_pos]
	mov   eax, [ebp + mci2100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci2100_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2100_unroll_loop
	jmp   .mci2100_finish_inner
.mci2100_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci2100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci2100_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci2100_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci2100_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci2100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci2100_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci2100_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci2100_c6], xmm4
	movaps [esp + mci2100_c12], xmm6
	
	mov esi, [ebp + mci2100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci2100_ix]
	movaps xmm5, [esp + mci2100_iy]
	movaps xmm6, [esp + mci2100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 
	
	movaps xmm7, [esp + mci2100_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci2100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci2100_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movaps xmm1, xmm4
	subps  xmm6, [esp + mci2100_crf]
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	mulps  xmm1, [esp + mci2100_c6]
	mulps  xmm2, [esp + mci2100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci2100_vnbtot]
	addps  xmm6, [esp + mci2100_vctot]
	movaps [esp + mci2100_vctot], xmm6
	movaps [esp + mci2100_vnbtot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci2100_innerk],  4
	jl    .mci2100_finish_inner
	jmp   .mci2100_unroll_loop
.mci2100_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci2100_innerk],  4
	mov   edx, [esp + mci2100_innerk]
	and   edx, 2
	jnz   .mci2100_dopair
	jmp   .mci2100_checksingle
.mci2100_dopair:	
	mov esi, [ebp + mci2100_charge]

    mov   ecx, [esp + mci2100_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci2100_innerjjnr],  8

	xorps xmm3, xmm3
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 12 ;# 00001100 
	shufps xmm3, xmm3, 88 ;# 01011000 ;# xmm3(0,1) has the charges 

	mov esi, [ebp + mci2100_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci2100_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci2100_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci2100_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci2100_c6], xmm4
	movaps [esp + mci2100_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + mci2100_iq]

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci2100_ix]
	movaps xmm5, [esp + mci2100_iy]
	movaps xmm6, [esp + mci2100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	movaps xmm7, [esp + mci2100_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci2100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci2100_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movaps xmm1, xmm4
	subps  xmm6, [esp + mci2100_crf]
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq-crf) 
	mulps  xmm1, [esp + mci2100_c6]
	mulps  xmm2, [esp + mci2100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci2100_vnbtot]
	addps  xmm6, [esp + mci2100_vctot]
	movaps [esp + mci2100_vctot], xmm6
	movaps [esp + mci2100_vnbtot], xmm5

.mci2100_checksingle:				
	mov   edx, [esp + mci2100_innerk]
	and   edx, 1
	jnz    .mci2100_dosingle
	jmp    .mci2100_updateouterdata
.mci2100_dosingle:			
	mov esi, [ebp + mci2100_charge]
	mov edi, [ebp + mci2100_pos]
	mov   ecx, [esp + mci2100_innerjjnr]
	xorps xmm3, xmm3
	mov   eax, [ecx]
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	

	mov esi, [ebp + mci2100_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci2100_nbfp]
	shl ecx, 1
	add ecx, [esp + mci2100_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci2100_c6], xmm4
	movaps [esp + mci2100_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + mci2100_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci2100_ix]
	movaps xmm5, [esp + mci2100_iy]
	movaps xmm6, [esp + mci2100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	movaps xmm7, [esp + mci2100_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci2100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci2100_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	movaps xmm1, xmm4
	subps  xmm6, [esp + mci2100_crf]	
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm6, xmm3	;# xmm6=vcoul 
	mulps  xmm1, [esp + mci2100_c6]
	mulps  xmm2, [esp + mci2100_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + mci2100_vnbtot]
	addss  xmm6, [esp + mci2100_vctot]
	movss [esp + mci2100_vctot], xmm6
	movss [esp + mci2100_vnbtot], xmm5

.mci2100_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci2100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci2100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci2100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci2100_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci2100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci2100_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2100_nri]
	dec ecx
	jecxz .mci2100_end
	;# not last, iterate once more!  
	mov [ebp + mci2100_nri], ecx
	jmp .mci2100_outer
.mci2100_end:
	emms
	mov eax, [esp + mci2100_salign]
	add esp, eax
	add esp,  216
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl2000_sse
.globl _mcinl2000_sse
mcinl2000_sse:	
_mcinl2000_sse:	
.equiv		mci2000_nri,			8
.equiv		mci2000_iinr,			12
.equiv		mci2000_jindex,			16
.equiv		mci2000_jjnr,			20
.equiv		mci2000_shift,			24
.equiv		mci2000_shiftvec,		28
.equiv		mci2000_gid,			32
.equiv		mci2000_pos,			36		
.equiv		mci2000_charge,			40
.equiv		mci2000_facel,			44
.equiv		mci2000_Vc,				48			
.equiv		mci2000_argkrf,			52	
.equiv		mci2000_argcrf,			56
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2000_ix,				0
.equiv		mci2000_iy,				16
.equiv		mci2000_iz,				32
.equiv		mci2000_iq,				48	
.equiv		mci2000_vctot,			64
.equiv		mci2000_half,			80
.equiv		mci2000_three,			96
.equiv		mci2000_krf,	        112	 
.equiv		mci2000_crf,	        128	 
.equiv		mci2000_is3,			144
.equiv		mci2000_ii3,			148
.equiv		mci2000_innerjjnr,		152
.equiv		mci2000_innerk,			156
.equiv		mci2000_salign,			160	
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp,  164		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2000_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movss xmm5, [ebp + mci2000_argkrf]
	movss xmm6, [ebp + mci2000_argcrf]
	
	movaps [esp + mci2000_half],  xmm0
	movaps [esp + mci2000_three], xmm1
	shufps xmm5, xmm5, 0
	movaps [esp + mci2000_krf], xmm5
	shufps xmm6, xmm6, 0
	movaps [esp + mci2000_crf], xmm6

	;# assume we have at least one i particle - start directly 	
.mci2000_outer:
	mov   eax, [ebp + mci2000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci2000_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci2000_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci2000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2000_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci2000_facel]
	shufps xmm3, xmm3, 0
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2000_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci2000_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci2000_ix], xmm0
	movaps [esp + mci2000_iy], xmm1
	movaps [esp + mci2000_iz], xmm2

	mov   [esp + mci2000_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci2000_vctot], xmm4
	
	mov   eax, [ebp + mci2000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2000_pos]
	mov   eax, [ebp + mci2000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci2000_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2000_unroll_loop
	jmp   .mci2000_finish_inner
.mci2000_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci2000_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci2000_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci2000_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci2000_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  

	mov esi, [ebp + mci2000_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci2000_ix]
	movaps xmm5, [esp + mci2000_iy]
	movaps xmm6, [esp + mci2000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 
	
	movaps xmm7, [esp + mci2000_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci2000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci2000_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	subps  xmm6, [esp + mci2000_crf] ;# xmm6=rinv+ krsq-crf 
	mulps  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq) 
	addps  xmm6, [esp + mci2000_vctot]
	movaps [esp + mci2000_vctot], xmm6
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci2000_innerk],  4
	jl    .mci2000_finish_inner
	jmp   .mci2000_unroll_loop
.mci2000_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci2000_innerk],  4
	mov   edx, [esp + mci2000_innerk]
	and   edx, 2
	jnz   .mci2000_dopair
	jmp   .mci2000_checksingle
.mci2000_dopair:	
	mov esi, [ebp + mci2000_charge]

    mov   ecx, [esp + mci2000_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci2000_innerjjnr],  8

	xorps xmm3, xmm3
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 12 ;# 00001100 
	shufps xmm3, xmm3, 88 ;# 01011000 ;# xmm3(0,1) has the charges 	

	mov edi, [ebp + mci2000_pos]	
				
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + mci2000_iq]

	xorps  xmm7,xmm7
	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	
	movaps xmm4, [esp + mci2000_ix]
	movaps xmm5, [esp + mci2000_iy]
	movaps xmm6, [esp + mci2000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	movaps xmm7, [esp + mci2000_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci2000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci2000_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	subps  xmm6, [esp + mci2000_crf] ;# xmm6=rinv+ krsq-crf 
	mulps  xmm6, xmm3	;# xmm6=vcoul=qq*(rinv+ krsq-crf) 

	addps  xmm6, [esp + mci2000_vctot]
	movaps [esp + mci2000_vctot], xmm6

.mci2000_checksingle:				
	mov   edx, [esp + mci2000_innerk]
	and   edx, 1
	jnz    .mci2000_dosingle
	jmp    .mci2000_updateouterdata
.mci2000_dosingle:			
	mov esi, [ebp + mci2000_charge]
	mov edi, [ebp + mci2000_pos]
	mov   ecx, [esp + mci2000_innerjjnr]
	xorps xmm3, xmm3
	mov   eax, [ecx]
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + mci2000_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci2000_ix]
	movaps xmm5, [esp + mci2000_iy]
	movaps xmm6, [esp + mci2000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	movaps xmm7, [esp + mci2000_krf]
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci2000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci2000_half]
	mulps  xmm7, xmm4	;# xmm7=krsq 
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm6, xmm0
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	subps  xmm6, [esp + mci2000_crf] ;# xmm6=rinv+ krsq-crf 
	mulps  xmm6, xmm3	;# xmm6=vcoul 
	addss  xmm6, [esp + mci2000_vctot]
	movss [esp + mci2000_vctot], xmm6

.mci2000_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci2000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci2000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci2000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci2000_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2000_nri]
	dec ecx
	jecxz .mci2000_end
	;# not last, iterate once more!  
	mov [ebp + mci2000_nri], ecx
	jmp .mci2000_outer
.mci2000_end:
	emms
	mov eax, [esp + mci2000_salign]
	add esp, eax
	add esp,  164
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret





.globl mcinl1110_sse
.globl _mcinl1110_sse
mcinl1110_sse:	
_mcinl1110_sse:	
.equiv		mci1110_nri,			8
.equiv		mci1110_iinr,			12
.equiv		mci1110_jindex,			16
.equiv		mci1110_jjnr,			20
.equiv		mci1110_shift,			24
.equiv		mci1110_shiftvec,		28
.equiv		mci1110_gid,			32
.equiv		mci1110_pos,			36		
.equiv		mci1110_charge,			40
.equiv		mci1110_facel,			44
.equiv		mci1110_Vc,				48			
.equiv		mci1110_type,			52
.equiv		mci1110_ntype,			56
.equiv		mci1110_nbfp,			60	
.equiv		mci1110_Vnb,			64	
.equiv		mci1110_nsatoms,		68		
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1110_ix,				0
.equiv		mci1110_iy,				16
.equiv		mci1110_iz,				32
.equiv		mci1110_iq,				48	
.equiv		mci1110_c6,				64
.equiv		mci1110_c12,			80
.equiv      mci1110_two,			96	
.equiv		mci1110_vctot,			112
.equiv		mci1110_vnbtot,			128
.equiv		mci1110_half,			144
.equiv		mci1110_three,			160
.equiv		mci1110_is3,			176
.equiv		mci1110_ii3,			180
.equiv		mci1110_shX,	        184
.equiv		mci1110_shY,			188
.equiv		mci1110_shZ,			192
.equiv		mci1110_ntia,	        196	
.equiv		mci1110_innerjjnr0,		200
.equiv		mci1110_innerk0,		204
.equiv		mci1110_innerjjnr,		208
.equiv		mci1110_innerk,			212
.equiv		mci1110_salign,			216
.equiv		mci1110_nsvdwc,			220
.equiv		mci1110_nscoul,			224
.equiv		mci1110_nsvdw,			228
.equiv		mci1110_solnr,	        232		
	push ebp
	mov ebp,esp	
	push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 236		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1110_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movaps [esp + mci1110_half],  xmm0
	movaps [esp + mci1110_two], xmm1
	movaps [esp + mci1110_three], xmm2

	;# assume we have at least one i particle - start directly 	
.mci1110_outer:
	mov   eax, [ebp + mci1110_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1110_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci1110_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci1110_shiftvec]   ;# eax = base of shiftvec[] 

	movlps xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 8] 
	movlps [esp + mci1110_shX], xmm0
	movss [esp + mci1110_shZ], xmm1

	mov   ecx, [ebp + mci1110_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1110_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + mci1110_nsatoms]
	add dword ptr [ebp + mci1110_nsatoms],  12
	mov   ecx, [eax]	
	mov   edx, [eax + 4]
	mov   eax, [eax + 8]	
	sub   ecx, eax
	sub   eax, edx
	
	mov   [esp + mci1110_nsvdwc], edx
	mov   [esp + mci1110_nscoul], eax
	mov   [esp + mci1110_nsvdw], ecx
		
	;# clear potential 
	xorps xmm4, xmm4
	movaps [esp + mci1110_vctot], xmm4
	movaps [esp + mci1110_vnbtot], xmm4
	mov   [esp + mci1110_solnr],  ebx

	mov   eax, [ebp + mci1110_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1110_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   eax, [ebp + mci1110_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1110_innerjjnr0], eax     ;# pointer to jjnr[nj0] 
	mov   [esp + mci1110_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + mci1110_nsvdwc]
	cmp   ecx,  0
	jnz   .mci1110_mno_vdwc
	jmp   .mci1110_testcoul
.mci1110_mno_vdwc:
	mov   ebx,  [esp + mci1110_solnr]
	inc   dword ptr [esp + mci1110_solnr]

	mov   edx, [ebp + mci1110_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci1110_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + mci1110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci1110_ntype]
    shl   edx, 1
    mov   [esp + mci1110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1110_pos]    ;# eax = base of pos[]  

	movss xmm0, [esp + mci1110_shX]
	movss xmm1, [esp + mci1110_shY]
	movss xmm2, [esp + mci1110_shZ]
	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci1110_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci1110_ix], xmm0
	movaps [esp + mci1110_iy], xmm1
	movaps [esp + mci1110_iz], xmm2

	mov   [esp + mci1110_ii3], ebx
	
	mov   ecx, [esp + mci1110_innerjjnr0]
	mov   [esp + mci1110_innerjjnr], ecx
	mov   edx, [esp + mci1110_innerk0]
    sub   edx,  4
    mov   [esp + mci1110_innerk], edx    ;# number of innerloop atoms 
	jge   .mci1110_unroll_vdwc_loop
	jmp   .mci1110_finish_vdwc_inner
.mci1110_unroll_vdwc_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci1110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci1110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci1110_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci1110_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci1110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci1110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci1110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci1110_c6], xmm4
	movaps [esp + mci1110_c12], xmm6
	
	mov esi, [ebp + mci1110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm2
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci1110_ix]
	movaps xmm5, [esp + mci1110_iy]
	movaps xmm6, [esp + mci1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + mci1110_c6]
	mulps  xmm2, [esp + mci1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci1110_vnbtot]
	addps  xmm3, [esp + mci1110_vctot]
	movaps [esp + mci1110_vctot], xmm3
	movaps [esp + mci1110_vnbtot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci1110_innerk],  4
	jl    .mci1110_finish_vdwc_inner
	jmp   .mci1110_unroll_vdwc_loop
.mci1110_finish_vdwc_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci1110_innerk],  4
	mov   edx, [esp + mci1110_innerk]
	and   edx, 2
	jnz   .mci1110_dopair_vdwc
	jmp   .mci1110_checksingle_vdwc
.mci1110_dopair_vdwc:	
	mov esi, [ebp + mci1110_charge]
    mov   ecx, [esp + mci1110_innerjjnr]
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci1110_innerjjnr],  8

	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mov esi, [ebp + mci1110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci1110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci1110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci1110_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci1110_c6], xmm4
	movaps [esp + mci1110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + mci1110_iq]
	movlhps xmm3, xmm7
	shufps xmm2, xmm0, 0
	movaps xmm0, xmm1
	shufps xmm2, xmm2, 136  ;# 10001000
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1110_ix]
	movaps xmm5, [esp + mci1110_iy]
	movaps xmm6, [esp + mci1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + mci1110_c6]
	mulps  xmm2, [esp + mci1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci1110_vnbtot]
	addps  xmm3, [esp + mci1110_vctot]
	movaps [esp + mci1110_vctot], xmm3
	movaps [esp + mci1110_vnbtot], xmm5

.mci1110_checksingle_vdwc:				
	mov   edx, [esp + mci1110_innerk]
	and   edx, 1
	jnz    .mci1110_dosingle_vdwc
	jmp    .mci1110_updateouterdata_vdwc
.mci1110_dosingle_vdwc:			
	mov esi, [ebp + mci1110_charge]
	mov edi, [ebp + mci1110_pos]
	mov   ecx, [esp + mci1110_innerjjnr]
	mov   eax, [ecx]	
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	

	mov esi, [ebp + mci1110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci1110_nbfp]
	shl ecx, 1
	add ecx, [esp + mci1110_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci1110_c6], xmm4
	movaps [esp + mci1110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + mci1110_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1110_ix]
	movaps xmm5, [esp + mci1110_iy]
	movaps xmm6, [esp + mci1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + mci1110_c6]
	mulps  xmm2, [esp + mci1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + mci1110_vnbtot]
	addss  xmm3, [esp + mci1110_vctot]
	movss [esp + mci1110_vctot], xmm3
	movss [esp + mci1110_vnbtot], xmm5

.mci1110_updateouterdata_vdwc:
	;# loop back to mno 
	dec dword ptr [esp + mci1110_nsvdwc]
	jz  .mci1110_testcoul
	jmp .mci1110_mno_vdwc
.mci1110_testcoul:
	mov  ecx, [esp + mci1110_nscoul]
	cmp  ecx,  0
	jnz  .mci1110_mno_coul
	jmp  .mci1110_testvdw
.mci1110_mno_coul:
	mov   ebx,  [esp + mci1110_solnr]
	inc   dword ptr [esp + mci1110_solnr]

	movss xmm0, [esp + mci1110_shX]
	movss xmm1, [esp + mci1110_shY]
	movss xmm2, [esp + mci1110_shZ]

	mov   edx, [ebp + mci1110_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci1110_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1110_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci1110_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci1110_ix], xmm0
	movaps [esp + mci1110_iy], xmm1
	movaps [esp + mci1110_iz], xmm2

	mov   [esp + mci1110_ii3], ebx
	
	mov   ecx, [esp + mci1110_innerjjnr0]
	mov   [esp + mci1110_innerjjnr], ecx
	mov   edx, [esp + mci1110_innerk0]
    sub   edx,  4
    mov   [esp + mci1110_innerk], edx    ;# number of innerloop atoms 
	jge   .mci1110_unroll_coul_loop
	jmp   .mci1110_finish_coul_inner

.mci1110_unroll_coul_loop:	
	;# quad-unrolled innerloop here 
	mov   edx, [esp + mci1110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci1110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci1110_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm5, [esp + mci1110_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000	      
	mov esi, [ebp + mci1110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	mulps xmm3, xmm5
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci1110_ix]
	movaps xmm5, [esp + mci1110_iy]
	movaps xmm6, [esp + mci1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	movaps xmm5, [esp + mci1110_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	addps  xmm5, xmm3
	movaps [esp + mci1110_vctot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci1110_innerk],  4
	jl    .mci1110_finish_coul_inner
	jmp   .mci1110_unroll_coul_loop
.mci1110_finish_coul_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci1110_innerk],  4
	mov   edx, [esp + mci1110_innerk]
	and   edx, 2
	jnz   .mci1110_dopair_coul
	jmp   .mci1110_checksingle_coul
.mci1110_dopair_coul:	
	mov esi, [ebp + mci1110_charge]
	mov edi, [ebp + mci1110_pos]
    mov   ecx, [esp + mci1110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci1110_innerjjnr],  8

	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	mulps  xmm3, [esp + mci1110_iq]
	xorps  xmm7,xmm7
	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0	
	movaps xmm0, xmm1
	shufps xmm2, xmm2, 136  ;# 10001000
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1110_ix]
	movaps xmm5, [esp + mci1110_iy]
	movaps xmm6, [esp + mci1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movaps xmm5, [esp + mci1110_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	addps  xmm5, xmm3
	movaps [esp + mci1110_vctot], xmm5

.mci1110_checksingle_coul:				
	mov   edx, [esp + mci1110_innerk]
	and   edx, 1
	jnz    .mci1110_dosingle_coul
	jmp    .mci1110_updateouterdata_coul
.mci1110_dosingle_coul:			
	mov esi, [ebp + mci1110_charge]
	mov edi, [ebp + mci1110_pos]
	mov   ecx, [esp + mci1110_innerjjnr]
	mov   eax, [ecx]	
	movss xmm3, [esi + eax*4]	;# xmm3(0) has the charge 	
	
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
 
	mulps  xmm3, [esp + mci1110_iq]
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1110_ix]
	movaps xmm5, [esp + mci1110_iy]
	movaps xmm6, [esp + mci1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	movss xmm5, [esp + mci1110_vctot]
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	addps  xmm5, xmm3
	movss [esp + mci1110_vctot], xmm5

.mci1110_updateouterdata_coul:

	;# loop back to mno 
	dec dword ptr [esp + mci1110_nscoul]
	jz  .mci1110_testvdw
	jmp .mci1110_mno_coul
.mci1110_testvdw:
	mov  ecx, [esp + mci1110_nsvdw]
	cmp  ecx,  0
	jnz  .mci1110_mno_vdw
	jmp  .mci1110_last_mno
.mci1110_mno_vdw:
	mov   ebx,  [esp + mci1110_solnr]
	inc   dword ptr [esp + mci1110_solnr]

    mov   edx, [ebp + mci1110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci1110_ntype]
    shl   edx, 1
    mov   [esp + mci1110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1110_pos]    ;# eax = base of pos[]  
	mov   [esp + mci1110_ii3], ebx

	movss xmm0, [esp + mci1110_shX]
	movss xmm1, [esp + mci1110_shY]
	movss xmm2, [esp + mci1110_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci1110_ix], xmm0
	movaps [esp + mci1110_iy], xmm1
	movaps [esp + mci1110_iz], xmm2

	mov   ecx, [esp + mci1110_innerjjnr0]
	mov   [esp + mci1110_innerjjnr], ecx
	mov   edx, [esp + mci1110_innerk0]
    sub   edx,  4
    mov   [esp + mci1110_innerk], edx    ;# number of innerloop atoms 
	jge   .mci1110_unroll_vdw_loop
	jmp   .mci1110_finish_vdw_inner
.mci1110_unroll_vdw_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci1110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci1110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci1110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci1110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci1110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci1110_c6], xmm4
	movaps [esp + mci1110_c12], xmm6
	
	mov esi, [ebp + mci1110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci1110_ix]
	movaps xmm5, [esp + mci1110_iy]
	movaps xmm6, [esp + mci1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2
	
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci1110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci1110_c6]
	mulps  xmm2, [esp + mci1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci1110_vnbtot]
	movaps [esp + mci1110_vnbtot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci1110_innerk],  4
	jl    .mci1110_finish_vdw_inner
	jmp   .mci1110_unroll_vdw_loop
.mci1110_finish_vdw_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci1110_innerk],  4
	mov   edx, [esp + mci1110_innerk]
	and   edx, 2
	jnz   .mci1110_dopair_vdw
	jmp   .mci1110_checksingle_vdw
.mci1110_dopair_vdw:	

    mov   ecx, [esp + mci1110_innerjjnr]
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci1110_innerjjnr],  8

	mov esi, [ebp + mci1110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci1110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci1110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci1110_pos]	
	xorps  xmm7,xmm7
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci1110_c6], xmm4
	movaps [esp + mci1110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	


	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1110_ix]
	movaps xmm5, [esp + mci1110_iy]
	movaps xmm6, [esp + mci1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci1110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci1110_c6]
	mulps  xmm2, [esp + mci1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci1110_vnbtot]
	movaps [esp + mci1110_vnbtot], xmm5

.mci1110_checksingle_vdw:				
	mov   edx, [esp + mci1110_innerk]
	and   edx, 1
	jnz    .mci1110_dosingle_vdw
	jmp    .mci1110_updateouterdata_vdw
.mci1110_dosingle_vdw:			
	mov edi, [ebp + mci1110_pos]
	mov   ecx, [esp + mci1110_innerjjnr]
	mov   eax, [ecx]		

	mov esi, [ebp + mci1110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci1110_nbfp]
	shl ecx, 1
	add ecx, [esp + mci1110_ntia]
	xorps  xmm6, xmm6
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci1110_c6], xmm4
	movaps [esp + mci1110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	
	
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci1110_ix]
	movaps xmm5, [esp + mci1110_iy]
	movaps xmm6, [esp + mci1110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci1110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci1110_c6]
	mulps  xmm2, [esp + mci1110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + mci1110_vnbtot]
	movss [esp + mci1110_vnbtot], xmm5

.mci1110_updateouterdata_vdw:
	;# loop back to mno 
	dec dword ptr [esp + mci1110_nsvdw]
	jz  .mci1110_last_mno
	jmp .mci1110_mno_vdw
.mci1110_last_mno:	
	;# get group index for i particle 
	mov   edx, [ebp + mci1110_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci1110_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci1110_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci1110_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci1110_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci1110_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci1110_nri]
	dec ecx
	jecxz .mci1110_end
	;# not last, iterate once more!  
	mov [ebp + mci1110_nri], ecx
	jmp .mci1110_outer
.mci1110_end:
	emms
	mov eax, [esp + mci1110_salign]
	add esp, eax
	add esp, 236
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl mcinl1120_sse
.globl _mcinl1120_sse
mcinl1120_sse:	
_mcinl1120_sse:	
.equiv		mci1120_nri,			8
.equiv		mci1120_iinr,			12
.equiv		mci1120_jindex,			16
.equiv		mci1120_jjnr,			20
.equiv		mci1120_shift,			24
.equiv		mci1120_shiftvec,		28
.equiv		mci1120_gid,			32
.equiv		mci1120_pos,			36		
.equiv		mci1120_charge,			40
.equiv		mci1120_facel,			44
.equiv		mci1120_Vc,				48			
.equiv		mci1120_type,			52
.equiv		mci1120_ntype,			56
.equiv		mci1120_nbfp,			60	
.equiv		mci1120_Vnb,			64	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1120_ixO,	        0
.equiv		mci1120_iyO,	        16
.equiv		mci1120_izO,			32
.equiv		mci1120_ixH1,	        48
.equiv		mci1120_iyH1,	        64
.equiv		mci1120_izH1,			80
.equiv		mci1120_ixH2,	        96
.equiv		mci1120_iyH2,	        112
.equiv		mci1120_izH2,			128
.equiv		mci1120_iqO,			144 
.equiv		mci1120_iqH,			160 	
.equiv		mci1120_qqO,			176
.equiv		mci1120_qqH,			192
.equiv		mci1120_c6,				208
.equiv		mci1120_c12,			224		 
.equiv		mci1120_vctot,			240
.equiv		mci1120_vnbtot,			256
.equiv		mci1120_half,			272
.equiv		mci1120_three,			288
.equiv		mci1120_is3,			304
.equiv		mci1120_ii3,			308
.equiv		mci1120_ntia,	        312	
.equiv		mci1120_innerjjnr,		316
.equiv		mci1120_innerk,			320
.equiv		mci1120_salign,			324
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 328		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1120_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + mci1120_half],  xmm0
	movaps [esp + mci1120_three], xmm1

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci1120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1120_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + mci1120_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + mci1120_iqO], xmm3
	movaps [esp + mci1120_iqH], xmm4
	
	mov   edx, [ebp + mci1120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + mci1120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + mci1120_ntia], ecx		
.mci1120_outer:
	mov   eax, [ebp + mci1120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci1120_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci1120_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci1120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1120_pos]    ;# eax = base of pos[]  
	mov   [esp + mci1120_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci1120_ixO], xmm3
	movaps [esp + mci1120_iyO], xmm4
	movaps [esp + mci1120_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci1120_ixH1], xmm0
	movaps [esp + mci1120_iyH1], xmm1
	movaps [esp + mci1120_izH1], xmm2
	movaps [esp + mci1120_ixH2], xmm3
	movaps [esp + mci1120_iyH2], xmm4
	movaps [esp + mci1120_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci1120_vctot], xmm4
	movaps [esp + mci1120_vnbtot], xmm4
	
	mov   eax, [ebp + mci1120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1120_pos]
	mov   eax, [ebp + mci1120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci1120_innerk], edx    ;# number of innerloop atoms 
	jge   .mci1120_unroll_loop
	jmp   .mci1120_odd_inner
.mci1120_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci1120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + mci1120_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci1120_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + mci1120_iqO]
	mulps  xmm4, [esp + mci1120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx

	movaps  [esp + mci1120_qqO], xmm3
	movaps  [esp + mci1120_qqH], xmm4
	
	mov esi, [ebp + mci1120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci1120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci1120_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci1120_c6], xmm4
	movaps [esp + mci1120_c12], xmm6

	mov esi, [ebp + mci1120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + mci1120_ixO]
	movaps xmm5, [esp + mci1120_iyO]
	movaps xmm6, [esp + mci1120_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + mci1120_ixH1]
	movaps xmm5, [esp + mci1120_iyH1]
	movaps xmm6, [esp + mci1120_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + mci1120_ixH2]
	movaps xmm4, [esp + mci1120_iyH2]
	movaps xmm5, [esp + mci1120_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - seed in xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci1120_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci1120_half]
	movaps  xmm7, xmm4	;# rinvO in xmm7 
	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci1120_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci1120_half]
	movaps  xmm6, xmm4	;# rinvH1 in xmm6 
	;# rsqH2 - seed in xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci1120_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci1120_half]
	movaps  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movaps  xmm4, xmm7	
	mulps   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm7, [esp + mci1120_qqO]	;# xmm7=vcoul 
	
	mulps  xmm1, [esp + mci1120_c6]
	mulps  xmm2, [esp + mci1120_c12]
	movaps xmm3, xmm2
	subps  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addps  xmm3, [esp + mci1120_vnbtot]
	addps  xmm7, [esp + mci1120_vctot]	
	movaps [esp + mci1120_vnbtot], xmm3
	movaps [esp + mci1120_vctot], xmm7

	;# H1 & H2 interactions 
	addps  xmm6, xmm5           ;# add H2 rinv 
	mulps  xmm6, [esp + mci1120_qqH]	;# xmm6=vcoul 
	addps  xmm6, [esp + mci1120_vctot]
	movaps [esp + mci1120_vctot], xmm6
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci1120_innerk],  4
	jl    .mci1120_odd_inner
	jmp   .mci1120_unroll_loop
.mci1120_odd_inner:	
	add dword ptr [esp + mci1120_innerk],  4
	jnz   .mci1120_odd_loop
	jmp   .mci1120_updateouterdata
.mci1120_odd_loop:
	mov   edx, [esp + mci1120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci1120_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + mci1120_iqO]
	mov esi, [ebp + mci1120_charge] 
	movhps xmm4, [esp + mci1120_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + mci1120_qqO], xmm3	;# use oxygen qq for storage 

	xorps xmm6, xmm6
	mov esi, [ebp + mci1120_type]
	mov ebx, [esi + eax*4]
	mov esi, [ebp + mci1120_nbfp]
	shl ebx, 1	
	add ebx, [esp + mci1120_ntia]
	movlps xmm6, [esi + ebx*4]
	movaps xmm7, xmm6
	shufps xmm6, xmm6, 252  ;# 11111100
	shufps xmm7, xmm7, 253  ;# 11111101
	movaps [esp + mci1120_c6], xmm6
	movaps [esp + mci1120_c12], xmm7

	mov esi, [ebp + mci1120_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + mci1120_ixO]
	movss xmm4, [esp + mci1120_iyO]
	movss xmm5, [esp + mci1120_izO]
		
	movlps xmm6, [esp + mci1120_ixH1]
	movlps xmm7, [esp + mci1120_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + mci1120_iyH1]
	movlps xmm7, [esp + mci1120_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + mci1120_izH1]
	movlps xmm7, [esp + mci1120_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci1120_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci1120_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000	
	
	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulss  xmm1, xmm4
	movaps xmm3, [esp + mci1120_qqO]
	mulss  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulss  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm3, xmm0	;# xmm3=vcoul 
	mulps  xmm1, [esp + mci1120_c6]
	mulps  xmm2, [esp + mci1120_c12]
	movaps xmm5, xmm2
	subss  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci1120_vnbtot]
	addps  xmm3, [esp + mci1120_vctot]
	movaps [esp + mci1120_vctot], xmm3
	movaps [esp + mci1120_vnbtot], xmm5

	dec dword ptr [esp + mci1120_innerk]
	jz    .mci1120_updateouterdata
	jmp   .mci1120_odd_loop
.mci1120_updateouterdata:
	;# accumulate total potential energy and update it 
	mov   edx, [ebp + mci1120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci1120_gid],  4	

	movaps xmm7, [esp + mci1120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci1120_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci1120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci1120_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci1120_nri]
	dec ecx
	jecxz .mci1120_end
	;# not last, iterate once more!  
	mov [ebp + mci1120_nri], ecx
	jmp .mci1120_outer
.mci1120_end:
	emms
	mov eax, [esp + mci1120_salign]
	add esp, eax
	add esp, 328
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



	
.globl mcinl1130_sse
.globl _mcinl1130_sse
mcinl1130_sse:	
_mcinl1130_sse:	
.equiv		mci1130_nri,		8
.equiv		mci1130_iinr,		12
.equiv		mci1130_jindex,		16
.equiv		mci1130_jjnr,		20
.equiv		mci1130_shift,		24
.equiv		mci1130_shiftvec,	28
.equiv		mci1130_gid,		32
.equiv		mci1130_pos,		36
.equiv		mci1130_charge,		40
.equiv		mci1130_facel,		44
.equiv		mci1130_Vc,			48			
.equiv		mci1130_type,		52
.equiv		mci1130_ntype,		56
.equiv		mci1130_nbfp,		60
.equiv		mci1130_Vnb,		64
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci1130_ixO,		0
.equiv		mci1130_iyO,		16
.equiv		mci1130_izO,		32
.equiv		mci1130_ixH1,		48
.equiv		mci1130_iyH1,		64
.equiv		mci1130_izH1,		80
.equiv		mci1130_ixH2,		96
.equiv		mci1130_iyH2,		112
.equiv		mci1130_izH2,		128
.equiv		mci1130_jxO,		144
.equiv		mci1130_jyO,		160
.equiv		mci1130_jzO,		176
.equiv		mci1130_jxH1,		192
.equiv		mci1130_jyH1,		208
.equiv		mci1130_jzH1,		224
.equiv		mci1130_jxH2,		240
.equiv		mci1130_jyH2,		256
.equiv		mci1130_jzH2,		272
.equiv		mci1130_qqOO,		288
.equiv		mci1130_qqOH,		304
.equiv		mci1130_qqHH,		320
.equiv		mci1130_c6,			336
.equiv		mci1130_c12,		352		 
.equiv		mci1130_vctot,		368
.equiv		mci1130_vnbtot,		384
.equiv		mci1130_half,		400
.equiv		mci1130_three,		416
.equiv		mci1130_rsqOO,		432
.equiv		mci1130_rsqOH1,		448
.equiv		mci1130_rsqOH2,		464
.equiv		mci1130_rsqH1O,		480
.equiv		mci1130_rsqH1H1,	496
.equiv		mci1130_rsqH1H2,	512
.equiv		mci1130_rsqH2O,		528 
.equiv		mci1130_rsqH2H1,	544
.equiv		mci1130_rsqH2H2,	560
.equiv		mci1130_rinvOO,		576
.equiv		mci1130_rinvOH1,	592
.equiv		mci1130_rinvOH2,	608
.equiv		mci1130_rinvH1O,	624
.equiv		mci1130_rinvH1H1,	640
.equiv		mci1130_rinvH1H2,	656
.equiv		mci1130_rinvH2O,	672
.equiv		mci1130_rinvH2H1,	688
.equiv		mci1130_rinvH2H2,	704
.equiv		mci1130_is3,		720
.equiv		mci1130_ii3,		724
.equiv		mci1130_innerjjnr,	728
.equiv		mci1130_innerk,		732
.equiv		mci1130_salign,		736							
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 740		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci1130_salign], eax
	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movaps [esp + mci1130_half],  xmm0
	movaps [esp + mci1130_three], xmm1

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci1130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci1130_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + mci1130_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci1130_qqOO], xmm3
	movaps [esp + mci1130_qqOH], xmm4
	movaps [esp + mci1130_qqHH], xmm5
		
	xorps xmm0, xmm0
	mov   edx, [ebp + mci1130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + mci1130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + mci1130_nbfp]
	movlps xmm0, [eax + edx*4] 
	movaps xmm1, xmm0
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 85  ;# 01010101
	movaps [esp + mci1130_c6], xmm0
	movaps [esp + mci1130_c12], xmm1

mci1130_outer:
	mov   eax, [ebp + mci1130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci1130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci1130_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci1130_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci1130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci1130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci1130_pos]    ;# eax = base of pos[]  
	mov   [esp + mci1130_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci1130_ixO], xmm3
	movaps [esp + mci1130_iyO], xmm4
	movaps [esp + mci1130_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci1130_ixH1], xmm0
	movaps [esp + mci1130_iyH1], xmm1
	movaps [esp + mci1130_izH1], xmm2
	movaps [esp + mci1130_ixH2], xmm3
	movaps [esp + mci1130_iyH2], xmm4
	movaps [esp + mci1130_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci1130_vctot], xmm4
	movaps [esp + mci1130_vnbtot], xmm4
	
	mov   eax, [ebp + mci1130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci1130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci1130_pos]	
	mov   eax, [ebp + mci1130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci1130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci1130_innerk], edx    ;# number of innerloop atoms 
	jge   mci1130_unroll_loop
	jmp   mci1130_single_check
mci1130_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci1130_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + mci1130_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci1130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d 
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd 
	movaps [esp + mci1130_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + mci1130_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + mci1130_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + mci1130_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + mci1130_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + mci1130_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + mci1130_jzO],  xmm0
	movaps [esp + mci1130_jzH1],  xmm1
	movaps [esp + mci1130_jzH2],  xmm2

	movaps xmm0, [esp + mci1130_ixO]
	movaps xmm1, [esp + mci1130_iyO]
	movaps xmm2, [esp + mci1130_izO]
	movaps xmm3, [esp + mci1130_ixO]
	movaps xmm4, [esp + mci1130_iyO]
	movaps xmm5, [esp + mci1130_izO]
	subps  xmm0, [esp + mci1130_jxO]
	subps  xmm1, [esp + mci1130_jyO]
	subps  xmm2, [esp + mci1130_jzO]
	subps  xmm3, [esp + mci1130_jxH1]
	subps  xmm4, [esp + mci1130_jyH1]
	subps  xmm5, [esp + mci1130_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci1130_rsqOO], xmm0
	movaps [esp + mci1130_rsqOH1], xmm3

	movaps xmm0, [esp + mci1130_ixO]
	movaps xmm1, [esp + mci1130_iyO]
	movaps xmm2, [esp + mci1130_izO]
	movaps xmm3, [esp + mci1130_ixH1]
	movaps xmm4, [esp + mci1130_iyH1]
	movaps xmm5, [esp + mci1130_izH1]
	subps  xmm0, [esp + mci1130_jxH2]
	subps  xmm1, [esp + mci1130_jyH2]
	subps  xmm2, [esp + mci1130_jzH2]
	subps  xmm3, [esp + mci1130_jxO]
	subps  xmm4, [esp + mci1130_jyO]
	subps  xmm5, [esp + mci1130_jzO]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci1130_rsqOH2], xmm0
	movaps [esp + mci1130_rsqH1O], xmm3

	movaps xmm0, [esp + mci1130_ixH1]
	movaps xmm1, [esp + mci1130_iyH1]
	movaps xmm2, [esp + mci1130_izH1]
	movaps xmm3, [esp + mci1130_ixH1]
	movaps xmm4, [esp + mci1130_iyH1]
	movaps xmm5, [esp + mci1130_izH1]
	subps  xmm0, [esp + mci1130_jxH1]
	subps  xmm1, [esp + mci1130_jyH1]
	subps  xmm2, [esp + mci1130_jzH1]
	subps  xmm3, [esp + mci1130_jxH2]
	subps  xmm4, [esp + mci1130_jyH2]
	subps  xmm5, [esp + mci1130_jzH2]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci1130_rsqH1H1], xmm0
	movaps [esp + mci1130_rsqH1H2], xmm3

	movaps xmm0, [esp + mci1130_ixH2]
	movaps xmm1, [esp + mci1130_iyH2]
	movaps xmm2, [esp + mci1130_izH2]
	movaps xmm3, [esp + mci1130_ixH2]
	movaps xmm4, [esp + mci1130_iyH2]
	movaps xmm5, [esp + mci1130_izH2]
	subps  xmm0, [esp + mci1130_jxO]
	subps  xmm1, [esp + mci1130_jyO]
	subps  xmm2, [esp + mci1130_jzO]
	subps  xmm3, [esp + mci1130_jxH1]
	subps  xmm4, [esp + mci1130_jyH1]
	subps  xmm5, [esp + mci1130_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + mci1130_rsqH2O], xmm0
	movaps [esp + mci1130_rsqH2H1], xmm4

	movaps xmm0, [esp + mci1130_ixH2]
	movaps xmm1, [esp + mci1130_iyH2]
	movaps xmm2, [esp + mci1130_izH2]
	subps  xmm0, [esp + mci1130_jxH2]
	subps  xmm1, [esp + mci1130_jyH2]
	subps  xmm2, [esp + mci1130_jzH2]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + mci1130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci1130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci1130_half] ;# rinvH2H2 
	mulps   xmm7, [esp + mci1130_half] ;# rinvH2H1 
	movaps  [esp + mci1130_rinvH2H2], xmm3
	movaps  [esp + mci1130_rinvH2H1], xmm7
	
	rsqrtps xmm1, [esp + mci1130_rsqOO]
	rsqrtps xmm5, [esp + mci1130_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci1130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci1130_rsqOO]
	mulps   xmm5, [esp + mci1130_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci1130_half] 
	mulps   xmm7, [esp + mci1130_half]
	movaps  [esp + mci1130_rinvOO], xmm3
	movaps  [esp + mci1130_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + mci1130_rsqOH2]
	rsqrtps xmm5, [esp + mci1130_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci1130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci1130_rsqOH2]
	mulps   xmm5, [esp + mci1130_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci1130_half] 
	mulps   xmm7, [esp + mci1130_half]
	movaps  [esp + mci1130_rinvOH2], xmm3
	movaps  [esp + mci1130_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + mci1130_rsqH1H1]
	rsqrtps xmm5, [esp + mci1130_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci1130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci1130_rsqH1H1]
	mulps   xmm5, [esp + mci1130_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci1130_half] 
	mulps   xmm7, [esp + mci1130_half]
	movaps  [esp + mci1130_rinvH1H1], xmm3
	movaps  [esp + mci1130_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + mci1130_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci1130_three]
	mulps   xmm1, [esp + mci1130_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + mci1130_half] 
	movaps  [esp + mci1130_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + mci1130_rinvOO]
	movaps xmm7, xmm0
	mulps  xmm0, xmm0
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	mulps  xmm7, [esp + mci1130_qqOO]
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm1, [esp + mci1130_c6]	
	mulps  xmm2, [esp + mci1130_c12]	
	subps  xmm2, xmm1	;# xmm3=vnb12-vnb6 
	addps  xmm2, [esp + mci1130_vnbtot]
	movaps [esp + mci1130_vnbtot], xmm2
	addps  xmm7, [esp + mci1130_vctot]

	;# all other interaction 
	movaps xmm0, [esp + mci1130_rinvOH1]
	movaps xmm1, [esp + mci1130_rinvH1H1]
	addps  xmm0, [esp + mci1130_rinvOH2]
	addps  xmm1, [esp + mci1130_rinvH1H2]
	addps  xmm0, [esp + mci1130_rinvH1O]
	addps  xmm1, [esp + mci1130_rinvH2H1]
	addps  xmm0, [esp + mci1130_rinvH2O]
	addps  xmm1, [esp + mci1130_rinvH2H2]

	mulps xmm0, [esp + mci1130_qqOH]
	mulps xmm1, [esp + mci1130_qqHH]
	addps xmm7, xmm0
	addps xmm7, xmm1
	movaps [esp + mci1130_vctot], xmm7
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci1130_innerk],  4
	jl    mci1130_single_check
	jmp   mci1130_unroll_loop
mci1130_single_check:
	add dword ptr [esp + mci1130_innerk],  4
	jnz   mci1130_single_loop
	jmp   mci1130_updateouterdata
mci1130_single_loop:
	mov   edx, [esp + mci1130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci1130_innerjjnr],  4	

	mov esi, [ebp + mci1130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + mci1130_ixO]     
	movaps  xmm1, [esp + mci1130_iyO]
	movaps  xmm2, [esp + mci1130_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + mci1130_jxO], xmm3
	movaps [esp + mci1130_jyO], xmm4
	movaps [esp + mci1130_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	movaps  xmm2, xmm1	
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci1130_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + mci1130_half] ;# rinv iO - j water 

	xorps   xmm1, xmm1
	movaps  xmm0, xmm3
	xorps   xmm4, xmm4
	mulps   xmm0, xmm0	;# xmm0=rinvsq 
	;# fetch charges to xmm4 (temporary) 
	movss   xmm4, [esp + mci1130_qqOO]
	movss   xmm1, xmm0
	movhps  xmm4, [esp + mci1130_qqOH]
	mulss   xmm1, xmm0
	mulps   xmm3, xmm4	;# xmm3=vcoul 
	mulss   xmm1, xmm0	;# xmm1(0)=rinvsix 
	movaps  xmm2, xmm1	;# zero everything else in xmm2 
	mulss   xmm2, xmm2	;# xmm2=rinvtwelve 

	mulss   xmm1, [esp + mci1130_c6]
	mulss   xmm2, [esp + mci1130_c12]
	movaps  xmm4, xmm2
	subss   xmm4, xmm1	;# vnbtot=vnb12-vnb6 
	addps   xmm4, [esp + mci1130_vnbtot]
	movaps  [esp + mci1130_vnbtot], xmm4

	addps   xmm3, [esp + mci1130_vctot]
	movaps  [esp + mci1130_vctot], xmm3	
	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + mci1130_ixH1]
	movaps  xmm1, [esp + mci1130_iyH1]
	movaps  xmm2, [esp + mci1130_izH1]	
	movaps  xmm3, [esp + mci1130_ixH2] 
	movaps  xmm4, [esp + mci1130_iyH2] 
	movaps  xmm5, [esp + mci1130_izH2] 
	subps   xmm0, [esp + mci1130_jxO]
	subps   xmm1, [esp + mci1130_jyO]
	subps   xmm2, [esp + mci1130_jzO]
	subps   xmm3, [esp + mci1130_jxO]
	subps   xmm4, [esp + mci1130_jyO]
	subps   xmm5, [esp + mci1130_jzO]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 

	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1   ;# do coulomb interaction 
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci1130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci1130_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + mci1130_half] ;# rinv H2 - j water  
	addps   xmm3, xmm7
	;# assemble charges in xmm6 
	xorps   xmm6, xmm6
	;# do coulomb interaction 
	movaps  xmm0, xmm3
	movss   xmm6, [esp + mci1130_qqOH]
	movaps  xmm4, xmm7
	movhps  xmm6, [esp + mci1130_qqHH]
	mulps   xmm3, xmm6	;# total vcoul 
	
	addps   xmm3, [esp + mci1130_vctot]
	movaps  [esp + mci1130_vctot], xmm3
	
	dec dword ptr [esp + mci1130_innerk]
	jz    mci1130_updateouterdata
	jmp   mci1130_single_loop
mci1130_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci1130_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci1130_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci1130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci1130_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci1130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci1130_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci1130_nri]
	dec ecx
	jecxz mci1130_end
	;# not last, iterate once more!  
	mov [ebp + mci1130_nri], ecx
	jmp mci1130_outer
mci1130_end:
	emms
	mov eax, [esp + mci1130_salign]
	add esp, eax
	add esp, 740
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	


.globl mcinl2120_sse
.globl _mcinl2120_sse
mcinl2120_sse:	
_mcinl2120_sse:	
.equiv		mci2120_nri,		8
.equiv		mci2120_iinr,		12
.equiv		mci2120_jindex,		16
.equiv		mci2120_jjnr,		20
.equiv		mci2120_shift,		24
.equiv		mci2120_shiftvec,	28
.equiv		mci2120_gid,		32
.equiv		mci2120_pos,		36		
.equiv		mci2120_charge,		40
.equiv		mci2120_facel,		44
.equiv		mci2120_Vc,			48			
.equiv		mci2120_argkrf,		52	
.equiv		mci2120_argcrf,		56	
.equiv		mci2120_type,		60
.equiv		mci2120_ntype,		64
.equiv		mci2120_nbfp,		68	
.equiv		mci2120_Vnb,		72	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2120_ixO,		0
.equiv		mci2120_iyO,		16
.equiv		mci2120_izO,		32
.equiv		mci2120_ixH1,		48
.equiv		mci2120_iyH1,		64
.equiv		mci2120_izH1,		80
.equiv		mci2120_ixH2,		96
.equiv		mci2120_iyH2,		112
.equiv		mci2120_izH2,		128
.equiv		mci2120_iqO,		144 
.equiv		mci2120_iqH,		160 
.equiv		mci2120_qqO,		176
.equiv		mci2120_qqH,		192
.equiv		mci2120_c6,			208
.equiv		mci2120_c12,		224		 
.equiv		mci2120_vctot,		240
.equiv		mci2120_vnbtot,		256
.equiv		mci2120_half,		272
.equiv		mci2120_three,		288
.equiv		mci2120_krf,		304
.equiv		mci2120_crf,		320
.equiv		mci2120_krsqO,		336
.equiv		mci2120_krsqH1,		352
.equiv		mci2120_krsqH2,		368	 		
.equiv		mci2120_is3,		384
.equiv		mci2120_ii3,		388
.equiv		mci2120_ntia,		392	
.equiv		mci2120_innerjjnr,	396
.equiv		mci2120_innerk,		400
.equiv		mci2120_salign,		404								
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 408		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2120_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movss xmm5, [ebp + mci2120_argkrf]
	movss xmm6, [ebp + mci2120_argcrf]

	movaps [esp + mci2120_half],  xmm0
	movaps [esp + mci2120_three], xmm1
	shufps xmm5, xmm5, 0
	shufps xmm6, xmm6, 0
	movaps [esp + mci2120_krf], xmm5
	movaps [esp + mci2120_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci2120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2120_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + mci2120_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + mci2120_iqO], xmm3
	movaps [esp + mci2120_iqH], xmm4
	
	mov   edx, [ebp + mci2120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + mci2120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + mci2120_ntia], ecx		
.mci2120_outer:
	mov   eax, [ebp + mci2120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci2120_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci2120_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci2120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2120_pos]    ;# eax = base of pos[]  
	mov   [esp + mci2120_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci2120_ixO], xmm3
	movaps [esp + mci2120_iyO], xmm4
	movaps [esp + mci2120_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci2120_ixH1], xmm0
	movaps [esp + mci2120_iyH1], xmm1
	movaps [esp + mci2120_izH1], xmm2
	movaps [esp + mci2120_ixH2], xmm3
	movaps [esp + mci2120_iyH2], xmm4
	movaps [esp + mci2120_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci2120_vctot], xmm4
	movaps [esp + mci2120_vnbtot], xmm4
	
	mov   eax, [ebp + mci2120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2120_pos]
	mov   eax, [ebp + mci2120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci2120_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2120_unroll_loop
	jmp   .mci2120_odd_inner
.mci2120_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci2120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + mci2120_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci2120_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + mci2120_iqO]
	mulps  xmm4, [esp + mci2120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx

	movaps  [esp + mci2120_qqO], xmm3
	movaps  [esp + mci2120_qqH], xmm4
	
	mov esi, [ebp + mci2120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci2120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci2120_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci2120_c6], xmm4
	movaps [esp + mci2120_c12], xmm6

	mov esi, [ebp + mci2120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + mci2120_ixO]
	movaps xmm5, [esp + mci2120_iyO]
	movaps xmm6, [esp + mci2120_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2
	
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + mci2120_ixH1]
	movaps xmm5, [esp + mci2120_iyH1]
	movaps xmm6, [esp + mci2120_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2
	
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + mci2120_ixH2]
	movaps xmm4, [esp + mci2120_iyH2]
	movaps xmm5, [esp + mci2120_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	movaps xmm0, xmm5
	movaps xmm1, xmm6
	movaps xmm2, xmm7

	mulps  xmm0, [esp + mci2120_krf]	
	mulps  xmm1, [esp + mci2120_krf]	
	mulps  xmm2, [esp + mci2120_krf]	

	movaps [esp + mci2120_krsqH2], xmm0
	movaps [esp + mci2120_krsqH1], xmm1
	movaps [esp + mci2120_krsqO], xmm2
	
	;# start with rsqO - seed in xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci2120_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci2120_half]
	movaps  xmm7, xmm4	;# rinvO in xmm7 
	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci2120_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci2120_half]
	movaps  xmm6, xmm4	;# rinvH1 in xmm6 
	;# rsqH2 - seed in xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci2120_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci2120_half]
	movaps  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 
	movaps  xmm4, xmm7	
	mulps   xmm4, xmm4	;# xmm7=rinv, xmm4=rinvsq 
	movaps xmm1, xmm4
	mulps  xmm1, xmm4
	mulps  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm1, [esp + mci2120_c6]
	mulps  xmm2, [esp + mci2120_c12]
	movaps xmm3, xmm2
	subps  xmm3, xmm1	;# vnb=vnb12-vnb6 		
	addps  xmm3, [esp + mci2120_vnbtot]

	movaps xmm0, xmm7
	movaps xmm1, [esp + mci2120_krsqO]
	addps  xmm0, xmm1
	subps  xmm0, [esp + mci2120_crf] ;# xmm0=rinv+ krsq-crf 
	subps  xmm7, xmm1
	mulps  xmm0, [esp + mci2120_qqO]
	addps  xmm0, [esp + mci2120_vctot]
	movaps [esp + mci2120_vnbtot], xmm3
	movaps [esp + mci2120_vctot], xmm0

	;# H1 interactions 
	movaps  xmm0, [esp + mci2120_krsqH1]
	addps   xmm6, xmm0	;# xmm6=rinv+ krsq 
	subps   xmm6, [esp + mci2120_crf]
	mulps   xmm6, [esp + mci2120_qqH] ;# vcoul 
	addps  xmm6, [esp + mci2120_vctot]
	movaps [esp + mci2120_vctot], xmm6
	
	;# H2 interactions 
	movaps  xmm7, xmm5  ;# rinv 
	movaps  xmm0, [esp + mci2120_krsqH2]
	addps   xmm5, xmm0	;# xmm5=rinv+ krsq 
	subps   xmm5, [esp + mci2120_crf]
	mulps   xmm5, [esp + mci2120_qqH] ;# vcoul 
	addps   xmm5, [esp + mci2120_vctot]
	movaps [esp + mci2120_vctot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci2120_innerk],  4
	jl    .mci2120_odd_inner
	jmp   .mci2120_unroll_loop
.mci2120_odd_inner:	
	add dword ptr [esp + mci2120_innerk],  4
	jnz   .mci2120_odd_loop
	jmp   .mci2120_updateouterdata
.mci2120_odd_loop:
	mov   edx, [esp + mci2120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci2120_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + mci2120_iqO]
	mov esi, [ebp + mci2120_charge] 
	movhps xmm4, [esp + mci2120_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + mci2120_qqO], xmm3	;# use oxygen qq for storage 

	xorps xmm6, xmm6
	mov esi, [ebp + mci2120_type]
	mov ebx, [esi + eax*4]
	mov esi, [ebp + mci2120_nbfp]
	shl ebx, 1	
	add ebx, [esp + mci2120_ntia]
	movlps xmm6, [esi + ebx*4]
	movaps xmm7, xmm6
	shufps xmm6, xmm6, 252  ;# 11111100
	shufps xmm7, xmm7, 253  ;# 11111101
	movaps [esp + mci2120_c6], xmm6
	movaps [esp + mci2120_c12], xmm7

	mov esi, [ebp + mci2120_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + mci2120_ixO]
	movss xmm4, [esp + mci2120_iyO]
	movss xmm5, [esp + mci2120_izO]
		
	movlps xmm6, [esp + mci2120_ixH1]
	movlps xmm7, [esp + mci2120_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + mci2120_iyH1]
	movlps xmm7, [esp + mci2120_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + mci2120_izH1]
	movlps xmm7, [esp + mci2120_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	movaps xmm0, xmm4
	mulps xmm0, [esp + mci2120_krf]
	movaps [esp + mci2120_krsqO], xmm0
	
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci2120_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci2120_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000	

	movaps xmm4, xmm0
	mulps  xmm4, xmm4	;# xmm4=rinvsq 
	movaps xmm1, xmm4
	mulss  xmm1, xmm4
	mulss  xmm1, xmm4	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulss  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm1, [esp + mci2120_c6]
	mulps  xmm2, [esp + mci2120_c12]
	movaps xmm5, xmm2
	subss  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci2120_vnbtot]
	movaps xmm1, xmm0	;# xmm1=rinv 
	movaps xmm3, [esp + mci2120_krsqO]
	addps  xmm0, xmm3	;# xmm0=rinv+ krsq 
	subps  xmm0, [esp + mci2120_crf] ;# xmm0=rinv+ krsq-crf 
	mulps  xmm0, [esp + mci2120_qqO]	;# xmm0=vcoul 
	addps  xmm0, [esp + mci2120_vctot]
	movaps [esp + mci2120_vctot], xmm0
	movaps [esp + mci2120_vnbtot], xmm5

	dec dword ptr [esp + mci2120_innerk]
	jz    .mci2120_updateouterdata
	jmp   .mci2120_odd_loop
.mci2120_updateouterdata:
	mov   edx, [ebp + mci2120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci2120_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci2120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci2120_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci2120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci2120_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2120_nri]
	dec ecx
	jecxz .mci2120_end
	;# not last, iterate once more!  
	mov [ebp + mci2120_nri], ecx
	jmp .mci2120_outer
.mci2120_end:
	emms
	mov eax, [esp + mci2120_salign]
	add esp, eax
	add esp, 408
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	
.globl mcinl2130_sse
.globl _mcinl2130_sse
mcinl2130_sse:	
_mcinl2130_sse:	
.equiv		mci2130_nri,		8
.equiv		mci2130_iinr,		12
.equiv		mci2130_jindex,		16
.equiv		mci2130_jjnr,		20
.equiv		mci2130_shift,		24
.equiv		mci2130_shiftvec,	28
.equiv		mci2130_gid,		32
.equiv		mci2130_pos,		36		
.equiv		mci2130_charge,		40
.equiv		mci2130_facel,		44
.equiv		mci2130_Vc,			48			
.equiv		mci2130_argkrf,		52
.equiv		mci2130_argcrf,		56
.equiv		mci2130_type,		60
.equiv		mci2130_ntype,		64
.equiv		mci2130_nbfp,		68	
.equiv		mci2130_Vnb,		72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2130_ixO,		0
.equiv		mci2130_iyO,		16
.equiv		mci2130_izO,		32
.equiv		mci2130_ixH1,		48
.equiv		mci2130_iyH1,		64
.equiv		mci2130_izH1,		80
.equiv		mci2130_ixH2,		96
.equiv		mci2130_iyH2,		112
.equiv		mci2130_izH2,		128
.equiv		mci2130_jxO,		144
.equiv		mci2130_jyO,		160
.equiv		mci2130_jzO,		176
.equiv		mci2130_jxH1,		192
.equiv		mci2130_jyH1,		208
.equiv		mci2130_jzH1,		224
.equiv		mci2130_jxH2,		240
.equiv		mci2130_jyH2,		256
.equiv		mci2130_jzH2,		272
.equiv		mci2130_qqOO,		288
.equiv		mci2130_qqOH,		304
.equiv		mci2130_qqHH,		320
.equiv		mci2130_c6,			336
.equiv		mci2130_c12,		352		 
.equiv		mci2130_vctot,		368
.equiv		mci2130_vnbtot,		384
.equiv		mci2130_half,		400
.equiv		mci2130_three,		416
.equiv		mci2130_rsqOO,		432
.equiv		mci2130_rsqOH1,		448
.equiv		mci2130_rsqOH2,		464
.equiv		mci2130_rsqH1O,		480
.equiv		mci2130_rsqH1H1,	496
.equiv		mci2130_rsqH1H2,	512
.equiv		mci2130_rsqH2O,		528
.equiv		mci2130_rsqH2H1,	544
.equiv		mci2130_rsqH2H2,	560
.equiv		mci2130_rinvOO,		576
.equiv		mci2130_rinvOH1,	592
.equiv		mci2130_rinvOH2,	608
.equiv		mci2130_rinvH1O,	624
.equiv		mci2130_rinvH1H1,	640
.equiv		mci2130_rinvH1H2,	656
.equiv		mci2130_rinvH2O,	672
.equiv		mci2130_rinvH2H1,	688
.equiv		mci2130_rinvH2H2,	704
.equiv		mci2130_krf,		720	
.equiv		mci2130_crf,		736
.equiv		mci2130_is3,		752
.equiv		mci2130_ii3,		756
.equiv		mci2130_innerjjnr,	760
.equiv		mci2130_innerk,		764
.equiv		mci2130_salign,		768
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 772		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2130_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movss xmm5, [ebp + mci2130_argkrf]
	movss xmm6, [ebp + mci2130_argcrf]
	
	movaps [esp + mci2130_half],  xmm0
	movaps [esp + mci2130_three], xmm1
	shufps xmm5, xmm5, 0
	shufps xmm6, xmm6, 0
	movaps [esp + mci2130_krf], xmm5
	movaps [esp + mci2130_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci2130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2130_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + mci2130_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci2130_qqOO], xmm3
	movaps [esp + mci2130_qqOH], xmm4
	movaps [esp + mci2130_qqHH], xmm5
		
	xorps xmm0, xmm0
	mov   edx, [ebp + mci2130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + mci2130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + mci2130_nbfp]
	movlps xmm0, [eax + edx*4] 
	movaps xmm1, xmm0
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 85  ;# 01010101
	movaps [esp + mci2130_c6], xmm0
	movaps [esp + mci2130_c12], xmm1

.mci2130_outer:
	mov   eax, [ebp + mci2130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci2130_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci2130_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci2130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2130_pos]    ;# eax = base of pos[]  
	mov   [esp + mci2130_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci2130_ixO], xmm3
	movaps [esp + mci2130_iyO], xmm4
	movaps [esp + mci2130_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci2130_ixH1], xmm0
	movaps [esp + mci2130_iyH1], xmm1
	movaps [esp + mci2130_izH1], xmm2
	movaps [esp + mci2130_ixH2], xmm3
	movaps [esp + mci2130_iyH2], xmm4
	movaps [esp + mci2130_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci2130_vctot], xmm4
	movaps [esp + mci2130_vnbtot], xmm4
	
	mov   eax, [ebp + mci2130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2130_pos]
	mov   eax, [ebp + mci2130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci2130_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2130_unroll_loop
	jmp   .mci2130_single_check
.mci2130_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci2130_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + mci2130_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci2130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d 
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd 
	movaps [esp + mci2130_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + mci2130_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + mci2130_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + mci2130_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + mci2130_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + mci2130_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + mci2130_jzO],  xmm0
	movaps [esp + mci2130_jzH1],  xmm1
	movaps [esp + mci2130_jzH2],  xmm2

	movaps xmm0, [esp + mci2130_ixO]
	movaps xmm1, [esp + mci2130_iyO]
	movaps xmm2, [esp + mci2130_izO]
	movaps xmm3, [esp + mci2130_ixO]
	movaps xmm4, [esp + mci2130_iyO]
	movaps xmm5, [esp + mci2130_izO]
	subps  xmm0, [esp + mci2130_jxO]
	subps  xmm1, [esp + mci2130_jyO]
	subps  xmm2, [esp + mci2130_jzO]
	subps  xmm3, [esp + mci2130_jxH1]
	subps  xmm4, [esp + mci2130_jyH1]
	subps  xmm5, [esp + mci2130_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci2130_rsqOO], xmm0
	movaps [esp + mci2130_rsqOH1], xmm3

	movaps xmm0, [esp + mci2130_ixO]
	movaps xmm1, [esp + mci2130_iyO]
	movaps xmm2, [esp + mci2130_izO]
	movaps xmm3, [esp + mci2130_ixH1]
	movaps xmm4, [esp + mci2130_iyH1]
	movaps xmm5, [esp + mci2130_izH1]
	subps  xmm0, [esp + mci2130_jxH2]
	subps  xmm1, [esp + mci2130_jyH2]
	subps  xmm2, [esp + mci2130_jzH2]
	subps  xmm3, [esp + mci2130_jxO]
	subps  xmm4, [esp + mci2130_jyO]
	subps  xmm5, [esp + mci2130_jzO]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci2130_rsqOH2], xmm0
	movaps [esp + mci2130_rsqH1O], xmm3

	movaps xmm0, [esp + mci2130_ixH1]
	movaps xmm1, [esp + mci2130_iyH1]
	movaps xmm2, [esp + mci2130_izH1]
	movaps xmm3, [esp + mci2130_ixH1]
	movaps xmm4, [esp + mci2130_iyH1]
	movaps xmm5, [esp + mci2130_izH1]
	subps  xmm0, [esp + mci2130_jxH1]
	subps  xmm1, [esp + mci2130_jyH1]
	subps  xmm2, [esp + mci2130_jzH1]
	subps  xmm3, [esp + mci2130_jxH2]
	subps  xmm4, [esp + mci2130_jyH2]
	subps  xmm5, [esp + mci2130_jzH2]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci2130_rsqH1H1], xmm0
	movaps [esp + mci2130_rsqH1H2], xmm3

	movaps xmm0, [esp + mci2130_ixH2]
	movaps xmm1, [esp + mci2130_iyH2]
	movaps xmm2, [esp + mci2130_izH2]
	movaps xmm3, [esp + mci2130_ixH2]
	movaps xmm4, [esp + mci2130_iyH2]
	movaps xmm5, [esp + mci2130_izH2]
	subps  xmm0, [esp + mci2130_jxO]
	subps  xmm1, [esp + mci2130_jyO]
	subps  xmm2, [esp + mci2130_jzO]
	subps  xmm3, [esp + mci2130_jxH1]
	subps  xmm4, [esp + mci2130_jyH1]
	subps  xmm5, [esp + mci2130_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + mci2130_rsqH2O], xmm0
	movaps [esp + mci2130_rsqH2H1], xmm4

	movaps xmm0, [esp + mci2130_ixH2]
	movaps xmm1, [esp + mci2130_iyH2]
	movaps xmm2, [esp + mci2130_izH2]
	subps  xmm0, [esp + mci2130_jxH2]
	subps  xmm1, [esp + mci2130_jyH2]
	subps  xmm2, [esp + mci2130_jzH2]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + mci2130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci2130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci2130_half] ;# rinvH2H2 
	mulps   xmm7, [esp + mci2130_half] ;# rinvH2H1 
	movaps  [esp + mci2130_rinvH2H2], xmm3
	movaps  [esp + mci2130_rinvH2H1], xmm7
	
	rsqrtps xmm1, [esp + mci2130_rsqOO]
	rsqrtps xmm5, [esp + mci2130_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci2130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci2130_rsqOO]
	mulps   xmm5, [esp + mci2130_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci2130_half] 
	mulps   xmm7, [esp + mci2130_half]
	movaps  [esp + mci2130_rinvOO], xmm3
	movaps  [esp + mci2130_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + mci2130_rsqOH2]
	rsqrtps xmm5, [esp + mci2130_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci2130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci2130_rsqOH2]
	mulps   xmm5, [esp + mci2130_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci2130_half] 
	mulps   xmm7, [esp + mci2130_half]
	movaps  [esp + mci2130_rinvOH2], xmm3
	movaps  [esp + mci2130_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + mci2130_rsqH1H1]
	rsqrtps xmm5, [esp + mci2130_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci2130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci2130_rsqH1H1]
	mulps   xmm5, [esp + mci2130_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci2130_half] 
	mulps   xmm7, [esp + mci2130_half]
	movaps  [esp + mci2130_rinvH1H1], xmm3
	movaps  [esp + mci2130_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + mci2130_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci2130_three]
	mulps   xmm1, [esp + mci2130_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + mci2130_half] 
	movaps  [esp + mci2130_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + mci2130_rinvOO]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + mci2130_krf]
	mulps  xmm0, xmm0
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	mulps  xmm5, [esp + mci2130_rsqOO] ;# xmm5=krsq 
	movaps xmm6, xmm5
	addps  xmm6, xmm7	;# xmm6=rinv+ krsq 
	subps  xmm6, [esp + mci2130_crf]
	
	mulps  xmm6, [esp + mci2130_qqOO] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm1, [esp + mci2130_c6]	
	mulps  xmm2, [esp + mci2130_c12]	
	subps  xmm2, xmm1	;# xmm3=vnb12-vnb6 
	addps  xmm2, [esp + mci2130_vnbtot]
	movaps [esp + mci2130_vnbtot], xmm2
	addps  xmm6, [esp + mci2130_vctot] ;# local vctot summation variable 

	;# O-H1 interaction 
	movaps xmm0, [esp + mci2130_rinvOH1]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + mci2130_krf]
	movaps xmm1, xmm0
	mulps  xmm5, [esp + mci2130_rsqOH1] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulps  xmm0, xmm0
	subps  xmm4, [esp + mci2130_crf]
	mulps  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addps  xmm6, xmm4	;# add to local vctot 

	;# O-H2 interaction  
	movaps xmm0, [esp + mci2130_rinvOH2]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + mci2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + mci2130_rsqOH2] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulps xmm0, xmm0
	subps  xmm4, [esp + mci2130_crf]
	mulps  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addps  xmm6, xmm4	;# add to local vctot 

	;# H1-O interaction 
	movaps xmm0, [esp + mci2130_rinvH1O]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + mci2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + mci2130_rsqH1O] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=rinv+ krsq 
	mulps xmm0, xmm0
	subps  xmm4, [esp + mci2130_crf]
	mulps  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addps  xmm6, xmm4	;# add to local vctot 

	;# H1-H1 interaction 
	movaps xmm0, [esp + mci2130_rinvH1H1]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + mci2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + mci2130_rsqH1H1] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + mci2130_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addps  xmm6, xmm4	;# add to local vctot 
	
	;# H1-H2 interaction 
	movaps xmm0, [esp + mci2130_rinvH1H2]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + mci2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + mci2130_rsqH1H2] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	mulps xmm0, xmm0
	subps  xmm4, [esp + mci2130_crf]
	mulps  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addps  xmm6, xmm4	;# add to local vctot 
	
	;# H2-O interaction 
	movaps xmm0, [esp + mci2130_rinvH2O]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + mci2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + mci2130_rsqH2O] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + mci2130_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + mci2130_qqOH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addps  xmm6, xmm4	;# add to local vctot 
	
	;# H2-H1 interaction 
	movaps xmm0, [esp + mci2130_rinvH2H1]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + mci2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + mci2130_rsqH2H1] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + mci2130_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addps  xmm6, xmm4	;# add to local vctot 
	
	;# H2-H2 interaction 
	movaps xmm0, [esp + mci2130_rinvH2H2]
	movaps xmm7, xmm0	;# xmm7=rinv 
	movaps xmm5, [esp + mci2130_krf]	
	movaps xmm1, xmm0
	mulps  xmm5, [esp + mci2130_rsqH2H2] ;# xmm5=krsq 
	movaps xmm4, xmm5
	addps  xmm4, xmm7	;# xmm4=r inv+ krsq 
	subps  xmm4, [esp + mci2130_crf]
	mulps xmm0, xmm0
	mulps  xmm4, [esp + mci2130_qqHH] ;# xmm4=voul=qq*(rinv+ krsq) 
	addps  xmm6, xmm4	;# add to local vctot 
	movaps [esp + mci2130_vctot], xmm6

	;# should we do one more iteration? 
	sub dword ptr [esp + mci2130_innerk],  4
	jl    .mci2130_single_check
	jmp   .mci2130_unroll_loop
.mci2130_single_check:
	add dword ptr [esp + mci2130_innerk],  4
	jnz   .mci2130_single_loop
	jmp   .mci2130_updateouterdata
.mci2130_single_loop:
	mov   edx, [esp + mci2130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci2130_innerjjnr],  4	

	mov esi, [ebp + mci2130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + mci2130_ixO]     
	movaps  xmm1, [esp + mci2130_iyO]
	movaps  xmm2, [esp + mci2130_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + mci2130_jxO], xmm3
	movaps [esp + mci2130_jyO], xmm4
	movaps [esp + mci2130_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 

	movaps xmm6, xmm0
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	mulps   xmm6, [esp + mci2130_krf] ;# xmm6=krsq 
	movaps  xmm2, xmm1
	movaps  xmm7, xmm6
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci2130_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + mci2130_half] ;# rinv iO - j water 

	addps   xmm6, xmm3	;# xmm6=rinv+ krsq 
	subps  xmm6, [esp + mci2130_crf]	;# xmm6=rinv+ krsq-crf 
	
	xorps   xmm1, xmm1
	movaps  xmm0, xmm3
	xorps   xmm4, xmm4
	mulps   xmm0, xmm0	;# xmm0=rinvsq 
	;# fetch charges to xmm4 (temporary) 
	movss   xmm4, [esp + mci2130_qqOO]
	movss   xmm1, xmm0
	movhps  xmm4, [esp + mci2130_qqOH]
	mulss   xmm1, xmm0

	mulps xmm6, xmm4	;# vcoul  
	
	mulss   xmm1, xmm0	;# xmm1(0)=rinvsix 
	movaps  xmm2, xmm1	;# zero everything else in xmm2 
	mulss   xmm2, xmm2	;# xmm2=rinvtwelve 

	mulss   xmm1, [esp + mci2130_c6]
	mulss   xmm2, [esp + mci2130_c12]
	movaps  xmm4, xmm2
	subss   xmm4, xmm1	;# vnbtot=vnb12-vnb6 
	addps   xmm4, [esp + mci2130_vnbtot]	
	movaps  [esp + mci2130_vnbtot], xmm4

	addps   xmm6, [esp + mci2130_vctot]
	movaps  [esp + mci2130_vctot], xmm6	

	;# done with i O Now do i H1 & H2 simultaneously 
	movaps  xmm0, [esp + mci2130_ixH1]
	movaps  xmm1, [esp + mci2130_iyH1]
	movaps  xmm2, [esp + mci2130_izH1]	
	movaps  xmm3, [esp + mci2130_ixH2] 
	movaps  xmm4, [esp + mci2130_iyH2] 
	movaps  xmm5, [esp + mci2130_izH2] 
	subps   xmm0, [esp + mci2130_jxO]
	subps   xmm1, [esp + mci2130_jyO]
	subps   xmm2, [esp + mci2130_jzO]
	subps   xmm3, [esp + mci2130_jxO]
	subps   xmm4, [esp + mci2130_jyO]
	subps   xmm5, [esp + mci2130_jzO]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci2130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci2130_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + mci2130_half] ;# rinv H2 - j water  

	mulps xmm0, [esp + mci2130_krf] ;# krsq 
	mulps xmm4, [esp + mci2130_krf] ;# krsq  


	;# assemble charges in xmm6 
	xorps   xmm6, xmm6
	movss   xmm6, [esp + mci2130_qqOH]
	movhps  xmm6, [esp + mci2130_qqHH]
	movaps  xmm1, xmm0
	movaps  xmm5, xmm4
	addps   xmm0, xmm3	;# krsq+ rinv 
	addps   xmm4, xmm7	;# krsq+ rinv 
	subps xmm0, [esp + mci2130_crf]
	subps xmm4, [esp + mci2130_crf]
	mulps   xmm0, xmm6	;# vcoul 
	mulps   xmm4, xmm6	;# vcoul 
	addps   xmm4, xmm0		
	addps   xmm4, [esp + mci2130_vctot]
	movaps  [esp + mci2130_vctot], xmm4
	
	dec dword ptr [esp + mci2130_innerk]
	jz    .mci2130_updateouterdata
	jmp   .mci2130_single_loop
.mci2130_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci2130_gid] ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci2130_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci2130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci2130_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci2130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci2130_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2130_nri]
	dec ecx
	jecxz .mci2130_end
	;# not last, iterate once more!  
	mov [ebp + mci2130_nri], ecx
	jmp .mci2130_outer
.mci2130_end:
	emms
	mov eax, [esp + mci2130_salign]
	add esp, eax
	add esp, 772
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


	

.globl mcinl2020_sse
.globl _mcinl2020_sse
mcinl2020_sse:	
_mcinl2020_sse:	
.equiv		mci2020_nri,		8
.equiv		mci2020_iinr,		12
.equiv		mci2020_jindex,		16
.equiv		mci2020_jjnr,		20
.equiv		mci2020_shift,		24
.equiv		mci2020_shiftvec,	28
.equiv		mci2020_gid,		32
.equiv		mci2020_pos,		36		
.equiv		mci2020_charge,		40
.equiv		mci2020_facel,		44
.equiv		mci2020_Vc,			48			
.equiv		mci2020_argkrf,		52	
.equiv		mci2020_argcrf,		56	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2020_ixO,		0
.equiv		mci2020_iyO,		16
.equiv		mci2020_izO,		32
.equiv		mci2020_ixH1,		48
.equiv		mci2020_iyH1,		64
.equiv		mci2020_izH1,		80
.equiv		mci2020_ixH2,		96
.equiv		mci2020_iyH2,		112
.equiv		mci2020_izH2,		128
.equiv		mci2020_iqO,		144 
.equiv		mci2020_iqH,		160 
.equiv		mci2020_qqO,		176
.equiv		mci2020_qqH,		192
.equiv		mci2020_vctot,		208
.equiv		mci2020_half,		224
.equiv		mci2020_three,		240
.equiv		mci2020_krf,		256
.equiv		mci2020_crf,		272
.equiv		mci2020_krsqO,		288
.equiv		mci2020_krsqH1,		304
.equiv		mci2020_krsqH2,		320	 		
.equiv		mci2020_is3,		336
.equiv		mci2020_ii3,		340
.equiv		mci2020_innerjjnr,	344
.equiv		mci2020_innerk,		348
.equiv		mci2020_salign,		352
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 356		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2020_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movss xmm5, [ebp + mci2020_argkrf]
	movss xmm6, [ebp + mci2020_argcrf]

	movaps [esp + mci2020_half],  xmm0
	movaps [esp + mci2020_three], xmm1
	shufps xmm5, xmm5, 0
	shufps xmm6, xmm6, 0
	movaps [esp + mci2020_krf], xmm5
	movaps [esp + mci2020_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci2020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2020_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + mci2020_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + mci2020_iqO], xmm3
	movaps [esp + mci2020_iqH], xmm4
			
.mci2020_outer:
	mov   eax, [ebp + mci2020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci2020_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci2020_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci2020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2020_pos]    ;# eax = base of pos[]  
	mov   [esp + mci2020_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci2020_ixO], xmm3
	movaps [esp + mci2020_iyO], xmm4
	movaps [esp + mci2020_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci2020_ixH1], xmm0
	movaps [esp + mci2020_iyH1], xmm1
	movaps [esp + mci2020_izH1], xmm2
	movaps [esp + mci2020_ixH2], xmm3
	movaps [esp + mci2020_iyH2], xmm4
	movaps [esp + mci2020_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci2020_vctot], xmm4
	
	mov   eax, [ebp + mci2020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2020_pos]
	mov   eax, [ebp + mci2020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci2020_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2020_unroll_loop
	jmp   .mci2020_odd_inner
.mci2020_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci2020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + mci2020_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci2020_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + mci2020_iqO]
	mulps  xmm4, [esp + mci2020_iqH]

	movaps  [esp + mci2020_qqO], xmm3
	movaps  [esp + mci2020_qqH], xmm4

	mov esi, [ebp + mci2020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + mci2020_ixO]
	movaps xmm5, [esp + mci2020_iyO]
	movaps xmm6, [esp + mci2020_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + mci2020_ixH1]
	movaps xmm5, [esp + mci2020_iyH1]
	movaps xmm6, [esp + mci2020_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + mci2020_ixH2]
	movaps xmm4, [esp + mci2020_iyH2]
	movaps xmm5, [esp + mci2020_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	movaps xmm0, xmm5
	movaps xmm1, xmm6
	movaps xmm2, xmm7

	mulps  xmm0, [esp + mci2020_krf]	
	mulps  xmm1, [esp + mci2020_krf]	
	mulps  xmm2, [esp + mci2020_krf]	

	movaps [esp + mci2020_krsqH2], xmm0
	movaps [esp + mci2020_krsqH1], xmm1
	movaps [esp + mci2020_krsqO], xmm2
	
	;# start with rsqO - seed in xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci2020_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci2020_half]
	movaps  xmm7, xmm4	;# rinvO in xmm7 
	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci2020_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci2020_half]
	movaps  xmm6, xmm4	;# rinvH1 in xmm6 
	;# rsqH2 - seed in xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci2020_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci2020_half]
	movaps  xmm5, xmm4	;# rinvH2 in xmm5 

	;# do O interactions 

	movaps xmm0, xmm7
	movaps xmm1, [esp + mci2020_krsqO]
	addps  xmm0, xmm1
	subps  xmm0, [esp + mci2020_crf] ;# xmm0=rinv+ krsq-crf 
	mulps  xmm0, [esp + mci2020_qqO]

	addps  xmm0, [esp + mci2020_vctot]
	movaps [esp + mci2020_vctot], xmm0

	;# H1 interactions 
	movaps  xmm7, xmm6
	movaps  xmm0, [esp + mci2020_krsqH1]
	addps   xmm6, xmm0	;# xmm6=rinv+ krsq 
	subps   xmm6, [esp + mci2020_crf] ;# xmm6=rinv+ krsq-crf 
	mulps   xmm6, [esp + mci2020_qqH] ;# vcoul 
	addps   xmm6, [esp + mci2020_vctot]
	
	;# H2 interactions 
	movaps  xmm7, xmm5
	movaps  xmm0, [esp + mci2020_krsqH2]
	addps   xmm5, xmm0	;# xmm6=rinv+ krsq 
	subps   xmm5, [esp + mci2020_crf] ;# xmm5=rinv+ krsq-crf 
	mulps   xmm5, [esp + mci2020_qqH] ;# vcoul 
	addps  xmm6, xmm5
	movaps [esp + mci2020_vctot], xmm6

	;# should we do one more iteration? 
	sub dword ptr [esp + mci2020_innerk],  4
	jl    .mci2020_odd_inner
	jmp   .mci2020_unroll_loop
.mci2020_odd_inner:	
	add dword ptr [esp + mci2020_innerk],  4
	jnz   .mci2020_odd_loop
	jmp   .mci2020_updateouterdata
.mci2020_odd_loop:
	mov   edx, [esp + mci2020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci2020_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + mci2020_iqO]
	mov esi, [ebp + mci2020_charge] 
	movhps xmm4, [esp + mci2020_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + mci2020_qqO], xmm3	;# use oxygen qq for storage 

	mov esi, [ebp + mci2020_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + mci2020_ixO]
	movss xmm4, [esp + mci2020_iyO]
	movss xmm5, [esp + mci2020_izO]
		
	movlps xmm6, [esp + mci2020_ixH1]
	movlps xmm7, [esp + mci2020_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + mci2020_iyH1]
	movlps xmm7, [esp + mci2020_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + mci2020_izH1]
	movlps xmm7, [esp + mci2020_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	movaps xmm0, xmm4
	mulps xmm0, [esp + mci2020_krf]
	movaps [esp + mci2020_krsqO], xmm0
	
	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci2020_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci2020_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000	
	
	movaps xmm3, [esp + mci2020_krsqO]
	addps  xmm0, xmm3	;# xmm0=rinv+ krsq 
	subps  xmm0, [esp + mci2020_crf] ;# xmm0=rinv+ krsq-crf 
	mulps  xmm0, [esp + mci2020_qqO]	;# xmm0=vcoul 
	addps  xmm0, [esp + mci2020_vctot]
	movaps [esp + mci2020_vctot], xmm0

	dec dword ptr [esp + mci2020_innerk]
	jz    .mci2020_updateouterdata
	jmp   .mci2020_odd_loop
.mci2020_updateouterdata:
	mov   edx, [ebp + mci2020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci2020_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci2020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci2020_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci2020_nri]
	dec ecx
	jecxz .mci2020_end
	;# not last, iterate once more!  
	mov [ebp + mci2020_nri], ecx
	jmp .mci2020_outer
.mci2020_end:
	emms
	mov eax, [esp + mci2020_salign]
	add esp, eax
	add esp, 356
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



	
.globl mcinl2030_sse
.globl _mcinl2030_sse
mcinl2030_sse:	
_mcinl2030_sse:	
.equiv		mci2030_nri,		8
.equiv		mci2030_iinr,		12
.equiv		mci2030_jindex,		16
.equiv		mci2030_jjnr,		20
.equiv		mci2030_shift,		24
.equiv		mci2030_shiftvec,	28
.equiv		mci2030_gid,		32
.equiv		mci2030_pos,		36		
.equiv		mci2030_charge,		40
.equiv		mci2030_facel,		44
.equiv		mci2030_Vc,			48			
.equiv		mci2030_argkrf,		52
.equiv		mci2030_argcrf,		56
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci2030_ixO,		0
.equiv		mci2030_iyO,		16
.equiv		mci2030_izO,		32
.equiv		mci2030_ixH1,		48
.equiv		mci2030_iyH1,		64
.equiv		mci2030_izH1,		80
.equiv		mci2030_ixH2,		96
.equiv		mci2030_iyH2,		112
.equiv		mci2030_izH2,		128
.equiv		mci2030_jxO,		144
.equiv		mci2030_jyO,		160
.equiv		mci2030_jzO,		176
.equiv		mci2030_jxH1,		192
.equiv		mci2030_jyH1,		208
.equiv		mci2030_jzH1,		224
.equiv		mci2030_jxH2,		240
.equiv		mci2030_jyH2,		256
.equiv		mci2030_jzH2,		272
.equiv		mci2030_qqOO,		288
.equiv		mci2030_qqOH,		304
.equiv		mci2030_qqHH,		320
.equiv		mci2030_vctot,		336
.equiv		mci2030_half,		352
.equiv		mci2030_three,		368
.equiv		mci2030_rsqOO,		384
.equiv		mci2030_rsqOH1,		400
.equiv		mci2030_rsqOH2,		416
.equiv		mci2030_rsqH1O,		432
.equiv		mci2030_rsqH1H1,	448
.equiv		mci2030_rsqH1H2,	464
.equiv		mci2030_rsqH2O,		480
.equiv		mci2030_rsqH2H1,	496
.equiv		mci2030_rsqH2H2,	512
.equiv		mci2030_rinvOO,		528
.equiv		mci2030_rinvOH1,	544
.equiv		mci2030_rinvOH2,	560
.equiv		mci2030_rinvH1O,	576
.equiv		mci2030_rinvH1H1,	592
.equiv		mci2030_rinvH1H2,	608
.equiv		mci2030_rinvH2O,	624
.equiv		mci2030_rinvH2H1,	640
.equiv		mci2030_rinvH2H2,	656
.equiv		mci2030_krf,		672	
.equiv		mci2030_crf,		688
.equiv		mci2030_is3,		704
.equiv		mci2030_ii3,		708
.equiv		mci2030_innerjjnr,	712
.equiv		mci2030_innerk,		716
.equiv		mci2030_salign,		720
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 724		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci2030_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_three]
	movss xmm5, [ebp + mci2030_argkrf]
	movss xmm6, [ebp + mci2030_argcrf]
	
	movaps [esp + mci2030_half],  xmm0
	movaps [esp + mci2030_three], xmm1
	shufps xmm5, xmm5, 0
	shufps xmm6, xmm6, 0
	movaps [esp + mci2030_krf], xmm5
	movaps [esp + mci2030_crf], xmm6
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci2030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci2030_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + mci2030_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci2030_qqOO], xmm3
	movaps [esp + mci2030_qqOH], xmm4
	movaps [esp + mci2030_qqHH], xmm5
	
.mci2030_outer:
	mov   eax, [ebp + mci2030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci2030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci2030_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci2030_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci2030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci2030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci2030_pos]    ;# eax = base of pos[]  
	mov   [esp + mci2030_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci2030_ixO], xmm3
	movaps [esp + mci2030_iyO], xmm4
	movaps [esp + mci2030_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci2030_ixH1], xmm0
	movaps [esp + mci2030_iyH1], xmm1
	movaps [esp + mci2030_izH1], xmm2
	movaps [esp + mci2030_ixH2], xmm3
	movaps [esp + mci2030_iyH2], xmm4
	movaps [esp + mci2030_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci2030_vctot], xmm4
	
	mov   eax, [ebp + mci2030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci2030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci2030_pos]	
	mov   eax, [ebp + mci2030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci2030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci2030_innerk], edx    ;# number of innerloop atoms 
	jge   .mci2030_unroll_loop
	jmp   .mci2030_single_check
.mci2030_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci2030_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + mci2030_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci2030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d 
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd 
	movaps [esp + mci2030_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + mci2030_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + mci2030_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + mci2030_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + mci2030_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + mci2030_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + mci2030_jzO],  xmm0
	movaps [esp + mci2030_jzH1],  xmm1
	movaps [esp + mci2030_jzH2],  xmm2

	movaps xmm0, [esp + mci2030_ixO]
	movaps xmm1, [esp + mci2030_iyO]
	movaps xmm2, [esp + mci2030_izO]
	movaps xmm3, [esp + mci2030_ixO]
	movaps xmm4, [esp + mci2030_iyO]
	movaps xmm5, [esp + mci2030_izO]
	subps  xmm0, [esp + mci2030_jxO]
	subps  xmm1, [esp + mci2030_jyO]
	subps  xmm2, [esp + mci2030_jzO]
	subps  xmm3, [esp + mci2030_jxH1]
	subps  xmm4, [esp + mci2030_jyH1]
	subps  xmm5, [esp + mci2030_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci2030_rsqOO], xmm0
	movaps [esp + mci2030_rsqOH1], xmm3

	movaps xmm0, [esp + mci2030_ixO]
	movaps xmm1, [esp + mci2030_iyO]
	movaps xmm2, [esp + mci2030_izO]
	movaps xmm3, [esp + mci2030_ixH1]
	movaps xmm4, [esp + mci2030_iyH1]
	movaps xmm5, [esp + mci2030_izH1]
	subps  xmm0, [esp + mci2030_jxH2]
	subps  xmm1, [esp + mci2030_jyH2]
	subps  xmm2, [esp + mci2030_jzH2]
	subps  xmm3, [esp + mci2030_jxO]
	subps  xmm4, [esp + mci2030_jyO]
	subps  xmm5, [esp + mci2030_jzO]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci2030_rsqOH2], xmm0
	movaps [esp + mci2030_rsqH1O], xmm3

	movaps xmm0, [esp + mci2030_ixH1]
	movaps xmm1, [esp + mci2030_iyH1]
	movaps xmm2, [esp + mci2030_izH1]
	movaps xmm3, [esp + mci2030_ixH1]
	movaps xmm4, [esp + mci2030_iyH1]
	movaps xmm5, [esp + mci2030_izH1]
	subps  xmm0, [esp + mci2030_jxH1]
	subps  xmm1, [esp + mci2030_jyH1]
	subps  xmm2, [esp + mci2030_jzH1]
	subps  xmm3, [esp + mci2030_jxH2]
	subps  xmm4, [esp + mci2030_jyH2]
	subps  xmm5, [esp + mci2030_jzH2]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci2030_rsqH1H1], xmm0
	movaps [esp + mci2030_rsqH1H2], xmm3

	movaps xmm0, [esp + mci2030_ixH2]
	movaps xmm1, [esp + mci2030_iyH2]
	movaps xmm2, [esp + mci2030_izH2]
	movaps xmm3, [esp + mci2030_ixH2]
	movaps xmm4, [esp + mci2030_iyH2]
	movaps xmm5, [esp + mci2030_izH2]
	subps  xmm0, [esp + mci2030_jxO]
	subps  xmm1, [esp + mci2030_jyO]
	subps  xmm2, [esp + mci2030_jzO]
	subps  xmm3, [esp + mci2030_jxH1]
	subps  xmm4, [esp + mci2030_jyH1]
	subps  xmm5, [esp + mci2030_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + mci2030_rsqH2O], xmm0
	movaps [esp + mci2030_rsqH2H1], xmm4

	movaps xmm0, [esp + mci2030_ixH2]
	movaps xmm1, [esp + mci2030_iyH2]
	movaps xmm2, [esp + mci2030_izH2]
	subps  xmm0, [esp + mci2030_jxH2]
	subps  xmm1, [esp + mci2030_jyH2]
	subps  xmm2, [esp + mci2030_jzH2]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + mci2030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci2030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci2030_half] ;# rinvH2H2 
	mulps   xmm7, [esp + mci2030_half] ;# rinvH2H1 
	movaps  [esp + mci2030_rinvH2H2], xmm3
	movaps  [esp + mci2030_rinvH2H1], xmm7
	
	rsqrtps xmm1, [esp + mci2030_rsqOO]
	rsqrtps xmm5, [esp + mci2030_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci2030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci2030_rsqOO]
	mulps   xmm5, [esp + mci2030_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci2030_half] 
	mulps   xmm7, [esp + mci2030_half]
	movaps  [esp + mci2030_rinvOO], xmm3
	movaps  [esp + mci2030_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + mci2030_rsqOH2]
	rsqrtps xmm5, [esp + mci2030_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci2030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci2030_rsqOH2]
	mulps   xmm5, [esp + mci2030_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci2030_half] 
	mulps   xmm7, [esp + mci2030_half]
	movaps  [esp + mci2030_rinvOH2], xmm3
	movaps  [esp + mci2030_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + mci2030_rsqH1H1]
	rsqrtps xmm5, [esp + mci2030_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci2030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci2030_rsqH1H1]
	mulps   xmm5, [esp + mci2030_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci2030_half] 
	mulps   xmm7, [esp + mci2030_half]
	movaps  [esp + mci2030_rinvH1H1], xmm3
	movaps  [esp + mci2030_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + mci2030_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci2030_three]
	mulps   xmm1, [esp + mci2030_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + mci2030_half] 
	movaps  [esp + mci2030_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm6, [esp + mci2030_krf]
	mulps  xmm6, [esp + mci2030_rsqOO] ;# xmm5=krsq 
	addps  xmm6, [esp + mci2030_rinvOO]	;# xmm6=rinv+ krsq 
	subps  xmm6, [esp + mci2030_crf]
	mulps  xmm6, [esp + mci2030_qqOO] ;# xmm6=voul=qq*(rinv+ krsq-crf) 
	addps  xmm6, [esp + mci2030_vctot] ;# local vctot summation variable 

	;# O-H interactions 
	movaps xmm0, [esp + mci2030_krf]
	movaps xmm1, [esp + mci2030_krf]
	movaps xmm2, [esp + mci2030_krf]
	movaps xmm3, [esp + mci2030_krf]
	mulps  xmm0, [esp + mci2030_rsqOH1] ;# krsq 
	mulps  xmm1, [esp + mci2030_rsqOH2] ;# krsq 
	mulps  xmm2, [esp + mci2030_rsqH1O] ;# krsq 
	mulps  xmm3, [esp + mci2030_rsqH2O] ;# krsq 
	addps  xmm0, [esp + mci2030_rinvOH1]	;# rinv+ krsq 
	addps  xmm1, [esp + mci2030_rinvOH2]	;# rinv+ krsq 
	addps  xmm2, [esp + mci2030_rinvH1O]	;# rinv+ krsq 
	addps  xmm3, [esp + mci2030_rinvH2O]	;# rinv+ krsq 
	subps  xmm0, [esp + mci2030_crf]
	subps  xmm1, [esp + mci2030_crf]
	subps  xmm2, [esp + mci2030_crf]
	subps  xmm3, [esp + mci2030_crf]
	mulps  xmm0, [esp + mci2030_qqOH] ;# voul=qq*(rinv+ krsq-crf) 
	mulps  xmm1, [esp + mci2030_qqOH] ;# voul=qq*(rinv+ krsq-crf) 
	mulps  xmm2, [esp + mci2030_qqOH] ;# voul=qq*(rinv+ krsq-crf) 
	mulps  xmm3, [esp + mci2030_qqOH] ;# voul=qq*(rinv+ krsq-crf) 
	addps xmm6, xmm0
	addps xmm1, xmm2
	addps xmm6, xmm3
	addps xmm6, xmm1
		
	;# H-H interactions 
	movaps xmm0, [esp + mci2030_krf]
	movaps xmm1, [esp + mci2030_krf]
	movaps xmm2, [esp + mci2030_krf]
	movaps xmm3, [esp + mci2030_krf]
	mulps  xmm0, [esp + mci2030_rsqH1H1] ;# krsq 
	mulps  xmm1, [esp + mci2030_rsqH1H2] ;# krsq 
	mulps  xmm2, [esp + mci2030_rsqH2H1] ;# krsq 
	mulps  xmm3, [esp + mci2030_rsqH2H2] ;# krsq 
	addps  xmm0, [esp + mci2030_rinvH1H1]	;# rinv+ krsq 
	addps  xmm1, [esp + mci2030_rinvH1H2]	;# rinv+ krsq 
	addps  xmm2, [esp + mci2030_rinvH2H1]	;# rinv+ krsq 
	addps  xmm3, [esp + mci2030_rinvH2H2]	;# rinv+ krsq 
	subps  xmm0, [esp + mci2030_crf]
	subps  xmm1, [esp + mci2030_crf]
	subps  xmm2, [esp + mci2030_crf]
	subps  xmm3, [esp + mci2030_crf]
	mulps  xmm0, [esp + mci2030_qqHH] ;# voul=qq*(rinv+ krsq-crf) 
	mulps  xmm1, [esp + mci2030_qqHH] ;# voul=qq*(rinv+ krsq-crf) 
	mulps  xmm2, [esp + mci2030_qqHH] ;# voul=qq*(rinv+ krsq-crf) 
	mulps  xmm3, [esp + mci2030_qqHH] ;# voul=qq*(rinv+ krsq-crf) 
	addps xmm6, xmm0
	addps xmm1, xmm2
	addps xmm6, xmm3
	addps xmm6, xmm1
	movaps [esp + mci2030_vctot], xmm6
		
	;# should we do one more iteration? 
	sub dword ptr [esp + mci2030_innerk],  4
	jl    .mci2030_single_check
	jmp   .mci2030_unroll_loop
.mci2030_single_check:
	add dword ptr [esp + mci2030_innerk],  4
	jnz   .mci2030_single_loop
	jmp   .mci2030_updateouterdata
.mci2030_single_loop:
	mov   edx, [esp + mci2030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci2030_innerjjnr],  4	

	mov esi, [ebp + mci2030_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + mci2030_ixO]     
	movaps  xmm1, [esp + mci2030_iyO]
	movaps  xmm2, [esp + mci2030_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + mci2030_jxO], xmm3
	movaps [esp + mci2030_jyO], xmm4
	movaps [esp + mci2030_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 

	movaps xmm6, xmm0
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	mulps   xmm6, [esp + mci2030_krf] ;# xmm6=krsq 
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci2030_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + mci2030_half] ;# rinv iO - j water 
	
	addps   xmm6, xmm3	;# xmm6=rinv+ krsq 
	subps   xmm6, [esp + mci2030_crf] ;# xmm6=rinv+ krsq-crf 
	
	xorps   xmm1, xmm1
	movaps  xmm0, xmm3
	subps   xmm3, xmm7	;# xmm3=rinv-2*krsq 
	xorps   xmm4, xmm4
	;# fetch charges to xmm4 (temporary) 
	movss   xmm4, [esp + mci2030_qqOO]
	movhps  xmm4, [esp + mci2030_qqOH]

	mulps xmm6, xmm4	;# vcoul  

	addps   xmm6, [esp + mci2030_vctot]
	movaps  [esp + mci2030_vctot], xmm6
	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + mci2030_ixH1]
	movaps  xmm1, [esp + mci2030_iyH1]
	movaps  xmm2, [esp + mci2030_izH1]	
	movaps  xmm3, [esp + mci2030_ixH2] 
	movaps  xmm4, [esp + mci2030_iyH2] 
	movaps  xmm5, [esp + mci2030_izH2] 
	subps   xmm0, [esp + mci2030_jxO]
	subps   xmm1, [esp + mci2030_jyO]
	subps   xmm2, [esp + mci2030_jzO]
	subps   xmm3, [esp + mci2030_jxO]
	subps   xmm4, [esp + mci2030_jyO]
	subps   xmm5, [esp + mci2030_jzO]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci2030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci2030_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + mci2030_half] ;# rinv H2 - j water  

	mulps xmm0, [esp + mci2030_krf] ;# krsq 
	mulps xmm4, [esp + mci2030_krf] ;# krsq  

	;# assemble charges in xmm6 
	xorps   xmm6, xmm6
	movss   xmm6, [esp + mci2030_qqOH]
	movhps  xmm6, [esp + mci2030_qqHH]
	addps   xmm0, xmm3	;# krsq+ rinv 
	addps   xmm4, xmm7	;# krsq+ rinv 
	subps   xmm0, [esp + mci2030_crf]
	subps   xmm4, [esp + mci2030_crf]
	mulps   xmm0, xmm6	;# vcoul 
	mulps   xmm4, xmm6	;# vcoul 
	addps   xmm4, xmm0		
	addps   xmm4, [esp + mci2030_vctot]
	movaps  [esp + mci2030_vctot], xmm4
	
	dec dword ptr [esp + mci2030_innerk]
	jz    .mci2030_updateouterdata
	jmp   .mci2030_single_loop
.mci2030_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci2030_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci2030_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci2030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci2030_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 	
	
	;# finish if last 
	mov   ecx, [ebp + mci2030_nri]
	dec ecx
	jecxz .mci2030_end
	;# not last, iterate once more!  
	mov [ebp + mci2030_nri], ecx
	jmp .mci2030_outer
.mci2030_end:
	emms
	mov eax, [esp + mci2030_salign]
	add esp, eax
	add esp, 724
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret


		

.globl mcinl3000_sse
.globl _mcinl3000_sse
mcinl3000_sse:	
_mcinl3000_sse:	
.equiv		mci3000_nri,		8
.equiv		mci3000_iinr,		12
.equiv		mci3000_jindex,		16
.equiv		mci3000_jjnr,		20
.equiv		mci3000_shift,		24
.equiv		mci3000_shiftvec,	28
.equiv		mci3000_gid,		32
.equiv		mci3000_pos,		36		
.equiv		mci3000_charge,		40
.equiv		mci3000_facel,		44
.equiv		mci3000_Vc,			48			
.equiv		mci3000_tabscale,	52
.equiv		mci3000_VFtab,		56
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3000_ix,			0
.equiv		mci3000_iy,			16
.equiv		mci3000_iz,			32
.equiv		mci3000_iq,			48
.equiv		mci3000_tsc,		64
.equiv		mci3000_qq,			80
.equiv		mci3000_vctot,		96
.equiv		mci3000_half,		112
.equiv		mci3000_three,		128
.equiv		mci3000_is3,		144
.equiv		mci3000_ii3,		148
.equiv		mci3000_innerjjnr,	152
.equiv		mci3000_innerk,		156
.equiv		mci3000_salign,		160
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 164		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3000_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + mci3000_tabscale]
	movaps [esp + mci3000_half],  xmm0
	movaps [esp + mci3000_three],  xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + mci3000_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.mci3000_outer:
	mov   eax, [ebp + mci3000_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3000_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3000_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3000_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci3000_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3000_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3000_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci3000_facel]
	shufps xmm3, xmm3, 0

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3000_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci3000_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci3000_ix], xmm0
	movaps [esp + mci3000_iy], xmm1
	movaps [esp + mci3000_iz], xmm2

	mov   [esp + mci3000_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci3000_vctot], xmm4
	
	mov   eax, [ebp + mci3000_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3000_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3000_pos]
	mov   eax, [ebp + mci3000_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3000_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci3000_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3000_unroll_loop
	jmp   .mci3000_finish_inner
.mci3000_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3000_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci3000_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3000_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci3000_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	mulps  xmm3, xmm2

	movaps [esp + mci3000_qq], xmm3	
	
	mov esi, [ebp + mci3000_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci3000_ix]
	movaps xmm5, [esp + mci3000_iy]
	movaps xmm6, [esp + mci3000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3000_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci3000_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7
		
	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3000_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  

	;# at this point xmm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3000_vctot]
	movaps [esp + mci3000_vctot], xmm5 

	;# should we do one more iteration? 
	sub dword ptr [esp + mci3000_innerk],  4
	jl    .mci3000_finish_inner
	jmp   .mci3000_unroll_loop
.mci3000_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci3000_innerk],  4
	mov   edx, [esp + mci3000_innerk]
	and   edx, 2
	jnz   .mci3000_dopair
	jmp   .mci3000_checksingle
.mci3000_dopair:	
	mov esi, [ebp + mci3000_charge]

    mov   ecx, [esp + mci3000_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci3000_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + mci3000_iq]
	movlhps xmm3, xmm7
	movaps [esp + mci3000_qq], xmm3

	mov edi, [ebp + mci3000_pos]	
	
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci3000_ix]
	movaps xmm5, [esp + mci3000_iy]
	movaps xmm6, [esp + mci3000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3000_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3000_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3000_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3000_vctot]
	movaps [esp + mci3000_vctot], xmm5 

.mci3000_checksingle:				
	mov   edx, [esp + mci3000_innerk]
	and   edx, 1
	jnz    .mci3000_dosingle
	jmp    .mci3000_updateouterdata
.mci3000_dosingle:
	mov esi, [ebp + mci3000_charge]
	mov edi, [ebp + mci3000_pos]
	mov   ecx, [esp + mci3000_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + mci3000_iq]
	movaps [esp + mci3000_qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci3000_ix]
	movaps xmm5, [esp + mci3000_iy]
	movaps xmm6, [esp + mci3000_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3000_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3000_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3000_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3000_VFtab]
	movd ebx, mm6
	
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3000_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV 
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + mci3000_vctot]
	movss [esp + mci3000_vctot], xmm5 

.mci3000_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci3000_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3000_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3000_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3000_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3000_nri]
	dec ecx
	jecxz .mci3000_end
	;# not last, iterate once more!  
	mov [ebp + mci3000_nri], ecx
	jmp .mci3000_outer
.mci3000_end:
	emms
	mov eax, [esp + mci3000_salign]
	add esp, eax
	add esp, 164
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl3010_sse
.globl _mcinl3010_sse
mcinl3010_sse:	
_mcinl3010_sse:	
.equiv		mci3010_nri,		8
.equiv		mci3010_iinr,		12
.equiv		mci3010_jindex,		16
.equiv		mci3010_jjnr,		20
.equiv		mci3010_shift,		24
.equiv		mci3010_shiftvec,	28
.equiv		mci3010_gid,		32
.equiv		mci3010_pos,		36		
.equiv		mci3010_charge,		40
.equiv		mci3010_facel,		44
.equiv		mci3010_Vc,			48
.equiv		mci3010_tabscale,	52
.equiv		mci3010_VFtab,		56
.equiv		mci3010_nsatoms,	60	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3010_ix,			0
.equiv		mci3010_iy,			16
.equiv		mci3010_iz,			32
.equiv		mci3010_iq,			48
.equiv		mci3010_tsc,		64
.equiv		mci3010_qq,			80
.equiv		mci3010_vctot,		96
.equiv		mci3010_half,		112
.equiv		mci3010_three,		128
.equiv		mci3010_is3,		144
.equiv		mci3010_ii3,		148
.equiv		mci3010_shX,		152
.equiv		mci3010_shY,		156
.equiv		mci3010_shZ,		160
.equiv		mci3010_ntia,		164	
.equiv		mci3010_innerjjnr0,	168
.equiv		mci3010_innerk0,	172
.equiv		mci3010_innerjjnr,	176
.equiv		mci3010_innerk,		180
.equiv		mci3010_salign,		184
.equiv		mci3010_nscoul,		188
.equiv		mci3010_solnr,		192			
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 196		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3010_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + mci3010_tabscale]
	movaps [esp + mci3010_half],  xmm0
	movaps [esp + mci3010_three],  xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + mci3010_tsc], xmm3

	add dword ptr [ebp + mci3010_nsatoms],  8

	;# assume we have at least one i particle - start directly 	
.mci3010_outer:
	mov   eax, [ebp + mci3010_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3010_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3010_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3010_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 
	movss [esp + mci3010_shX], xmm0
	movss [esp + mci3010_shY], xmm1
	movss [esp + mci3010_shZ], xmm2

	mov   ecx, [ebp + mci3010_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3010_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + mci3010_nsatoms]
	mov   ecx, [eax]
	add dword ptr [ebp + mci3010_nsatoms],  12
	mov   [esp + mci3010_nscoul], ecx	

	;# clear vctot 
	xorps xmm4, xmm4
	movaps [esp + mci3010_vctot], xmm4
	mov   [esp + mci3010_solnr], ebx

	mov   eax, [ebp + mci3010_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3010_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   eax, [ebp + mci3010_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3010_innerjjnr0], eax     ;# pointer to jjnr[nj0] 
	mov   [esp + mci3010_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + mci3010_nscoul]
	cmp   ecx,  0
	jnz  .mci3010_mno_coul
	jmp   .mci3010_last_mno
.mci3010_mno_coul:
	mov   ebx,  [esp + mci3010_solnr]
	inc   dword ptr [esp + mci3010_solnr]

	movss xmm0, [esp + mci3010_shX]
	movss xmm1, [esp + mci3010_shY]
	movss xmm2, [esp + mci3010_shZ]

	mov   edx, [ebp + mci3010_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci3010_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3010_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci3010_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci3010_ix], xmm0
	movaps [esp + mci3010_iy], xmm1
	movaps [esp + mci3010_iz], xmm2

	mov   [esp + mci3010_ii3], ebx

	mov   ecx, [esp + mci3010_innerjjnr0]
	mov   [esp + mci3010_innerjjnr], ecx
	mov   edx, [esp + mci3010_innerk0]
    sub   edx,  4
    mov   [esp + mci3010_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3010_unroll_coul_loop
	jmp   .mci3010_finish_coul_inner

.mci3010_unroll_coul_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3010_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci3010_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3010_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci3010_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	mulps  xmm3, xmm2

	movaps [esp + mci3010_qq], xmm3	
	
	mov esi, [ebp + mci3010_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci3010_ix]
	movaps xmm5, [esp + mci3010_iy]
	movaps xmm6, [esp + mci3010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3010_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci3010_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7
		
	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3010_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3010_vctot]
	movaps [esp + mci3010_vctot], xmm5 

	;# should we do one more iteration? 
	sub dword ptr [esp + mci3010_innerk],  4
	jl    .mci3010_finish_coul_inner
	jmp   .mci3010_unroll_coul_loop
.mci3010_finish_coul_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci3010_innerk],  4
	mov   edx, [esp + mci3010_innerk]
	and   edx, 2
	jnz   .mci3010_dopair_coul
	jmp   .mci3010_checksingle_coul
.mci3010_dopair_coul:	
	mov esi, [ebp + mci3010_charge]

    mov   ecx, [esp + mci3010_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci3010_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + mci3010_iq]
	movlhps xmm3, xmm7
	movaps [esp + mci3010_qq], xmm3

	mov edi, [ebp + mci3010_pos]	
	
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci3010_ix]
	movaps xmm5, [esp + mci3010_iy]
	movaps xmm6, [esp + mci3010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3010_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3010_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3010_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3010_vctot]
	movaps [esp + mci3010_vctot], xmm5 

.mci3010_checksingle_coul:				
	mov   edx, [esp + mci3010_innerk]
	and   edx, 1
	jnz    .mci3010_dosingle_coul
	jmp    .mci3010_updateouterdata_coul
.mci3010_dosingle_coul:
	mov esi, [ebp + mci3010_charge]
	mov edi, [ebp + mci3010_pos]
	mov   ecx, [esp + mci3010_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + mci3010_iq]
	movaps [esp + mci3010_qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci3010_ix]
	movaps xmm5, [esp + mci3010_iy]
	movaps xmm6, [esp + mci3010_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3010_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3010_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3010_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3010_VFtab]
	movd ebx, mm6
	
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3010_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + mci3010_vctot]
	movss [esp + mci3010_vctot], xmm5 

.mci3010_updateouterdata_coul:
	;# loop back to mno 
	dec  dword ptr [esp + mci3010_nscoul]
	jz  .mci3010_last_mno
	jmp .mci3010_mno_coul
	
.mci3010_last_mno:	
	;# get group index for i particle 
	mov   edx, [ebp + mci3010_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3010_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3010_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3010_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3010_nri]
	dec ecx
	jecxz .mci3010_end
	;# not last, iterate once more!  
	mov [ebp + mci3010_nri], ecx
	jmp .mci3010_outer
.mci3010_end:
	emms
	mov eax, [esp + mci3010_salign]
	add esp, eax
	add esp, 196
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl mcinl3020_sse
.globl _mcinl3020_sse
mcinl3020_sse:	
_mcinl3020_sse:	
.equiv		mci3020_nri,		8
.equiv		mci3020_iinr,		12
.equiv		mci3020_jindex,		16
.equiv		mci3020_jjnr,		20
.equiv		mci3020_shift,		24
.equiv		mci3020_shiftvec,	28
.equiv		mci3020_gid,		32
.equiv		mci3020_pos,		36		
.equiv		mci3020_charge,		40
.equiv		mci3020_facel,		44
.equiv		mci3020_Vc,			48			
.equiv		mci3020_tabscale,	52	
.equiv		mci3020_VFtab,		56	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3020_ixO,		0
.equiv		mci3020_iyO,		16
.equiv		mci3020_izO,		32
.equiv		mci3020_ixH1,		48
.equiv		mci3020_iyH1,		64
.equiv		mci3020_izH1,		80
.equiv		mci3020_ixH2,		96
.equiv		mci3020_iyH2,		112
.equiv		mci3020_izH2,		128
.equiv		mci3020_iqO,		144 
.equiv		mci3020_iqH,		160 
.equiv		mci3020_qqO,		176
.equiv		mci3020_qqH,		192
.equiv		mci3020_rinvO,		208
.equiv		mci3020_rinvH1,		224
.equiv		mci3020_rinvH2,		240		
.equiv		mci3020_rO,			256
.equiv		mci3020_rH1,		272
.equiv		mci3020_rH2,		288
.equiv		mci3020_tsc,		304
.equiv		mci3020_vctot,		320
.equiv		mci3020_half,		336
.equiv		mci3020_three,		352
.equiv		mci3020_is3,		368
.equiv		mci3020_ii3,		372
.equiv		mci3020_innerjjnr,	376
.equiv		mci3020_innerk,		380
.equiv		mci3020_salign,		384
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 388		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3020_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + mci3020_tabscale]
	
	movaps [esp + mci3020_half],  xmm0
	movaps [esp + mci3020_three],  xmm2
	shufps xmm3, xmm3, 0 
	movaps [esp + mci3020_tsc], xmm3
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3020_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3020_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + mci3020_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + mci3020_iqO], xmm3
	movaps [esp + mci3020_iqH], xmm4
	
.mci3020_outer:
	mov   eax, [ebp + mci3020_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3020_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3020_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3020_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci3020_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3020_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3020_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3020_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3020_ixO], xmm3
	movaps [esp + mci3020_iyO], xmm4
	movaps [esp + mci3020_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3020_ixH1], xmm0
	movaps [esp + mci3020_iyH1], xmm1
	movaps [esp + mci3020_izH1], xmm2
	movaps [esp + mci3020_ixH2], xmm3
	movaps [esp + mci3020_iyH2], xmm4
	movaps [esp + mci3020_izH2], xmm5
	
	;# clear vctot 
	xorps xmm4, xmm4
	movaps [esp + mci3020_vctot], xmm4
	
	mov   eax, [ebp + mci3020_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3020_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3020_pos]
	mov   eax, [ebp + mci3020_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3020_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci3020_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3020_unroll_loop
	jmp   .mci3020_odd_inner
.mci3020_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + mci3020_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3020_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + mci3020_iqO]
	mulps  xmm4, [esp + mci3020_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx

	movaps  [esp + mci3020_qqO], xmm3
	movaps  [esp + mci3020_qqH], xmm4	

	mov esi, [ebp + mci3020_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + mci3020_ixO]
	movaps xmm5, [esp + mci3020_iyO]
	movaps xmm6, [esp + mci3020_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2
	
	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + mci3020_ixH1]
	movaps xmm5, [esp + mci3020_iyH1]
	movaps xmm6, [esp + mci3020_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + mci3020_ixH2]
	movaps xmm4, [esp + mci3020_iyH2]
	movaps xmm5, [esp + mci3020_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - seed to xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci3020_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci3020_half]
	movaps  [esp + mci3020_rinvO], xmm4	;# rinvO in xmm4 
	mulps   xmm7, xmm4
	movaps  [esp + mci3020_rO], xmm7	

	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci3020_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci3020_half]
	movaps  [esp + mci3020_rinvH1], xmm4	;# rinvH1 in xmm4 
	mulps   xmm6, xmm4
	movaps  [esp + mci3020_rH1], xmm6

	;# rsqH2 - seed to xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci3020_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci3020_half]
	movaps  [esp + mci3020_rinvH2], xmm4	;# rinvH2 in xmm4 
	mulps   xmm5, xmm4
	movaps  [esp + mci3020_rH2], xmm5

	;# do O interactions 
	;# rO is still in xmm7 
	mulps   xmm7, [esp + mci3020_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3

	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd mm0, eax   
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + mci3020_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp    
    movaps xmm0, [esp + mci3020_qqO]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  

    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + mci3020_vctot]
    movaps [esp + mci3020_vctot], xmm5
	
	;# Done with O interactions - now H1! 
	movaps xmm7, [esp + mci3020_rH1]
	mulps   xmm7, [esp + mci3020_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    movaps xmm0, [esp + mci3020_qqH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addps  xmm5, [esp + mci3020_vctot]
    movaps [esp + mci3020_vctot], xmm5 

	;# Done with H1, finally we do H2 interactions 
	movaps xmm7, [esp + mci3020_rH2]
	mulps   xmm7, [esp + mci3020_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    movaps xmm0, [esp + mci3020_qqH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addps  xmm5, [esp + mci3020_vctot]
    movaps [esp + mci3020_vctot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3020_innerk],  4
	jl    .mci3020_odd_inner
	jmp   .mci3020_unroll_loop
.mci3020_odd_inner:	
	add dword ptr [esp + mci3020_innerk],  4
	jnz   .mci3020_odd_loop
	jmp   .mci3020_updateouterdata
.mci3020_odd_loop:
	mov   edx, [esp + mci3020_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci3020_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + mci3020_iqO]
	mov esi, [ebp + mci3020_charge] 
	movhps xmm4, [esp + mci3020_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + mci3020_qqO], xmm3	;# use oxygen qq for storage 

	mov esi, [ebp + mci3020_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + mci3020_ixO]
	movss xmm4, [esp + mci3020_iyO]
	movss xmm5, [esp + mci3020_izO]
		
	movlps xmm6, [esp + mci3020_ixH1]
	movlps xmm7, [esp + mci3020_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + mci3020_iyH1]
	movlps xmm7, [esp + mci3020_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + mci3020_izH1]
	movlps xmm7, [esp + mci3020_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3020_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3020_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000	
	
	mulps xmm4, xmm0	;# xmm4=r 
	movaps [esp + mci3020_rinvO], xmm0
	
	mulps xmm4, [esp + mci3020_tsc]
	movhlps xmm7, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm7    ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm7, mm7
    movlhps xmm3, xmm7

	subps   xmm4, xmm3	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
	
    movd mm0, eax   
    movd mm1, ecx
    movd mm2, edx

    mov  esi, [ebp + mci3020_VFtab]
    movd eax, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    movaps xmm0, [esp + mci3020_qqO]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + mci3020_vctot]
    movaps [esp + mci3020_vctot], xmm5

	dec dword ptr [esp + mci3020_innerk]
	jz    .mci3020_updateouterdata
	jmp   .mci3020_odd_loop
.mci3020_updateouterdata:
	mov   edx, [ebp + mci3020_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci3020_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3020_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci3020_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 

	;# finish if last 
	mov   ecx, [ebp + mci3020_nri]
	dec ecx
	jecxz .mci3020_end
	;# not last, iterate once more!  
	mov [ebp + mci3020_nri], ecx
	jmp .mci3020_outer
.mci3020_end:
	emms
	mov eax, [esp + mci3020_salign]
	add esp, eax
	add esp, 388
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

	
.globl mcinl3030_sse
.globl _mcinl3030_sse
mcinl3030_sse:	
_mcinl3030_sse:	
.equiv		mci3030_nri,		8
.equiv		mci3030_iinr,		12
.equiv		mci3030_jindex,		16
.equiv		mci3030_jjnr,		20
.equiv		mci3030_shift,		24
.equiv		mci3030_shiftvec,	28
.equiv		mci3030_gid,		32
.equiv		mci3030_pos,		36		
.equiv		mci3030_charge,		40
.equiv		mci3030_facel,		44
.equiv		mci3030_Vc,			48			
.equiv		mci3030_tabscale,	52	
.equiv		mci3030_VFtab,		56
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3030_ixO,		0
.equiv		mci3030_iyO,		16
.equiv		mci3030_izO,		32
.equiv		mci3030_ixH1,		48
.equiv		mci3030_iyH1,		64
.equiv		mci3030_izH1,		80
.equiv		mci3030_ixH2,		96
.equiv		mci3030_iyH2,		112
.equiv		mci3030_izH2,		128
.equiv		mci3030_jxO,		144
.equiv		mci3030_jyO,		160
.equiv		mci3030_jzO,		176
.equiv		mci3030_jxH1,		192
.equiv		mci3030_jyH1,		208
.equiv		mci3030_jzH1,		224
.equiv		mci3030_jxH2,		240
.equiv		mci3030_jyH2,		256
.equiv		mci3030_jzH2,		272
.equiv		mci3030_qqOO,		288
.equiv		mci3030_qqOH,		304
.equiv		mci3030_qqHH,		320
.equiv		mci3030_tsc,		336
.equiv		mci3030_vctot,		352
.equiv		mci3030_half,		368
.equiv		mci3030_three,		384
.equiv		mci3030_rsqOO,		400
.equiv		mci3030_rsqOH1,		416
.equiv		mci3030_rsqOH2,		432
.equiv		mci3030_rsqH1O,		448
.equiv		mci3030_rsqH1H1,	464
.equiv		mci3030_rsqH1H2,	480
.equiv		mci3030_rsqH2O,		496
.equiv		mci3030_rsqH2H1,	512
.equiv		mci3030_rsqH2H2,	528
.equiv		mci3030_rinvOO,		544
.equiv		mci3030_rinvOH1,	560
.equiv		mci3030_rinvOH2,	576
.equiv		mci3030_rinvH1O,	592
.equiv		mci3030_rinvH1H1,	608
.equiv		mci3030_rinvH1H2,	624
.equiv		mci3030_rinvH2O,	640
.equiv		mci3030_rinvH2H1,	656
.equiv		mci3030_rinvH2H2,	672	
.equiv		mci3030_is3,		688
.equiv		mci3030_ii3,		692
.equiv		mci3030_innerjjnr,	696
.equiv		mci3030_innerk,		700
.equiv		mci3030_salign,		704
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 708		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3030_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + mci3030_tabscale]
	movaps [esp + mci3030_half],  xmm0
	movaps [esp + mci3030_three], xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + mci3030_tsc],  xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3030_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3030_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + mci3030_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3030_qqOO], xmm3
	movaps [esp + mci3030_qqOH], xmm4
	movaps [esp + mci3030_qqHH], xmm5		

.mci3030_outer:
	mov   eax, [ebp + mci3030_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3030_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3030_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3030_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci3030_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3030_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3030_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3030_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3030_ixO], xmm3
	movaps [esp + mci3030_iyO], xmm4
	movaps [esp + mci3030_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3030_ixH1], xmm0
	movaps [esp + mci3030_iyH1], xmm1
	movaps [esp + mci3030_izH1], xmm2
	movaps [esp + mci3030_ixH2], xmm3
	movaps [esp + mci3030_iyH2], xmm4
	movaps [esp + mci3030_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci3030_vctot], xmm4
	
	mov   eax, [ebp + mci3030_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3030_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3030_pos]
	mov   eax, [ebp + mci3030_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3030_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci3030_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3030_unroll_loop
	jmp   .mci3030_single_check
.mci3030_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3030_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + mci3030_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3030_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d 
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd 
	movaps [esp + mci3030_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + mci3030_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + mci3030_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + mci3030_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + mci3030_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + mci3030_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + mci3030_jzO],  xmm0
	movaps [esp + mci3030_jzH1],  xmm1
	movaps [esp + mci3030_jzH2],  xmm2

	movaps xmm0, [esp + mci3030_ixO]
	movaps xmm1, [esp + mci3030_iyO]
	movaps xmm2, [esp + mci3030_izO]
	movaps xmm3, [esp + mci3030_ixO]
	movaps xmm4, [esp + mci3030_iyO]
	movaps xmm5, [esp + mci3030_izO]
	subps  xmm0, [esp + mci3030_jxO]
	subps  xmm1, [esp + mci3030_jyO]
	subps  xmm2, [esp + mci3030_jzO]
	subps  xmm3, [esp + mci3030_jxH1]
	subps  xmm4, [esp + mci3030_jyH1]
	subps  xmm5, [esp + mci3030_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci3030_rsqOO], xmm0
	movaps [esp + mci3030_rsqOH1], xmm3

	movaps xmm0, [esp + mci3030_ixO]
	movaps xmm1, [esp + mci3030_iyO]
	movaps xmm2, [esp + mci3030_izO]
	movaps xmm3, [esp + mci3030_ixH1]
	movaps xmm4, [esp + mci3030_iyH1]
	movaps xmm5, [esp + mci3030_izH1]
	subps  xmm0, [esp + mci3030_jxH2]
	subps  xmm1, [esp + mci3030_jyH2]
	subps  xmm2, [esp + mci3030_jzH2]
	subps  xmm3, [esp + mci3030_jxO]
	subps  xmm4, [esp + mci3030_jyO]
	subps  xmm5, [esp + mci3030_jzO]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci3030_rsqOH2], xmm0
	movaps [esp + mci3030_rsqH1O], xmm3

	movaps xmm0, [esp + mci3030_ixH1]
	movaps xmm1, [esp + mci3030_iyH1]
	movaps xmm2, [esp + mci3030_izH1]
	movaps xmm3, [esp + mci3030_ixH1]
	movaps xmm4, [esp + mci3030_iyH1]
	movaps xmm5, [esp + mci3030_izH1]
	subps  xmm0, [esp + mci3030_jxH1]
	subps  xmm1, [esp + mci3030_jyH1]
	subps  xmm2, [esp + mci3030_jzH1]
	subps  xmm3, [esp + mci3030_jxH2]
	subps  xmm4, [esp + mci3030_jyH2]
	subps  xmm5, [esp + mci3030_jzH2]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci3030_rsqH1H1], xmm0
	movaps [esp + mci3030_rsqH1H2], xmm3

	movaps xmm0, [esp + mci3030_ixH2]
	movaps xmm1, [esp + mci3030_iyH2]
	movaps xmm2, [esp + mci3030_izH2]
	movaps xmm3, [esp + mci3030_ixH2]
	movaps xmm4, [esp + mci3030_iyH2]
	movaps xmm5, [esp + mci3030_izH2]
	subps  xmm0, [esp + mci3030_jxO]
	subps  xmm1, [esp + mci3030_jyO]
	subps  xmm2, [esp + mci3030_jzO]
	subps  xmm3, [esp + mci3030_jxH1]
	subps  xmm4, [esp + mci3030_jyH1]
	subps  xmm5, [esp + mci3030_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + mci3030_rsqH2O], xmm0
	movaps [esp + mci3030_rsqH2H1], xmm4

	movaps xmm0, [esp + mci3030_ixH2]
	movaps xmm1, [esp + mci3030_iyH2]
	movaps xmm2, [esp + mci3030_izH2]
	subps  xmm0, [esp + mci3030_jxH2]
	subps  xmm1, [esp + mci3030_jyH2]
	subps  xmm2, [esp + mci3030_jzH2]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + mci3030_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3030_half] ;# rinvH2H2 
	mulps   xmm7, [esp + mci3030_half] ;# rinvH2H1 
	movaps  [esp + mci3030_rinvH2H2], xmm3
	movaps  [esp + mci3030_rinvH2H1], xmm7
		
	rsqrtps xmm1, [esp + mci3030_rsqOO]
	rsqrtps xmm5, [esp + mci3030_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci3030_rsqOO]
	mulps   xmm5, [esp + mci3030_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3030_half] 
	mulps   xmm7, [esp + mci3030_half]
	movaps  [esp + mci3030_rinvOO], xmm3
	movaps  [esp + mci3030_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + mci3030_rsqOH2]
	rsqrtps xmm5, [esp + mci3030_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci3030_rsqOH2]
	mulps   xmm5, [esp + mci3030_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3030_half] 
	mulps   xmm7, [esp + mci3030_half]
	movaps  [esp + mci3030_rinvOH2], xmm3
	movaps  [esp + mci3030_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + mci3030_rsqH1H1]
	rsqrtps xmm5, [esp + mci3030_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci3030_rsqH1H1]
	mulps   xmm5, [esp + mci3030_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3030_half] 
	mulps   xmm7, [esp + mci3030_half]
	movaps  [esp + mci3030_rinvH1H1], xmm3
	movaps  [esp + mci3030_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + mci3030_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci3030_three]
	mulps   xmm1, [esp + mci3030_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + mci3030_half] 
	movaps  [esp + mci3030_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + mci3030_rinvOO]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3030_rsqOO] ;# xmm1=r 
	mulps  xmm1, [esp + mci3030_tsc]
		
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2
	
    movd mm0, eax
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + mci3030_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3030_qqOO]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5

	;# O-H1 interaction 
	movaps xmm0, [esp + mci3030_rinvOH1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3030_rsqOH1] ;# xmm1=r 
	mulps  xmm1, [esp + mci3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2
	
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3030_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5
	
	;# O-H2 interaction  
	movaps xmm0, [esp + mci3030_rinvOH2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3030_rsqOH2] ;# xmm1=r 
	mulps  xmm1, [esp + mci3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3030_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5

	;# H1-O interaction 
	movaps xmm0, [esp + mci3030_rinvH1O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3030_rsqH1O] ;# xmm1=r 
	mulps  xmm1, [esp + mci3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3030_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5
	
	;# H1-H1 interaction 
	movaps xmm0, [esp + mci3030_rinvH1H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3030_rsqH1H1] ;# xmm1=r 
	mulps  xmm1, [esp + mci3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3030_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5
	;# H1-H2 interaction 
	movaps xmm0, [esp + mci3030_rinvH1H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3030_rsqH1H2] ;# xmm1=r 
	mulps  xmm1, [esp + mci3030_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3030_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5

	;# H2-O interaction 
	movaps xmm0, [esp + mci3030_rinvH2O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3030_rsqH2O] ;# xmm1=r 
	mulps  xmm1, [esp + mci3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3030_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5
	
	;# H2-H1 interaction 
	movaps xmm0, [esp + mci3030_rinvH2H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3030_rsqH2H1] ;# xmm1=r 
	mulps  xmm1, [esp + mci3030_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3030_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5
	
	;# H2-H2 interaction 
	movaps xmm0, [esp + mci3030_rinvH2H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3030_rsqH2H2] ;# xmm1=r 
	mulps  xmm1, [esp + mci3030_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3030_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3030_innerk],  4
	jl    .mci3030_single_check
	jmp   .mci3030_unroll_loop
.mci3030_single_check:
	add dword ptr [esp + mci3030_innerk],  4
	jnz   .mci3030_single_loop
	jmp   .mci3030_updateouterdata
.mci3030_single_loop:
	mov   edx, [esp + mci3030_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci3030_innerjjnr],  4	

	mov esi, [ebp + mci3030_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + mci3030_ixO]     
	movaps  xmm1, [esp + mci3030_iyO]
	movaps  xmm2, [esp + mci3030_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + mci3030_jxO], xmm3
	movaps [esp + mci3030_jyO], xmm4
	movaps [esp + mci3030_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	movaps  xmm2, xmm1	
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci3030_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + mci3030_half] ;# rinv iO - j water 

	movaps  xmm1, xmm3
	mulps   xmm1, xmm0	;# xmm1=r 
	movaps  xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + mci3030_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2
	
    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

	mov esi, [ebp + mci3030_VFtab]
	
    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + mci3030_qqOO]
	movhps  xmm3, [esp + mci3030_qqOH]
		
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point xmm5 contains vcoul 
	
    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5
	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + mci3030_ixH1]
	movaps  xmm1, [esp + mci3030_iyH1]
	movaps  xmm2, [esp + mci3030_izH1]	
	movaps  xmm3, [esp + mci3030_ixH2] 
	movaps  xmm4, [esp + mci3030_iyH2] 
	movaps  xmm5, [esp + mci3030_izH2] 
	subps   xmm0, [esp + mci3030_jxO]
	subps   xmm1, [esp + mci3030_jyO]
	subps   xmm2, [esp + mci3030_jzO]
	subps   xmm3, [esp + mci3030_jxO]
	subps   xmm4, [esp + mci3030_jyO]
	subps   xmm5, [esp + mci3030_jzO]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 

	;# start with H1, save H2 data 
	movaps [esp + mci3030_rsqH2O], xmm4
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3030_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3030_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + mci3030_half] ;# rinv H2 - j water  

	;# start with H1, save H2 data 
	movaps [esp + mci3030_rinvH2O], xmm7

	movaps xmm1, xmm3
	mulps  xmm1, xmm0	;# xmm1=r 
	movaps xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + mci3030_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2

    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
	
	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + mci3030_qqOH]
	movhps  xmm3, [esp + mci3030_qqHH]
		
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point xmm5 contains vcoul 
    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5	

	;# do table for H2 - j water interaction 
	movaps xmm0, [esp + mci3030_rinvH2O]
	movaps xmm1, [esp + mci3030_rsqH2O]
	mulps  xmm1, xmm0	;# xmm0=rinv, xmm1=r 
	mulps  xmm1, [esp + mci3030_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2

    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + mci3030_qqOH]
	movhps  xmm3, [esp + mci3030_qqHH]
		
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point xmm5 contains vcoul 
    addps  xmm5, [esp + mci3030_vctot]
    movaps [esp + mci3030_vctot], xmm5	

	dec dword ptr [esp + mci3030_innerk]
	jz    .mci3030_updateouterdata
	jmp   .mci3030_single_loop
.mci3030_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci3030_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3030_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3030_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3030_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3030_nri]
	dec ecx
	jecxz .mci3030_end
	;# not last, iterate once more!  
	mov [ebp + mci3030_nri], ecx
	jmp .mci3030_outer
.mci3030_end:
	emms
	mov eax, [esp + mci3030_salign]
	add esp, eax
	add esp, 708
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	



.globl mcinl3100_sse
.globl _mcinl3100_sse
mcinl3100_sse:	
_mcinl3100_sse:	
.equiv		mci3100_nri,		8
.equiv		mci3100_iinr,		12
.equiv		mci3100_jindex,		16
.equiv		mci3100_jjnr,		20
.equiv		mci3100_shift,		24
.equiv		mci3100_shiftvec,	28
.equiv		mci3100_gid,		32
.equiv		mci3100_pos,		36
.equiv		mci3100_charge,		40
.equiv		mci3100_facel,		44
.equiv		mci3100_Vc,			48			
.equiv		mci3100_type,		52
.equiv		mci3100_ntype,		56
.equiv		mci3100_nbfp,		60	
.equiv		mci3100_Vnb,		64
.equiv		mci3100_tabscale,	68
.equiv		mci3100_VFtab,		72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3100_ix,			0
.equiv		mci3100_iy,			16
.equiv		mci3100_iz,			32
.equiv		mci3100_iq,			48
.equiv		mci3100_tsc,		64
.equiv		mci3100_qq,			80	
.equiv		mci3100_c6,			96
.equiv		mci3100_c12,		112
.equiv		mci3100_vctot,		128
.equiv		mci3100_vnbtot,		144
.equiv		mci3100_half,		160
.equiv		mci3100_three,		176
.equiv		mci3100_is3,		192
.equiv		mci3100_ii3,		196
.equiv		mci3100_ntia,		200	
.equiv		mci3100_innerjjnr,	204
.equiv		mci3100_innerk,		208
.equiv		mci3100_salign,		212
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 216		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3100_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm5, [ebp + mci3100_tabscale]
	movaps [esp + mci3100_half],  xmm0
	movaps [esp + mci3100_three],  xmm2
	shufps xmm5, xmm5, 0
	movaps [esp + mci3100_tsc], xmm5

	;# assume we have at least one i particle - start directly 	
.mci3100_outer:
	mov   eax, [ebp + mci3100_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3100_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3100_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3100_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci3100_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3100_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3100_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci3100_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + mci3100_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci3100_ntype]
    shl   edx, 1
    mov   [esp + mci3100_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3100_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci3100_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci3100_ix], xmm0
	movaps [esp + mci3100_iy], xmm1
	movaps [esp + mci3100_iz], xmm2

	mov   [esp + mci3100_ii3], ebx
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci3100_vctot], xmm4
	movaps [esp + mci3100_vnbtot], xmm4
	
	mov   eax, [ebp + mci3100_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3100_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3100_pos]
	mov   eax, [ebp + mci3100_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3100_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci3100_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3100_unroll_loop
	jmp   .mci3100_finish_inner
.mci3100_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3100_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci3100_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3100_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci3100_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mulps  xmm3, xmm2
	movd  mm2, ecx
	movd  mm3, edx

	movaps [esp + mci3100_qq], xmm3
	
	mov esi, [ebp + mci3100_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci3100_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3100_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci3100_c6], xmm4
	movaps [esp + mci3100_c12], xmm6
	
	mov esi, [ebp + mci3100_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci3100_ix]
	movaps xmm5, [esp + mci3100_iy]
	movaps xmm6, [esp + mci3100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3100_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci3100_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3100_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul  
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3100_vctot]
	movaps xmm6, xmm4
 	mulps  xmm6, xmm4
	movaps [esp + mci3100_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + mci3100_c6]
	mulps  xmm4, [esp + mci3100_c12]
	movaps xmm7, [esp + mci3100_vnbtot]
	addps  xmm7, xmm4
	subps  xmm7, xmm6
	movaps [esp + mci3100_vnbtot], xmm7


	;# should we do one more iteration? 
	sub dword ptr [esp + mci3100_innerk],  4
	jl    .mci3100_finish_inner
	jmp   .mci3100_unroll_loop
.mci3100_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci3100_innerk],  4
	mov   edx, [esp + mci3100_innerk]
	and   edx, 2
	jnz   .mci3100_dopair
	jmp   .mci3100_checksingle
.mci3100_dopair:	
	mov esi, [ebp + mci3100_charge]
    mov   ecx, [esp + mci3100_innerjjnr]
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci3100_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + mci3100_iq]
	movlhps xmm3, xmm7
	movaps [esp + mci3100_qq], xmm3

	mov esi, [ebp + mci3100_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci3100_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3100_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci3100_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci3100_c6], xmm4
	movaps [esp + mci3100_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci3100_ix]
	movaps xmm5, [esp + mci3100_iy]
	movaps xmm6, [esp + mci3100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3100_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3100_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3100_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul  
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3100_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movaps [esp + mci3100_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + mci3100_c6]
	mulps  xmm4, [esp + mci3100_c12]
	movaps xmm7, [esp + mci3100_vnbtot]
	addps  xmm7, xmm4
	subps  xmm7, xmm6
	movaps [esp + mci3100_vnbtot], xmm7

.mci3100_checksingle:				
	mov   edx, [esp + mci3100_innerk]
	and   edx, 1
	jnz    .mci3100_dosingle
	jmp    .mci3100_updateouterdata
.mci3100_dosingle:
	mov esi, [ebp + mci3100_charge]
	mov edi, [ebp + mci3100_pos]
	mov   ecx, [esp + mci3100_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + mci3100_iq]
	movaps [esp + mci3100_qq], xmm6

	mov esi, [ebp + mci3100_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci3100_nbfp]
	shl ecx, 1
	add ecx, [esp + mci3100_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci3100_c6], xmm4
	movaps [esp + mci3100_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci3100_ix]
	movaps xmm5, [esp + mci3100_iy]
	movaps xmm6, [esp + mci3100_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3100_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3100_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3100_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3100_VFtab]
	movd ebx, mm6
	
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3100_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul  
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + mci3100_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movss [esp + mci3100_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + mci3100_c6]
	mulps  xmm4, [esp + mci3100_c12]
	movss xmm7, [esp + mci3100_vnbtot]
	addps  xmm7, xmm4
	subps  xmm7, xmm6
	movss [esp + mci3100_vnbtot], xmm7

.mci3100_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci3100_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3100_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3100_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3100_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci3100_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3100_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3100_nri]
	dec ecx
	jecxz .mci3100_end
	;# not last, iterate once more!  
	mov [ebp + mci3100_nri], ecx
	jmp .mci3100_outer
.mci3100_end:
	emms
	mov eax, [esp + mci3100_salign]
	add esp, eax
	add esp, 216
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl mcinl3110_sse
.globl _mcinl3110_sse
mcinl3110_sse:	
_mcinl3110_sse:	
.equiv		mci3110_nri,		8
.equiv		mci3110_iinr,		12
.equiv		mci3110_jindex,		16
.equiv		mci3110_jjnr,		20
.equiv		mci3110_shift,		24
.equiv		mci3110_shiftvec,	28
.equiv		mci3110_gid,		32
.equiv		mci3110_pos,		36		
.equiv		mci3110_charge,		40
.equiv		mci3110_facel,		44
.equiv		mci3110_Vc,			48			
.equiv		mci3110_type,		52
.equiv		mci3110_ntype,		56
.equiv		mci3110_nbfp,		60	
.equiv		mci3110_Vnb,		64
.equiv		mci3110_tabscale,	68
.equiv		mci3110_VFtab,		72
.equiv		mci3110_nsatoms,	76			
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3110_ix,			0
.equiv		mci3110_iy,			16
.equiv		mci3110_iz,			32
.equiv		mci3110_iq,			48
.equiv		mci3110_two,		64
.equiv		mci3110_tsc,		80
.equiv		mci3110_qq,			96	
.equiv		mci3110_c6,			112
.equiv		mci3110_c12,		128
.equiv		mci3110_vctot,		144
.equiv		mci3110_vnbtot,		160
.equiv		mci3110_half,		176
.equiv		mci3110_three,		192
.equiv		mci3110_is3,		208
.equiv		mci3110_ii3,		224
.equiv		mci3110_shX,		240
.equiv		mci3110_shY,		244
.equiv		mci3110_shZ,		248
.equiv		mci3110_ntia,		252	
.equiv		mci3110_innerjjnr0,	256
.equiv		mci3110_innerk0,	260
.equiv		mci3110_innerjjnr,	264
.equiv		mci3110_innerk,		268
.equiv		mci3110_salign,		272
.equiv		mci3110_nsvdwc,		276
.equiv		mci3110_nscoul,		280
.equiv		mci3110_nsvdw,		284
.equiv		mci3110_solnr,		288		
	push ebp
	mov ebp,esp	
	push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 292		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3110_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm5, [ebp + mci3110_tabscale]
	movaps [esp + mci3110_half],  xmm0
	movaps [esp + mci3110_two], xmm1
	movaps [esp + mci3110_three], xmm2
	shufps xmm5, xmm5, 0
	movaps [esp + mci3110_tsc], xmm5

	;# assume we have at least one i particle - start directly 	
.mci3110_outer:
	mov   eax, [ebp + mci3110_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3110_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3110_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3110_shiftvec]   ;# eax = base of shiftvec[] 

	movlps xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 8] 
	movlps [esp + mci3110_shX], xmm0
	movss [esp + mci3110_shZ], xmm1

	mov   ecx, [ebp + mci3110_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3110_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + mci3110_nsatoms]
	add dword ptr [ebp + mci3110_nsatoms],  12
	mov   ecx, [eax]	
	mov   edx, [eax + 4]
	mov   eax, [eax + 8]	
	sub   ecx, eax
	sub   eax, edx
	
	mov   [esp + mci3110_nsvdwc], edx
	mov   [esp + mci3110_nscoul], eax
	mov   [esp + mci3110_nsvdw], ecx
		
	;# clear potential 
	xorps xmm4, xmm4
	movaps [esp + mci3110_vctot], xmm4
	movaps [esp + mci3110_vnbtot], xmm4
	mov   [esp + mci3110_solnr],  ebx

	mov   eax, [ebp + mci3110_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3110_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   eax, [ebp + mci3110_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3110_innerjjnr0], eax     ;# pointer to jjnr[nj0] 
	mov   [esp + mci3110_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + mci3110_nsvdwc]
	cmp   ecx,  0
	jnz   .mci3110_mno_vdwc
	jmp   .mci3110_testcoul
.mci3110_mno_vdwc:
	mov   ebx,  [esp + mci3110_solnr]
	inc   dword ptr [esp + mci3110_solnr]

	mov   edx, [ebp + mci3110_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci3110_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + mci3110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci3110_ntype]
    shl   edx, 1
    mov   [esp + mci3110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3110_pos]    ;# eax = base of pos[]  

	movss xmm0, [esp + mci3110_shX]
	movss xmm1, [esp + mci3110_shY]
	movss xmm2, [esp + mci3110_shZ]
	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci3110_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci3110_ix], xmm0
	movaps [esp + mci3110_iy], xmm1
	movaps [esp + mci3110_iz], xmm2

	mov   [esp + mci3110_ii3], ebx
	
	mov   ecx, [esp + mci3110_innerjjnr0]
	mov   [esp + mci3110_innerjjnr], ecx
	mov   edx, [esp + mci3110_innerk0]
    sub   edx,  4
    mov   [esp + mci3110_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3110_unroll_vdwc_loop
	jmp   .mci3110_finish_vdwc_inner
.mci3110_unroll_vdwc_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci3110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3110_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci3110_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mulps  xmm3, xmm2
	movd  mm2, ecx
	movd  mm3, edx

	movaps [esp + mci3110_qq], xmm3
	
	mov esi, [ebp + mci3110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci3110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci3110_c6], xmm4
	movaps [esp + mci3110_c12], xmm6
	
	mov esi, [ebp + mci3110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci3110_ix]
	movaps xmm5, [esp + mci3110_iy]
	movaps xmm6, [esp + mci3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3110_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci3110_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3110_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3110_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul  
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3110_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movaps [esp + mci3110_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + mci3110_c6]
	mulps  xmm4, [esp + mci3110_c12]
	movaps xmm7, [esp + mci3110_vnbtot]
	addps  xmm7, xmm4
	subps  xmm7, xmm6
	movaps [esp + mci3110_vnbtot], xmm7

	;# should we do one more iteration? 
	sub dword ptr [esp + mci3110_innerk],  4
	jl    .mci3110_finish_vdwc_inner
	jmp   .mci3110_unroll_vdwc_loop
.mci3110_finish_vdwc_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci3110_innerk],  4
	mov   edx, [esp + mci3110_innerk]
	and   edx, 2
	jnz   .mci3110_dopair_vdwc
	jmp   .mci3110_checksingle_vdwc
.mci3110_dopair_vdwc:	
	mov esi, [ebp + mci3110_charge]

    mov   ecx, [esp + mci3110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci3110_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + mci3110_iq]
	movlhps xmm3, xmm7
	movaps [esp + mci3110_qq], xmm3

	mov esi, [ebp + mci3110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci3110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci3110_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci3110_c6], xmm4
	movaps [esp + mci3110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci3110_ix]
	movaps xmm5, [esp + mci3110_iy]
	movaps xmm6, [esp + mci3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3110_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3110_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3110_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3110_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul  
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3110_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movaps [esp + mci3110_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + mci3110_c6]
	mulps  xmm4, [esp + mci3110_c12]
	movaps xmm7, [esp + mci3110_vnbtot]
	addps  xmm7, xmm4
	subps  xmm7, xmm6
	movaps [esp + mci3110_vnbtot], xmm7
.mci3110_checksingle_vdwc:				
	mov   edx, [esp + mci3110_innerk]
	and   edx, 1
	jnz    .mci3110_dosingle_vdwc
	jmp    .mci3110_updateouterdata_vdwc
.mci3110_dosingle_vdwc:
	mov esi, [ebp + mci3110_charge]
	mov edi, [ebp + mci3110_pos]
	mov   ecx, [esp + mci3110_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + mci3110_iq]
	movaps [esp + mci3110_qq], xmm6

	mov esi, [ebp + mci3110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci3110_nbfp]
	shl ecx, 1
	add ecx, [esp + mci3110_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci3110_c6], xmm4
	movaps [esp + mci3110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci3110_ix]
	movaps xmm5, [esp + mci3110_iy]
	movaps xmm6, [esp + mci3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3110_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3110_VFtab]
	movd ebx, mm6
						
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3110_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3110_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV 
	;# L-J 
	movaps xmm4, xmm0
	mulps  xmm4, xmm0	;# xmm4=rinvsq 

	;# at this point mm5 contains vcoul  
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + mci3110_vctot]

	movaps xmm6, xmm4
	mulps  xmm6, xmm4

	movss [esp + mci3110_vctot], xmm5 

	mulps  xmm6, xmm4	;# xmm6=rinvsix 
	movaps xmm4, xmm6
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm6, [esp + mci3110_c6]
	mulps  xmm4, [esp + mci3110_c12]
	movss xmm7, [esp + mci3110_vnbtot]
	addps  xmm7, xmm4
	subps  xmm7, xmm6
	movss [esp + mci3110_vnbtot], xmm7
.mci3110_updateouterdata_vdwc:
	;# loop back to mno 
	dec  dword ptr [esp + mci3110_nsvdwc]
	jz  .mci3110_testcoul
	jmp .mci3110_mno_vdwc
.mci3110_testcoul:
	mov  ecx, [esp + mci3110_nscoul]
	cmp  ecx,  0
	jnz  .mci3110_mno_coul
	jmp  .mci3110_testvdw
.mci3110_mno_coul:
	mov   ebx,  [esp + mci3110_solnr]
	inc   dword ptr [esp + mci3110_solnr]

	movss xmm0, [esp + mci3110_shX]
	movss xmm1, [esp + mci3110_shY]
	movss xmm2, [esp + mci3110_shZ]

	mov   edx, [ebp + mci3110_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci3110_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3110_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci3110_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movaps [esp + mci3110_ix], xmm0
	movaps [esp + mci3110_iy], xmm1
	movaps [esp + mci3110_iz], xmm2

	mov   [esp + mci3110_ii3], ebx
	

	mov   ecx, [esp + mci3110_innerjjnr0]
	mov   [esp + mci3110_innerjjnr], ecx
	mov   edx, [esp + mci3110_innerk0]
    sub   edx,  4
    mov   [esp + mci3110_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3110_unroll_coul_loop
	jmp   .mci3110_finish_coul_inner

.mci3110_unroll_coul_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci3110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3110_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci3110_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	mulps  xmm3, xmm2

	movaps [esp + mci3110_qq], xmm3	
	
	mov esi, [ebp + mci3110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci3110_ix]
	movaps xmm5, [esp + mci3110_iy]
	movaps xmm6, [esp + mci3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3110_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci3110_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3110_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3110_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul  
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3110_vctot]
	movaps [esp + mci3110_vctot], xmm5 

	;# should we do one more iteration? 
	sub dword ptr [esp + mci3110_innerk],  4
	jl    .mci3110_finish_coul_inner
	jmp   .mci3110_unroll_coul_loop
.mci3110_finish_coul_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci3110_innerk],  4
	mov   edx, [esp + mci3110_innerk]
	and   edx, 2
	jnz   .mci3110_dopair_coul
	jmp   .mci3110_checksingle_coul
.mci3110_dopair_coul:	
	mov esi, [ebp + mci3110_charge]

    mov   ecx, [esp + mci3110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci3110_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + mci3110_iq]
	movlhps xmm3, xmm7
	movaps [esp + mci3110_qq], xmm3

	mov edi, [ebp + mci3110_pos]	
	
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci3110_ix]
	movaps xmm5, [esp + mci3110_iy]
	movaps xmm6, [esp + mci3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3110_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3110_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3110_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3110_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul  
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3110_vctot]
	movaps [esp + mci3110_vctot], xmm5 

.mci3110_checksingle_coul:				
	mov   edx, [esp + mci3110_innerk]
	and   edx, 1
	jnz    .mci3110_dosingle_coul
	jmp    .mci3110_updateouterdata_coul
.mci3110_dosingle_coul:
	mov esi, [ebp + mci3110_charge]
	mov edi, [ebp + mci3110_pos]
	mov   ecx, [esp + mci3110_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + mci3110_iq]
	movaps [esp + mci3110_qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci3110_ix]
	movaps xmm5, [esp + mci3110_iy]
	movaps xmm6, [esp + mci3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3110_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3110_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3110_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3110_VFtab]
	movd ebx, mm6
	
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3110_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3110_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul  
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + mci3110_vctot]
	movss [esp + mci3110_vctot], xmm5 

.mci3110_updateouterdata_coul:
	;# loop back to mno 
	dec  dword ptr [esp + mci3110_nscoul]
	jz  .mci3110_testvdw
	jmp .mci3110_mno_coul
.mci3110_testvdw:
	mov  ecx, [esp + mci3110_nsvdw]
	cmp  ecx,  0
	jnz  .mci3110_mno_vdw
	jmp  .mci3110_last_mno
.mci3110_mno_vdw:
	mov   ebx,  [esp + mci3110_solnr]
	inc   dword ptr [esp + mci3110_solnr]

    mov   edx, [ebp + mci3110_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci3110_ntype]
    shl   edx, 1
    mov   [esp + mci3110_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3110_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3110_ii3], ebx

	movss xmm0, [esp + mci3110_shX]
	movss xmm1, [esp + mci3110_shY]
	movss xmm2, [esp + mci3110_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci3110_ix], xmm0
	movaps [esp + mci3110_iy], xmm1
	movaps [esp + mci3110_iz], xmm2

	mov   ecx, [esp + mci3110_innerjjnr0]
	mov   [esp + mci3110_innerjjnr], ecx
	mov   edx, [esp + mci3110_innerk0]
    sub   edx,  4
    mov   [esp + mci3110_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3110_unroll_vdw_loop
	jmp   .mci3110_finish_vdw_inner
.mci3110_unroll_vdw_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3110_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci3110_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci3110_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci3110_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3110_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci3110_c6], xmm4
	movaps [esp + mci3110_c12], xmm6
	
	mov esi, [ebp + mci3110_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci3110_ix]
	movaps xmm5, [esp + mci3110_iy]
	movaps xmm6, [esp + mci3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci3110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci3110_c6]
	mulps  xmm2, [esp + mci3110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci3110_vnbtot]
	movaps [esp + mci3110_vnbtot], xmm5

	;# should we do one more iteration? 
	sub dword ptr [esp + mci3110_innerk],  4
	jl    .mci3110_finish_vdw_inner
	jmp   .mci3110_unroll_vdw_loop
.mci3110_finish_vdw_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci3110_innerk],  4
	mov   edx, [esp + mci3110_innerk]
	and   edx, 2
	jnz   .mci3110_dopair_vdw
	jmp   .mci3110_checksingle_vdw
.mci3110_dopair_vdw:	
    mov   ecx, [esp + mci3110_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci3110_innerjjnr],  8	
	xorps xmm7, xmm7

	mov esi, [ebp + mci3110_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci3110_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3110_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci3110_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci3110_c6], xmm4
	movaps [esp + mci3110_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			

	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci3110_ix]
	movaps xmm5, [esp + mci3110_iy]
	movaps xmm6, [esp + mci3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci3110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci3110_c6]
	mulps  xmm2, [esp + mci3110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addps  xmm5, [esp + mci3110_vnbtot]
	movaps [esp + mci3110_vnbtot], xmm5
.mci3110_checksingle_vdw:				
	mov   edx, [esp + mci3110_innerk]
	and   edx, 1
	jnz    .mci3110_dosingle_vdw
	jmp    .mci3110_updateouterdata_vdw
.mci3110_dosingle_vdw:
	mov edi, [ebp + mci3110_pos]
	mov   ecx, [esp + mci3110_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6

	mov esi, [ebp + mci3110_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci3110_nbfp]
	shl ecx, 1
	add ecx, [esp + mci3110_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci3110_c6], xmm4
	movaps [esp + mci3110_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci3110_ix]
	movaps xmm5, [esp + mci3110_iy]
	movaps xmm6, [esp + mci3110_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rcpps xmm5, xmm4
	;# 1/x lookup seed in xmm5 
	movaps xmm0, [esp + mci3110_two]
	mulps xmm4, xmm5
	subps xmm0, xmm4
	mulps xmm0, xmm5	;# xmm0=rinvsq 
	movaps xmm4, xmm0
	
	movaps xmm1, xmm0
	mulps  xmm1, xmm0
	mulps  xmm1, xmm0	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 

	mulps  xmm1, [esp + mci3110_c6]
	mulps  xmm2, [esp + mci3110_c12]
	movaps xmm5, xmm2
	subps  xmm5, xmm1	;# vnb=vnb12-vnb6 
	addss  xmm5, [esp + mci3110_vnbtot]
	movss [esp + mci3110_vnbtot], xmm5

.mci3110_updateouterdata_vdw:
	;# loop back to mno 
	dec dword ptr [esp + mci3110_nsvdw]
	jz  .mci3110_last_mno
	jmp .mci3110_mno_vdw
.mci3110_last_mno:	
	;# get group index for i particle 
	mov   edx, [ebp + mci3110_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3110_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3110_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3110_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci3110_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3110_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3110_nri]
	dec ecx
	jecxz .mci3110_end
	;# not last, iterate once more!  
	mov [ebp + mci3110_nri], ecx
	jmp .mci3110_outer
.mci3110_end:
	emms
	mov eax, [esp + mci3110_salign]
	add esp, eax
	add esp, 292
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret




.globl mcinl3120_sse
.globl _mcinl3120_sse
mcinl3120_sse:	
_mcinl3120_sse:	
.equiv		mci3120_nri,		8
.equiv		mci3120_iinr,		12
.equiv		mci3120_jindex,		16
.equiv		mci3120_jjnr,		20
.equiv		mci3120_shift,		24
.equiv		mci3120_shiftvec,	28
.equiv		mci3120_gid,		32
.equiv		mci3120_pos,		36		
.equiv		mci3120_charge,		40
.equiv		mci3120_facel,		44
.equiv		mci3120_Vc,			48			
.equiv		mci3120_type,		52
.equiv		mci3120_ntype,		56
.equiv		mci3120_nbfp,		60	
.equiv		mci3120_Vnb,		64	
.equiv		mci3120_tabscale,	68	
.equiv		mci3120_VFtab,		72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3120_ixO,		0
.equiv		mci3120_iyO,		16
.equiv		mci3120_izO,		32
.equiv		mci3120_ixH1,		48
.equiv		mci3120_iyH1,		64
.equiv		mci3120_izH1,		80
.equiv		mci3120_ixH2,		96
.equiv		mci3120_iyH2,		112
.equiv		mci3120_izH2,		128
.equiv		mci3120_iqO,		144 
.equiv		mci3120_iqH,		160 
.equiv		mci3120_qqO,		176
.equiv		mci3120_qqH,		192
.equiv		mci3120_rinvO,		208
.equiv		mci3120_rinvH1,		224
.equiv		mci3120_rinvH2,		240		
.equiv		mci3120_rO,			256
.equiv		mci3120_rH1,		272
.equiv		mci3120_rH2,		288
.equiv		mci3120_tsc,		304
.equiv		mci3120_c6,			320
.equiv		mci3120_c12,		336
.equiv		mci3120_vctot,		352
.equiv		mci3120_vnbtot,		368
.equiv		mci3120_half,		384
.equiv		mci3120_three,		400
.equiv		mci3120_is3,		416
.equiv		mci3120_ii3,		420
.equiv		mci3120_ntia,		424	
.equiv		mci3120_innerjjnr,	428
.equiv		mci3120_innerk,		432
.equiv		mci3120_salign,		436		
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 440		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3120_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm5, [ebp + mci3120_tabscale]
	
	movaps [esp + mci3120_half],  xmm0
	movaps [esp + mci3120_three],  xmm2
	shufps xmm5, xmm5, 0
	movaps [esp + mci3120_tsc], xmm5
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3120_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3120_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + mci3120_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + mci3120_iqO], xmm3
	movaps [esp + mci3120_iqH], xmm4
	
	mov   edx, [ebp + mci3120_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + mci3120_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + mci3120_ntia], ecx		
.mci3120_outer:
	mov   eax, [ebp + mci3120_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3120_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3120_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3120_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci3120_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3120_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3120_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3120_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3120_ixO], xmm3
	movaps [esp + mci3120_iyO], xmm4
	movaps [esp + mci3120_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3120_ixH1], xmm0
	movaps [esp + mci3120_iyH1], xmm1
	movaps [esp + mci3120_izH1], xmm2
	movaps [esp + mci3120_ixH2], xmm3
	movaps [esp + mci3120_iyH2], xmm4
	movaps [esp + mci3120_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci3120_vctot], xmm4
	movaps [esp + mci3120_vnbtot], xmm4
	
	mov   eax, [ebp + mci3120_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3120_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3120_pos]
	mov   eax, [ebp + mci3120_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3120_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci3120_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3120_unroll_loop
	jmp   .mci3120_odd_inner
.mci3120_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + mci3120_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3120_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + mci3120_iqO]
	mulps  xmm4, [esp + mci3120_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx

	movaps  [esp + mci3120_qqO], xmm3
	movaps  [esp + mci3120_qqH], xmm4
	
	mov esi, [ebp + mci3120_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci3120_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3120_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci3120_c6], xmm4
	movaps [esp + mci3120_c12], xmm6

	mov esi, [ebp + mci3120_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + mci3120_ixO]
	movaps xmm5, [esp + mci3120_iyO]
	movaps xmm6, [esp + mci3120_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + mci3120_ixH1]
	movaps xmm5, [esp + mci3120_iyH1]
	movaps xmm6, [esp + mci3120_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + mci3120_ixH2]
	movaps xmm4, [esp + mci3120_iyH2]
	movaps xmm5, [esp + mci3120_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2
	
	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - seed to xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci3120_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci3120_half]
	movaps  [esp + mci3120_rinvO], xmm4	;# rinvO in xmm4 
	mulps   xmm7, xmm4
	movaps  [esp + mci3120_rO], xmm7	

	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci3120_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci3120_half]
	movaps  [esp + mci3120_rinvH1], xmm4	;# rinvH1 in xmm4 
	mulps   xmm6, xmm4
	movaps  [esp + mci3120_rH1], xmm6

	;# rsqH2 - seed to xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci3120_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci3120_half]
	movaps  [esp + mci3120_rinvH2], xmm4	;# rinvH2 in xmm4 
	mulps   xmm5, xmm4
	movaps  [esp + mci3120_rH2], xmm5

	;# do O interactions 
	;# rO is still in xmm7 
	mulps   xmm7, [esp + mci3120_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3

	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd mm0, eax   
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + mci3120_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    movaps xmm0, [esp + mci3120_qqO]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV 

	;# do nontable L-J 
	movaps xmm2, [esp + mci3120_rinvO]
	mulps  xmm2, xmm2

    ;# at this point mm5 contains vcoul and 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + mci3120_vctot]
    movaps [esp + mci3120_vctot], xmm5 

	movaps xmm1, xmm2
	mulps  xmm1, xmm1
	mulps  xmm1, xmm2	;# xmm1=rinvsix 
	movaps xmm4, xmm1
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm1, [esp + mci3120_c6]
	mulps  xmm4, [esp + mci3120_c12]
	movaps xmm3, xmm4
	subps  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addps  xmm3, [esp + mci3120_vnbtot]
	movaps [esp + mci3120_vnbtot], xmm3

	;# Done with O interactions - now H1! 
	movaps xmm7, [esp + mci3120_rH1]
	mulps   xmm7, [esp + mci3120_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    movaps xmm0, [esp + mci3120_qqH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addps  xmm5, [esp + mci3120_vctot]
    movaps [esp + mci3120_vctot], xmm5
	
	;# Done with H1, finally we do H2 interactions 
	movaps xmm7, [esp + mci3120_rH2]
	mulps   xmm7, [esp + mci3120_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm0, [esp + mci3120_qqH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addps  xmm5, [esp + mci3120_vctot]
    movaps [esp + mci3120_vctot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3120_innerk],  4
	jl    .mci3120_odd_inner
	jmp   .mci3120_unroll_loop
.mci3120_odd_inner:	
	add dword ptr [esp + mci3120_innerk],  4
	jnz   .mci3120_odd_loop
	jmp   .mci3120_updateouterdata
.mci3120_odd_loop:
	mov   edx, [esp + mci3120_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci3120_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + mci3120_iqO]
	mov esi, [ebp + mci3120_charge] 
	movhps xmm4, [esp + mci3120_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + mci3120_qqO], xmm3	;# use oxygen qq for storage 

	xorps xmm6, xmm6
	mov esi, [ebp + mci3120_type]
	mov ebx, [esi + eax*4]
	mov esi, [ebp + mci3120_nbfp]
	shl ebx, 1	
	add ebx, [esp + mci3120_ntia]
	movlps xmm6, [esi + ebx*4]
	movaps xmm7, xmm6
	shufps xmm6, xmm6, 252  ;# 11111100
	shufps xmm7, xmm7, 253  ;# 11111101
	movaps [esp + mci3120_c6], xmm6
	movaps [esp + mci3120_c12], xmm7

	mov esi, [ebp + mci3120_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0	
	movss xmm3, [esp + mci3120_ixO]
	movss xmm4, [esp + mci3120_iyO]
	movss xmm5, [esp + mci3120_izO]
		
	movlps xmm6, [esp + mci3120_ixH1]
	movlps xmm7, [esp + mci3120_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + mci3120_iyH1]
	movlps xmm7, [esp + mci3120_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + mci3120_izH1]
	movlps xmm7, [esp + mci3120_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3120_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3120_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000	
	
	mulps xmm4, xmm0	;# xmm4=r 
	movaps [esp + mci3120_rinvO], xmm0
	
	mulps xmm4, [esp + mci3120_tsc]
	movhlps xmm7, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm7    ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm7, mm7
    movlhps xmm3, xmm7

	subps   xmm4, xmm3	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
	
    movd mm0, eax   
    movd mm1, ecx
    movd mm2, edx

    mov  esi, [ebp + mci3120_VFtab]
    movd eax, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp      
    movaps xmm0, [esp + mci3120_qqO]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul  
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + mci3120_vctot]
    movaps [esp + mci3120_vctot], xmm5

	;# do nontable L-J 
	movaps xmm2, [esp + mci3120_rinvO]
	mulps  xmm2, xmm2
	movaps xmm1, xmm2
	mulps  xmm1, xmm1
	mulps  xmm1, xmm2	;# xmm1=rinvsix 
	movaps xmm4, xmm1
	mulps  xmm4, xmm4	;# xmm4=rinvtwelve 
	mulps  xmm1, [esp + mci3120_c6]
	mulps  xmm4, [esp + mci3120_c12]
	movaps xmm3, xmm4
	subps  xmm3, xmm1	;# xmm3=vnb12-vnb6 
	addps  xmm3, [esp + mci3120_vnbtot]
	movaps [esp + mci3120_vnbtot], xmm3
	
	dec dword ptr [esp + mci3120_innerk]
	jz    .mci3120_updateouterdata
	jmp   .mci3120_odd_loop
.mci3120_updateouterdata:
	mov   edx, [ebp + mci3120_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci3120_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3120_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci3120_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci3120_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3120_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3120_nri]
	dec ecx
	jecxz .mci3120_end
	;# not last, iterate once more!  
	mov [ebp + mci3120_nri], ecx
	jmp .mci3120_outer
.mci3120_end:
	emms
	mov eax, [esp + mci3120_salign]
	add esp, eax
	add esp, 440
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

	
.globl mcinl3130_sse
.globl _mcinl3130_sse
mcinl3130_sse:	
_mcinl3130_sse:	
.equiv		mci3130_nri,		8
.equiv		mci3130_iinr,		12
.equiv		mci3130_jindex,		16
.equiv		mci3130_jjnr,		20
.equiv		mci3130_shift,		24
.equiv		mci3130_shiftvec,	28
.equiv		mci3130_gid,		32
.equiv		mci3130_pos,		36		
.equiv		mci3130_charge,		40
.equiv		mci3130_facel,		44
.equiv		mci3130_Vc,			48			
.equiv		mci3130_type,		52
.equiv		mci3130_ntype,		56
.equiv		mci3130_nbfp,		60	
.equiv		mci3130_Vnb,		64
.equiv		mci3130_tabscale,	68	
.equiv		mci3130_VFtab,		72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3130_ixO,		0
.equiv		mci3130_iyO,		16
.equiv		mci3130_izO,		32
.equiv		mci3130_ixH1,		48
.equiv		mci3130_iyH1,		64
.equiv		mci3130_izH1,		80
.equiv		mci3130_ixH2,		96
.equiv		mci3130_iyH2,		112
.equiv		mci3130_izH2,		128
.equiv		mci3130_jxO,		144
.equiv		mci3130_jyO,		160
.equiv		mci3130_jzO,		176
.equiv		mci3130_jxH1,		192
.equiv		mci3130_jyH1,		208
.equiv		mci3130_jzH1,		224 
.equiv		mci3130_jxH2,		240
.equiv		mci3130_jyH2,		256
.equiv		mci3130_jzH2,		272
.equiv		mci3130_qqOO,		288
.equiv		mci3130_qqOH,		304
.equiv		mci3130_qqHH,		320
.equiv		mci3130_tsc,		336
.equiv		mci3130_c6,			352
.equiv		mci3130_c12,		368		 
.equiv		mci3130_vctot,		384
.equiv		mci3130_vnbtot,		400
.equiv		mci3130_half,		416
.equiv		mci3130_three,		432
.equiv		mci3130_rsqOO,		448
.equiv		mci3130_rsqOH1,		464
.equiv		mci3130_rsqOH2,		480
.equiv		mci3130_rsqH1O,		496
.equiv		mci3130_rsqH1H1,	512
.equiv		mci3130_rsqH1H2,	528
.equiv		mci3130_rsqH2O,		544
.equiv		mci3130_rsqH2H1,	560
.equiv		mci3130_rsqH2H2,	576
.equiv		mci3130_rinvOO,		592
.equiv		mci3130_rinvOH1,	608
.equiv		mci3130_rinvOH2,	624
.equiv		mci3130_rinvH1O,	640
.equiv		mci3130_rinvH1H1,	656
.equiv		mci3130_rinvH1H2,	672
.equiv		mci3130_rinvH2O,	688
.equiv		mci3130_rinvH2H1,	704
.equiv		mci3130_rinvH2H2,	720	
.equiv		mci3130_is3,		736
.equiv		mci3130_ii3,		740
.equiv		mci3130_innerjjnr,	744
.equiv		mci3130_innerk,		748
.equiv		mci3130_salign,		752
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 756		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3130_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm5, [ebp + mci3130_tabscale]
	movaps [esp + mci3130_half],  xmm0
	movaps [esp + mci3130_three], xmm2
	shufps xmm5, xmm5, 0
	movaps [esp + mci3130_tsc],  xmm5

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3130_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3130_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + mci3130_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3130_qqOO], xmm3
	movaps [esp + mci3130_qqOH], xmm4
	movaps [esp + mci3130_qqHH], xmm5
		
	xorps xmm0, xmm0
	mov   edx, [ebp + mci3130_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + mci3130_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + mci3130_nbfp]
	movlps xmm0, [eax + edx*4] 
	movaps xmm1, xmm0
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 85  ;# 01010101
	movaps [esp + mci3130_c6], xmm0
	movaps [esp + mci3130_c12], xmm1

.mci3130_outer:
	mov   eax, [ebp + mci3130_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3130_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3130_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3130_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci3130_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3130_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3130_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3130_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3130_ixO], xmm3
	movaps [esp + mci3130_iyO], xmm4
	movaps [esp + mci3130_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3130_ixH1], xmm0
	movaps [esp + mci3130_iyH1], xmm1
	movaps [esp + mci3130_izH1], xmm2
	movaps [esp + mci3130_ixH2], xmm3
	movaps [esp + mci3130_iyH2], xmm4
	movaps [esp + mci3130_izH2], xmm5

	;# clear vctot 
	xorps xmm4, xmm4
	movaps [esp + mci3130_vctot], xmm4
	movaps [esp + mci3130_vnbtot], xmm4
	
	mov   eax, [ebp + mci3130_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3130_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3130_pos]
	mov   eax, [ebp + mci3130_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3130_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci3130_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3130_unroll_loop
	jmp   .mci3130_single_check
.mci3130_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3130_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + mci3130_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3130_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d 
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd 
	movaps [esp + mci3130_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + mci3130_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + mci3130_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + mci3130_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + mci3130_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + mci3130_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + mci3130_jzO],  xmm0
	movaps [esp + mci3130_jzH1],  xmm1
	movaps [esp + mci3130_jzH2],  xmm2

	movaps xmm0, [esp + mci3130_ixO]
	movaps xmm1, [esp + mci3130_iyO]
	movaps xmm2, [esp + mci3130_izO]
	movaps xmm3, [esp + mci3130_ixO]
	movaps xmm4, [esp + mci3130_iyO]
	movaps xmm5, [esp + mci3130_izO]
	subps  xmm0, [esp + mci3130_jxO]
	subps  xmm1, [esp + mci3130_jyO]
	subps  xmm2, [esp + mci3130_jzO]
	subps  xmm3, [esp + mci3130_jxH1]
	subps  xmm4, [esp + mci3130_jyH1]
	subps  xmm5, [esp + mci3130_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci3130_rsqOO], xmm0
	movaps [esp + mci3130_rsqOH1], xmm3

	movaps xmm0, [esp + mci3130_ixO]
	movaps xmm1, [esp + mci3130_iyO]
	movaps xmm2, [esp + mci3130_izO]
	movaps xmm3, [esp + mci3130_ixH1]
	movaps xmm4, [esp + mci3130_iyH1]
	movaps xmm5, [esp + mci3130_izH1]
	subps  xmm0, [esp + mci3130_jxH2]
	subps  xmm1, [esp + mci3130_jyH2]
	subps  xmm2, [esp + mci3130_jzH2]
	subps  xmm3, [esp + mci3130_jxO]
	subps  xmm4, [esp + mci3130_jyO]
	subps  xmm5, [esp + mci3130_jzO]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci3130_rsqOH2], xmm0
	movaps [esp + mci3130_rsqH1O], xmm3

	movaps xmm0, [esp + mci3130_ixH1]
	movaps xmm1, [esp + mci3130_iyH1]
	movaps xmm2, [esp + mci3130_izH1]
	movaps xmm3, [esp + mci3130_ixH1]
	movaps xmm4, [esp + mci3130_iyH1]
	movaps xmm5, [esp + mci3130_izH1]
	subps  xmm0, [esp + mci3130_jxH1]
	subps  xmm1, [esp + mci3130_jyH1]
	subps  xmm2, [esp + mci3130_jzH1]
	subps  xmm3, [esp + mci3130_jxH2]
	subps  xmm4, [esp + mci3130_jyH2]
	subps  xmm5, [esp + mci3130_jzH2]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci3130_rsqH1H1], xmm0
	movaps [esp + mci3130_rsqH1H2], xmm3

	movaps xmm0, [esp + mci3130_ixH2]
	movaps xmm1, [esp + mci3130_iyH2]
	movaps xmm2, [esp + mci3130_izH2]
	movaps xmm3, [esp + mci3130_ixH2]
	movaps xmm4, [esp + mci3130_iyH2]
	movaps xmm5, [esp + mci3130_izH2]
	subps  xmm0, [esp + mci3130_jxO]
	subps  xmm1, [esp + mci3130_jyO]
	subps  xmm2, [esp + mci3130_jzO]
	subps  xmm3, [esp + mci3130_jxH1]
	subps  xmm4, [esp + mci3130_jyH1]
	subps  xmm5, [esp + mci3130_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + mci3130_rsqH2O], xmm0
	movaps [esp + mci3130_rsqH2H1], xmm4

	movaps xmm0, [esp + mci3130_ixH2]
	movaps xmm1, [esp + mci3130_iyH2]
	movaps xmm2, [esp + mci3130_izH2]
	subps  xmm0, [esp + mci3130_jxH2]
	subps  xmm1, [esp + mci3130_jyH2]
	subps  xmm2, [esp + mci3130_jzH2]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + mci3130_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3130_half] ;# rinvH2H2 
	mulps   xmm7, [esp + mci3130_half] ;# rinvH2H1 
	movaps  [esp + mci3130_rinvH2H2], xmm3
	movaps  [esp + mci3130_rinvH2H1], xmm7
		
	rsqrtps xmm1, [esp + mci3130_rsqOO]
	rsqrtps xmm5, [esp + mci3130_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci3130_rsqOO]
	mulps   xmm5, [esp + mci3130_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3130_half] 
	mulps   xmm7, [esp + mci3130_half]
	movaps  [esp + mci3130_rinvOO], xmm3
	movaps  [esp + mci3130_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + mci3130_rsqOH2]
	rsqrtps xmm5, [esp + mci3130_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci3130_rsqOH2]
	mulps   xmm5, [esp + mci3130_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3130_half] 
	mulps   xmm7, [esp + mci3130_half]
	movaps  [esp + mci3130_rinvOH2], xmm3
	movaps  [esp + mci3130_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + mci3130_rsqH1H1]
	rsqrtps xmm5, [esp + mci3130_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci3130_rsqH1H1]
	mulps   xmm5, [esp + mci3130_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3130_half] 
	mulps   xmm7, [esp + mci3130_half]
	movaps  [esp + mci3130_rinvH1H1], xmm3
	movaps  [esp + mci3130_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + mci3130_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci3130_three]
	mulps   xmm1, [esp + mci3130_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + mci3130_half] 
	movaps  [esp + mci3130_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + mci3130_rinvOO]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3130_rsqOO] ;# xmm1=r 
	mulps  xmm1, [esp + mci3130_tsc]
		
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2
	
    movd mm0, eax
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + mci3130_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3130_qqOO]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5
	
	;# start doing lj 
	movaps xmm2, xmm0
	mulps  xmm2, xmm2
	movaps xmm1, xmm2
	mulps  xmm1, xmm2
	mulps  xmm1, xmm2	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulps  xmm1, [esp + mci3130_c6]
	mulps  xmm2, [esp + mci3130_c12]
	movaps xmm4, xmm2
	subps  xmm4, xmm1
	addps  xmm4, [esp + mci3130_vnbtot]
	movaps [esp + mci3130_vnbtot], xmm4

	;# O-H1 interaction 
	movaps xmm0, [esp + mci3130_rinvOH1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3130_rsqOH1] ;# xmm1=r 
	mulps  xmm1, [esp + mci3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2
	
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3130_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5
	
	;# O-H2 interaction  
	movaps xmm0, [esp + mci3130_rinvOH2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3130_rsqOH2] ;# xmm1=r 
	mulps  xmm1, [esp + mci3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3130_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5

	;# H1-O interaction 
	movaps xmm0, [esp + mci3130_rinvH1O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3130_rsqH1O] ;# xmm1=r 
	mulps  xmm1, [esp + mci3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3130_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5

	;# H1-H1 interaction 
	movaps xmm0, [esp + mci3130_rinvH1H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3130_rsqH1H1] ;# xmm1=r 
	mulps  xmm1, [esp + mci3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3130_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5

	;# H1-H2 interaction 
	movaps xmm0, [esp + mci3130_rinvH1H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3130_rsqH1H2] ;# xmm1=r 
	mulps  xmm1, [esp + mci3130_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3130_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5

	;# H2-O interaction 
	movaps xmm0, [esp + mci3130_rinvH2O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3130_rsqH2O] ;# xmm1=r 
	mulps  xmm1, [esp + mci3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3130_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5

	;# H2-H1 interaction 
	movaps xmm0, [esp + mci3130_rinvH2H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3130_rsqH2H1] ;# xmm1=r 
	mulps  xmm1, [esp + mci3130_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3130_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5
	
	;# H2-H2 interaction 
	movaps xmm0, [esp + mci3130_rinvH2H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3130_rsqH2H2] ;# xmm1=r 
	mulps  xmm1, [esp + mci3130_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 

	pslld   mm6, 2
	pslld   mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3130_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul  

    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5	
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3130_innerk],  4
	jl    .mci3130_single_check
	jmp   .mci3130_unroll_loop
.mci3130_single_check:
	add dword ptr [esp + mci3130_innerk],  4
	jnz   .mci3130_single_loop
	jmp   .mci3130_updateouterdata
.mci3130_single_loop:
	mov   edx, [esp + mci3130_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci3130_innerjjnr],  4	

	mov esi, [ebp + mci3130_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + mci3130_ixO]     
	movaps  xmm1, [esp + mci3130_iyO]
	movaps  xmm2, [esp + mci3130_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + mci3130_jxO], xmm3
	movaps [esp + mci3130_jyO], xmm4
	movaps [esp + mci3130_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	movaps  xmm2, xmm1	
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci3130_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + mci3130_half] ;# rinv iO - j water 

	movaps  xmm1, xmm3
	mulps   xmm1, xmm0	;# xmm1=r 
	movaps  xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + mci3130_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2
	
    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

	mov esi, [ebp + mci3130_VFtab]
	
    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + mci3130_qqOO]
	movhps  xmm3, [esp + mci3130_qqOH]
		
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point xmm5 contains vcoul 
	
    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5
	
	;# start doing lj 
	xorps  xmm2, xmm2
	movss  xmm2, xmm0
	mulss  xmm2, xmm2
	movaps xmm1, xmm2
	mulss  xmm1, xmm2
	mulss  xmm1, xmm2	;# xmm1=rinvsix 
	movaps xmm2, xmm1
	mulss  xmm2, xmm2	;# xmm2=rinvtwelve 
	mulss  xmm1, [esp + mci3130_c6]
	mulss  xmm2, [esp + mci3130_c12]
	movaps xmm4, xmm2
	subss  xmm4, xmm1
	addps  xmm4, [esp + mci3130_vnbtot]
	movaps [esp + mci3130_vnbtot], xmm4
	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + mci3130_ixH1]
	movaps  xmm1, [esp + mci3130_iyH1]
	movaps  xmm2, [esp + mci3130_izH1]	
	movaps  xmm3, [esp + mci3130_ixH2] 
	movaps  xmm4, [esp + mci3130_iyH2] 
	movaps  xmm5, [esp + mci3130_izH2] 
	subps   xmm0, [esp + mci3130_jxO]
	subps   xmm1, [esp + mci3130_jyO]
	subps   xmm2, [esp + mci3130_jzO]
	subps   xmm3, [esp + mci3130_jxO]
	subps   xmm4, [esp + mci3130_jyO]
	subps   xmm5, [esp + mci3130_jzO]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 

	;# start with H1, save H2 data 
	movaps [esp + mci3130_rsqH2O], xmm4
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3130_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3130_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + mci3130_half] ;# rinv H2 - j water  

	;# start with H1, save H2 data 
	movaps [esp + mci3130_rinvH2O], xmm7

	movaps xmm1, xmm3
	mulps  xmm1, xmm0	;# xmm1=r 
	movaps xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + mci3130_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2

    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + mci3130_qqOH]
	movhps  xmm3, [esp + mci3130_qqHH]
		
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point xmm5 contains vcoul 
    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5	

	;# do table for H2 - j water interaction 
	movaps xmm0, [esp + mci3130_rinvH2O]
	movaps xmm1, [esp + mci3130_rsqH2O]
	mulps  xmm1, xmm0	;# xmm0=rinv, xmm1=r 
	mulps  xmm1, [esp + mci3130_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
	pslld   mm6, 2
	pslld   mm7, 2

    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + mci3130_qqOH]
	movhps  xmm3, [esp + mci3130_qqHH]
		
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point xmm5 contains vcoul 
    addps  xmm5, [esp + mci3130_vctot]
    movaps [esp + mci3130_vctot], xmm5	

	dec dword ptr [esp + mci3130_innerk]
	jz    .mci3130_updateouterdata
	jmp   .mci3130_single_loop
.mci3130_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci3130_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3130_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3130_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3130_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci3130_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3130_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3130_nri]
	dec ecx
	jecxz .mci3130_end
	;# not last, iterate once more!  
	mov [ebp + mci3130_nri], ecx
	jmp .mci3130_outer
.mci3130_end:
	emms
	mov eax, [esp + mci3130_salign]
	add esp, eax
	add esp, 756
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

	


.globl mcinl3300_sse
.globl _mcinl3300_sse
mcinl3300_sse:	
_mcinl3300_sse:	
.equiv		mci3300_nri,		8
.equiv		mci3300_iinr,		12
.equiv		mci3300_jindex,		16
.equiv		mci3300_jjnr,		20
.equiv		mci3300_shift,		24
.equiv		mci3300_shiftvec,	28
.equiv		mci3300_gid,		32
.equiv		mci3300_pos,		36		
.equiv		mci3300_charge,		40
.equiv		mci3300_facel,		44
.equiv		mci3300_Vc,			48			
.equiv		mci3300_type,		52
.equiv		mci3300_ntype,		56
.equiv		mci3300_nbfp,		60	
.equiv		mci3300_Vnb,		64
.equiv		mci3300_tabscale,	68
.equiv		mci3300_VFtab,		72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3300_ix,			0
.equiv		mci3300_iy,			16
.equiv		mci3300_iz,			32
.equiv		mci3300_iq,			48
.equiv		mci3300_tsc,		64
.equiv		mci3300_qq,			80	
.equiv		mci3300_c6,			96
.equiv		mci3300_c12,		112
.equiv		mci3300_vctot,		128
.equiv		mci3300_vnbtot,		144
.equiv		mci3300_half,		160
.equiv		mci3300_three,		176
.equiv		mci3300_is3,		192
.equiv		mci3300_ii3,		196
.equiv		mci3300_ntia,		200	
.equiv		mci3300_innerjjnr,	204
.equiv		mci3300_innerk,		208
.equiv		mci3300_salign,		212
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 216		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3300_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + mci3300_tabscale]
	movaps [esp + mci3300_half],  xmm0
	movaps [esp + mci3300_three],  xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + mci3300_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.mci3300_outer:
	mov   eax, [ebp + mci3300_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3300_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3300_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3300_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci3300_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3300_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3300_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci3300_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + mci3300_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci3300_ntype]
    shl   edx, 1
    mov   [esp + mci3300_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3300_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci3300_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci3300_ix], xmm0
	movaps [esp + mci3300_iy], xmm1
	movaps [esp + mci3300_iz], xmm2

	mov   [esp + mci3300_ii3], ebx
	
	;# clear vctot 
	xorps xmm4, xmm4
	movaps [esp + mci3300_vctot], xmm4
	movaps [esp + mci3300_vnbtot], xmm4
	
	mov   eax, [ebp + mci3300_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3300_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3300_pos]	
	mov   eax, [ebp + mci3300_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3300_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci3300_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3300_unroll_loop
	jmp   .mci3300_finish_inner
.mci3300_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3300_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci3300_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3300_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci3300_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mulps  xmm3, xmm2
	movd  mm2, ecx
	movd  mm3, edx

	movaps [esp + mci3300_qq], xmm3
	
	mov esi, [ebp + mci3300_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci3300_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3300_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci3300_c6], xmm4
	movaps [esp + mci3300_c12], xmm6
	
	mov esi, [ebp + mci3300_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci3300_ix]
	movaps xmm5, [esp + mci3300_iy]
	movaps xmm6, [esp + mci3300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3300_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci3300_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]
		
	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3300_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3300_vctot]
	movaps [esp + mci3300_vctot], xmm5 

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci3300_c6]
	mulps  xmm5, xmm4	 ;# vnb6 
	;# put scalar force on stack 
	addps  xmm5, [esp + mci3300_vnbtot]
	movaps [esp + mci3300_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 32]
	movlps xmm7, [esi + ecx*4 + 32]
	movhps xmm5, [esi + ebx*4 + 32]
	movhps xmm7, [esi + edx*4 + 32] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 40]
	movlps xmm3, [esi + ecx*4 + 40]
	movhps xmm7, [esi + ebx*4 + 40]
	movhps xmm3, [esi + edx*4 + 40] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci3300_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm5, [esp + mci3300_vnbtot]
	movaps [esp + mci3300_vnbtot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3300_innerk],  4
	jl    .mci3300_finish_inner
	jmp   .mci3300_unroll_loop
.mci3300_finish_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci3300_innerk],  4
	mov   edx, [esp + mci3300_innerk]
	and   edx, 2
	jnz   .mci3300_dopair
	jmp   .mci3300_checksingle
.mci3300_dopair:	
	mov esi, [ebp + mci3300_charge]

    mov   ecx, [esp + mci3300_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci3300_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + mci3300_iq]
	movlhps xmm3, xmm7
	movaps [esp + mci3300_qq], xmm3

	mov esi, [ebp + mci3300_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci3300_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3300_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci3300_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci3300_c6], xmm4
	movaps [esp + mci3300_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			

	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci3300_ix]
	movaps xmm5, [esp + mci3300_iy]
	movaps xmm6, [esp + mci3300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3300_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3300_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6
	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3300_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV 
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3300_vctot]
	movaps [esp + mci3300_vctot], xmm5 

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci3300_c6]
	mulps  xmm5, xmm4	 ;# vnb6 
	;# put scalar force on stack 
	addps  xmm5, [esp + mci3300_vnbtot]
	movaps [esp + mci3300_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 32]
	movhps xmm5, [esi + edx*4 + 32] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 40]
	movhps xmm7, [esi + edx*4 + 40] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci3300_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm5, [esp + mci3300_vnbtot]
	movaps [esp + mci3300_vnbtot], xmm5
	
.mci3300_checksingle:				
	mov   edx, [esp + mci3300_innerk]
	and   edx, 1
	jnz    .mci3300_dosingle
	jmp    .mci3300_updateouterdata
.mci3300_dosingle:
	mov esi, [ebp + mci3300_charge]
	mov edi, [ebp + mci3300_pos]
	mov   ecx, [esp + mci3300_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + mci3300_iq]
	movaps [esp + mci3300_qq], xmm6

	mov esi, [ebp + mci3300_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci3300_nbfp]
	shl ecx, 1
	add ecx, [esp + mci3300_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci3300_c6], xmm4
	movaps [esp + mci3300_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci3300_ix]
	movaps xmm5, [esp + mci3300_iy]
	movaps xmm6, [esp + mci3300_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3300_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3300_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3300_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3300_VFtab]
	movd ebx, mm6
	
	lea  ebx, [ebx + ebx*2]
						
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	movaps xmm3, [esp + mci3300_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + mci3300_vctot]
	movss [esp + mci3300_vctot], xmm5 

	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci3300_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack  
	addss  xmm5, [esp + mci3300_vnbtot]
	movss [esp + mci3300_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 32]
	movlps xmm6, [esi + ebx*4 + 40]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci3300_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	addss  xmm5, [esp + mci3300_vnbtot]
	movss [esp + mci3300_vnbtot], xmm5
	
.mci3300_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci3300_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3300_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3300_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3300_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci3300_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3300_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3300_nri]
	dec ecx
	jecxz .mci3300_end
	;# not last, iterate once more!  
	mov [ebp + mci3300_nri], ecx
	jmp .mci3300_outer
.mci3300_end:
	emms
	mov eax, [esp + mci3300_salign]
	add esp, eax
	add esp, 216
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret





.globl mcinl3310_sse
.globl _mcinl3310_sse
mcinl3310_sse:	
_mcinl3310_sse:	
.equiv		mci3310_nri,		8
.equiv		mci3310_iinr,		12
.equiv		mci3310_jindex,		16
.equiv		mci3310_jjnr,		20
.equiv		mci3310_shift,		24
.equiv		mci3310_shiftvec,	28
.equiv		mci3310_gid,		32
.equiv		mci3310_pos,		36
.equiv		mci3310_charge,		40
.equiv		mci3310_facel,		44
.equiv		mci3310_Vc,			48			
.equiv		mci3310_type,		52
.equiv		mci3310_ntype,		56
.equiv		mci3310_nbfp,		60	
.equiv		mci3310_Vnb,		64
.equiv		mci3310_tabscale,	68
.equiv		mci3310_VFtab,		72
.equiv		mci3310_nsatoms,	76
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3310_ix,			0
.equiv		mci3310_iy,			16
.equiv		mci3310_iz,			32
.equiv		mci3310_iq,			48
.equiv		mci3310_two,		64
.equiv		mci3310_tsc,		80
.equiv		mci3310_qq,			96	
.equiv		mci3310_c6,			112
.equiv		mci3310_c12,		128
.equiv		mci3310_vctot,		144
.equiv		mci3310_vnbtot,		160
.equiv		mci3310_half,		176
.equiv		mci3310_three,		192
.equiv		mci3310_is3,		208
.equiv		mci3310_ii3,		212
.equiv		mci3310_shX,		216
.equiv		mci3310_shY,		220
.equiv		mci3310_shZ,		224
.equiv		mci3310_ntia,		228	
.equiv		mci3310_innerjjnr0,	232
.equiv		mci3310_innerk0,	236	
.equiv		mci3310_innerjjnr,	240
.equiv		mci3310_innerk,		244
.equiv		mci3310_salign,		248
.equiv		mci3310_nsvdwc,		252
.equiv		mci3310_nscoul,		256
.equiv		mci3310_nsvdw,		260
.equiv		mci3310_solnr,		264		
	push ebp
	mov ebp,esp	
	push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 268		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3310_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm1, [sse_two]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + mci3310_tabscale]
	movaps [esp + mci3310_half],  xmm0
	movaps [esp + mci3310_two], xmm1
	movaps [esp + mci3310_three], xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + mci3310_tsc], xmm3

	;# assume we have at least one i particle - start directly 	
.mci3310_outer:
	mov   eax, [ebp + mci3310_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3310_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3310_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3310_shiftvec]   ;# eax = base of shiftvec[] 

	movlps xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 8] 
	movlps [esp + mci3310_shX], xmm0
	movss [esp + mci3310_shZ], xmm1

	mov   ecx, [ebp + mci3310_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3310_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   eax, [ebp + mci3310_nsatoms]
	add dword ptr [ebp + mci3310_nsatoms],  12
	mov   ecx, [eax]	
	mov   edx, [eax + 4]
	mov   eax, [eax + 8]	
	sub   ecx, eax
	sub   eax, edx
	
	mov   [esp + mci3310_nsvdwc], edx
	mov   [esp + mci3310_nscoul], eax
	mov   [esp + mci3310_nsvdw], ecx
		
	;# clear potential 
	xorps xmm4, xmm4
	movaps [esp + mci3310_vctot], xmm4
	movaps [esp + mci3310_vnbtot], xmm4
	mov   [esp + mci3310_solnr],  ebx

	mov   eax, [ebp + mci3310_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3310_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   eax, [ebp + mci3310_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3310_innerjjnr0], eax     ;# pointer to jjnr[nj0] 
	mov   [esp + mci3310_innerk0], edx    ;# number of innerloop atoms 

	mov   ecx, [esp + mci3310_nsvdwc]
	cmp   ecx,  0
	jnz   .mci3310_mno_vdwc
	jmp   .mci3310_testcoul
.mci3310_mno_vdwc:
	mov   ebx,  [esp + mci3310_solnr]
	inc   dword ptr [esp + mci3310_solnr]

	mov   edx, [ebp + mci3310_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci3310_facel]
	shufps xmm3, xmm3, 0

    mov   edx, [ebp + mci3310_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci3310_ntype]
    shl   edx, 1
    mov   [esp + mci3310_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3310_pos]    ;# eax = base of pos[]  

	movss xmm0, [esp + mci3310_shX]
	movss xmm1, [esp + mci3310_shY]
	movss xmm2, [esp + mci3310_shZ]
	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]
	;# clear i forces 
	movaps [esp + mci3310_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci3310_ix], xmm0
	movaps [esp + mci3310_iy], xmm1
	movaps [esp + mci3310_iz], xmm2

	mov   [esp + mci3310_ii3], ebx
	
	mov   ecx, [esp + mci3310_innerjjnr0]
	mov   [esp + mci3310_innerjjnr], ecx
	mov   edx, [esp + mci3310_innerk0]
    sub   edx,  4
    mov   [esp + mci3310_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3310_unroll_vdwc_loop
	jmp   .mci3310_finish_vdwc_inner
.mci3310_unroll_vdwc_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3310_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci3310_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3310_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci3310_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	mulps  xmm3, xmm2
	movd  mm2, ecx
	movd  mm3, edx

	movaps [esp + mci3310_qq], xmm3
	
	mov esi, [ebp + mci3310_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci3310_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3310_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci3310_c6], xmm4
	movaps [esp + mci3310_c12], xmm6
	
	mov esi, [ebp + mci3310_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci3310_ix]
	movaps xmm5, [esp + mci3310_iy]
	movaps xmm6, [esp + mci3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3310_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci3310_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]
		
	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3310_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3310_vctot]
	movaps [esp + mci3310_vctot], xmm5 

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci3310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 
	;# put scalar force on stack  
	addps  xmm5, [esp + mci3310_vnbtot]
	movaps [esp + mci3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 32]
	movlps xmm7, [esi + ecx*4 + 32]
	movhps xmm5, [esi + ebx*4 + 32]
	movhps xmm7, [esi + edx*4 + 32] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 40]
	movlps xmm3, [esi + ecx*4 + 40]
	movhps xmm7, [esi + ebx*4 + 40]
	movhps xmm3, [esi + edx*4 + 40] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci3310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm5, [esp + mci3310_vnbtot]
	movaps [esp + mci3310_vnbtot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3310_innerk],  4
	jl    .mci3310_finish_vdwc_inner
	jmp   .mci3310_unroll_vdwc_loop
.mci3310_finish_vdwc_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci3310_innerk],  4
	mov   edx, [esp + mci3310_innerk]
	and   edx, 2
	jnz   .mci3310_dopair_vdwc
	jmp   .mci3310_checksingle_vdwc
.mci3310_dopair_vdwc:	
	mov esi, [ebp + mci3310_charge]

    mov   ecx, [esp + mci3310_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci3310_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + mci3310_iq]
	movlhps xmm3, xmm7
	movaps [esp + mci3310_qq], xmm3

	mov esi, [ebp + mci3310_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci3310_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3310_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci3310_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci3310_c6], xmm4
	movaps [esp + mci3310_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci3310_ix]
	movaps xmm5, [esp + mci3310_iy]
	movaps xmm6, [esp + mci3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3310_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6
	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3310_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3310_vctot]
	movaps [esp + mci3310_vctot], xmm5 

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci3310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 
	;# put scalar force on stack Update vnbtot directly 
	addps  xmm5, [esp + mci3310_vnbtot]
	movaps [esp + mci3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 32]
	movhps xmm5, [esi + edx*4 + 32] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 40]
	movhps xmm7, [esi + edx*4 + 40] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci3310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	addps  xmm5, [esp + mci3310_vnbtot]
	movaps [esp + mci3310_vnbtot], xmm5

.mci3310_checksingle_vdwc:				
	mov   edx, [esp + mci3310_innerk]
	and   edx, 1
	jnz    .mci3310_dosingle_vdwc
	jmp    .mci3310_updateouterdata_vdwc
.mci3310_dosingle_vdwc:
	mov esi, [ebp + mci3310_charge]
	mov edi, [ebp + mci3310_pos]
	mov   ecx, [esp + mci3310_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + mci3310_iq]
	movaps [esp + mci3310_qq], xmm6

	mov esi, [ebp + mci3310_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci3310_nbfp]
	shl ecx, 1
	add ecx, [esp + mci3310_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci3310_c6], xmm4
	movaps [esp + mci3310_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci3310_ix]
	movaps xmm5, [esp + mci3310_iy]
	movaps xmm6, [esp + mci3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3310_VFtab]
	movd ebx, mm6
	
	lea  ebx, [ebx + ebx*2]
						
	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3310_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV 
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + mci3310_vctot]
	movss [esp + mci3310_vctot], xmm5 

	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci3310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack 
	addss  xmm5, [esp + mci3310_vnbtot]
	movss [esp + mci3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 32]
	movlps xmm6, [esi + ebx*4 + 40]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci3310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	addss  xmm5, [esp + mci3310_vnbtot]
	movss [esp + mci3310_vnbtot], xmm5
	
.mci3310_updateouterdata_vdwc:

	;# loop back to mno 
	dec  dword ptr [esp + mci3310_nsvdwc]
	jz  .mci3310_testcoul
	jmp .mci3310_mno_vdwc
.mci3310_testcoul:
	mov  ecx, [esp + mci3310_nscoul]
	cmp  ecx,  0
	jnz  .mci3310_mno_coul
	jmp  .mci3310_testvdw
.mci3310_mno_coul:
	mov   ebx,  [esp + mci3310_solnr]
	inc   dword ptr [esp + mci3310_solnr]

	movss xmm0, [esp + mci3310_shX]
	movss xmm1, [esp + mci3310_shY]
	movss xmm2, [esp + mci3310_shZ]

	mov   edx, [ebp + mci3310_charge]
	movss xmm3, [edx + ebx*4]	
	mulss xmm3, [ebp + mci3310_facel]
	shufps xmm3, xmm3, 0
	
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3310_pos]    ;# eax = base of pos[]  

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	movaps [esp + mci3310_iq], xmm3
	
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci3310_ix], xmm0
	movaps [esp + mci3310_iy], xmm1
	movaps [esp + mci3310_iz], xmm2

	mov   [esp + mci3310_ii3], ebx

	mov   ecx, [esp + mci3310_innerjjnr0]
	mov   [esp + mci3310_innerjjnr], ecx
	mov   edx, [esp + mci3310_innerk0]
    sub   edx,  4
    mov   [esp + mci3310_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3310_unroll_coul_loop
	jmp   .mci3310_finish_coul_inner

.mci3310_unroll_coul_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3310_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci3310_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3310_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	movaps xmm2, [esp + mci3310_iq]
	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	mulps  xmm3, xmm2

	movaps [esp + mci3310_qq], xmm3	
	
	mov esi, [ebp + mci3310_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci3310_ix]
	movaps xmm5, [esp + mci3310_iy]
	movaps xmm6, [esp + mci3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3310_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci3310_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]
		
	movlps xmm5, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm5, [esi + ebx*4]
	movhps xmm7, [esi + edx*4] ;# got half coulomb table 

	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# coulomb table ready, in xmm4-xmm7  	
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3310_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3310_vctot]
	movaps [esp + mci3310_vctot], xmm5 
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3310_innerk],  4
	jl    .mci3310_finish_coul_inner
	jmp   .mci3310_unroll_coul_loop
.mci3310_finish_coul_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci3310_innerk],  4
	mov   edx, [esp + mci3310_innerk]
	and   edx, 2
	jnz   .mci3310_dopair_coul
	jmp   .mci3310_checksingle_coul
.mci3310_dopair_coul:	
	mov esi, [ebp + mci3310_charge]

    mov   ecx, [esp + mci3310_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci3310_innerjjnr],  8	
	xorps xmm7, xmm7
	movss xmm3, [esi + eax*4]		
	movss xmm6, [esi + ebx*4]
	shufps xmm3, xmm6, 0 
	shufps xmm3, xmm3, 8 ;# 00001000 ;# xmm3(0,1) has the charges 

	mulps  xmm3, [esp + mci3310_iq]
	movlhps xmm3, xmm7
	movaps [esp + mci3310_qq], xmm3

	mov edi, [ebp + mci3310_pos]	
	
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci3310_ix]
	movaps xmm5, [esp + mci3310_iy]
	movaps xmm6, [esp + mci3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3310_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	lea   ecx, [ecx + ecx*2]
	lea   edx, [edx + edx*2]

	movlps xmm5, [esi + ecx*4]
	movhps xmm5, [esi + edx*4] ;# got half coulomb table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8]
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3310_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addps  xmm5, [esp + mci3310_vctot]
	movaps [esp + mci3310_vctot], xmm5 

.mci3310_checksingle_coul:				
	mov   edx, [esp + mci3310_innerk]
	and   edx, 1
	jnz    .mci3310_dosingle_coul
	jmp    .mci3310_updateouterdata_coul
.mci3310_dosingle_coul:
	mov esi, [ebp + mci3310_charge]
	mov edi, [ebp + mci3310_pos]
	mov   ecx, [esp + mci3310_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6
	movss xmm6, [esi + eax*4]	;# xmm6(0) has the charge 	
	mulps  xmm6, [esp + mci3310_iq]
	movaps [esp + mci3310_qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci3310_ix]
	movaps xmm5, [esp + mci3310_iy]
	movaps xmm6, [esp + mci3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3310_VFtab]
	movd ebx, mm6
	
	lea   ebx, [ebx + ebx*2]

	movlps xmm4, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 

	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	movaps xmm3, [esp + mci3310_qq]
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
	mulps  xmm5, xmm3 ;# vcoul=qq*VV  
	;# at this point mm5 contains vcoul 
	;# increment vcoul - then we can get rid of mm5 
	;# update vctot 
	addss  xmm5, [esp + mci3310_vctot]
	movss [esp + mci3310_vctot], xmm5 

.mci3310_updateouterdata_coul:
	;# loop back to mno 
	dec  dword ptr [esp + mci3310_nscoul]
	jz  .mci3310_testvdw
	jmp .mci3310_mno_coul
.mci3310_testvdw:
	mov  ecx, [esp + mci3310_nsvdw]
	cmp  ecx,  0
	jnz  .mci3310_mno_vdw
	jmp  .mci3310_last_mno
.mci3310_mno_vdw:
	mov   ebx,  [esp + mci3310_solnr]
	inc   dword ptr [esp + mci3310_solnr]

    mov   edx, [ebp + mci3310_type] 
    mov   edx, [edx + ebx*4]
    imul  edx, [ebp + mci3310_ntype]
    shl   edx, 1
    mov   [esp + mci3310_ntia], edx
		
	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3310_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3310_ii3], ebx

	movss xmm0, [esp + mci3310_shX]
	movss xmm1, [esp + mci3310_shY]
	movss xmm2, [esp + mci3310_shZ]

	addss xmm0, [eax + ebx*4]
	addss xmm1, [eax + ebx*4 + 4]
	addss xmm2, [eax + ebx*4 + 8]

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0

	movaps [esp + mci3310_ix], xmm0
	movaps [esp + mci3310_iy], xmm1
	movaps [esp + mci3310_iz], xmm2

	mov   ecx, [esp + mci3310_innerjjnr0]
	mov   [esp + mci3310_innerjjnr], ecx
	mov   edx, [esp + mci3310_innerk0]
    sub   edx,  4
    mov   [esp + mci3310_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3310_unroll_vdw_loop
	jmp   .mci3310_finish_vdw_inner
.mci3310_unroll_vdw_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3310_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	add dword ptr [esp + mci3310_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx
	
	mov esi, [ebp + mci3310_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci3310_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3310_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci3310_c6], xmm4
	movaps [esp + mci3310_c12], xmm6
	
	mov esi, [ebp + mci3310_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	

	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	

	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ix-iz to xmm4-xmm6 
	movaps xmm4, [esp + mci3310_ix]
	movaps xmm5, [esp + mci3310_iy]
	movaps xmm6, [esp + mci3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3310_tsc]

	movhlps xmm5, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm5	;# mm6/mm7 contain lu indices 
	cvtpi2ps xmm6, mm6
	cvtpi2ps xmm5, mm7
	movlhps xmm6, xmm5
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 
	pslld mm6, 2
	pslld mm7, 2

	movd mm0, eax	
	movd mm1, ebx
	movd mm2, ecx
	movd mm3, edx

	mov  esi, [ebp + mci3310_VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ecx, mm7
	psrlq mm7, 32
	movd ebx, mm6
	movd edx, mm7

	lea   eax, [eax + eax*2] 
	lea   ebx, [ebx + ebx*2] 
	lea   ecx, [ecx + ecx*2] 
	lea   edx, [edx + edx*2] 

	;# dispersion 
	movlps xmm5, [esi + eax*4 + 0]
	movlps xmm7, [esi + ecx*4 + 0]
	movhps xmm5, [esi + ebx*4 + 0]
	movhps xmm7, [esi + edx*4 + 0] ;# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101
	
	movlps xmm7, [esi + eax*4 + 8]
	movlps xmm3, [esi + ecx*4 + 8]
	movhps xmm7, [esi + ebx*4 + 8]
	movhps xmm3, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci3310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack 
	addps  xmm5, [esp + mci3310_vnbtot]
	movaps [esp + mci3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + eax*4 + 16]
	movlps xmm7, [esi + ecx*4 + 16]
	movhps xmm5, [esi + ebx*4 + 16]
	movhps xmm7, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + eax*4 + 24]
	movlps xmm3, [esi + ecx*4 + 24]
	movhps xmm7, [esi + ebx*4 + 24]
	movhps xmm3, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci3310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addps  xmm5, [esp + mci3310_vnbtot]
	movaps [esp + mci3310_vnbtot], xmm5
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3310_innerk],  4
	jl    .mci3310_finish_vdw_inner
	jmp   .mci3310_unroll_vdw_loop
.mci3310_finish_vdw_inner:
	;# check if at least two particles remain 
	add dword ptr [esp + mci3310_innerk],  4
	mov   edx, [esp + mci3310_innerk]
	and   edx, 2
	jnz   .mci3310_dopair_vdw
	jmp   .mci3310_checksingle_vdw
.mci3310_dopair_vdw:	
    mov   ecx, [esp + mci3310_innerjjnr]
	
	mov   eax, [ecx]	
	mov   ebx, [ecx + 4]              
	add dword ptr [esp + mci3310_innerjjnr],  8	
	xorps xmm7, xmm7

	mov esi, [ebp + mci3310_type]
	mov   ecx, eax
	mov   edx, ebx
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]	
	mov esi, [ebp + mci3310_nbfp]
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3310_ntia]
	add ecx, edi
	add edx, edi
	movlps xmm6, [esi + ecx*4]
	movhps xmm6, [esi + edx*4]
	mov edi, [ebp + mci3310_pos]	
	
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 8 ;# 00001000 	
	shufps xmm6, xmm6, 13 ;# 00001101
	movlhps xmm4, xmm7
	movlhps xmm6, xmm7
	
	movaps [esp + mci3310_c6], xmm4
	movaps [esp + mci3310_c12], xmm6	
			
	lea   eax, [eax + eax*2]
	lea   ebx, [ebx + ebx*2]
	;# move coordinates to xmm0-xmm2 
	movlps xmm1, [edi + eax*4]
	movss xmm2, [edi + eax*4 + 8]	
	movhps xmm1, [edi + ebx*4]
	movss xmm0, [edi + ebx*4 + 8]	

	movlhps xmm3, xmm7
	
	shufps xmm2, xmm0, 0
	
	movaps xmm0, xmm1

	shufps xmm2, xmm2, 136  ;# 10001000
	
	shufps xmm0, xmm0, 136  ;# 10001000
	shufps xmm1, xmm1, 221  ;# 11011101
			
	;# move ix-iz to xmm4-xmm6 
	xorps   xmm7, xmm7
	
	movaps xmm4, [esp + mci3310_ix]
	movaps xmm5, [esp + mci3310_iy]
	movaps xmm6, [esp + mci3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3310_VFtab]
	movd ecx, mm6
	psrlq mm6, 32
	movd edx, mm6

	lea   ecx, [ecx + ecx*2] 
	lea   edx, [edx + edx*2] 

	;# dispersion 
	movlps xmm5, [esi + ecx*4 + 0]
	movhps xmm5, [esi + edx*4 + 0];# got half dispersion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm4, 136  ;# 10001000
	shufps xmm5, xmm5, 221  ;# 11011101
	
	movlps xmm7, [esi + ecx*4 + 8]
	movhps xmm7, [esi + edx*4 + 8] ;# other half of dispersion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 136  ;# 10001000
	shufps xmm7, xmm7, 221  ;# 11011101
	;# dispersion table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci3310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack 
	addps  xmm5, [esp + mci3310_vnbtot]
	movaps [esp + mci3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm5, [esi + ecx*4 + 16]
	movhps xmm5, [esi + edx*4 + 16] ;# got half repulsion table 
	movaps xmm4, xmm5
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm5, xmm7, 221  ;# 11011101

	movlps xmm7, [esi + ecx*4 + 24]
	movhps xmm7, [esi + edx*4 + 24] ;# other half of repulsion table 
	movaps xmm6, xmm7
	shufps xmm6, xmm3, 136  ;# 10001000
	shufps xmm7, xmm3, 221  ;# 11011101
	;# table ready, in xmm4-xmm7 	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci3310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addps  xmm5, [esp + mci3310_vnbtot]
	movaps [esp + mci3310_vnbtot], xmm5

.mci3310_checksingle_vdw:				
	mov   edx, [esp + mci3310_innerk]
	and   edx, 1
	jnz    .mci3310_dosingle_vdw
	jmp    .mci3310_updateouterdata_vdw
.mci3310_dosingle_vdw:
	mov edi, [ebp + mci3310_pos]
	mov   ecx, [esp + mci3310_innerjjnr]
	mov   eax, [ecx]	
	xorps  xmm6, xmm6

	mov esi, [ebp + mci3310_type]
	mov ecx, eax
	mov ecx, [esi + ecx*4]	
	mov esi, [ebp + mci3310_nbfp]
	shl ecx, 1
	add ecx, [esp + mci3310_ntia]
	movlps xmm6, [esi + ecx*4]
	movaps xmm4, xmm6
	shufps xmm4, xmm4, 252  ;# 11111100	
	shufps xmm6, xmm6, 253  ;# 11111101	
			
	movaps [esp + mci3310_c6], xmm4
	movaps [esp + mci3310_c12], xmm6	
		
	lea   eax, [eax + eax*2]
	
	;# move coordinates to xmm0-xmm2 
	movss xmm0, [edi + eax*4]	
	movss xmm1, [edi + eax*4 + 4]	
	movss xmm2, [edi + eax*4 + 8]	 
	
	movaps xmm4, [esp + mci3310_ix]
	movaps xmm5, [esp + mci3310_iy]
	movaps xmm6, [esp + mci3310_iz]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3310_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3310_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 

	mulps xmm4, xmm0	;# xmm4=r 
	mulps xmm4, [esp + mci3310_tsc]

	cvttps2pi mm6, xmm4     ;# mm6 contain lu indices 
	cvtpi2ps xmm6, mm6
	subps xmm4, xmm6	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1	
	mulps  xmm2, xmm2	;# xmm2=eps2 

	pslld mm6, 2

	mov  esi, [ebp + mci3310_VFtab]
	movd ebx, mm6

	lea   ebx, [ebx + ebx*2] 	

	;# dispersion 
	movlps xmm4, [esi + ebx*4 + 0]
	movlps xmm6, [esi + ebx*4 + 8]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 

	movaps xmm4, [esp + mci3310_c6]
	mulps  xmm5, xmm4	 ;# vnb6 

	;# put scalar force on stack Update vnbtot directly 
	addss  xmm5, [esp + mci3310_vnbtot]
	movss [esp + mci3310_vnbtot], xmm5

	;# repulsion 
	movlps xmm4, [esi + ebx*4 + 16]
	movlps xmm6, [esi + ebx*4 + 24]
	movaps xmm5, xmm4
	movaps xmm7, xmm6
	shufps xmm5, xmm5, 1
	shufps xmm7, xmm7, 1
	;# table ready in xmm4-xmm7 
	
	mulps  xmm6, xmm1	;# xmm6=Geps 
	mulps  xmm7, xmm2	;# xmm7=Heps2 
	addps  xmm5, xmm6
	addps  xmm5, xmm7	;# xmm5=Fp 	
	mulps  xmm7, [esp + mci3310_two]	;# two*Heps2 
	mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
	addps  xmm5, xmm4 ;# xmm5=VV 
 	
	movaps xmm4, [esp + mci3310_c12]
	mulps  xmm5, xmm4 ;# vnb12 
	
	addss  xmm5, [esp + mci3310_vnbtot]
	movss [esp + mci3310_vnbtot], xmm5
	
.mci3310_updateouterdata_vdw:
	
	;# loop back to mno 
	dec dword ptr [esp + mci3310_nsvdw]
	jz  .mci3310_last_mno
	jmp .mci3310_mno_vdw
.mci3310_last_mno:	
	;# get group index for i particle 
	mov   edx, [ebp + mci3310_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3310_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3310_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3310_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci3310_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3310_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3310_nri]
	dec ecx
	jecxz .mci3310_end
	;# not last, iterate once more!  
	mov [ebp + mci3310_nri], ecx
	jmp .mci3310_outer
.mci3310_end:
	emms
	mov eax, [esp + mci3310_salign]
	add esp, eax
	add esp, 268
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret



.globl mcinl3320_sse
.globl _mcinl3320_sse
mcinl3320_sse:	
_mcinl3320_sse:	
.equiv		mci3320_nri,		8
.equiv		mci3320_iinr,		12
.equiv		mci3320_jindex,		16
.equiv		mci3320_jjnr,		20
.equiv		mci3320_shift,		24
.equiv		mci3320_shiftvec,	28
.equiv		mci3320_gid,		32
.equiv		mci3320_pos,		36		
.equiv		mci3320_charge,		40
.equiv		mci3320_facel,		44
.equiv		mci3320_Vc,			48			
.equiv		mci3320_type,		52
.equiv		mci3320_ntype,		56
.equiv		mci3320_nbfp,		60	
.equiv		mci3320_Vnb,		64	
.equiv		mci3320_tabscale,	68	
.equiv		mci3320_VFtab,		72	
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3320_ixO,		0
.equiv		mci3320_iyO,		16
.equiv		mci3320_izO,		32
.equiv		mci3320_ixH1,		48
.equiv		mci3320_iyH1,		64
.equiv		mci3320_izH1,		80
.equiv		mci3320_ixH2,		96
.equiv		mci3320_iyH2,		112
.equiv		mci3320_izH2,		128
.equiv		mci3320_iqO,		144 
.equiv		mci3320_iqH,		160 
.equiv		mci3320_qqO,		176
.equiv		mci3320_qqH,		192
.equiv		mci3320_rinvO,		208
.equiv		mci3320_rinvH1,		224
.equiv		mci3320_rinvH2,		240		
.equiv		mci3320_rO,			256
.equiv		mci3320_rH1,		272
.equiv		mci3320_rH2,		288
.equiv		mci3320_tsc,		304	
.equiv		mci3320_c6,			320
.equiv		mci3320_c12,		336
.equiv		mci3320_vctot,		352
.equiv		mci3320_vnbtot,		368
.equiv		mci3320_half,		384
.equiv		mci3320_three,		400
.equiv		mci3320_is3,		416
.equiv		mci3320_ii3,		420
.equiv		mci3320_ntia,		424	
.equiv		mci3320_innerjjnr,	428
.equiv		mci3320_innerk,		432
.equiv		mci3320_salign,		436
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 440		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3320_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + mci3320_tabscale]
	
	movaps [esp + mci3320_half],  xmm0
	movaps [esp + mci3320_three],  xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + mci3320_tsc], xmm3
	
	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3320_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3320_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, [edx + ebx*4 + 4]	
	movss xmm5, [ebp + mci3320_facel]
	mulss  xmm3, xmm5
	mulss  xmm4, xmm5

	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	movaps [esp + mci3320_iqO], xmm3
	movaps [esp + mci3320_iqH], xmm4
	
	mov   edx, [ebp + mci3320_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + mci3320_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	mov   [esp + mci3320_ntia], ecx		
.mci3320_outer:
	mov   eax, [ebp + mci3320_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3320_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3320_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3320_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci3320_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3320_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3320_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3320_ii3], ebx

	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3320_ixO], xmm3
	movaps [esp + mci3320_iyO], xmm4
	movaps [esp + mci3320_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3320_ixH1], xmm0
	movaps [esp + mci3320_iyH1], xmm1
	movaps [esp + mci3320_izH1], xmm2
	movaps [esp + mci3320_ixH2], xmm3
	movaps [esp + mci3320_iyH2], xmm4
	movaps [esp + mci3320_izH2], xmm5
	
	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci3320_vctot], xmm4
	movaps [esp + mci3320_vnbtot], xmm4
	
	mov   eax, [ebp + mci3320_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3320_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3320_pos]
	mov   eax, [ebp + mci3320_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3320_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci3320_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3320_unroll_loop
	jmp   .mci3320_odd_inner
.mci3320_unroll_loop:
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3320_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	mov   ecx, [edx + 8]            
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 

	add dword ptr [esp + mci3320_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3320_charge]    ;# base of charge[] 
	
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + ecx*4]
	movss xmm6, [esi + ebx*4]
	movss xmm7, [esi + edx*4]

	shufps xmm3, xmm6, 0 
	shufps xmm4, xmm7, 0 
	shufps xmm3, xmm4, 136  ;# 10001000 ;# all charges in xmm3  
	movaps xmm4, xmm3	     ;# and in xmm4 
	mulps  xmm3, [esp + mci3320_iqO]
	mulps  xmm4, [esp + mci3320_iqH]

	movd  mm0, eax		;# use mmx registers as temp storage 
	movd  mm1, ebx
	movd  mm2, ecx
	movd  mm3, edx

	movaps  [esp + mci3320_qqO], xmm3
	movaps  [esp + mci3320_qqH], xmm4
	
	mov esi, [ebp + mci3320_type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov ecx, [esi + ecx*4]
	mov edx, [esi + edx*4]
	mov esi, [ebp + mci3320_nbfp]
	shl eax, 1	
	shl ebx, 1	
	shl ecx, 1	
	shl edx, 1	
	mov edi, [esp + mci3320_ntia]
	add eax, edi
	add ebx, edi
	add ecx, edi
	add edx, edi

	movlps xmm6, [esi + eax*4]
	movlps xmm7, [esi + ecx*4]
	movhps xmm6, [esi + ebx*4]
	movhps xmm7, [esi + edx*4]

	movaps xmm4, xmm6
	shufps xmm4, xmm7, 136  ;# 10001000
	shufps xmm6, xmm7, 221  ;# 11011101
	
	movd  eax, mm0		
	movd  ebx, mm1
	movd  ecx, mm2
	movd  edx, mm3

	movaps [esp + mci3320_c6], xmm4
	movaps [esp + mci3320_c12], xmm6

	mov esi, [ebp + mci3320_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	

	;# move four coordinates to xmm0-xmm2 	
	movlps xmm4, [esi + eax*4]
	movlps xmm5, [esi + ecx*4]
	movss xmm2, [esi + eax*4 + 8]
	movss xmm6, [esi + ecx*4 + 8]

	movhps xmm4, [esi + ebx*4]
	movhps xmm5, [esi + edx*4]

	movss xmm0, [esi + ebx*4 + 8]
	movss xmm1, [esi + edx*4 + 8]

	shufps xmm2, xmm0, 0
	shufps xmm6, xmm1, 0
	
	movaps xmm0, xmm4
	movaps xmm1, xmm4

	shufps xmm2, xmm6, 136  ;# 10001000
	
	shufps xmm0, xmm5, 136  ;# 10001000
	shufps xmm1, xmm5, 221  ;# 11011101		

	;# move ixO-izO to xmm4-xmm6 
	movaps xmm4, [esp + mci3320_ixO]
	movaps xmm5, [esp + mci3320_iyO]
	movaps xmm6, [esp + mci3320_izO]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm4, xmm5
	addps xmm4, xmm6
	movaps xmm7, xmm4
	;# rsqO in xmm7 

	;# move ixH1-izH1 to xmm4-xmm6 
	movaps xmm4, [esp + mci3320_ixH1]
	movaps xmm5, [esp + mci3320_iyH1]
	movaps xmm6, [esp + mci3320_izH1]

	;# calc dr 
	subps xmm4, xmm0
	subps xmm5, xmm1
	subps xmm6, xmm2

	;# square it 
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	mulps xmm6,xmm6
	addps xmm6, xmm5
	addps xmm6, xmm4
	;# rsqH1 in xmm6 

	;# move ixH2-izH2 to xmm3-xmm5  
	movaps xmm3, [esp + mci3320_ixH2]
	movaps xmm4, [esp + mci3320_iyH2]
	movaps xmm5, [esp + mci3320_izH2]

	;# calc dr 
	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	;# square it 
	mulps xmm3,xmm3
	mulps xmm4,xmm4
	mulps xmm5,xmm5
	addps xmm5, xmm4
	addps xmm5, xmm3
	;# rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 

	;# start with rsqO - seed to xmm2 	
	rsqrtps xmm2, xmm7
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci3320_three]
	mulps   xmm2, xmm7	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci3320_half]
	movaps  [esp + mci3320_rinvO], xmm4	;# rinvO in xmm4 
	mulps   xmm7, xmm4
	movaps  [esp + mci3320_rO], xmm7	

	;# rsqH1 - seed in xmm2 
	rsqrtps xmm2, xmm6
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci3320_three]
	mulps   xmm2, xmm6	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci3320_half]
	movaps  [esp + mci3320_rinvH1], xmm4	;# rinvH1 in xmm4 
	mulps   xmm6, xmm4
	movaps  [esp + mci3320_rH1], xmm6

	;# rsqH2 - seed to xmm2 
	rsqrtps xmm2, xmm5
	movaps  xmm3, xmm2
	mulps   xmm2, xmm2
	movaps  xmm4, [esp + mci3320_three]
	mulps   xmm2, xmm5	;# rsq*lu*lu 
	subps   xmm4, xmm2	;# 30-rsq*lu*lu 
	mulps   xmm4, xmm3	;# lu*(3-rsq*lu*lu) 
	mulps   xmm4, [esp + mci3320_half]
	movaps  [esp + mci3320_rinvH2], xmm4	;# rinvH2 in xmm4 
	mulps   xmm5, xmm4
	movaps  [esp + mci3320_rH2], xmm5

	;# do O interactions 
	;# rO is still in xmm7 
	mulps   xmm7, [esp + mci3320_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3

	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd mm0, eax   
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + mci3320_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    movaps xmm0, [esp + mci3320_qqO]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + mci3320_vctot]
    movaps [esp + mci3320_vctot], xmm5 

    ;# dispersion 
    movlps xmm5, [esi + eax*4 + 16]
    movlps xmm7, [esi + ecx*4 + 16]
    movhps xmm5, [esi + ebx*4 + 16]
    movhps xmm7, [esi + edx*4 + 16] ;# got half dispersion table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101
        
    movlps xmm7, [esi + eax*4 + 24]
    movlps xmm3, [esi + ecx*4 + 24]
    movhps xmm7, [esi + ebx*4 + 24]
    movhps xmm3, [esi + edx*4 + 24] ;# other half of dispersion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# dispersion table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 

    movaps xmm4, [esp + mci3320_c6]
    mulps  xmm5, xmm4    ;# vnb6 
    ;# Update vnbtot directly 
    addps  xmm5, [esp + mci3320_vnbtot]
    movaps [esp + mci3320_vnbtot], xmm5

    ;# repulsion 
    movlps xmm5, [esi + eax*4 + 32]
    movlps xmm7, [esi + ecx*4 + 32]
    movhps xmm5, [esi + ebx*4 + 32]
    movhps xmm7, [esi + edx*4 + 32] ;# got half repulsion table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 40]
    movlps xmm3, [esi + ecx*4 + 40]
    movhps xmm7, [esi + ebx*4 + 40]
    movhps xmm3, [esi + edx*4 + 40] ;# other half of repulsion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# repulsion table ready, in xmm4-xmm7 	
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 

    movaps xmm4, [esp + mci3320_c12]
    mulps  xmm5, xmm4    ;# vnb12 
    addps  xmm5, [esp + mci3320_vnbtot] ;# total nonbonded potential in xmm5 
    movaps [esp + mci3320_vnbtot], xmm5

	;# Done with O interactions - now H1! 
	movaps xmm7, [esp + mci3320_rH1]
	mulps   xmm7, [esp + mci3320_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    movaps xmm0, [esp + mci3320_qqH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addps  xmm5, [esp + mci3320_vctot]
    movaps [esp + mci3320_vctot], xmm5
	
	;# Done with H1, finally we do H2 interactions 
	movaps xmm7, [esp + mci3320_rH2]
	mulps   xmm7, [esp + mci3320_tsc]
	movhlps xmm4, xmm7
	cvttps2pi mm6, xmm7
	cvttps2pi mm7, xmm4    ;# mm6/mm7 contain lu indices 
	
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm4, mm7
    movlhps xmm3, xmm4
	
    subps xmm7, xmm3
	movaps xmm1, xmm7	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
		
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
        
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    movaps xmm0, [esp + mci3320_qqH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul 
    addps  xmm5, [esp + mci3320_vctot]
    movaps [esp + mci3320_vctot], xmm5
		
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3320_innerk],  4
	jl    .mci3320_odd_inner
	jmp   .mci3320_unroll_loop
.mci3320_odd_inner:	
	add dword ptr [esp + mci3320_innerk],  4
	jnz   .mci3320_odd_loop
	jmp   .mci3320_updateouterdata
.mci3320_odd_loop:
	mov   edx, [esp + mci3320_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci3320_innerjjnr],  4	

 	xorps xmm4, xmm4
	movss xmm4, [esp + mci3320_iqO]
	mov esi, [ebp + mci3320_charge] 
	movhps xmm4, [esp + mci3320_iqH]     
	movss xmm3, [esi + eax*4]	;# charge in xmm3 
	shufps xmm3, xmm3, 0
	mulps xmm3, xmm4
	movaps [esp + mci3320_qqO], xmm3	;# use oxygen qq for storage 

	xorps xmm6, xmm6
	mov esi, [ebp + mci3320_type]
	mov ebx, [esi + eax*4]
	mov esi, [ebp + mci3320_nbfp]
	shl ebx, 1	
	add ebx, [esp + mci3320_ntia]
	movlps xmm6, [esi + ebx*4]
	movaps xmm7, xmm6
	shufps xmm6, xmm6, 252  ;# 11111100
	shufps xmm7, xmm7, 253  ;# 11111101
	movaps [esp + mci3320_c6], xmm6
	movaps [esp + mci3320_c12], xmm7

	mov esi, [ebp + mci3320_pos]
	lea   eax, [eax + eax*2]  
	
	;# move j coords to xmm0-xmm2 
	movss xmm0, [esi + eax*4]
	movss xmm1, [esi + eax*4 + 4]
	movss xmm2, [esi + eax*4 + 8]
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	
	movss xmm3, [esp + mci3320_ixO]
	movss xmm4, [esp + mci3320_iyO]
	movss xmm5, [esp + mci3320_izO]
		
	movlps xmm6, [esp + mci3320_ixH1]
	movlps xmm7, [esp + mci3320_ixH2]
	unpcklps xmm6, xmm7
	movlhps xmm3, xmm6
	movlps xmm6, [esp + mci3320_iyH1]
	movlps xmm7, [esp + mci3320_iyH2]
	unpcklps xmm6, xmm7
	movlhps xmm4, xmm6
	movlps xmm6, [esp + mci3320_izH1]
	movlps xmm7, [esp + mci3320_izH2]
	unpcklps xmm6, xmm7
	movlhps xmm5, xmm6

	subps xmm3, xmm0
	subps xmm4, xmm1
	subps xmm5, xmm2

	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5

	addps  xmm4, xmm3
	addps  xmm4, xmm5
	;# rsq in xmm4 

	rsqrtps xmm5, xmm4
	;# lookup seed in xmm5 
	movaps xmm2, xmm5
	mulps xmm5, xmm5
	movaps xmm1, [esp + mci3320_three]
	mulps xmm5, xmm4	;# rsq*lu*lu 			
	movaps xmm0, [esp + mci3320_half]
	subps xmm1, xmm5	;# 30-rsq*lu*lu 
	mulps xmm1, xmm2	
	mulps xmm0, xmm1	;# xmm0=rinv 
	;# a little trick to avoid NaNs: 
	;# positions 0,2,and 3 are valid, but not 1. 
	;# If it contains NaN it doesnt help to mult by 0, 
	;# So we shuffle it and copy pos 0 to pos1! 
	shufps xmm0, xmm0, 224 ;# 11100000	
	
	mulps xmm4, xmm0	;# xmm4=r 
	movaps [esp + mci3320_rinvO], xmm0
	
	mulps xmm4, [esp + mci3320_tsc]
	movhlps xmm7, xmm4
	cvttps2pi mm6, xmm4
	cvttps2pi mm7, xmm7    ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm7, mm7
    movlhps xmm3, xmm7

	subps   xmm4, xmm3	
	movaps xmm1, xmm4	;# xmm1=eps 
	movaps xmm2, xmm1
	mulps  xmm2, xmm2	;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
	
    movd mm0, eax   
    movd mm1, ecx
    movd mm2, edx

    mov  esi, [ebp + mci3320_VFtab]
    movd eax, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]
	
    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7      
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp        
    movaps xmm0, [esp + mci3320_qqO]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm0 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    addps  xmm5, [esp + mci3320_vctot]
    movaps [esp + mci3320_vctot], xmm5
	
    ;# dispersion 
    movlps xmm5, [esi + eax*4 + 16]	;# half table 
    movaps xmm4, xmm5
    shufps xmm4, xmm4, 252  ;# 11111100
    shufps xmm5, xmm5, 253  ;# 11111101
        
    movlps xmm7, [esi + eax*4 + 24] ;# other half of dispersion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm6, 252  ;# 11111100
    shufps xmm7, xmm7, 253  ;# 11111101
    ;# dispersion table ready, in xmm4-xmm7  
    mulss  xmm6, xmm1       ;# xmm6=Geps 
    mulss  xmm7, xmm2       ;# xmm7=Heps2 
    addss  xmm5, xmm6	;# Update vnbtot directly 
    addss  xmm5, xmm7       ;# xmm5=Fp        
    mulss  xmm5, xmm1 ;# xmm5=eps*Fp 
    addss  xmm5, xmm4 ;# xmm5=VV 

    movaps xmm4, [esp + mci3320_c6]
    mulps  xmm5, xmm4    ;# vnb6 
    ;# Update vnbtot directly 
    addps  xmm5, [esp + mci3320_vnbtot]
    movaps [esp + mci3320_vnbtot], xmm5

    ;# repulsion 
    movlps xmm5, [esi + eax*4 + 32] ;# got half repulsion table 
    movaps xmm4, xmm5
    shufps xmm4, xmm4, 136  ;# 10001000
    shufps xmm5, xmm5, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 40] ;# other half of repulsion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm6, 136  ;# 10001000
    shufps xmm7, xmm7, 221  ;# 11011101
    ;# repulsion table ready, in xmm4-xmm7 	
    mulss  xmm6, xmm1       ;# xmm6=Geps 
    mulss  xmm7, xmm2       ;# xmm7=Heps2 
    addss  xmm5, xmm6
    addss  xmm5, xmm7       ;# xmm5=Fp        
    mulss  xmm5, xmm1 ;# xmm5=eps*Fp 
    addss  xmm5, xmm4 ;# xmm5=VV 

    movaps xmm4, [esp + mci3320_c12]
    mulps  xmm5, xmm4    ;# vnb12 
    addps  xmm5, [esp + mci3320_vnbtot] ;# total nonbonded potential in xmm5 
    movaps [esp + mci3320_vnbtot], xmm5
	
	dec dword ptr [esp + mci3320_innerk]
	jz    .mci3320_updateouterdata
	jmp   .mci3320_odd_loop
.mci3320_updateouterdata:
	mov   edx, [ebp + mci3320_gid]  
	mov   edx, [edx]
	add dword ptr [ebp + mci3320_gid],  4	

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3320_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		
        
	;# add earlier value from mem 
	mov   eax, [ebp + mci3320_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci3320_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3320_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3320_nri]
	dec ecx
	jecxz .mci3320_end
	;# not last, iterate once more!  
	mov [ebp + mci3320_nri], ecx
	jmp .mci3320_outer
.mci3320_end:
	emms
	mov eax, [esp + mci3320_salign]
	add esp, eax
	add esp, 440
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret
	

	
.globl mcinl3330_sse
.globl _mcinl3330_sse
mcinl3330_sse:	
_mcinl3330_sse:	
.equiv		mci3330_nri,		8
.equiv		mci3330_iinr,		12
.equiv		mci3330_jindex,		16
.equiv		mci3330_jjnr,		20
.equiv		mci3330_shift,		24
.equiv		mci3330_shiftvec,	28
.equiv		mci3330_gid,		32
.equiv		mci3330_pos,		36		
.equiv		mci3330_charge,		40
.equiv		mci3330_facel,		44
.equiv		mci3330_Vc,			48
.equiv		mci3330_type,		52
.equiv		mci3330_ntype,		56
.equiv		mci3330_nbfp,		60	
.equiv		mci3330_Vnb,		64
.equiv		mci3330_tabscale,	68
.equiv		mci3330_VFtab,		72
	;# stack offsets for local variables  
	;# bottom of stack is cache-aligned for sse use 
.equiv		mci3330_ixO,		0
.equiv		mci3330_iyO,		16
.equiv		mci3330_izO,		32
.equiv		mci3330_ixH1,		48
.equiv		mci3330_iyH1,		64
.equiv		mci3330_izH1,		80
.equiv		mci3330_ixH2,		96
.equiv		mci3330_iyH2,		112
.equiv		mci3330_izH2,		128
.equiv		mci3330_jxO,		144
.equiv		mci3330_jyO,		160
.equiv		mci3330_jzO,		176
.equiv		mci3330_jxH1,		192
.equiv		mci3330_jyH1,		208
.equiv		mci3330_jzH1,		224
.equiv		mci3330_jxH2,		240
.equiv		mci3330_jyH2,		256
.equiv		mci3330_jzH2,		272
.equiv		mci3330_qqOO,		288
.equiv		mci3330_qqOH,		304
.equiv		mci3330_qqHH,		320
.equiv		mci3330_tsc,		336
.equiv		mci3330_c6,			352
.equiv		mci3330_c12,		368		 
.equiv		mci3330_vctot,		384
.equiv		mci3330_vnbtot,		400
.equiv		mci3330_half,		416
.equiv		mci3330_three,		432
.equiv		mci3330_rsqOO,		448
.equiv		mci3330_rsqOH1,		464
.equiv		mci3330_rsqOH2,		480
.equiv		mci3330_rsqH1O,		496
.equiv		mci3330_rsqH1H1,	512
.equiv		mci3330_rsqH1H2,	528
.equiv		mci3330_rsqH2O,		544
.equiv		mci3330_rsqH2H1,	560
.equiv		mci3330_rsqH2H2,	576
.equiv		mci3330_rinvOO,		592
.equiv		mci3330_rinvOH1,	608
.equiv		mci3330_rinvOH2,	624
.equiv		mci3330_rinvH1O,	640
.equiv		mci3330_rinvH1H1,	656
.equiv		mci3330_rinvH1H2,	672
.equiv		mci3330_rinvH2O,	688
.equiv		mci3330_rinvH2H1,	704
.equiv		mci3330_rinvH2H2,	720	
.equiv		mci3330_is3,		736
.equiv		mci3330_ii3,		740
.equiv		mci3330_innerjjnr,	744
.equiv		mci3330_innerk,		748
.equiv		mci3330_salign,		752
	push ebp
	mov ebp,esp	
    push eax
    push ebx
    push ecx
    push edx
	push esi
	push edi
	sub esp, 756		;# local stack space 
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + mci3330_salign], eax

	emms

	movups xmm0, [sse_half]
	movups xmm2, [sse_three]
	movss xmm3, [ebp + mci3330_tabscale]
	movaps [esp + mci3330_half],  xmm0
	movaps [esp + mci3330_three], xmm2
	shufps xmm3, xmm3, 0
	movaps [esp + mci3330_tsc],  xmm3

	;# assume we have at least one i particle - start directly 
	mov   ecx, [ebp + mci3330_iinr]       ;# ecx = pointer into iinr[] 	
	mov   ebx, [ecx]	    ;# ebx =ii 

	mov   edx, [ebp + mci3330_charge]
	movss xmm3, [edx + ebx*4]	
	movss xmm4, xmm3	
	movss xmm5, [edx + ebx*4 + 4]	
	movss xmm6, [ebp + mci3330_facel]
	mulss  xmm3, xmm3
	mulss  xmm4, xmm5
	mulss  xmm5, xmm5
	mulss  xmm3, xmm6
	mulss  xmm4, xmm6
	mulss  xmm5, xmm6
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3330_qqOO], xmm3
	movaps [esp + mci3330_qqOH], xmm4
	movaps [esp + mci3330_qqHH], xmm5
		
	xorps xmm0, xmm0
	mov   edx, [ebp + mci3330_type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + mci3330_ntype]      ;# ecx = ntia = 2*ntype*type[ii0] 
	add   edx, ecx
	mov   eax, [ebp + mci3330_nbfp]
	movlps xmm0, [eax + edx*4] 
	movaps xmm1, xmm0
	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 85   ;# 01010101
	movaps [esp + mci3330_c6], xmm0
	movaps [esp + mci3330_c12], xmm1

.mci3330_outer:
	mov   eax, [ebp + mci3330_shift]      ;# eax = pointer into shift[] 
	mov   ebx, [eax]		;# ebx=shift[n] 
	add dword ptr [ebp + mci3330_shift],  4  ;# advance pointer one step 
	
	lea   ebx, [ebx + ebx*2]    ;# ebx=3*is 
	mov   [esp + mci3330_is3],ebx    	;# store is3 

	mov   eax, [ebp + mci3330_shiftvec]   ;# eax = base of shiftvec[] 

	movss xmm0, [eax + ebx*4]
	movss xmm1, [eax + ebx*4 + 4]
	movss xmm2, [eax + ebx*4 + 8] 

	mov   ecx, [ebp + mci3330_iinr]       ;# ecx = pointer into iinr[] 	
	add dword ptr [ebp + mci3330_iinr],  4   ;# advance pointer 
	mov   ebx, [ecx]	    ;# ebx =ii 

	lea   ebx, [ebx + ebx*2]	;# ebx = 3*ii=ii3 
	mov   eax, [ebp + mci3330_pos]    ;# eax = base of pos[]  
	mov   [esp + mci3330_ii3], ebx	
	
	movaps xmm3, xmm0
	movaps xmm4, xmm1
	movaps xmm5, xmm2
	addss xmm3, [eax + ebx*4]
	addss xmm4, [eax + ebx*4 + 4]
	addss xmm5, [eax + ebx*4 + 8]		
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3330_ixO], xmm3
	movaps [esp + mci3330_iyO], xmm4
	movaps [esp + mci3330_izO], xmm5

	movss xmm3, xmm0
	movss xmm4, xmm1
	movss xmm5, xmm2
	addss xmm0, [eax + ebx*4 + 12]
	addss xmm1, [eax + ebx*4 + 16]
	addss xmm2, [eax + ebx*4 + 20]		
	addss xmm3, [eax + ebx*4 + 24]
	addss xmm4, [eax + ebx*4 + 28]
	addss xmm5, [eax + ebx*4 + 32]		

	shufps xmm0, xmm0, 0
	shufps xmm1, xmm1, 0
	shufps xmm2, xmm2, 0
	shufps xmm3, xmm3, 0
	shufps xmm4, xmm4, 0
	shufps xmm5, xmm5, 0
	movaps [esp + mci3330_ixH1], xmm0
	movaps [esp + mci3330_iyH1], xmm1
	movaps [esp + mci3330_izH1], xmm2
	movaps [esp + mci3330_ixH2], xmm3
	movaps [esp + mci3330_iyH2], xmm4
	movaps [esp + mci3330_izH2], xmm5

	;# clear vctot and i forces 
	xorps xmm4, xmm4
	movaps [esp + mci3330_vctot], xmm4
	movaps [esp + mci3330_vnbtot], xmm4
	
	mov   eax, [ebp + mci3330_jindex]
	mov   ecx, [eax]	     ;# jindex[n] 
	mov   edx, [eax + 4]	     ;# jindex[n+1] 
	add dword ptr [ebp + mci3330_jindex],  4
	sub   edx, ecx               ;# number of innerloop atoms 

	mov   esi, [ebp + mci3330_pos]
	mov   eax, [ebp + mci3330_jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + mci3330_innerjjnr], eax     ;# pointer to jjnr[nj0] 
	sub   edx,  4
	mov   [esp + mci3330_innerk], edx    ;# number of innerloop atoms 
	jge   .mci3330_unroll_loop
	jmp   .mci3330_single_check
.mci3330_unroll_loop:	
	;# quad-unroll innerloop here 
	mov   edx, [esp + mci3330_innerjjnr]     ;# pointer to jjnr[k] 

	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	mov   ecx, [edx + 8]
	mov   edx, [edx + 12]         ;# eax-edx=jnr1-4 
	
	add dword ptr [esp + mci3330_innerjjnr],  16 ;# advance pointer (unrolled 4) 

	mov esi, [ebp + mci3330_pos]       ;# base of pos[] 

	lea   eax, [eax + eax*2]     ;# replace jnr with j3 
	lea   ebx, [ebx + ebx*2]	
	lea   ecx, [ecx + ecx*2]     ;# replace jnr with j3 
	lea   edx, [edx + edx*2]	
	
	;# move j coordinates to local temp variables 
	movlps xmm2, [esi + eax*4]
	movlps xmm3, [esi + eax*4 + 12]
	movlps xmm4, [esi + eax*4 + 24]

	movlps xmm5, [esi + ebx*4]
	movlps xmm6, [esi + ebx*4 + 12]
	movlps xmm7, [esi + ebx*4 + 24]

	movhps xmm2, [esi + ecx*4]
	movhps xmm3, [esi + ecx*4 + 12]
	movhps xmm4, [esi + ecx*4 + 24]

	movhps xmm5, [esi + edx*4]
	movhps xmm6, [esi + edx*4 + 12]
	movhps xmm7, [esi + edx*4 + 24]

	;# current state: 	
	;# xmm2= jxOa  jyOa  jxOc  jyOc 
	;# xmm3= jxH1a jyH1a jxH1c jyH1c 
	;# xmm4= jxH2a jyH2a jxH2c jyH2c 
	;# xmm5= jxOb  jyOb  jxOd  jyOd 
	;# xmm6= jxH1b jyH1b jxH1d jyH1d 
	;# xmm7= jxH2b jyH2b jxH2d jyH2d 
	
	movaps xmm0, xmm2
	movaps xmm1, xmm3
	unpcklps xmm0, xmm5	;# xmm0= jxOa  jxOb  jyOa  jyOb 
	unpcklps xmm1, xmm6	;# xmm1= jxH1a jxH1b jyH1a jyH1b 
	unpckhps xmm2, xmm5	;# xmm2= jxOc  jxOd  jyOc  jyOd 
	unpckhps xmm3, xmm6	;# xmm3= jxH1c jxH1d jyH1c jyH1d  
	movaps xmm5, xmm4
	movaps   xmm6, xmm0
	unpcklps xmm4, xmm7	;# xmm4= jxH2a jxH2b jyH2a jyH2b 		
	unpckhps xmm5, xmm7	;# xmm5= jxH2c jxH2d jyH2c jyH2d 
	movaps   xmm7, xmm1
	movlhps  xmm0, xmm2	;# xmm0= jxOa  jxOb  jxOc  jxOd  
	movaps [esp + mci3330_jxO], xmm0
	movhlps  xmm2, xmm6	;# xmm2= jyOa  jyOb  jyOc  jyOd 
	movaps [esp + mci3330_jyO], xmm2
	movlhps  xmm1, xmm3
	movaps [esp + mci3330_jxH1], xmm1
	movhlps  xmm3, xmm7
	movaps   xmm6, xmm4
	movaps [esp + mci3330_jyH1], xmm3
	movlhps  xmm4, xmm5
	movaps [esp + mci3330_jxH2], xmm4
	movhlps  xmm5, xmm6
	movaps [esp + mci3330_jyH2], xmm5

	movss  xmm0, [esi + eax*4 + 8]
	movss  xmm1, [esi + eax*4 + 20]
	movss  xmm2, [esi + eax*4 + 32]

	movss  xmm3, [esi + ecx*4 + 8]
	movss  xmm4, [esi + ecx*4 + 20]
	movss  xmm5, [esi + ecx*4 + 32]

	movhps xmm0, [esi + ebx*4 + 4]
	movhps xmm1, [esi + ebx*4 + 16]
	movhps xmm2, [esi + ebx*4 + 28]
	
	movhps xmm3, [esi + edx*4 + 4]
	movhps xmm4, [esi + edx*4 + 16]
	movhps xmm5, [esi + edx*4 + 28]
	
	shufps xmm0, xmm3, 204  ;# 11001100
	shufps xmm1, xmm4, 204  ;# 11001100
	shufps xmm2, xmm5, 204  ;# 11001100
	movaps [esp + mci3330_jzO],  xmm0
	movaps [esp + mci3330_jzH1],  xmm1
	movaps [esp + mci3330_jzH2],  xmm2

	movaps xmm0, [esp + mci3330_ixO]
	movaps xmm1, [esp + mci3330_iyO]
	movaps xmm2, [esp + mci3330_izO]
	movaps xmm3, [esp + mci3330_ixO]
	movaps xmm4, [esp + mci3330_iyO]
	movaps xmm5, [esp + mci3330_izO]
	subps  xmm0, [esp + mci3330_jxO]
	subps  xmm1, [esp + mci3330_jyO]
	subps  xmm2, [esp + mci3330_jzO]
	subps  xmm3, [esp + mci3330_jxH1]
	subps  xmm4, [esp + mci3330_jyH1]
	subps  xmm5, [esp + mci3330_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci3330_rsqOO], xmm0
	movaps [esp + mci3330_rsqOH1], xmm3

	movaps xmm0, [esp + mci3330_ixO]
	movaps xmm1, [esp + mci3330_iyO]
	movaps xmm2, [esp + mci3330_izO]
	movaps xmm3, [esp + mci3330_ixH1]
	movaps xmm4, [esp + mci3330_iyH1]
	movaps xmm5, [esp + mci3330_izH1]
	subps  xmm0, [esp + mci3330_jxH2]
	subps  xmm1, [esp + mci3330_jyH2]
	subps  xmm2, [esp + mci3330_jzH2]
	subps  xmm3, [esp + mci3330_jxO]
	subps  xmm4, [esp + mci3330_jyO]
	subps  xmm5, [esp + mci3330_jzO]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci3330_rsqOH2], xmm0
	movaps [esp + mci3330_rsqH1O], xmm3

	movaps xmm0, [esp + mci3330_ixH1]
	movaps xmm1, [esp + mci3330_iyH1]
	movaps xmm2, [esp + mci3330_izH1]
	movaps xmm3, [esp + mci3330_ixH1]
	movaps xmm4, [esp + mci3330_iyH1]
	movaps xmm5, [esp + mci3330_izH1]
	subps  xmm0, [esp + mci3330_jxH1]
	subps  xmm1, [esp + mci3330_jyH1]
	subps  xmm2, [esp + mci3330_jzH1]
	subps  xmm3, [esp + mci3330_jxH2]
	subps  xmm4, [esp + mci3330_jyH2]
	subps  xmm5, [esp + mci3330_jzH2]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm3, xmm4
	addps  xmm3, xmm5
	movaps [esp + mci3330_rsqH1H1], xmm0
	movaps [esp + mci3330_rsqH1H2], xmm3

	movaps xmm0, [esp + mci3330_ixH2]
	movaps xmm1, [esp + mci3330_iyH2]
	movaps xmm2, [esp + mci3330_izH2]
	movaps xmm3, [esp + mci3330_ixH2]
	movaps xmm4, [esp + mci3330_iyH2]
	movaps xmm5, [esp + mci3330_izH2]
	subps  xmm0, [esp + mci3330_jxO]
	subps  xmm1, [esp + mci3330_jyO]
	subps  xmm2, [esp + mci3330_jzO]
	subps  xmm3, [esp + mci3330_jxH1]
	subps  xmm4, [esp + mci3330_jyH1]
	subps  xmm5, [esp + mci3330_jzH1]
	mulps  xmm0, xmm0
	mulps  xmm1, xmm1
	mulps  xmm2, xmm2
	mulps  xmm3, xmm3
	mulps  xmm4, xmm4
	mulps  xmm5, xmm5
	addps  xmm0, xmm1
	addps  xmm0, xmm2
	addps  xmm4, xmm3
	addps  xmm4, xmm5
	movaps [esp + mci3330_rsqH2O], xmm0
	movaps [esp + mci3330_rsqH2H1], xmm4

	movaps xmm0, [esp + mci3330_ixH2]
	movaps xmm1, [esp + mci3330_iyH2]
	movaps xmm2, [esp + mci3330_izH2]
	subps  xmm0, [esp + mci3330_jxH2]
	subps  xmm1, [esp + mci3330_jyH2]
	subps  xmm2, [esp + mci3330_jzH2]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2
	movaps [esp + mci3330_rsqH2H2], xmm0
		
	;# start doing invsqrt use rsq values in xmm0, xmm4 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3330_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3330_half] ;# rinvH2H2 
	mulps   xmm7, [esp + mci3330_half] ;# rinvH2H1 
	movaps  [esp + mci3330_rinvH2H2], xmm3
	movaps  [esp + mci3330_rinvH2H1], xmm7
		
	rsqrtps xmm1, [esp + mci3330_rsqOO]
	rsqrtps xmm5, [esp + mci3330_rsqOH1]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3330_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci3330_rsqOO]
	mulps   xmm5, [esp + mci3330_rsqOH1]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3330_half] 
	mulps   xmm7, [esp + mci3330_half]
	movaps  [esp + mci3330_rinvOO], xmm3
	movaps  [esp + mci3330_rinvOH1], xmm7
	
	rsqrtps xmm1, [esp + mci3330_rsqOH2]
	rsqrtps xmm5, [esp + mci3330_rsqH1O]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3330_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci3330_rsqOH2]
	mulps   xmm5, [esp + mci3330_rsqH1O]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3330_half] 
	mulps   xmm7, [esp + mci3330_half]
	movaps  [esp + mci3330_rinvOH2], xmm3
	movaps  [esp + mci3330_rinvH1O], xmm7
	
	rsqrtps xmm1, [esp + mci3330_rsqH1H1]
	rsqrtps xmm5, [esp + mci3330_rsqH1H2]
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3330_three]
	movaps  xmm7, xmm3
	mulps   xmm1, [esp + mci3330_rsqH1H1]
	mulps   xmm5, [esp + mci3330_rsqH1H2]
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3330_half] 
	mulps   xmm7, [esp + mci3330_half]
	movaps  [esp + mci3330_rinvH1H1], xmm3
	movaps  [esp + mci3330_rinvH1H2], xmm7
	
	rsqrtps xmm1, [esp + mci3330_rsqH2O]
	movaps  xmm2, xmm1
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci3330_three]
	mulps   xmm1, [esp + mci3330_rsqH2O]
	subps   xmm3, xmm1
	mulps   xmm3, xmm2
	mulps   xmm3, [esp + mci3330_half] 
	movaps  [esp + mci3330_rinvH2O], xmm3

	;# start with OO interaction 
	movaps xmm0, [esp + mci3330_rinvOO]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3330_rsqOO] ;# xmm1=r 
	mulps  xmm1, [esp + mci3330_tsc]
		
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
	
    movd mm0, eax
    movd mm1, ebx
    movd mm2, ecx
    movd mm3, edx

    mov  esi, [ebp + mci3330_VFtab]
    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3330_qqOO]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 
    ;# increment vcoul - then we can get rid of mm5 
    ;# update vctot 
    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5 

    ;# dispersion 
    movlps xmm5, [esi + eax*4 + 16]
    movlps xmm7, [esi + ecx*4 + 16]
    movhps xmm5, [esi + ebx*4 + 16]
    movhps xmm7, [esi + edx*4 + 16] ;# got half dispersion table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 24]
    movlps xmm3, [esi + ecx*4 + 24]
    movhps xmm7, [esi + ebx*4 + 24]
    movhps xmm3, [esi + edx*4 + 24] ;# other half of dispersion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# dispersion table ready, in xmm4-xmm7 
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 

    movaps xmm4, [esp + mci3330_c6]
    mulps  xmm5, xmm4    ;# vnb6 

    ;# put scalar force on stack Update vnbtot directly 
    addps  xmm5, [esp + mci3330_vnbtot]
    movaps [esp + mci3330_vnbtot], xmm5

    ;# repulsion 
    movlps xmm5, [esi + eax*4 + 32]
    movlps xmm7, [esi + ecx*4 + 32]
    movhps xmm5, [esi + ebx*4 + 32]
    movhps xmm7, [esi + edx*4 + 32] ;# got half repulsion table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 40]
    movlps xmm3, [esi + ecx*4 + 40]
    movhps xmm7, [esi + ebx*4 + 40]
    movhps xmm3, [esi + edx*4 + 40] ;# other half of repulsion table 
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# table ready, in xmm4-xmm7 
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
 
    movaps xmm4, [esp + mci3330_c12]
    mulps  xmm5, xmm4 ;# vnb12 
    addps  xmm5, [esp + mci3330_vnbtot]
    movaps [esp + mci3330_vnbtot], xmm5
	
	;# O-H1 interaction 
	movaps xmm0, [esp + mci3330_rinvOH1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3330_rsqOH1] ;# xmm1=r 
	mulps  xmm1, [esp + mci3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3330_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 

    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5
	
	;# O-H2 interaction  
	movaps xmm0, [esp + mci3330_rinvOH2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3330_rsqOH2] ;# xmm1=r 
	mulps  xmm1, [esp + mci3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3330_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 

    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5
	
	;# H1-O interaction 
	movaps xmm0, [esp + mci3330_rinvH1O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3330_rsqH1O] ;# xmm1=r 
	mulps  xmm1, [esp + mci3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3330_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 

    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5
	
	;# H1-H1 interaction 
	movaps xmm0, [esp + mci3330_rinvH1H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3330_rsqH1H1] ;# xmm1=r 
	mulps  xmm1, [esp + mci3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3330_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 

    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5
	
	;# H1-H2 interaction 
	movaps xmm0, [esp + mci3330_rinvH1H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3330_rsqH1H2] ;# xmm1=r 
	mulps  xmm1, [esp + mci3330_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3330_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point mm5 contains vcoul 

    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5
	
	;# H2-O interaction 
	movaps xmm0, [esp + mci3330_rinvH2O]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3330_rsqH2O] ;# xmm1=r 
	mulps  xmm1, [esp + mci3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3330_qqOH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5

	;# H2-H1 interaction 
	movaps xmm0, [esp + mci3330_rinvH2H1]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3330_rsqH2H1] ;# xmm1=r 
	mulps  xmm1, [esp + mci3330_tsc]
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3330_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5

	;# H2-H2 interaction 
	movaps xmm0, [esp + mci3330_rinvH2H2]
	movaps xmm1, xmm0
	mulps  xmm1, [esp + mci3330_rsqH2H2] ;# xmm1=r 
	mulps  xmm1, [esp + mci3330_tsc]	
	movhlps xmm2, xmm1
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2

    movd eax, mm6
    psrlq mm6, 32
    movd ecx, mm7
    psrlq mm7, 32
    movd ebx, mm6
    movd edx, mm7

    lea   eax, [eax + eax*2]
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]

    movlps xmm5, [esi + eax*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm5, [esi + ebx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 

    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + eax*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm7, [esi + ebx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  

    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 
    movaps xmm3, [esp + mci3330_qqHH]
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point mm5 contains vcoul 

    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5	
	
	;# should we do one more iteration? 
	sub dword ptr [esp + mci3330_innerk],  4
	jl    .mci3330_single_check
	jmp   .mci3330_unroll_loop
.mci3330_single_check:
	add dword ptr [esp + mci3330_innerk],  4
	jnz   .mci3330_single_loop
	jmp   .mci3330_updateouterdata
.mci3330_single_loop:
	mov   edx, [esp + mci3330_innerjjnr]     ;# pointer to jjnr[k] 
	mov   eax, [edx]	
	add dword ptr [esp + mci3330_innerjjnr],  4	

	mov esi, [ebp + mci3330_pos]
	lea   eax, [eax + eax*2]  

	;# fetch j coordinates 
	xorps xmm3, xmm3
	xorps xmm4, xmm4
	xorps xmm5, xmm5
	movss xmm3, [esi + eax*4]
	movss xmm4, [esi + eax*4 + 4]
	movss xmm5, [esi + eax*4 + 8]

	movlps xmm6, [esi + eax*4 + 12]
	movhps xmm6, [esi + eax*4 + 24]	;# xmm6=jxH1 jyH1 jxH2 jyH2 
	;# fetch both z coords in one go, to positions 0 and 3 in xmm7 
	movups xmm7, [esi + eax*4 + 20] ;# xmm7=jzH1 jxH2 jyH2 jzH2 
	shufps xmm6, xmm6, 216 ;# 11011000    ;# xmm6=jxH1 jxH2 jyH1 jyH2 
	movlhps xmm3, xmm6      	;# xmm3= jxO   0  jxH1 jxH2 
	movaps  xmm0, [esp + mci3330_ixO]     
	movaps  xmm1, [esp + mci3330_iyO]
	movaps  xmm2, [esp + mci3330_izO]	
	shufps  xmm4, xmm6, 228 ;# 11100100 ;# xmm4= jyO   0   jyH1 jyH2 
	shufps xmm5, xmm7, 196 ;# 11000100  ;# xmm5= jzO   0   jzH1 jzH2 
	;# store all j coordinates in jO  
	movaps [esp + mci3330_jxO], xmm3
	movaps [esp + mci3330_jyO], xmm4
	movaps [esp + mci3330_jzO], xmm5
	subps  xmm0, xmm3
	subps  xmm1, xmm4
	subps  xmm2, xmm5
	
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	addps xmm0, xmm1
	addps xmm0, xmm2	;# have rsq in xmm0 
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	movaps  xmm2, xmm1	
	mulps   xmm1, xmm1
	movaps  xmm3, [esp + mci3330_three]
	mulps   xmm1, xmm0
	subps   xmm3, xmm1
	mulps   xmm3, xmm2							
	mulps   xmm3, [esp + mci3330_half] ;# rinv iO - j water 

	movaps  xmm1, xmm3
	mulps   xmm1, xmm0	;# xmm1=r 
	movaps  xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + mci3330_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

	mov esi, [ebp + mci3330_VFtab]
	
    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]
	
    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + mci3330_qqOO]
	movhps  xmm3, [esp + mci3330_qqOH]
		
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point xmm5 contains vcoul 
	
    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5

    ;# dispersion 
	movss  xmm4, [esi + ebx*4 + 16]	
	movss  xmm5, [esi + ebx*4 + 20]	
	movss  xmm6, [esi + ebx*4 + 24]	
	movss  xmm7, [esi + ebx*4 + 28]
    ;# dispersion table ready, in xmm4-xmm7 
    mulss  xmm6, xmm1       ;# xmm6=Geps 
    mulss  xmm7, xmm2       ;# xmm7=Heps2 
    addss  xmm5, xmm6
    addss  xmm5, xmm7       ;# xmm5=Fp 
    mulss  xmm5, xmm1 ;# xmm5=eps*Fp 
    addss  xmm5, xmm4 ;# xmm5=VV 
	xorps  xmm4, xmm4
    movss  xmm4, [esp + mci3330_c6]
    mulps  xmm5, xmm4    ;# vnb6 
    ;# put scalar force on stack 
    addps  xmm5, [esp + mci3330_vnbtot]
    movaps [esp + mci3330_vnbtot], xmm5

    ;# repulsion 
	movss  xmm4, [esi + ebx*4 + 32]	
	movss  xmm5, [esi + ebx*4 + 36]	
	movss  xmm6, [esi + ebx*4 + 40]	
	movss  xmm7, [esi + ebx*4 + 44]
    ;# table ready, in xmm4-xmm7 
    mulss  xmm6, xmm1       ;# xmm6=Geps 
    mulss  xmm7, xmm2       ;# xmm7=Heps2 
    addss  xmm5, xmm6
    addss  xmm5, xmm7       ;# xmm5=Fp 
    mulss  xmm5, xmm1 ;# xmm5=eps*Fp 
    addss  xmm5, xmm4 ;# xmm5=VV 

	xorps  xmm4, xmm4
    movss  xmm4, [esp + mci3330_c12]
    mulps  xmm5, xmm4 ;# vnb12 
    addps  xmm5, [esp + mci3330_vnbtot]
    movaps [esp + mci3330_vnbtot], xmm5

	
	;# done with i O Now do i H1 & H2 simultaneously first get i particle coords: 
	movaps  xmm0, [esp + mci3330_ixH1]
	movaps  xmm1, [esp + mci3330_iyH1]
	movaps  xmm2, [esp + mci3330_izH1]	
	movaps  xmm3, [esp + mci3330_ixH2] 
	movaps  xmm4, [esp + mci3330_iyH2] 
	movaps  xmm5, [esp + mci3330_izH2] 
	subps   xmm0, [esp + mci3330_jxO]
	subps   xmm1, [esp + mci3330_jyO]
	subps   xmm2, [esp + mci3330_jzO]
	subps   xmm3, [esp + mci3330_jxO]
	subps   xmm4, [esp + mci3330_jyO]
	subps   xmm5, [esp + mci3330_jzO]
	mulps xmm0, xmm0
	mulps xmm1, xmm1
	mulps xmm2, xmm2
	mulps xmm3, xmm3
	mulps xmm4, xmm4
	mulps xmm5, xmm5
	addps xmm0, xmm1
	addps xmm4, xmm3
	addps xmm0, xmm2	;# have rsqH1 in xmm0 
	addps xmm4, xmm5	;# have rsqH2 in xmm4 

	;# start with H1, save H2 data 
	movaps [esp + mci3330_rsqH2O], xmm4
	
	;# do invsqrt 
	rsqrtps xmm1, xmm0
	rsqrtps xmm5, xmm4
	movaps  xmm2, xmm1
	movaps  xmm6, xmm5
	mulps   xmm1, xmm1
	mulps   xmm5, xmm5
	movaps  xmm3, [esp + mci3330_three]
	movaps  xmm7, xmm3
	mulps   xmm1, xmm0
	mulps   xmm5, xmm4
	subps   xmm3, xmm1
	subps   xmm7, xmm5
	mulps   xmm3, xmm2
	mulps   xmm7, xmm6
	mulps   xmm3, [esp + mci3330_half] ;# rinv H1 - j water 
	mulps   xmm7, [esp + mci3330_half] ;# rinv H2 - j water  

	;# start with H1, save H2 data 
	movaps [esp + mci3330_rinvH2O], xmm7

	movaps xmm1, xmm3
	mulps  xmm1, xmm0	;# xmm1=r 
	movaps xmm0, xmm3	;# xmm0=rinv 
	mulps  xmm1, [esp + mci3330_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]
	
    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + mci3330_qqOH]
	movhps  xmm3, [esp + mci3330_qqHH]
		
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV 
    ;# at this point xmm5 contains vcoul 
    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5	

	
	;# do table for H2 - j water interaction 
	movaps xmm0, [esp + mci3330_rinvH2O]
	movaps xmm1, [esp + mci3330_rsqH2O]
	mulps  xmm1, xmm0	;# xmm0=rinv, xmm1=r 
	mulps  xmm1, [esp + mci3330_tsc]
	
	movhlps xmm2, xmm1	
    cvttps2pi mm6, xmm1
    cvttps2pi mm7, xmm2     ;# mm6/mm7 contain lu indices 
    cvtpi2ps xmm3, mm6
    cvtpi2ps xmm2, mm7
	movlhps  xmm3, xmm2
	subps    xmm1, xmm3	;# xmm1=eps 
    movaps xmm2, xmm1
    mulps  xmm2, xmm2       ;# xmm2=eps2 
    pslld mm6, 2
    pslld mm7, 2
    movd ebx, mm6
    movd ecx, mm7
    psrlq mm7, 32
    movd edx, mm7		;# table indices in ebx,ecx,edx 

    lea   ebx, [ebx + ebx*2]
    lea   ecx, [ecx + ecx*2]
    lea   edx, [edx + edx*2]
	
    movlps xmm5, [esi + ebx*4]
    movlps xmm7, [esi + ecx*4]
    movhps xmm7, [esi + edx*4] ;# got half coulomb table 
    movaps xmm4, xmm5
    shufps xmm4, xmm7, 136  ;# 10001000
    shufps xmm5, xmm7, 221  ;# 11011101

    movlps xmm7, [esi + ebx*4 + 8]
    movlps xmm3, [esi + ecx*4 + 8]
    movhps xmm3, [esi + edx*4 + 8] ;# other half of coulomb table  
    movaps xmm6, xmm7
    shufps xmm6, xmm3, 136  ;# 10001000
    shufps xmm7, xmm3, 221  ;# 11011101
    ;# coulomb table ready, in xmm4-xmm7  
    mulps  xmm6, xmm1       ;# xmm6=Geps 
    mulps  xmm7, xmm2       ;# xmm7=Heps2 
    addps  xmm5, xmm6
    addps  xmm5, xmm7       ;# xmm5=Fp 

	xorps  xmm3, xmm3
	;# fetch charges to xmm3 (temporary) 
	movss   xmm3, [esp + mci3330_qqOH]
	movhps  xmm3, [esp + mci3330_qqHH]
		
    mulps  xmm5, xmm1 ;# xmm5=eps*Fp 
    addps  xmm5, xmm4 ;# xmm5=VV 
    mulps  xmm5, xmm3 ;# vcoul=qq*VV  
    ;# at this point xmm5 contains vcoul 
    addps  xmm5, [esp + mci3330_vctot]
    movaps [esp + mci3330_vctot], xmm5	
	
	dec dword ptr [esp + mci3330_innerk]
	jz    .mci3330_updateouterdata
	jmp   .mci3330_single_loop
.mci3330_updateouterdata:
	;# get group index for i particle 
	mov   edx, [ebp + mci3330_gid]      ;# get group index for this i particle 
	mov   edx, [edx]
	add dword ptr [ebp + mci3330_gid],  4  ;# advance pointer 

	;# accumulate total potential energy and update it 
	movaps xmm7, [esp + mci3330_vctot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3330_Vc]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# accumulate total lj energy and update it 
	movaps xmm7, [esp + mci3330_vnbtot]
	;# accumulate 
	movhlps xmm6, xmm7
	addps  xmm7, xmm6	;# pos 0-1 in xmm7 have the sum now 
	movaps xmm6, xmm7
	shufps xmm6, xmm6, 1
	addss  xmm7, xmm6		

	;# add earlier value from mem 
	mov   eax, [ebp + mci3330_Vnb]
	addss xmm7, [eax + edx*4] 
	;# move back to mem 
	movss [eax + edx*4], xmm7 
	
	;# finish if last 
	mov   ecx, [ebp + mci3330_nri]
	dec ecx
	jecxz .mci3330_end
	;# not last, iterate once more!  
	mov [ebp + mci3330_nri], ecx
	jmp .mci3330_outer
.mci3330_end:
	emms
	mov eax, [esp + mci3330_salign]
	add esp, eax
	add esp, 756
	pop edi
	pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
	leave
	ret

